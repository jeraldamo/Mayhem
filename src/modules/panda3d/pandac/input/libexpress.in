1304331434
2 2
10 libexpress 4 Koxt 12 pandaexpress 
1124
1258 12 ~ConfigFlags 4 2382 25 ConfigFlags::~ConfigFlags 0 0 0
32
ConfigFlags::~ConfigFlags(void);

1259 16 get_default_page 4 2385 28 ConfigPage::get_default_page 0 1 1 0
54
static ConfigPage *ConfigPage::get_default_page(void);

1260 14 get_local_page 4 2385 26 ConfigPage::get_local_page 0 1 2 0
52
static ConfigPage *ConfigPage::get_local_page(void);

1261 8 get_name 4 2385 20 ConfigPage::get_name 0 1 3 338
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_name
//       Access: Published
//  Description: Returns the name of the page.  If the page was loaded
//               from a .prc file, this is usually the filename.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > const &ConfigPage::get_name(void) const;

1262 10 is_special 4 2385 22 ConfigPage::is_special 0 1 4 517
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_special
//       Access: Published
//  Description: Returns true if this is the special "default" or
//               "local" page, or false if it is an ordinary page,
//               e.g. an implicit page loaded from a prc file at
//               startup, or an explicit page created by
//               ConfigPageManager::make_explicit_page().
////////////////////////////////////////////////////////////////////
47
inline bool ConfigPage::is_special(void) const;

1263 11 is_implicit 4 2385 23 ConfigPage::is_implicit 0 1 5 437
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_implicit
//       Access: Published
//  Description: Returns true if the page was loaded by implicitly
//               searching the config path on startup, or false if it
//               was explicitly loaded by dynamic code after initial
//               startup.
////////////////////////////////////////////////////////////////////
48
inline bool ConfigPage::is_implicit(void) const;

1264 12 get_page_seq 4 2385 24 ConfigPage::get_page_seq 0 1 6 728
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_page_seq
//       Access: Published
//  Description: Returns the sequence number of the page.  
//
//               Sequence numbers for a particular class (implicit
//               vs. explicit) of pages are assigned as each page is
//               loaded; each page is given a higher sequence number
//               than all the pages loaded before it.
//
//               The implicit_load pages, which are discovered in the
//               file system automatically, have a different set of
//               sequence numbers than the explicit pages.
////////////////////////////////////////////////////////////////////
48
inline int ConfigPage::get_page_seq(void) const;

1265 15 get_trust_level 4 2385 27 ConfigPage::get_trust_level 0 1 7 592
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_trust_level
//       Access: Published
//  Description: Returns the trust level associated with this page.
//               An untrusted page is trust level 0; if the page was
//               loaded from a signed .prc file, its trust level is
//               the index number of the certificate that signed it.
//               Generally, a higher trust level value represents
//               a greater level of trust.
////////////////////////////////////////////////////////////////////
51
inline int ConfigPage::get_trust_level(void) const;

1266 15 set_trust_level 4 2385 27 ConfigPage::set_trust_level 0 1 8 456
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::set_trust_level
//       Access: Published
//  Description: Explicitly sets the trust level on this particular
//               page.  Note that any subsequent changes to the page,
//               or to any variable declarations on it, will reset the
//               trust level to zero.
////////////////////////////////////////////////////////////////////
57
inline void ConfigPage::set_trust_level(int trust_level);

1267 13 get_signature 4 2385 25 ConfigPage::get_signature 0 1 9 399
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_signature
//       Access: Published
//  Description: Returns the raw binary signature that was found in
//               the prc file, if any.  This method is probably not
//               terribly useful for most applications.
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &ConfigPage::get_signature(void) const;

1268 5 clear 4 2385 17 ConfigPage::clear 0 1 10 0
29
void ConfigPage::clear(void);

1269 8 read_prc 4 2385 20 ConfigPage::read_prc 0 1 11 0
39
bool ConfigPage::read_prc(istream &in);

1270 18 read_encrypted_prc 4 2385 30 ConfigPage::read_encrypted_prc 0 1 12 0
87
bool ConfigPage::read_encrypted_prc(istream &in, basic_string< char > const &password);

1271 16 make_declaration 4 2385 28 ConfigPage::make_declaration 0 2 13 14 0
235
ConfigDeclaration *ConfigPage::make_declaration(basic_string< char > const &variable, basic_string< char > const &value);
ConfigDeclaration *ConfigPage::make_declaration(ConfigVariableCore *variable, basic_string< char > const &value);

1272 18 delete_declaration 4 2385 30 ConfigPage::delete_declaration 0 1 15 0
61
bool ConfigPage::delete_declaration(ConfigDeclaration *decl);

1273 20 get_num_declarations 4 2385 32 ConfigPage::get_num_declarations 0 1 16 0
49
int ConfigPage::get_num_declarations(void) const;

1274 15 get_declaration 4 2385 27 ConfigPage::get_declaration 0 1 17 0
66
ConfigDeclaration const *ConfigPage::get_declaration(int n) const;

1275 17 get_variable_name 4 2385 29 ConfigPage::get_variable_name 0 1 18 0
64
basic_string< char > ConfigPage::get_variable_name(int n) const;

1276 16 get_string_value 4 2385 28 ConfigPage::get_string_value 0 1 19 0
63
basic_string< char > ConfigPage::get_string_value(int n) const;

1277 16 is_variable_used 4 2385 28 ConfigPage::is_variable_used 0 1 20 0
47
bool ConfigPage::is_variable_used(int n) const;

1278 6 output 4 2385 18 ConfigPage::output 0 1 21 0
44
void ConfigPage::output(ostream &out) const;

1279 22 output_brief_signature 4 2385 34 ConfigPage::output_brief_signature 0 1 22 0
60
void ConfigPage::output_brief_signature(ostream &out) const;

1280 5 write 4 2385 17 ConfigPage::write 0 1 23 0
43
void ConfigPage::write(ostream &out) const;

1281 21 loaded_implicit_pages 4 2386 40 ConfigPageManager::loaded_implicit_pages 0 1 24 908
// Filename: configPageManager.I
// Created by:  drose (15Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::loaded_implicit_pages
//       Access: Published
//  Description: Returns true if the implicit *.prc files have already
//               been loaded, false otherwise.  Normally this will
//               only be false briefly before startup.
////////////////////////////////////////////////////////////////////
65
inline bool ConfigPageManager::loaded_implicit_pages(void) const;

1282 19 load_implicit_pages 4 2386 38 ConfigPageManager::load_implicit_pages 0 1 25 536
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::load_implicit_pages
//       Access: Published
//  Description: Searches the PRC_DIR and/or PRC_PATH directories for
//               *.prc files and loads them in as pages.  This is
//               normally called automatically at startup time, when
//               the first variable's value is referenced.  See also
//               reload_implicit_pages().
////////////////////////////////////////////////////////////////////
57
inline void ConfigPageManager::load_implicit_pages(void);

1283 21 reload_implicit_pages 4 2386 40 ConfigPageManager::reload_implicit_pages 0 1 26 0
52
void ConfigPageManager::reload_implicit_pages(void);

1284 15 get_search_path 4 2386 34 ConfigPageManager::get_search_path 0 1 27 556
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_search_path
//       Access: Published
//  Description: Returns the search path used to locate implicit .prc
//               files.  This is determined by the PRC_DIR and
//               PRC_PATH environment variables.  The object returned
//               by this method may be modified to change the path at
//               runtime, and then reload_implicit_pages() called.
////////////////////////////////////////////////////////////////////
61
inline DSearchPath &ConfigPageManager::get_search_path(void);

1285 20 get_num_prc_patterns 4 2386 39 ConfigPageManager::get_num_prc_patterns 0 1 28 574
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.prc", that
//               are compiled in that will be searched for as default
//               config filenames.  Normally there is only one
//               pattern, and it is "*.prc", but others may be
//               specified with the PRC_FILENAME variable in
//               Config.pp.
////////////////////////////////////////////////////////////////////
63
inline int ConfigPageManager::get_num_prc_patterns(void) const;

1286 15 get_prc_pattern 4 2386 34 ConfigPageManager::get_prc_pattern 0 1 29 385
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid config file.  See
//               get_num_prc_patterns().
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > ConfigPageManager::get_prc_pattern(int n) const;

1287 30 get_num_prc_encrypted_patterns 4 2386 49 ConfigPageManager::get_num_prc_encrypted_patterns 0 1 30 436
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_encrypted_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.pre", that
//               are compiled in that will be searched for as special
//               config files that are understood to be encrypted.
////////////////////////////////////////////////////////////////////
73
inline int ConfigPageManager::get_num_prc_encrypted_patterns(void) const;

1288 25 get_prc_encrypted_pattern 4 2386 44 ConfigPageManager::get_prc_encrypted_pattern 0 1 31 415
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_encrypted_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid encrypted config
//               file.  See get_num_prc_encrypted_patterns().
////////////////////////////////////////////////////////////////////
86
inline basic_string< char > ConfigPageManager::get_prc_encrypted_pattern(int n) const;

1289 31 get_num_prc_executable_patterns 4 2386 50 ConfigPageManager::get_num_prc_executable_patterns 0 1 32 533
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_executable_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.exe", that
//               are compiled in that will be searched for as special
//               config files that are to be executed as a program,
//               and their output taken to be input.  This is normally
//               empty.
////////////////////////////////////////////////////////////////////
74
inline int ConfigPageManager::get_num_prc_executable_patterns(void) const;

1290 26 get_prc_executable_pattern 4 2386 45 ConfigPageManager::get_prc_executable_pattern 0 1 33 424
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_executable_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid executable-style config
//               file.  See get_num_prc_executable_patterns().
////////////////////////////////////////////////////////////////////
87
inline basic_string< char > ConfigPageManager::get_prc_executable_pattern(int n) const;

1291 18 make_explicit_page 4 2386 37 ConfigPageManager::make_explicit_page 0 1 34 0
84
ConfigPage *ConfigPageManager::make_explicit_page(basic_string< char > const &name);

1292 20 delete_explicit_page 4 2386 39 ConfigPageManager::delete_explicit_page 0 1 35 0
63
bool ConfigPageManager::delete_explicit_page(ConfigPage *page);

1293 22 get_num_implicit_pages 4 2386 41 ConfigPageManager::get_num_implicit_pages 0 1 36 450
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_implicit_pages
//       Access: Published
//  Description: Returns the current number of implicitly-loaded
//               ConfigPages in the world.  These represent files that
//               were automatically discovered on the disk as .prc
//               files.
////////////////////////////////////////////////////////////////////
65
inline int ConfigPageManager::get_num_implicit_pages(void) const;

1294 17 get_implicit_page 4 2386 36 ConfigPageManager::get_implicit_page 0 1 37 332
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_implicit_page
//       Access: Published
//  Description: Returns the nth implicit ConfigPage in the world.
//               See get_num_implicit_pages().
////////////////////////////////////////////////////////////////////
69
inline ConfigPage *ConfigPageManager::get_implicit_page(int n) const;

1295 22 get_num_explicit_pages 4 2386 41 ConfigPageManager::get_num_explicit_pages 0 1 38 490
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_explicit_pages
//       Access: Published
//  Description: Returns the current number of explicitly-loaded
//               ConfigPages in the world.  These represent pages that
//               were loaded dynamically at runtime by explicit calls
//               to ConfigPageManager::make_explicit_page().
////////////////////////////////////////////////////////////////////
65
inline int ConfigPageManager::get_num_explicit_pages(void) const;

1296 17 get_explicit_page 4 2386 36 ConfigPageManager::get_explicit_page 0 1 39 332
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_explicit_page
//       Access: Published
//  Description: Returns the nth explicit ConfigPage in the world.
//               See get_num_explicit_pages().
////////////////////////////////////////////////////////////////////
69
inline ConfigPage *ConfigPageManager::get_explicit_page(int n) const;

1297 6 output 4 2386 25 ConfigPageManager::output 0 1 40 0
51
void ConfigPageManager::output(ostream &out) const;

1298 5 write 4 2386 24 ConfigPageManager::write 0 1 41 0
50
void ConfigPageManager::write(ostream &out) const;

1299 14 get_global_ptr 4 2386 33 ConfigPageManager::get_global_ptr 0 1 42 0
66
static ConfigPageManager *ConfigPageManager::get_global_ptr(void);

1300 8 get_name 4 2388 28 ConfigVariableBase::get_name 0 1 64 261
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_name
//       Access: Published
//  Description: Returns the name of the variable.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &ConfigVariableBase::get_name(void) const;

1301 14 get_value_type 4 2388 34 ConfigVariableBase::get_value_type 0 1 65 386
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_value_type
//       Access: Published
//  Description: Returns the stated type of this variable.  This
//               should be VT_list, unless a later variable
//               declaration has changed it.
////////////////////////////////////////////////////////////////////
77
inline ConfigFlags::ValueType ConfigVariableBase::get_value_type(void) const;

1302 15 get_description 4 2388 35 ConfigVariableBase::get_description 0 1 66 323
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_description
//       Access: Published
//  Description: Returns the brief description of this variable, if
//               it has been defined.
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > const &ConfigVariableBase::get_description(void) const;

1303 9 get_flags 4 2388 29 ConfigVariableBase::get_flags 0 1 67 522
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariableBase::get_flags(void) const;

1304 9 is_closed 4 2388 29 ConfigVariableBase::is_closed 0 1 68 749
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBase::is_closed(void) const;

1305 15 get_trust_level 4 2388 35 ConfigVariableBase::get_trust_level 0 1 69 835
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
59
inline int ConfigVariableBase::get_trust_level(void) const;

1306 10 is_dynamic 4 2388 30 ConfigVariableBase::is_dynamic 0 1 70 510
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariableBase::is_dynamic(void) const;

1307 17 clear_local_value 4 2388 37 ConfigVariableBase::clear_local_value 0 1 71 525
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::clear_local_value
//       Access: Published
//  Description: Removes the local value defined for this variable,
//               and allows its value to be once again retrieved from
//               the .prc files.
//
//               Returns true if the value was successfully removed,
//               false if it did not exist in the first place.
////////////////////////////////////////////////////////////////////
56
inline bool ConfigVariableBase::clear_local_value(void);

1308 15 has_local_value 4 2388 35 ConfigVariableBase::has_local_value 0 1 72 403
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_local_value
//       Access: Published
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigVariableBase::has_local_value(void) const;

1309 9 has_value 4 2388 29 ConfigVariableBase::has_value 0 1 73 395
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_value
//       Access: Public
//  Description: Returns true if this variable has an explicit value,
//               either from a prc file or locally set, or false if
//               variable has its default value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBase::has_value(void) const;

1310 6 output 4 2388 26 ConfigVariableBase::output 0 1 74 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariableBase::output(ostream &out) const;

1311 5 write 4 2388 25 ConfigVariableBase::write 0 1 75 225
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableBase::write(ostream &out) const;

1312 14 ConfigVariable 4 2387 30 ConfigVariable::ConfigVariable 0 1 43 1670
// Filename: configVariable.I
// Created by:  drose (18Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Protected
//  Description: This constructor is only intended to be called from a
//               specialized ConfigVariableFoo derived class.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Protected
//  Description: This constructor is only intended to be called from a
//               specialized ConfigVariableFoo derived class.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Published
//  Description: Use this constructor to make a ConfigVariable of an
//               unspecified type.  Usually you'd want to do this just
//               to reference a previously-defined ConfigVariable of a
//               specific type, without having to know what type it is.
////////////////////////////////////////////////////////////////////
72
inline ConfigVariable::ConfigVariable(basic_string< char > const &name);

1313 15 ~ConfigVariable 4 2387 31 ConfigVariable::~ConfigVariable 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline ConfigVariable::~ConfigVariable(void);

1314 17 get_default_value 4 2387 33 ConfigVariable::get_default_value 0 1 44 390
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_default_value
//       Access: Published
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
////////////////////////////////////////////////////////////////////
78
inline ConfigDeclaration const *ConfigVariable::get_default_value(void) const;

1315 16 get_string_value 4 2387 32 ConfigVariable::get_string_value 0 1 45 315
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_value
//       Access: Published
//  Description: Returns the toplevel value of the variable, formatted
//               as a string.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > const &ConfigVariable::get_string_value(void) const;

1316 16 set_string_value 4 2387 32 ConfigVariable::set_string_value 0 1 46 443
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_value
//       Access: Published
//  Description: Changes the value assigned to this variable.  This
//               creates a local value that shadows any values defined
//               in the .prc files, until clear_local_value() is
//               called.
////////////////////////////////////////////////////////////////////
80
inline void ConfigVariable::set_string_value(basic_string< char > const &value);

1317 11 clear_value 4 2387 27 ConfigVariable::clear_value 0 1 47 376
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::clear_value
//       Access: Published
//  Description: Removes the value assigned to this variable, and lets
//               its original value (as read from the prc files) show
//               through.
////////////////////////////////////////////////////////////////////
46
inline void ConfigVariable::clear_value(void);

1318 13 get_num_words 4 2387 29 ConfigVariable::get_num_words 0 1 48 402
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_num_words
//       Access: Published
//  Description: Returns the number of words in the variable's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariable::get_num_words(void) const;

1319 15 has_string_word 4 2387 31 ConfigVariable::has_string_word 0 1 49 446
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_string_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariable::has_string_word(int n) const;

1320 13 has_bool_word 4 2387 29 ConfigVariable::has_bool_word 0 1 50 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_bool_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               boolean value for the nth word.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariable::has_bool_word(int n) const;

1321 12 has_int_word 4 2387 28 ConfigVariable::has_int_word 0 1 51 325
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariable::has_int_word(int n) const;

1322 14 has_int64_word 4 2387 30 ConfigVariable::has_int64_word 0 1 52 334
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int64_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               64-bit integer value for the nth word.
////////////////////////////////////////////////////////////////////
56
inline bool ConfigVariable::has_int64_word(int n) const;

1323 15 has_double_word 4 2387 31 ConfigVariable::has_double_word 0 1 53 328
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_double_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariable::has_double_word(int n) const;

1324 15 get_string_word 4 2387 31 ConfigVariable::get_string_word 0 1 54 401
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_word
//       Access: Published
//  Description: Returns the string value of the nth word of the
//               variable's value, or empty string if there is no
//               nth value.  See also has_string_word().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > ConfigVariable::get_string_word(int n) const;

1325 13 get_bool_word 4 2387 29 ConfigVariable::get_bool_word 0 1 55 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_bool_word
//       Access: Published
//  Description: Returns the boolean value of the nth word of the
//               variable's value, or false if there is no nth
//               value.  See also has_bool_word().
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariable::get_bool_word(int n) const;

1326 12 get_int_word 4 2387 28 ConfigVariable::get_int_word 0 1 56 384
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariable::get_int_word(int n) const;

1327 14 get_int64_word 4 2387 30 ConfigVariable::get_int64_word 0 1 57 384
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int64_word
//       Access: Published
//  Description: Returns the int64 value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
65
inline long long int ConfigVariable::get_int64_word(int n) const;

1328 15 get_double_word 4 2387 31 ConfigVariable::get_double_word 0 1 58 390
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_double_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_double_word().
////////////////////////////////////////////////////////////////////
59
inline double ConfigVariable::get_double_word(int n) const;

1329 15 set_string_word 4 2387 31 ConfigVariable::set_string_word 0 1 59 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
86
inline void ConfigVariable::set_string_word(int n, basic_string< char > const &value);

1330 13 set_bool_word 4 2387 29 ConfigVariable::set_bool_word 0 1 60 324
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_bool_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
61
inline void ConfigVariable::set_bool_word(int n, bool value);

1331 12 set_int_word 4 2387 28 ConfigVariable::set_int_word 0 1 61 323
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariable::set_int_word(int n, int value);

1332 14 set_int64_word 4 2387 30 ConfigVariable::set_int64_word 0 1 62 325
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int64_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
71
inline void ConfigVariable::set_int64_word(int n, long long int value);

1333 15 set_double_word 4 2387 31 ConfigVariable::set_double_word 0 1 63 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_double_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariable::set_double_word(int n, double value);

1334 18 ConfigVariableBool 4 2389 38 ConfigVariableBool::ConfigVariableBool 0 7 76 77 78 79 80 81 82 1191
// Filename: configVariableBool.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
451
inline ConfigVariableBool::ConfigVariableBool(basic_string< char > const &name);
inline ConfigVariableBool::ConfigVariableBool(basic_string< char > const &name, bool default_value, basic_string< char > const &description = ((string())), int flags = (0));
inline ConfigVariableBool::ConfigVariableBool(basic_string< char > const &name, basic_string< char > const &default_value, basic_string< char > const &description = ((string())), int flags = (0));

1335 10 operator = 4 2389 30 ConfigVariableBool::operator = 0 1 83 267
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
55
inline void ConfigVariableBool::operator =(bool value);

1336 22 operator typecast bool 132 2389 42 ConfigVariableBool::operator typecast bool 0 1 91 266
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
67
inline bool ConfigVariableBool::operator typecast bool(void) const;

1337 4 size 4 2389 24 ConfigVariableBool::size 0 1 84 277
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
48
inline int ConfigVariableBool::size(void) const;

1338 11 operator [] 4 2389 31 ConfigVariableBool::operator [] 0 1 85 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariableBool::operator [](int n) const;

1339 9 set_value 4 2389 29 ConfigVariableBool::set_value 0 1 86 266
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
54
inline void ConfigVariableBool::set_value(bool value);

1340 9 get_value 4 2389 29 ConfigVariableBool::get_value 0 1 87 258
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBool::get_value(void) const;

1341 17 get_default_value 4 2389 37 ConfigVariableBool::get_default_value 0 1 88 274
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableBool::get_default_value(void) const;

1342 8 get_word 4 2389 28 ConfigVariableBool::get_word 0 1 89 261
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBool::get_word(int n) const;

1343 8 set_word 4 2389 28 ConfigVariableBool::set_word 0 1 90 338
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
60
inline void ConfigVariableBool::set_word(int n, bool value);

1344 19 ~ConfigVariableBool 4 2389 39 ConfigVariableBool::~ConfigVariableBool 0 0 0
46
ConfigVariableBool::~ConfigVariableBool(void);

1345 20 ConfigVariableDouble 4 2390 42 ConfigVariableDouble::ConfigVariableDouble 0 7 92 93 94 95 96 97 98 1199
// Filename: configVariableDouble.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
465
inline ConfigVariableDouble::ConfigVariableDouble(basic_string< char > const &name);
inline ConfigVariableDouble::ConfigVariableDouble(basic_string< char > const &name, double default_value, basic_string< char > const &description = ((string())), int flags = (0));
inline ConfigVariableDouble::ConfigVariableDouble(basic_string< char > const &name, basic_string< char > const &default_value, basic_string< char > const &description = ((string())), int flags = (0));

1346 10 operator = 4 2390 32 ConfigVariableDouble::operator = 0 1 99 269
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariableDouble::operator =(double value);

1347 24 operator typecast double 132 2390 46 ConfigVariableDouble::operator typecast double 0 1 107 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
73
inline double ConfigVariableDouble::operator typecast double(void) const;

1348 4 size 4 2390 26 ConfigVariableDouble::size 0 1 100 279
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
50
inline int ConfigVariableDouble::size(void) const;

1349 11 operator [] 4 2390 33 ConfigVariableDouble::operator [] 0 1 101 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
////////////////////////////////////////////////////////////////////
61
inline double ConfigVariableDouble::operator [](int n) const;

1350 9 set_value 4 2390 31 ConfigVariableDouble::set_value 0 1 102 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableDouble::set_value(double value);

1351 9 get_value 4 2390 31 ConfigVariableDouble::get_value 0 1 103 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
58
inline double ConfigVariableDouble::get_value(void) const;

1352 17 get_default_value 4 2390 39 ConfigVariableDouble::get_default_value 0 1 104 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
66
inline double ConfigVariableDouble::get_default_value(void) const;

1353 8 get_word 4 2390 30 ConfigVariableDouble::get_word 0 1 105 263
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
58
inline double ConfigVariableDouble::get_word(int n) const;

1354 8 set_word 4 2390 30 ConfigVariableDouble::set_word 0 1 106 340
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableDouble::set_word(int n, double value);

1355 21 ~ConfigVariableDouble 4 2390 43 ConfigVariableDouble::~ConfigVariableDouble 0 0 0
50
ConfigVariableDouble::~ConfigVariableDouble(void);

1356 22 ConfigVariableFilename 4 2391 46 ConfigVariableFilename::ConfigVariableFilename 0 4 108 109 110 111 970
// Filename: configVariableFilename.I
// Created by:  drose (22Nov04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
281
inline ConfigVariableFilename::ConfigVariableFilename(basic_string< char > const &name);
inline ConfigVariableFilename::ConfigVariableFilename(basic_string< char > const &name, Filename const &default_value, basic_string< char > const &description = ((string())), int flags = (0));

1357 10 operator = 4 2391 34 ConfigVariableFilename::operator = 0 1 112 271
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
70
inline void ConfigVariableFilename::operator =(Filename const &value);

1358 17 operator typecast 132 2391 41 ConfigVariableFilename::operator typecast 0 1 131 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Filename typecast operator
//       Access: Published
//  Description: Returns the variable's value as a Filename.
////////////////////////////////////////////////////////////////////
77
inline Filename const &ConfigVariableFilename::operator typecast(void) const;

1359 5 c_str 4 2391 29 ConfigVariableFilename::c_str 0 1 113 306
// These methods help the ConfigVariableFilename act like a Filename
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline char const *ConfigVariableFilename::c_str(void) const;

1360 5 empty 4 2391 29 ConfigVariableFilename::empty 0 1 114 306
// These methods help the ConfigVariableFilename act like a Filename
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableFilename::empty(void) const;

1361 6 length 4 2391 30 ConfigVariableFilename::length 0 1 115 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline unsigned int ConfigVariableFilename::length(void) const;

1362 11 operator [] 4 2391 35 ConfigVariableFilename::operator [] 0 1 116 237
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline char ConfigVariableFilename::operator [](int n) const;

1363 12 get_fullpath 4 2391 36 ConfigVariableFilename::get_fullpath 0 1 117 450
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath
//       Access: Public
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > ConfigVariableFilename::get_fullpath(void) const;

1364 11 get_dirname 4 2391 35 ConfigVariableFilename::get_dirname 0 1 118 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_dirname
//       Access: Public
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > ConfigVariableFilename::get_dirname(void) const;

1365 12 get_basename 4 2391 36 ConfigVariableFilename::get_basename 0 1 119 398
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename
//       Access: Public
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > ConfigVariableFilename::get_basename(void) const;

1366 25 get_fullpath_wo_extension 4 2391 49 ConfigVariableFilename::get_fullpath_wo_extension 0 1 120 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath_wo_extension
//       Access: Public
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
////////////////////////////////////////////////////////////////////
90
inline basic_string< char > ConfigVariableFilename::get_fullpath_wo_extension(void) const;

1367 25 get_basename_wo_extension 4 2391 49 ConfigVariableFilename::get_basename_wo_extension 0 1 121 333
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename_wo_extension
//       Access: Public
//  Description: Returns the basename part of the filename, without
//               the file extension.
////////////////////////////////////////////////////////////////////
90
inline basic_string< char > ConfigVariableFilename::get_basename_wo_extension(void) const;

1368 13 get_extension 4 2391 37 ConfigVariableFilename::get_extension 0 1 122 394
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_extension
//       Access: Public
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > ConfigVariableFilename::get_extension(void) const;

1369 11 operator == 4 2391 35 ConfigVariableFilename::operator == 0 1 123 273
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Equality operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline bool ConfigVariableFilename::operator ==(Filename const &other) const;

1370 11 operator != 4 2391 35 ConfigVariableFilename::operator != 0 1 124 275
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Inequality operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline bool ConfigVariableFilename::operator !=(Filename const &other) const;

1371 10 operator < 4 2391 34 ConfigVariableFilename::operator < 0 1 125 237
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Ordering operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline bool ConfigVariableFilename::operator <(Filename const &other) const;

1372 9 set_value 4 2391 33 ConfigVariableFilename::set_value 0 1 126 270
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
69
inline void ConfigVariableFilename::set_value(Filename const &value);

1373 9 get_value 4 2391 33 ConfigVariableFilename::get_value 0 1 127 262
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
69
inline Filename const &ConfigVariableFilename::get_value(void) const;

1374 17 get_default_value 4 2391 41 ConfigVariableFilename::get_default_value 0 1 128 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
70
inline Filename ConfigVariableFilename::get_default_value(void) const;

1375 8 get_word 4 2391 32 ConfigVariableFilename::get_word 0 1 129 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
62
inline Filename ConfigVariableFilename::get_word(int n) const;

1376 8 set_word 4 2391 32 ConfigVariableFilename::set_word 0 1 130 342
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
75
inline void ConfigVariableFilename::set_word(int n, Filename const &value);

1377 23 ~ConfigVariableFilename 4 2391 47 ConfigVariableFilename::~ConfigVariableFilename 0 0 0
54
ConfigVariableFilename::~ConfigVariableFilename(void);

1378 17 ConfigVariableInt 4 2392 36 ConfigVariableInt::ConfigVariableInt 0 7 132 133 134 135 136 137 138 1187
// Filename: configVariableInt.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
444
inline ConfigVariableInt::ConfigVariableInt(basic_string< char > const &name);
inline ConfigVariableInt::ConfigVariableInt(basic_string< char > const &name, int default_value, basic_string< char > const &description = ((string())), int flags = (0));
inline ConfigVariableInt::ConfigVariableInt(basic_string< char > const &name, basic_string< char > const &default_value, basic_string< char > const &description = ((string())), int flags = (0));

1379 10 operator = 4 2392 29 ConfigVariableInt::operator = 0 1 139 266
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
53
inline void ConfigVariableInt::operator =(int value);

1380 21 operator typecast int 132 2392 40 ConfigVariableInt::operator typecast int 0 1 147 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
64
inline int ConfigVariableInt::operator typecast int(void) const;

1381 4 size 4 2392 23 ConfigVariableInt::size 0 1 140 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
47
inline int ConfigVariableInt::size(void) const;

1382 11 operator [] 4 2392 30 ConfigVariableInt::operator [] 0 1 141 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
////////////////////////////////////////////////////////////////////
55
inline int ConfigVariableInt::operator [](int n) const;

1383 9 set_value 4 2392 28 ConfigVariableInt::set_value 0 1 142 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
52
inline void ConfigVariableInt::set_value(int value);

1384 9 get_value 4 2392 28 ConfigVariableInt::get_value 0 1 143 257
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
52
inline int ConfigVariableInt::get_value(void) const;

1385 17 get_default_value 4 2392 36 ConfigVariableInt::get_default_value 0 1 144 273
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
60
inline int ConfigVariableInt::get_default_value(void) const;

1386 8 get_word 4 2392 27 ConfigVariableInt::get_word 0 1 145 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
52
inline int ConfigVariableInt::get_word(int n) const;

1387 8 set_word 4 2392 27 ConfigVariableInt::set_word 0 1 146 337
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableInt::set_word(int n, int value);

1388 18 ~ConfigVariableInt 4 2392 37 ConfigVariableInt::~ConfigVariableInt 0 0 0
44
ConfigVariableInt::~ConfigVariableInt(void);

1389 19 ConfigVariableInt64 4 2393 40 ConfigVariableInt64::ConfigVariableInt64 0 7 148 149 150 151 152 153 154 1195
// Filename: configVariableInt64.I
// Created by:  drose (19Dec07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
486
inline ConfigVariableInt64::ConfigVariableInt64(basic_string< char > const &name);
inline ConfigVariableInt64::ConfigVariableInt64(basic_string< char > const &name, long long int default_value, basic_string< char > const &description = ((string())), long long int flags = (0));
inline ConfigVariableInt64::ConfigVariableInt64(basic_string< char > const &name, basic_string< char > const &default_value, basic_string< char > const &description = ((string())), long long int flags = (0));

1390 10 operator = 4 2393 31 ConfigVariableInt64::operator = 0 1 155 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableInt64::operator =(long long int value);

1391 31 operator typecast long long int 132 2393 52 ConfigVariableInt64::operator typecast long long int 0 1 163 267
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
86
inline long long int ConfigVariableInt64::operator typecast long long int(void) const;

1392 4 size 4 2393 25 ConfigVariableInt64::size 0 1 156 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
59
inline long long int ConfigVariableInt64::size(void) const;

1393 11 operator [] 4 2393 32 ConfigVariableInt64::operator [] 0 1 157 277
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
////////////////////////////////////////////////////////////////////
67
inline long long int ConfigVariableInt64::operator [](int n) const;

1394 9 set_value 4 2393 30 ConfigVariableInt64::set_value 0 1 158 267
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableInt64::set_value(long long int value);

1395 9 get_value 4 2393 30 ConfigVariableInt64::get_value 0 1 159 259
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
64
inline long long int ConfigVariableInt64::get_value(void) const;

1396 17 get_default_value 4 2393 38 ConfigVariableInt64::get_default_value 0 1 160 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
72
inline long long int ConfigVariableInt64::get_default_value(void) const;

1397 8 get_word 4 2393 29 ConfigVariableInt64::get_word 0 1 161 262
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
64
inline long long int ConfigVariableInt64::get_word(int n) const;

1398 8 set_word 4 2393 29 ConfigVariableInt64::set_word 0 1 162 339
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
70
inline void ConfigVariableInt64::set_word(int n, long long int value);

1399 20 ~ConfigVariableInt64 4 2393 41 ConfigVariableInt64::~ConfigVariableInt64 0 0 0
48
ConfigVariableInt64::~ConfigVariableInt64(void);

1400 18 ConfigVariableList 4 2394 38 ConfigVariableList::ConfigVariableList 0 3 164 165 166 231
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
153
inline ConfigVariableList::ConfigVariableList(basic_string< char > const &name, basic_string< char > const &description = ((string())), int flags = (0));

1401 19 ~ConfigVariableList 4 2394 39 ConfigVariableList::~ConfigVariableList 0 0 724
// Filename: configVariableList.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline ConfigVariableList::~ConfigVariableList(void);

1402 14 get_num_values 4 2394 34 ConfigVariableList::get_num_values 0 1 167 279
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_values
//       Access: Published
//  Description: Returns the number of values in the variable.
////////////////////////////////////////////////////////////////////
58
inline int ConfigVariableList::get_num_values(void) const;

1403 16 get_string_value 4 2394 36 ConfigVariableList::get_string_value 0 1 168 274
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_string_value
//       Access: Published
//  Description: Returns the nth value of the variable.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > ConfigVariableList::get_string_value(int n) const;

1404 21 get_num_unique_values 4 2394 41 ConfigVariableList::get_num_unique_values 0 1 169 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_unique_values
//       Access: Published
//  Description: Returns the number of unique values in the variable.
////////////////////////////////////////////////////////////////////
65
inline int ConfigVariableList::get_num_unique_values(void) const;

1405 16 get_unique_value 4 2394 36 ConfigVariableList::get_unique_value 0 1 170 281
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_unique_value
//       Access: Published
//  Description: Returns the nth unique value of the variable.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > ConfigVariableList::get_unique_value(int n) const;

1406 4 size 4 2394 24 ConfigVariableList::size 0 1 171 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::size()
//       Access: Published
//  Description: Returns the number of unique values of the variable.
////////////////////////////////////////////////////////////////////
48
inline int ConfigVariableList::size(void) const;

1407 11 operator [] 4 2394 31 ConfigVariableList::operator [] 0 1 172 448
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::operator []
//       Access: Published
//  Description: Returns the nth unique value of the variable.  Note
//               that the indexing operator returns the list of unique
//               values, and so the maximum range is
//               get_num_unique_values().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > ConfigVariableList::operator [](int n) const;

1408 6 output 4 2394 26 ConfigVariableList::output 0 1 173 0
52
void ConfigVariableList::output(ostream &out) const;

1409 5 write 4 2394 25 ConfigVariableList::write 0 1 174 0
51
void ConfigVariableList::write(ostream &out) const;

1410 13 make_variable 4 2395 36 ConfigVariableManager::make_variable 0 1 175 0
91
ConfigVariableCore *ConfigVariableManager::make_variable(basic_string< char > const &name);

1411 22 make_variable_template 4 2395 45 ConfigVariableManager::make_variable_template 0 3 176 177 178 0
248
ConfigVariableCore *ConfigVariableManager::make_variable_template(basic_string< char > const &pattern, ConfigFlags::ValueType type, basic_string< char > const &default_value, basic_string< char > const &description = ((string())), int flags = (0));

1412 17 get_num_variables 4 2395 40 ConfigVariableManager::get_num_variables 0 1 179 824
// Filename: configVariableManager.I
// Created by:  drose (15Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_num_variables
//       Access: Published
//  Description: Returns the current number of active ConfigVariableCores in
//               the world.
////////////////////////////////////////////////////////////////////
64
inline int ConfigVariableManager::get_num_variables(void) const;

1413 12 get_variable 4 2395 35 ConfigVariableManager::get_variable 0 1 180 290
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_variable
//       Access: Published
//  Description: Returns the nth active ConfigVariableCore in the world.
////////////////////////////////////////////////////////////////////
76
inline ConfigVariableCore *ConfigVariableManager::get_variable(int n) const;

1414 17 get_variable_name 4 2395 40 ConfigVariableManager::get_variable_name 0 1 181 0
75
basic_string< char > ConfigVariableManager::get_variable_name(int n) const;

1415 16 is_variable_used 4 2395 39 ConfigVariableManager::is_variable_used 0 1 182 0
58
bool ConfigVariableManager::is_variable_used(int n) const;

1416 6 output 4 2395 29 ConfigVariableManager::output 0 1 183 0
55
void ConfigVariableManager::output(ostream &out) const;

1417 5 write 4 2395 28 ConfigVariableManager::write 0 1 184 0
54
void ConfigVariableManager::write(ostream &out) const;

1418 19 write_prc_variables 4 2395 42 ConfigVariableManager::write_prc_variables 0 1 185 0
68
void ConfigVariableManager::write_prc_variables(ostream &out) const;

1419 21 list_unused_variables 4 2395 44 ConfigVariableManager::list_unused_variables 0 1 186 0
62
void ConfigVariableManager::list_unused_variables(void) const;

1420 14 list_variables 4 2395 37 ConfigVariableManager::list_variables 0 1 187 0
55
void ConfigVariableManager::list_variables(void) const;

1421 22 list_dynamic_variables 4 2395 45 ConfigVariableManager::list_dynamic_variables 0 1 188 0
63
void ConfigVariableManager::list_dynamic_variables(void) const;

1422 14 get_global_ptr 4 2395 37 ConfigVariableManager::get_global_ptr 0 1 189 0
74
static ConfigVariableManager *ConfigVariableManager::get_global_ptr(void);

1423 24 ConfigVariableSearchPath 4 2396 50 ConfigVariableSearchPath::ConfigVariableSearchPath 0 7 190 191 192 193 194 195 196 1215
// Filename: configVariableSearchPath.I
// Created by:  drose (21Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
544
inline ConfigVariableSearchPath::ConfigVariableSearchPath(basic_string< char > const &name, basic_string< char > const &description = ((string())), int flags = (0));
inline ConfigVariableSearchPath::ConfigVariableSearchPath(basic_string< char > const &name, DSearchPath const &default_value, basic_string< char > const &description, int flags = (0));
inline ConfigVariableSearchPath::ConfigVariableSearchPath(basic_string< char > const &name, basic_string< char > const &default_value, basic_string< char > const &description, int flags = (0));

1424 25 ~ConfigVariableSearchPath 4 2396 51 ConfigVariableSearchPath::~ConfigVariableSearchPath 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline ConfigVariableSearchPath::~ConfigVariableSearchPath(void);

1425 17 operator typecast 132 2396 43 ConfigVariableSearchPath::operator typecast 0 1 215 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::DSearchPath typecast
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
82
inline DSearchPath const &ConfigVariableSearchPath::operator typecast(void) const;

1426 9 get_value 4 2396 35 ConfigVariableSearchPath::get_value 0 1 197 235
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline DSearchPath const &ConfigVariableSearchPath::get_value(void) const;

1427 17 get_default_value 4 2396 43 ConfigVariableSearchPath::get_default_value 0 1 198 243
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_default_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
inline DSearchPath const &ConfigVariableSearchPath::get_default_value(void) const;

1428 17 clear_local_value 4 2396 43 ConfigVariableSearchPath::clear_local_value 0 1 199 359
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear_local_value
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableSearchPath::clear_local_value(void);

1429 5 clear 4 2396 31 ConfigVariableSearchPath::clear 0 1 200 347
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
////////////////////////////////////////////////////////////////////
50
inline void ConfigVariableSearchPath::clear(void);

1430 16 append_directory 4 2396 42 ConfigVariableSearchPath::append_directory 0 1 201 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_directory
//       Access: Published
//  Description: Adds a new directory to the end of the search list.
////////////////////////////////////////////////////////////////////
82
inline void ConfigVariableSearchPath::append_directory(Filename const &directory);

1431 17 prepend_directory 4 2396 43 ConfigVariableSearchPath::prepend_directory 0 1 202 296
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_directory
//       Access: Published
//  Description: Adds a new directory to the front of the search list.
////////////////////////////////////////////////////////////////////
83
inline void ConfigVariableSearchPath::prepend_directory(Filename const &directory);

1432 11 append_path 4 2396 37 ConfigVariableSearchPath::append_path 0 3 203 204 205 678
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
////////////////////////////////////////////////////////////////////
214
inline void ConfigVariableSearchPath::append_path(basic_string< char > const &path, basic_string< char > const &separator = ((string())));
inline void ConfigVariableSearchPath::append_path(DSearchPath const &path);

1433 12 prepend_path 4 2396 38 ConfigVariableSearchPath::prepend_path 0 1 206 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the beginning of the search list.
////////////////////////////////////////////////////////////////////
76
inline void ConfigVariableSearchPath::prepend_path(DSearchPath const &path);

1434 8 is_empty 4 2396 34 ConfigVariableSearchPath::is_empty 0 1 207 309
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::is_empty
//       Access: Published
//  Description: Returns true if the search list is empty, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool ConfigVariableSearchPath::is_empty(void) const;

1435 19 get_num_directories 4 2396 45 ConfigVariableSearchPath::get_num_directories 0 1 208 298
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_num_directories
//       Access: Published
//  Description: Returns the number of directories on the search list.
////////////////////////////////////////////////////////////////////
69
inline int ConfigVariableSearchPath::get_num_directories(void) const;

1436 13 get_directory 4 2396 39 ConfigVariableSearchPath::get_directory 0 1 209 284
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_directory
//       Access: Published
//  Description: Returns the nth directory on the search list.
////////////////////////////////////////////////////////////////////
76
inline Filename const &ConfigVariableSearchPath::get_directory(int n) const;

1437 9 find_file 4 2396 35 ConfigVariableSearchPath::find_file 0 1 210 466
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_file
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Returns the full
//               matching pathname of the first match if found, or the
//               empty string if not found.
////////////////////////////////////////////////////////////////////
84
inline Filename ConfigVariableSearchPath::find_file(Filename const &filename) const;

1438 14 find_all_files 4 2396 40 ConfigVariableSearchPath::find_all_files 0 2 211 212 1142
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
////////////////////////////////////////////////////////////////////
217
inline int ConfigVariableSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results ConfigVariableSearchPath::find_all_files(Filename const &filename) const;

1439 6 output 4 2396 32 ConfigVariableSearchPath::output 0 1 213 232
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableSearchPath::output(ostream &out) const;

1440 5 write 4 2396 31 ConfigVariableSearchPath::write 0 1 214 231
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableSearchPath::write(ostream &out) const;

1441 20 ConfigVariableString 4 2397 42 ConfigVariableString::ConfigVariableString 0 4 216 217 218 219 964
// Filename: configVariableString.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
285
inline ConfigVariableString::ConfigVariableString(basic_string< char > const &name);
inline ConfigVariableString::ConfigVariableString(basic_string< char > const &name, basic_string< char > const &default_value, basic_string< char > const &description = ((string())), int flags = (0));

1442 10 operator = 4 2397 32 ConfigVariableString::operator = 0 1 220 269
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
80
inline void ConfigVariableString::operator =(basic_string< char > const &value);

1443 17 operator typecast 132 2397 39 ConfigVariableString::operator typecast 0 1 233 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::string typecast operator
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
87
inline basic_string< char > const &ConfigVariableString::operator typecast(void) const;

1444 5 c_str 4 2397 27 ConfigVariableString::c_str 0 1 221 304
// These methods help the ConfigVariableString act like a C++ string
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline char const *ConfigVariableString::c_str(void) const;

1445 5 empty 4 2397 27 ConfigVariableString::empty 0 1 222 304
// These methods help the ConfigVariableString act like a C++ string
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool ConfigVariableString::empty(void) const;

1446 6 length 4 2397 28 ConfigVariableString::length 0 1 223 224
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline unsigned int ConfigVariableString::length(void) const;

1447 11 operator [] 4 2397 33 ConfigVariableString::operator [] 0 1 224 235
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline char ConfigVariableString::operator [](int n) const;

1448 11 operator == 4 2397 33 ConfigVariableString::operator == 0 1 225 271
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Equality operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
inline bool ConfigVariableString::operator ==(basic_string< char > const &other) const;

1449 11 operator != 4 2397 33 ConfigVariableString::operator != 0 1 226 273
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Inequality operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
inline bool ConfigVariableString::operator !=(basic_string< char > const &other) const;

1450 10 operator < 4 2397 32 ConfigVariableString::operator < 0 1 227 235
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Ordering operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
86
inline bool ConfigVariableString::operator <(basic_string< char > const &other) const;

1451 9 set_value 4 2397 31 ConfigVariableString::set_value 0 1 228 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
79
inline void ConfigVariableString::set_value(basic_string< char > const &value);

1452 9 get_value 4 2397 31 ConfigVariableString::get_value 0 1 229 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &ConfigVariableString::get_value(void) const;

1453 17 get_default_value 4 2397 39 ConfigVariableString::get_default_value 0 1 230 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > ConfigVariableString::get_default_value(void) const;

1454 8 get_word 4 2397 30 ConfigVariableString::get_word 0 1 231 263
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > ConfigVariableString::get_word(int n) const;

1455 8 set_word 4 2397 30 ConfigVariableString::set_word 0 1 232 340
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
85
inline void ConfigVariableString::set_word(int n, basic_string< char > const &value);

1456 21 ~ConfigVariableString 4 2397 43 ConfigVariableString::~ConfigVariableString 0 0 0
50
ConfigVariableString::~ConfigVariableString(void);

1457 7 is_null 4 2401 22 PointerToVoid::is_null 0 1 245 372
////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::is_null
//       Access: Published
//  Description: Returns true if the PointerTo is a NULL pointer,
//               false otherwise.  (Direct comparison to a NULL
//               pointer also works.)
////////////////////////////////////////////////////////////////////
47
inline bool PointerToVoid::is_null(void) const;

1458 8 get_hash 4 2401 23 PointerToVoid::get_hash 0 1 246 219
////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::get_hash
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline unsigned int PointerToVoid::get_hash(void) const;

1459 5 clear 4 2400 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 243 0
76
inline void ::PointerToBase< ReferenceCountedVector< float > >::clear(void);

1460 6 output 4 2400 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 244 0
84
void ::PointerToBase< ReferenceCountedVector< float > >::output(ostream &out) const;

1461 19 ~PointerToArrayBase 4 2399 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
64
inline ::PointerToArrayBase< float >::~PointerToArrayBase(void);

1462 19 ConstPointerToArray 4 2398 49 ConstPointerToArray< float >::ConstPointerToArray 0 2 234 235 0
198
inline ::ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ::ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);

1463 4 size 4 2398 34 ConstPointerToArray< float >::size 0 1 236 0
69
inline unsigned int ::ConstPointerToArray< float >::size(void) const;

1464 11 get_element 4 2398 41 ConstPointerToArray< float >::get_element 0 1 237 0
86
inline float const &::ConstPointerToArray< float >::get_element(unsigned int n) const;

1465 11 __getitem__ 4 2398 41 ConstPointerToArray< float >::__getitem__ 0 1 238 0
86
inline float const &::ConstPointerToArray< float >::__getitem__(unsigned int n) const;

1466 8 get_data 4 2398 38 ConstPointerToArray< float >::get_data 0 1 239 0
81
inline basic_string< char > ::ConstPointerToArray< float >::get_data(void) const;

1467 11 get_subdata 4 2398 41 ConstPointerToArray< float >::get_subdata 0 1 240 0
114
inline basic_string< char > ::ConstPointerToArray< float >::get_subdata(unsigned int n, unsigned int count) const;

1468 13 get_ref_count 4 2398 43 ConstPointerToArray< float >::get_ref_count 0 1 241 0
69
inline int ::ConstPointerToArray< float >::get_ref_count(void) const;

1469 18 get_node_ref_count 4 2398 48 ConstPointerToArray< float >::get_node_ref_count 0 1 242 0
74
inline int ::ConstPointerToArray< float >::get_node_ref_count(void) const;

1470 20 ~ConstPointerToArray 4 2398 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
59
::ConstPointerToArray< float >::~ConstPointerToArray(void);

1471 5 clear 4 2405 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 256 0
74
inline void ::PointerToBase< ReferenceCountedVector< int > >::clear(void);

1472 6 output 4 2405 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 257 0
82
void ::PointerToBase< ReferenceCountedVector< int > >::output(ostream &out) const;

1473 19 ~PointerToArrayBase 4 2404 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
62
inline ::PointerToArrayBase< int >::~PointerToArrayBase(void);

1474 19 ConstPointerToArray 4 2403 47 ConstPointerToArray< int >::ConstPointerToArray 0 2 247 248 0
190
inline ::ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ::ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);

1475 4 size 4 2403 32 ConstPointerToArray< int >::size 0 1 249 0
67
inline unsigned int ::ConstPointerToArray< int >::size(void) const;

1476 11 get_element 4 2403 39 ConstPointerToArray< int >::get_element 0 1 250 0
82
inline int const &::ConstPointerToArray< int >::get_element(unsigned int n) const;

1477 11 __getitem__ 4 2403 39 ConstPointerToArray< int >::__getitem__ 0 1 251 0
82
inline int const &::ConstPointerToArray< int >::__getitem__(unsigned int n) const;

1478 8 get_data 4 2403 36 ConstPointerToArray< int >::get_data 0 1 252 0
79
inline basic_string< char > ::ConstPointerToArray< int >::get_data(void) const;

1479 11 get_subdata 4 2403 39 ConstPointerToArray< int >::get_subdata 0 1 253 0
112
inline basic_string< char > ::ConstPointerToArray< int >::get_subdata(unsigned int n, unsigned int count) const;

1480 13 get_ref_count 4 2403 41 ConstPointerToArray< int >::get_ref_count 0 1 254 0
67
inline int ::ConstPointerToArray< int >::get_ref_count(void) const;

1481 18 get_node_ref_count 4 2403 46 ConstPointerToArray< int >::get_node_ref_count 0 1 255 0
72
inline int ::ConstPointerToArray< int >::get_node_ref_count(void) const;

1482 20 ~ConstPointerToArray 4 2403 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
57
::ConstPointerToArray< int >::~ConstPointerToArray(void);

1483 5 clear 4 2408 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 267 0
84
inline void ::PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

1484 6 output 4 2408 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 268 0
92
void ::PointerToBase< ReferenceCountedVector< unsigned char > >::output(ostream &out) const;

1485 19 ~PointerToArrayBase 4 2407 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
72
inline ::PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

1486 19 ConstPointerToArray 4 2406 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 2 258 259 0
230
inline ::ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ::ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);

1487 4 size 4 2406 42 ConstPointerToArray< unsigned char >::size 0 1 260 0
77
inline unsigned int ::ConstPointerToArray< unsigned char >::size(void) const;

1488 11 get_element 4 2406 49 ConstPointerToArray< unsigned char >::get_element 0 1 261 0
102
inline unsigned char const &::ConstPointerToArray< unsigned char >::get_element(unsigned int n) const;

1489 11 __getitem__ 4 2406 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 262 0
102
inline unsigned char const &::ConstPointerToArray< unsigned char >::__getitem__(unsigned int n) const;

1490 8 get_data 4 2406 46 ConstPointerToArray< unsigned char >::get_data 0 1 263 0
89
inline basic_string< char > ::ConstPointerToArray< unsigned char >::get_data(void) const;

1491 11 get_subdata 4 2406 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 264 0
122
inline basic_string< char > ::ConstPointerToArray< unsigned char >::get_subdata(unsigned int n, unsigned int count) const;

1492 13 get_ref_count 4 2406 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 265 0
77
inline int ::ConstPointerToArray< unsigned char >::get_ref_count(void) const;

1493 18 get_node_ref_count 4 2406 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 266 0
82
inline int ::ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

1494 20 ~ConstPointerToArray 4 2406 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
67
::ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

1495 7 GetBool 4 2409 16 DConfig::GetBool 0 2 269 270 0
85
static inline bool DConfig::GetBool(basic_string< char > const &sym, bool def = (0));

1496 6 GetInt 4 2409 15 DConfig::GetInt 0 2 271 272 0
82
static inline int DConfig::GetInt(basic_string< char > const &sym, int def = (0));

1497 8 GetFloat 4 2409 17 DConfig::GetFloat 0 2 273 274 0
88
static inline float DConfig::GetFloat(basic_string< char > const &sym, float def = (0));

1498 9 GetDouble 4 2409 18 DConfig::GetDouble 0 2 275 276 0
91
static inline double DConfig::GetDouble(basic_string< char > const &sym, double def = (0));

1499 9 GetString 4 2409 18 DConfig::GetString 0 2 277 278 0
127
static inline basic_string< char > DConfig::GetString(basic_string< char > const &sym, basic_string< char > const &def = (""));

1500 8 ~DConfig 4 2409 17 DConfig::~DConfig 0 0 0
24
DConfig::~DConfig(void);

1501 7 Results 4 2411 29 DSearchPath::Results::Results 0 2 304 305 0
101
DSearchPath::Results::Results(void);
DSearchPath::Results::Results(DSearchPath::Results const &copy);

1502 10 operator = 4 2411 32 DSearchPath::Results::operator = 0 1 306 0
72
void DSearchPath::Results::operator =(DSearchPath::Results const &copy);

1503 8 ~Results 4 2411 30 DSearchPath::Results::~Results 0 0 0
37
DSearchPath::Results::~Results(void);

1504 5 clear 4 2411 27 DSearchPath::Results::clear 0 1 307 0
39
void DSearchPath::Results::clear(void);

1505 13 get_num_files 4 2411 35 DSearchPath::Results::get_num_files 0 1 308 0
52
int DSearchPath::Results::get_num_files(void) const;

1506 8 get_file 4 2411 30 DSearchPath::Results::get_file 0 1 309 0
60
Filename const &DSearchPath::Results::get_file(int n) const;

1507 11 operator [] 4 2411 33 DSearchPath::Results::operator [] 0 1 310 872
// Filename: dSearchPath.I
// Created by:  drose (01Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::Results::operator []
//       Access: Published
//  Description: Returns the nth filename in the set.  This method is
//               defined to make the Results object appear to be a
//               list in Python.
////////////////////////////////////////////////////////////////////
63
inline Filename DSearchPath::Results::operator [](int n) const;

1508 4 size 4 2411 26 DSearchPath::Results::size 0 1 311 382
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::Results::size
//       Access: Published
//  Description: Returns the num of filenames in the set.  This method
//               is defined to make the Results object appear to be a
//               list in Python.
////////////////////////////////////////////////////////////////////
50
inline int DSearchPath::Results::size(void) const;

1509 6 output 4 2411 28 DSearchPath::Results::output 0 1 312 0
54
void DSearchPath::Results::output(ostream &out) const;

1510 5 write 4 2411 27 DSearchPath::Results::write 0 2 313 314 0
77
void DSearchPath::Results::write(ostream &out, int indent_level = (0)) const;

1511 11 DSearchPath 4 2410 24 DSearchPath::DSearchPath 0 5 279 280 281 282 283 0
249
DSearchPath::DSearchPath(void);
DSearchPath::DSearchPath(basic_string< char > const &path, basic_string< char > const &separator = ((string())));
DSearchPath::DSearchPath(Filename const &directory);
DSearchPath::DSearchPath(DSearchPath const &copy);

1512 10 operator = 4 2410 23 DSearchPath::operator = 0 1 284 0
54
void DSearchPath::operator =(DSearchPath const &copy);

1513 12 ~DSearchPath 4 2410 25 DSearchPath::~DSearchPath 0 0 0
32
DSearchPath::~DSearchPath(void);

1514 5 clear 4 2410 18 DSearchPath::clear 0 1 285 0
30
void DSearchPath::clear(void);

1515 16 append_directory 4 2410 29 DSearchPath::append_directory 0 1 286 0
62
void DSearchPath::append_directory(Filename const &directory);

1516 17 prepend_directory 4 2410 30 DSearchPath::prepend_directory 0 1 287 0
63
void DSearchPath::prepend_directory(Filename const &directory);

1517 11 append_path 4 2410 24 DSearchPath::append_path 0 3 288 289 290 0
174
void DSearchPath::append_path(basic_string< char > const &path, basic_string< char > const &separator = ((string())));
void DSearchPath::append_path(DSearchPath const &path);

1518 12 prepend_path 4 2410 25 DSearchPath::prepend_path 0 1 291 0
56
void DSearchPath::prepend_path(DSearchPath const &path);

1519 8 is_empty 4 2410 21 DSearchPath::is_empty 0 1 292 0
39
bool DSearchPath::is_empty(void) const;

1520 19 get_num_directories 4 2410 32 DSearchPath::get_num_directories 0 1 293 0
49
int DSearchPath::get_num_directories(void) const;

1521 13 get_directory 4 2410 26 DSearchPath::get_directory 0 1 294 0
56
Filename const &DSearchPath::get_directory(int n) const;

1522 9 find_file 4 2410 22 DSearchPath::find_file 0 1 295 0
64
Filename DSearchPath::find_file(Filename const &filename) const;

1523 14 find_all_files 4 2410 27 DSearchPath::find_all_files 0 2 296 297 445
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
////////////////////////////////////////////////////////////////////
184
int DSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results DSearchPath::find_all_files(Filename const &filename) const;

1524 11 search_path 4 2410 24 DSearchPath::search_path 0 2 298 299 531
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::search_path
//       Access: Published, Static
//  Description: A quick-and-easy way to search a searchpath for a
//               file when you don't feel like building or keeping
//               around a DSearchPath object.  This simply
//               constructs a temporary DSearchPath based on the
//               indicated path string, and searches that.
////////////////////////////////////////////////////////////////////
162
static inline Filename DSearchPath::search_path(Filename const &filename, basic_string< char > const &path, basic_string< char > const &separator = ((string())));

1525 6 output 4 2410 19 DSearchPath::output 0 2 300 301 0
99
void DSearchPath::output(ostream &out, basic_string< char > const &separator = ((string()))) const;

1526 5 write 4 2410 18 DSearchPath::write 0 2 302 303 0
68
void DSearchPath::write(ostream &out, int indent_level = (0)) const;

1527 24 has_environment_variable 4 2412 46 ExecutionEnvironment::has_environment_variable 0 1 315 826
// Filename: executionEnvironment.I
// Created by:  drose (15May00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::has_environment_variable
//       Access: Public, Static
//  Description: Returns true if the indicated environment variable
//               is defined.
////////////////////////////////////////////////////////////////////
99
static inline bool ExecutionEnvironment::has_environment_variable(basic_string< char > const &var);

1528 24 get_environment_variable 4 2412 46 ExecutionEnvironment::get_environment_variable 0 1 316 396
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_environment_variable
//       Access: Public, Static
//  Description: Returns the definition of the indicated environment
//               variable, or the empty string if the variable is
//               undefined.
////////////////////////////////////////////////////////////////////
115
static inline basic_string< char > ExecutionEnvironment::get_environment_variable(basic_string< char > const &var);

1529 24 set_environment_variable 4 2412 46 ExecutionEnvironment::set_environment_variable 0 1 317 329
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_environment_variable
//       Access: Public, Static
//  Description: Changes the definition of the indicated environment
//               variable.
////////////////////////////////////////////////////////////////////
134
static inline void ExecutionEnvironment::set_environment_variable(basic_string< char > const &var, basic_string< char > const &value);

1530 27 shadow_environment_variable 4 2412 49 ExecutionEnvironment::shadow_environment_variable 0 1 318 588
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::shadow_environment_variable
//       Access: Public, Static
//  Description: Changes the apparent definition of the indicated
//               environment variable by masking it within this class
//               with a new value.  This does not change the actual
//               environment variable, but future calls to
//               get_environment_variable() will return this new
//               value.
////////////////////////////////////////////////////////////////////
137
static inline void ExecutionEnvironment::shadow_environment_variable(basic_string< char > const &var, basic_string< char > const &value);

1531 12 clear_shadow 4 2412 34 ExecutionEnvironment::clear_shadow 0 1 319 399
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::clear_shadow
//       Access: Public, Static
//  Description: Removes a value set by a previous call to
//               shadow_environment_variable(), and lets the actual
//               value of the variable show again.
////////////////////////////////////////////////////////////////////
87
static inline void ExecutionEnvironment::clear_shadow(basic_string< char > const &var);

1532 13 expand_string 4 2412 35 ExecutionEnvironment::expand_string 0 1 320 0
97
static basic_string< char > ExecutionEnvironment::expand_string(basic_string< char > const &str);

1533 12 get_num_args 4 2412 34 ExecutionEnvironment::get_num_args 0 1 321 348
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_num_args
//       Access: Public, Static
//  Description: Returns the number of command-line arguments
//               available, not counting arg 0, the binary name.
////////////////////////////////////////////////////////////////////
59
static inline int ExecutionEnvironment::get_num_args(void);

1534 7 get_arg 4 2412 29 ExecutionEnvironment::get_arg 0 1 322 462
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_arg
//       Access: Public, Static
//  Description: Returns the nth command-line argument.  The index n
//               must be in the range [0 .. get_num_args()).  The
//               first parameter, n == 0, is the first actual
//               parameter, not the binary name.
////////////////////////////////////////////////////////////////////
72
static inline basic_string< char > ExecutionEnvironment::get_arg(int n);

1535 15 get_binary_name 4 2412 37 ExecutionEnvironment::get_binary_name 0 1 323 352
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_binary_name
//       Access: Public, Static
//  Description: Returns the name of the binary executable that
//               started this program, if it can be determined.
////////////////////////////////////////////////////////////////////
79
static inline basic_string< char > ExecutionEnvironment::get_binary_name(void);

1536 14 get_dtool_name 4 2412 36 ExecutionEnvironment::get_dtool_name 0 1 324 349
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_dtool_name
//       Access: Public, Static
//  Description: Returns the name of the libdtool DLL that
//               is used in this program, if it can be determined.
////////////////////////////////////////////////////////////////////
78
static inline basic_string< char > ExecutionEnvironment::get_dtool_name(void);

1537 7 get_cwd 4 2412 29 ExecutionEnvironment::get_cwd 0 1 325 0
52
static Filename ExecutionEnvironment::get_cwd(void);

1538 21 ~ExecutionEnvironment 4 2412 43 ExecutionEnvironment::~ExecutionEnvironment 0 0 0
50
ExecutionEnvironment::~ExecutionEnvironment(void);

1539 9 ~ios_base 4 2417 19 ios_base::~ios_base 0 0 0
26
ios_base::~ios_base(void);

1540 4 good 4 2416 9 ios::good 0 1 348 0
27
bool ios::good(void) const;

1541 3 eof 4 2416 8 ios::eof 0 1 349 0
26
bool ios::eof(void) const;

1542 4 fail 4 2416 9 ios::fail 0 1 350 0
27
bool ios::fail(void) const;

1543 3 bad 4 2416 8 ios::bad 0 1 351 0
26
bool ios::bad(void) const;

1544 5 clear 4 2416 10 ios::clear 0 1 352 0
22
void ios::clear(void);

1545 4 ~ios 4 2416 9 ios::~ios 0 0 0
16
ios::~ios(void);

1546 13 upcast_to_ios 12 2415 22 istream::upcast_to_ios 0 1 339 26
upcast from istream to ios
34
ios *istream::upcast_to_ios(void);

1547 3 get 4 2415 12 istream::get 0 1 335 0
23
int istream::get(void);

1548 5 tellg 4 2415 14 istream::tellg 0 1 336 0
39
unsigned long int istream::tellg(void);

1549 5 seekg 4 2415 14 istream::seekg 0 2 337 338 0
101
void istream::seekg(unsigned long int pos);
void istream::seekg(long int off, ios_base::seekdir dir);

1550 8 ~istream 4 2415 17 istream::~istream 0 0 0
24
istream::~istream(void);

1551 17 upcast_to_istream 12 2414 27 iostream::upcast_to_istream 0 1 333 31
upcast from iostream to istream
43
istream *iostream::upcast_to_istream(void);

1552 20 downcast_to_iostream 12 2415 29 istream::downcast_to_iostream 0 1 334 33
downcast from istream to iostream
46
iostream *istream::downcast_to_iostream(void);

1553 13 upcast_to_ios 12 2420 22 ostream::upcast_to_ios 0 1 347 26
upcast from ostream to ios
34
ios *ostream::upcast_to_ios(void);

1554 3 put 4 2420 12 ostream::put 0 1 342 0
26
void ostream::put(char c);

1555 5 flush 4 2420 14 ostream::flush 0 1 343 0
26
void ostream::flush(void);

1556 5 tellp 4 2420 14 ostream::tellp 0 1 344 0
39
unsigned long int ostream::tellp(void);

1557 5 seekp 4 2420 14 ostream::seekp 0 2 345 346 0
101
void ostream::seekp(unsigned long int pos);
void ostream::seekp(long int off, ios_base::seekdir dir);

1558 8 ~ostream 4 2420 17 ostream::~ostream 0 0 0
24
ostream::~ostream(void);

1559 17 upcast_to_ostream 12 2414 27 iostream::upcast_to_ostream 0 1 340 31
upcast from iostream to ostream
43
ostream *iostream::upcast_to_ostream(void);

1560 20 downcast_to_iostream 12 2420 29 ostream::downcast_to_iostream 0 1 341 33
downcast from ostream to iostream
46
iostream *ostream::downcast_to_iostream(void);

1561 5 flush 4 2414 15 iostream::flush 0 1 332 0
27
void iostream::flush(void);

1562 9 ~iostream 4 2414 19 iostream::~iostream 0 0 0
26
iostream::~iostream(void);

1563 10 FileStream 4 2413 22 FileStream::FileStream 0 3 326 327 328 446
////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline FileStream::FileStream(void);
inline FileStream::FileStream(char const *filename, ios_base::openmode mode = (ios::in));

1564 11 ~FileStream 4 2413 23 FileStream::~FileStream 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: FileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline FileStream::~FileStream(void);

1565 4 open 4 2413 16 FileStream::open 0 2 329 330 216
////////////////////////////////////////////////////////////////////
//     Function: FileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
88
inline void FileStream::open(char const *filename, ios_base::openmode mode = (ios::in));

1566 5 close 4 2413 17 FileStream::close 0 1 331 227
// _WIN32
////////////////////////////////////////////////////////////////////
//     Function: FileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
inline void FileStream::close(void);

1567 8 Filename 4 2421 18 Filename::Filename 0 5 353 354 355 356 357 1153
// Filename: filename.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
240
inline Filename::Filename(basic_string< char > const &filename = (""));
inline Filename::Filename(char const *filename);
inline Filename::Filename(Filename const &copy);
Filename::Filename(Filename const &dirname, Filename const &basename);

1568 9 ~Filename 4 2421 19 Filename::~Filename 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: Filename::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline Filename::~Filename(void);

1569 10 __reduce__ 4 2421 20 Filename::__reduce__ 0 1 358 0
53
PyObject *Filename::__reduce__(PyObject *self) const;

1570 13 text_filename 4 2421 23 Filename::text_filename 0 1 359 410
// Static constructors to explicitly create a filename that refers
// to a text or binary file.  This is in lieu of calling set_text()
// or set_binary() or set_type().

////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
85
static inline Filename Filename::text_filename(basic_string< char > const &filename);

1571 15 binary_filename 4 2421 25 Filename::binary_filename 0 1 360 412
// Static constructors to explicitly create a filename that refers
// to a text or binary file.  This is in lieu of calling set_text()
// or set_binary() or set_type().

////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
87
static inline Filename Filename::binary_filename(basic_string< char > const &filename);

1572 12 dso_filename 4 2421 22 Filename::dso_filename 0 1 361 239
////////////////////////////////////////////////////////////////////
//     Function: Filename::dso_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
static inline Filename Filename::dso_filename(basic_string< char > const &filename);

1573 19 executable_filename 4 2421 29 Filename::executable_filename 0 1 362 246
////////////////////////////////////////////////////////////////////
//     Function: Filename::executable_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
91
static inline Filename Filename::executable_filename(basic_string< char > const &filename);

1574 16 pattern_filename 4 2421 26 Filename::pattern_filename 0 1 363 348
////////////////////////////////////////////////////////////////////
//     Function: Filename::pattern_filename named constructor
//       Access: Published
//  Description: Constructs a filename that represents a sequence of
//               numbered files.  See set_pattern().
////////////////////////////////////////////////////////////////////
88
static inline Filename Filename::pattern_filename(basic_string< char > const &filename);

1575 16 from_os_specific 4 2421 26 Filename::from_os_specific 0 2 364 365 0
119
static Filename Filename::from_os_specific(basic_string< char > const &os_specific, Filename::Type type = (T_general));

1576 11 expand_from 4 2421 21 Filename::expand_from 0 2 366 367 0
114
static Filename Filename::expand_from(basic_string< char > const &user_string, Filename::Type type = (T_general));

1577 9 temporary 4 2421 19 Filename::temporary 0 3 368 369 370 0
195
static Filename Filename::temporary(basic_string< char > const &dirname, basic_string< char > const &prefix, basic_string< char > const &suffix = ((string())), Filename::Type type = (T_general));

1578 18 get_home_directory 4 2421 28 Filename::get_home_directory 0 1 371 0
58
static Filename const &Filename::get_home_directory(void);

1579 18 get_temp_directory 4 2421 28 Filename::get_temp_directory 0 1 372 0
58
static Filename const &Filename::get_temp_directory(void);

1580 26 get_user_appdata_directory 4 2421 36 Filename::get_user_appdata_directory 0 1 373 0
66
static Filename const &Filename::get_user_appdata_directory(void);

1581 28 get_common_appdata_directory 4 2421 38 Filename::get_common_appdata_directory 0 1 374 0
68
static Filename const &Filename::get_common_appdata_directory(void);

1582 10 operator = 4 2421 20 Filename::operator = 0 3 375 376 377 769
// Assignment is via the = operator.

// Assignment is via the = operator.

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
198
inline Filename &Filename::operator =(basic_string< char > const &filename);
inline Filename &Filename::operator =(char const *filename);
inline Filename &Filename::operator =(Filename const &copy);

1583 17 operator typecast 132 2421 27 Filename::operator typecast 0 1 469 295
// And retrieval is by any of the classic string operations.

////////////////////////////////////////////////////////////////////
//     Function: Filename::string typecast operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &Filename::operator typecast(void) const;

1584 5 c_str 4 2421 15 Filename::c_str 0 1 378 276
// And retrieval is by any of the classic string operations.

////////////////////////////////////////////////////////////////////
//     Function: Filename::c_str
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline char const *Filename::c_str(void) const;

1585 5 empty 4 2421 15 Filename::empty 0 1 379 214
////////////////////////////////////////////////////////////////////
//     Function: Filename::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline bool Filename::empty(void) const;

1586 6 length 4 2421 16 Filename::length 0 1 380 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline unsigned int Filename::length(void) const;

1587 11 operator [] 4 2421 21 Filename::operator [] 0 1 381 226
////////////////////////////////////////////////////////////////////
//     Function: Filename::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline char Filename::operator [](int n) const;

1588 6 substr 4 2421 16 Filename::substr 0 2 382 383 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::substr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
inline basic_string< char > Filename::substr(unsigned int begin, unsigned int end = (string::npos)) const;

1589 11 operator += 4 2421 21 Filename::operator += 0 1 384 413
////////////////////////////////////////////////////////////////////
//     Function: Filename::operator +=
//       Access: Published
//  Description: Appends the other filename onto the end of this one.
//               This does not introduce an intervening slash, but see
//               the Filename constructor that takes two parameters.
////////////////////////////////////////////////////////////////////
69
inline void Filename::operator +=(basic_string< char > const &other);

1590 10 operator + 4 2421 20 Filename::operator + 0 1 385 312
////////////////////////////////////////////////////////////////////
//     Function: Filename::operator +
//       Access: Published
//  Description: Returns a new Filename representing the concatenation
//               of the two filenames.
////////////////////////////////////////////////////////////////////
78
inline Filename Filename::operator +(basic_string< char > const &other) const;

1591 12 get_fullpath 4 2421 22 Filename::get_fullpath 0 1 386 473
// Or, you can use any of these.

////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath
//       Access: Published
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > Filename::get_fullpath(void) const;

1592 11 get_dirname 4 2421 21 Filename::get_dirname 0 1 387 414
// Or, you can use any of these.

////////////////////////////////////////////////////////////////////
//     Function: Filename::get_dirname
//       Access: Published
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > Filename::get_dirname(void) const;

1593 12 get_basename 4 2421 22 Filename::get_basename 0 1 388 387
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename
//       Access: Published
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > Filename::get_basename(void) const;

1594 25 get_fullpath_wo_extension 4 2421 35 Filename::get_fullpath_wo_extension 0 1 389 334
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_wo_extension
//       Access: Published
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > Filename::get_fullpath_wo_extension(void) const;

1595 25 get_basename_wo_extension 4 2421 35 Filename::get_basename_wo_extension 0 1 390 322
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename_wo_extension
//       Access: Published
//  Description: Returns the basename part of the filename, without
//               the file extension.
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > Filename::get_basename_wo_extension(void) const;

1596 13 get_extension 4 2421 23 Filename::get_extension 0 1 391 383
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_extension
//       Access: Published
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > Filename::get_extension(void) const;

1597 12 set_fullpath 4 2421 22 Filename::set_fullpath 0 1 392 68
// You can also use any of these to reassign pieces of the filename.
59
void Filename::set_fullpath(basic_string< char > const &s);

1598 11 set_dirname 4 2421 21 Filename::set_dirname 0 1 393 68
// You can also use any of these to reassign pieces of the filename.
58
void Filename::set_dirname(basic_string< char > const &s);

1599 12 set_basename 4 2421 22 Filename::set_basename 0 1 394 0
59
void Filename::set_basename(basic_string< char > const &s);

1600 25 set_fullpath_wo_extension 4 2421 35 Filename::set_fullpath_wo_extension 0 1 395 0
72
void Filename::set_fullpath_wo_extension(basic_string< char > const &s);

1601 25 set_basename_wo_extension 4 2421 35 Filename::set_basename_wo_extension 0 1 396 0
72
void Filename::set_basename_wo_extension(basic_string< char > const &s);

1602 13 set_extension 4 2421 23 Filename::set_extension 0 1 397 0
60
void Filename::set_extension(basic_string< char > const &s);

1603 10 set_binary 4 2421 20 Filename::set_binary 0 1 398 682
// Setting these flags appropriately is helpful when opening or
// searching for a file; it helps the Filename resolve OS-specific
// conventions (for instance, that dynamic library names should
// perhaps be changed from .so to .dll).

////////////////////////////////////////////////////////////////////
//     Function: Filename::set_binary
//       Access: Published
//  Description: Indicates that the filename represents a binary file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
////////////////////////////////////////////////////////////////////
39
inline void Filename::set_binary(void);

1604 8 set_text 4 2421 18 Filename::set_text 0 1 399 678
// Setting these flags appropriately is helpful when opening or
// searching for a file; it helps the Filename resolve OS-specific
// conventions (for instance, that dynamic library names should
// perhaps be changed from .so to .dll).

////////////////////////////////////////////////////////////////////
//     Function: Filename::set_text
//       Access: Published
//  Description: Indicates that the filename represents a text file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
////////////////////////////////////////////////////////////////////
37
inline void Filename::set_text(void);

1605 9 is_binary 4 2421 19 Filename::is_binary 0 1 400 523
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a binary file via a previous call to
//               set_binary().  It is possible that neither
//               is_binary() nor is_text() will be true, if neither
//               set_binary() nor set_text() was ever called.
////////////////////////////////////////////////////////////////////
44
inline bool Filename::is_binary(void) const;

1606 7 is_text 4 2421 17 Filename::is_text 0 1 401 517
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_text
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a text file via a previous call to
//               set_text().  It is possible that neither is_binary()
//               nor is_text() will be true, if neither set_binary()
//               nor set_text() was ever called.
////////////////////////////////////////////////////////////////////
42
inline bool Filename::is_text(void) const;

1607 8 set_type 4 2421 18 Filename::set_type 0 1 402 646
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_type
//       Access: Published
//  Description: Sets the type of the file represented by the
//               filename.  This is useful for to_os_specific(),
//               resolve_filename(), test_existence(), and all such
//               real-world access functions.  It helps the Filename
//               know how to map the internal filename to the
//               OS-specific filename (for instance, maybe executables
//               should have an .exe extension).
////////////////////////////////////////////////////////////////////
52
inline void Filename::set_type(Filename::Type type);

1608 8 get_type 4 2421 18 Filename::get_type 0 1 403 325
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_type
//       Access: Published
//  Description: Returns the type of the file represented by the
//               filename, as previously set by set_type().
////////////////////////////////////////////////////////////////////
53
inline Filename::Type Filename::get_type(void) const;

1609 11 set_pattern 4 2421 21 Filename::set_pattern 0 1 404 1075
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_pattern
//       Access: Published
//  Description: Sets the flag indicating whether this is a filename
//               pattern.  When this is true, the filename is
//               understood to be a placeholder for a numbered
//               sequence of filename, such as an image sequence.  In
//               this case, a sequence of one or more hash characters
//               ("#") should appear in the filename string; these
//               characters will be filled in with the corresponding
//               number (or more) of digits representing the sequence
//               number.  Sequence numbers always begin counting at 0.
//
//               When this is true, methods like has_hash() and
//               get_hash_to_end() and get_filename_index() may be
//               called.  Methods like is_exists() will implicitly
//               test for existance of filename sequence 0.
////////////////////////////////////////////////////////////////////
48
inline void Filename::set_pattern(bool pattern);

1610 11 get_pattern 4 2421 21 Filename::get_pattern 0 1 405 321
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_pattern
//       Access: Published
//  Description: Returns the flag indicating whether this is a
//               filename pattern.  See set_pattern().
////////////////////////////////////////////////////////////////////
46
inline bool Filename::get_pattern(void) const;

1611 8 has_hash 4 2421 18 Filename::has_hash 0 1 406 651
////////////////////////////////////////////////////////////////////
//     Function: Filename::has_hash
//       Access: Published
//  Description: Returns true if the filename is indicated to be a
//               filename pattern (that is, set_pattern(true) was
//               called), and the filename pattern did include a
//               sequence of hash marks, or false if it was not a
//               filename pattern or did not include hash marks.  If
//               this is true, then get_filename_index() will return a
//               different filename each time.
////////////////////////////////////////////////////////////////////
43
inline bool Filename::has_hash(void) const;

1612 18 get_filename_index 4 2421 28 Filename::get_filename_index 0 1 407 0
55
Filename Filename::get_filename_index(int index) const;

1613 15 get_hash_to_end 4 2421 25 Filename::get_hash_to_end 0 1 408 375
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_hash_to_end
//       Access: Published
//  Description: Returns the part of the filename beginning at the
//               hash sequence (if any), and continuing to the end of
//               the filename.
////////////////////////////////////////////////////////////////////
66
inline basic_string< char > Filename::get_hash_to_end(void) const;

1614 15 set_hash_to_end 4 2421 25 Filename::set_hash_to_end 0 1 409 0
62
void Filename::set_hash_to_end(basic_string< char > const &s);

1615 18 extract_components 4 2421 28 Filename::extract_components 0 1 410 0
84
void Filename::extract_components(vector< basic_string< char > > &components) const;

1616 11 standardize 4 2421 21 Filename::standardize 0 1 411 0
33
void Filename::standardize(void);

1617 8 is_local 4 2421 18 Filename::is_local 0 1 412 440
// The following functions deal with the outside world.

////////////////////////////////////////////////////////////////////
//     Function: Filename::is_local
//       Access: Published
//  Description: Returns true if the filename is local, e.g. does not
//               begin with a slash, or false if the filename is fully
//               specified from the root.
////////////////////////////////////////////////////////////////////
43
inline bool Filename::is_local(void) const;

1618 18 is_fully_qualified 4 2421 28 Filename::is_fully_qualified 0 1 413 782
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_fully_qualified
//       Access: Published
//  Description: Returns true if the filename is fully qualified,
//               e.g. begins with a slash.  This is almost, but not
//               quite, the same thing as !is_local().  It's not
//               exactly the same because a special case is made for
//               filenames that begin with a single dot followed by a
//               slash--these are considered to be fully qualified
//               (they are explicitly relative to the current
//               directory, and do not refer to a filename on a search
//               path somewhere).
////////////////////////////////////////////////////////////////////
53
inline bool Filename::is_fully_qualified(void) const;

1619 13 make_absolute 4 2421 23 Filename::make_absolute 0 2 414 415 0
98
void Filename::make_absolute(void);
void Filename::make_absolute(Filename const &start_directory);

1620 14 make_canonical 4 2421 24 Filename::make_canonical 0 1 416 0
36
bool Filename::make_canonical(void);

1621 14 make_true_case 4 2421 24 Filename::make_true_case 0 1 417 0
36
bool Filename::make_true_case(void);

1622 14 to_os_specific 4 2421 24 Filename::to_os_specific 0 1 418 0
58
basic_string< char > Filename::to_os_specific(void) const;

1623 13 to_os_generic 4 2421 23 Filename::to_os_generic 0 1 419 0
57
basic_string< char > Filename::to_os_generic(void) const;

1624 16 to_os_short_name 4 2421 26 Filename::to_os_short_name 0 1 420 0
60
basic_string< char > Filename::to_os_short_name(void) const;

1625 15 to_os_long_name 4 2421 25 Filename::to_os_long_name 0 1 421 0
59
basic_string< char > Filename::to_os_long_name(void) const;

1626 6 exists 4 2421 16 Filename::exists 0 1 422 0
34
bool Filename::exists(void) const;

1627 15 is_regular_file 4 2421 25 Filename::is_regular_file 0 1 423 0
43
bool Filename::is_regular_file(void) const;

1628 12 is_directory 4 2421 22 Filename::is_directory 0 1 424 0
40
bool Filename::is_directory(void) const;

1629 13 is_executable 4 2421 23 Filename::is_executable 0 1 425 0
41
bool Filename::is_executable(void) const;

1630 18 compare_timestamps 4 2421 28 Filename::compare_timestamps 0 3 426 427 428 0
127
int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old = (1), bool other_missing_is_old = (1)) const;

1631 13 get_timestamp 4 2421 23 Filename::get_timestamp 0 1 429 0
49
unsigned int Filename::get_timestamp(void) const;

1632 20 get_access_timestamp 4 2421 30 Filename::get_access_timestamp 0 1 430 0
56
unsigned int Filename::get_access_timestamp(void) const;

1633 13 get_file_size 4 2421 23 Filename::get_file_size 0 1 431 0
40
int Filename::get_file_size(void) const;

1634 16 resolve_filename 4 2421 26 Filename::resolve_filename 0 2 432 433 0
125
bool Filename::resolve_filename(DSearchPath const &searchpath, basic_string< char > const &default_extension = ((string())));

1635 16 make_relative_to 4 2421 26 Filename::make_relative_to 0 2 434 435 0
78
bool Filename::make_relative_to(Filename directory, bool allow_backups = (1));

1636 18 find_on_searchpath 4 2421 28 Filename::find_on_searchpath 0 1 436 0
64
int Filename::find_on_searchpath(DSearchPath const &searchpath);

1637 14 scan_directory 4 2421 24 Filename::scan_directory 0 2 437 438 0
126
bool Filename::scan_directory(vector< basic_string< char > > &contents) const;
PyObject *Filename::scan_directory(void) const;

1638 9 open_read 4 2421 19 Filename::open_read 0 2 439 440 0
102
bool Filename::open_read(ifstream &stream) const;
bool Filename::open_read(IFileStream &stream) const;

1639 10 open_write 4 2421 20 Filename::open_write 0 4 441 442 443 444 0
146
bool Filename::open_write(ofstream &stream, bool truncate = (1)) const;
bool Filename::open_write(OFileStream &stream, bool truncate = (1)) const;

1640 11 open_append 4 2421 21 Filename::open_append 0 2 445 446 0
106
bool Filename::open_append(ofstream &stream) const;
bool Filename::open_append(OFileStream &stream) const;

1641 15 open_read_write 4 2421 25 Filename::open_read_write 0 4 447 448 449 450 0
154
bool Filename::open_read_write(fstream &stream, bool truncate = (0)) const;
bool Filename::open_read_write(FileStream &stream, bool truncate = (0)) const;

1642 16 open_read_append 4 2421 26 Filename::open_read_append 0 2 451 452 0
114
bool Filename::open_read_append(fstream &stream) const;
bool Filename::open_read_append(FileStream &stream) const;

1643 5 chdir 4 2421 15 Filename::chdir 0 1 453 22
// USE_PANDAFILESTREAM
33
bool Filename::chdir(void) const;

1644 5 touch 4 2421 15 Filename::touch 0 1 454 0
33
bool Filename::touch(void) const;

1645 6 unlink 4 2421 16 Filename::unlink 0 1 455 0
34
bool Filename::unlink(void) const;

1646 9 rename_to 4 2421 19 Filename::rename_to 0 1 456 0
54
bool Filename::rename_to(Filename const &other) const;

1647 7 copy_to 4 2421 17 Filename::copy_to 0 1 457 0
52
bool Filename::copy_to(Filename const &other) const;

1648 8 make_dir 4 2421 18 Filename::make_dir 0 1 458 0
36
bool Filename::make_dir(void) const;

1649 5 mkdir 4 2421 15 Filename::mkdir 0 1 459 0
33
bool Filename::mkdir(void) const;

1650 5 rmdir 4 2421 15 Filename::rmdir 0 1 460 0
33
bool Filename::rmdir(void) const;

1651 11 operator == 4 2421 21 Filename::operator == 0 1 461 262
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: Filename::Equality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline bool Filename::operator ==(basic_string< char > const &other) const;

1652 11 operator != 4 2421 21 Filename::operator != 0 1 462 264
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: Filename::Inequality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline bool Filename::operator !=(basic_string< char > const &other) const;

1653 10 operator < 4 2421 20 Filename::operator < 0 1 463 226
////////////////////////////////////////////////////////////////////
//     Function: Filename::Ordering operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline bool Filename::operator <(basic_string< char > const &other) const;

1654 10 compare_to 4 2421 20 Filename::compare_to 0 1 464 219
////////////////////////////////////////////////////////////////////
//     Function: Filename::compare_to
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int Filename::compare_to(Filename const &other) const;

1655 11 __nonzero__ 4 2421 21 Filename::__nonzero__ 0 1 465 646
////////////////////////////////////////////////////////////////////
//     Function: Filename::__nonzero__
//       Access: Published
//  Description: Returns true if the Filename is valid (not empty),
//               or false if it is an empty string.
//
//               This implements the Python equivalent to operator
//               bool.  Defining an actual operator bool method for
//               C++ use would work too, but it seems to cause too
//               many ambiguities for the C++ compiler, so we use this
//               Python-only approach instead.
////////////////////////////////////////////////////////////////////
46
inline bool Filename::__nonzero__(void) const;

1656 8 get_hash 4 2421 18 Filename::get_hash 0 1 466 0
35
int Filename::get_hash(void) const;

1657 6 output 4 2421 16 Filename::output 0 1 467 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void Filename::output(ostream &out) const;

1658 14 get_class_type 4 2421 24 Filename::get_class_type 0 1 468 0
49
static TypeHandle Filename::get_class_type(void);

1659 11 GlobPattern 4 2423 24 GlobPattern::GlobPattern 0 3 470 471 472 934
// Filename: globPattern.I
// Created by:  drose (30May00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
142
inline GlobPattern::GlobPattern(basic_string< char > const &pattern = ((string())));
inline GlobPattern::GlobPattern(GlobPattern const &copy);

1660 10 operator = 4 2423 23 GlobPattern::operator = 0 1 473 233
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void GlobPattern::operator =(GlobPattern const &copy);

1661 11 operator == 4 2423 24 GlobPattern::operator == 0 1 474 220
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool GlobPattern::operator ==(GlobPattern const &other) const;

1662 11 operator != 4 2423 24 GlobPattern::operator != 0 1 475 220
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool GlobPattern::operator !=(GlobPattern const &other) const;

1663 10 operator < 4 2423 23 GlobPattern::operator < 0 1 476 219
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator <
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline bool GlobPattern::operator <(GlobPattern const &other) const;

1664 11 set_pattern 4 2423 24 GlobPattern::set_pattern 0 1 477 301
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_pattern
//       Access: Public
//  Description: Changes the pattern string that the GlobPattern
//               object matches.
////////////////////////////////////////////////////////////////////
74
inline void GlobPattern::set_pattern(basic_string< char > const &pattern);

1665 11 get_pattern 4 2423 24 GlobPattern::get_pattern 0 1 478 301
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_pattern
//       Access: Public
//  Description: Returns the pattern string that the GlobPattern
//               object matches.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > const &GlobPattern::get_pattern(void) const;

1666 18 set_case_sensitive 4 2423 31 GlobPattern::set_case_sensitive 0 1 479 370
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_case_sensitive
//       Access: Public
//  Description: Sets whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
////////////////////////////////////////////////////////////////////
65
inline void GlobPattern::set_case_sensitive(bool case_sensitive);

1667 18 get_case_sensitive 4 2423 31 GlobPattern::get_case_sensitive 0 1 480 373
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_case_sensitive
//       Access: Public
//  Description: Returns whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
////////////////////////////////////////////////////////////////////
56
inline bool GlobPattern::get_case_sensitive(void) const;

1668 17 set_nomatch_chars 4 2423 30 GlobPattern::set_nomatch_chars 0 1 481 305
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_nomatch_chars
//       Access: Public
//  Description: Specifies a set of characters that are not matched by
//               * or ?.
////////////////////////////////////////////////////////////////////
86
inline void GlobPattern::set_nomatch_chars(basic_string< char > const &nomatch_chars);

1669 17 get_nomatch_chars 4 2423 30 GlobPattern::get_nomatch_chars 0 1 482 305
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_nomatch_chars
//       Access: Public
//  Description: Returns the set of characters that are not matched by
//               * or ?.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > const &GlobPattern::get_nomatch_chars(void) const;

1670 7 matches 4 2423 20 GlobPattern::matches 0 1 483 308
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::matches
//       Access: Public
//  Description: Returns true if the candidate string matches the
//               pattern, false otherwise.
////////////////////////////////////////////////////////////////////
78
inline bool GlobPattern::matches(basic_string< char > const &candidate) const;

1671 6 output 4 2423 19 GlobPattern::output 0 1 484 215
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void GlobPattern::output(ostream &out) const;

1672 19 has_glob_characters 4 2423 32 GlobPattern::has_glob_characters 0 1 485 0
50
bool GlobPattern::has_glob_characters(void) const;

1673 16 get_const_prefix 4 2423 29 GlobPattern::get_const_prefix 0 1 486 0
63
basic_string< char > GlobPattern::get_const_prefix(void) const;

1674 11 match_files 4 2423 24 GlobPattern::match_files 0 2 487 488 0
100
int GlobPattern::match_files(vector< basic_string< char > > &results, Filename const &cwd = ((())));

1675 12 ~GlobPattern 4 2423 25 GlobPattern::~GlobPattern 0 0 0
32
GlobPattern::~GlobPattern(void);

1676 14 IDecryptStream 4 2424 30 IDecryptStream::IDecryptStream 0 2 489 490 943
// Filename: encryptStream.I
// Created by:  drose (01Sep04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
156
inline IDecryptStream::IDecryptStream(void);
inline IDecryptStream::IDecryptStream(istream *source, bool owns_source, basic_string< char > const &password);

1677 4 open 4 2424 20 IDecryptStream::open 0 1 491 220
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
117
inline IDecryptStream &IDecryptStream::open(istream *source, bool owns_source, basic_string< char > const &password);

1678 5 close 4 2424 21 IDecryptStream::close 0 1 492 348
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the source istream unless owns_source was true.
////////////////////////////////////////////////////////////////////
51
inline IDecryptStream &IDecryptStream::close(void);

1679 13 get_algorithm 4 2424 29 IDecryptStream::get_algorithm 0 1 493 309
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_algorithm
//       Access: Published
//  Description: Returns the encryption algorithm that was read from
//               the stream.
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &IDecryptStream::get_algorithm(void) const;

1680 14 get_key_length 4 2424 30 IDecryptStream::get_key_length 0 1 494 321
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_key_length
//       Access: Published
//  Description: Returns the encryption key length, in bits, that was
//               read from the stream.
////////////////////////////////////////////////////////////////////
54
inline int IDecryptStream::get_key_length(void) const;

1681 19 get_iteration_count 4 2424 35 IDecryptStream::get_iteration_count 0 1 495 287
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_iteration_count
//       Access: Published
//  Description: Returns the value that was was read from the stream.
////////////////////////////////////////////////////////////////////
59
inline int IDecryptStream::get_iteration_count(void) const;

1682 15 ~IDecryptStream 4 2424 31 IDecryptStream::~IDecryptStream 0 0 0
38
IDecryptStream::~IDecryptStream(void);

1683 11 IFileStream 4 2425 24 IFileStream::IFileStream 0 3 496 497 498 939
// Filename: pandaFileStream.I
// Created by:  drose (08Sep08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline IFileStream::IFileStream(void);
inline IFileStream::IFileStream(char const *filename, ios_base::openmode mode = (ios::in));

1684 12 ~IFileStream 4 2425 25 IFileStream::~IFileStream 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline IFileStream::~IFileStream(void);

1685 4 open 4 2425 17 IFileStream::open 0 2 499 500 217
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
89
inline void IFileStream::open(char const *filename, ios_base::openmode mode = (ios::in));

1686 5 close 4 2425 18 IFileStream::close 0 1 501 228
// _WIN32
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline void IFileStream::close(void);

1687 7 acquire 4 2427 26 StreamWrapperBase::acquire 0 1 505 952
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::acquire
//       Access: Published
//  Description: Acquires the internal lock.  
//
//               User code should call this to take temporary
//               possession of the stream and perform direct I/O
//               operations on it, for instance to make several
//               sequential atomic reads.  You may not call any of the
//               StreamWrapper methods while the lock is held, other
//               than release().
//
//               Use with extreme caution!  This is a very low-level,
//               non-recursive lock.  You must call acquire() only
//               once, and you must later call release() exactly once.
//               Failing to do so may result in a hard deadlock with
//               no available debugging features.
////////////////////////////////////////////////////////////////////
45
inline void StreamWrapperBase::acquire(void);

1688 7 release 4 2427 26 StreamWrapperBase::release 0 1 506 381
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::release
//       Access: Published
//  Description: Releases the internal lock.  Must be called exactly
//               once following a call to acquire().  See the cautions
//               with acquire().
////////////////////////////////////////////////////////////////////
45
inline void StreamWrapperBase::release(void);

1689 18 ~StreamWrapperBase 4 2427 37 StreamWrapperBase::~StreamWrapperBase 0 0 0
44
StreamWrapperBase::~StreamWrapperBase(void);

1690 27 upcast_to_StreamWrapperBase 12 2426 43 IStreamWrapper::upcast_to_StreamWrapperBase 0 1 504 47
upcast from IStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *IStreamWrapper::upcast_to_StreamWrapperBase(void);

1691 14 IStreamWrapper 4 2426 30 IStreamWrapper::IStreamWrapper 0 1 502 453
////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline IStreamWrapper::IStreamWrapper(istream &stream);

1692 15 ~IStreamWrapper 4 2426 31 IStreamWrapper::~IStreamWrapper 0 0 0
38
IStreamWrapper::~IStreamWrapper(void);

1693 11 get_istream 4 2426 27 IStreamWrapper::get_istream 0 1 503 271
////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::get_istream
//       Access: Published
//  Description: Returns the istream this object is wrapping.
////////////////////////////////////////////////////////////////////
56
inline istream *IStreamWrapper::get_istream(void) const;

1694 15 get_total_alloc 4 2428 32 NeverFreeMemory::get_total_alloc 0 1 507 353
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_alloc
//       Access: Published, Static
//  Description: Returns the total number of bytes consumed by all the
//               pages allocated internally by this object.
////////////////////////////////////////////////////////////////////
66
static inline unsigned int NeverFreeMemory::get_total_alloc(void);

1695 14 get_total_used 4 2428 31 NeverFreeMemory::get_total_used 0 1 508 356
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_used
//       Access: Published, Static
//  Description: Returns the total number of bytes requested by the
//               application in calls to NeverFreeMemory::alloc().
////////////////////////////////////////////////////////////////////
65
static inline unsigned int NeverFreeMemory::get_total_used(void);

1696 16 get_total_unused 4 2428 33 NeverFreeMemory::get_total_unused 0 1 509 454
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_unused
//       Access: Published, Static
//  Description: Returns the difference between get_total_alloc() and
//               get_total_used().  This represents bytes in allocated
//               pages that have not (yet) been used by the
//               application.
////////////////////////////////////////////////////////////////////
67
static inline unsigned int NeverFreeMemory::get_total_unused(void);

1697 16 ~NeverFreeMemory 4 2428 33 NeverFreeMemory::~NeverFreeMemory 0 0 0
40
NeverFreeMemory::~NeverFreeMemory(void);

1698 6 Notify 4 2429 14 Notify::Notify 0 1 510 0
21
Notify::Notify(void);

1699 7 ~Notify 4 2429 15 Notify::~Notify 0 0 0
22
Notify::~Notify(void);

1700 15 set_ostream_ptr 4 2429 23 Notify::set_ostream_ptr 0 1 511 0
70
void Notify::set_ostream_ptr(ostream *ostream_ptr, bool delete_later);

1701 15 get_ostream_ptr 4 2429 23 Notify::get_ostream_ptr 0 1 512 0
45
ostream *Notify::get_ostream_ptr(void) const;

1702 18 set_assert_handler 4 2429 26 Notify::set_assert_handler 0 0 0
115
void Notify::set_assert_handler(bool (*assert_handler)(char const *expression, int line, char const *source_file));

1703 20 clear_assert_handler 4 2429 28 Notify::clear_assert_handler 0 1 513 0
40
void Notify::clear_assert_handler(void);

1704 18 has_assert_handler 4 2429 26 Notify::has_assert_handler 0 1 514 0
44
bool Notify::has_assert_handler(void) const;

1705 18 get_assert_handler 4 2429 26 Notify::get_assert_handler 0 1 515 0
106
bool (*Notify::get_assert_handler(void))(char const *expression, int line, char const *source_file) const;

1706 17 has_assert_failed 4 2429 25 Notify::has_assert_failed 0 1 516 0
43
bool Notify::has_assert_failed(void) const;

1707 24 get_assert_error_message 4 2429 32 Notify::get_assert_error_message 0 1 517 0
73
basic_string< char > const &Notify::get_assert_error_message(void) const;

1708 19 clear_assert_failed 4 2429 27 Notify::clear_assert_failed 0 1 518 0
39
void Notify::clear_assert_failed(void);

1709 16 get_top_category 4 2429 24 Notify::get_top_category 0 1 519 0
47
NotifyCategory *Notify::get_top_category(void);

1710 12 get_category 4 2429 20 Notify::get_category 0 3 520 521 522 0
305
NotifyCategory *Notify::get_category(basic_string< char > const &basename, NotifyCategory *parent_category);
NotifyCategory *Notify::get_category(basic_string< char > const &basename, basic_string< char > const &parent_fullname);
NotifyCategory *Notify::get_category(basic_string< char > const &fullname);

1711 3 out 4 2429 11 Notify::out 0 1 523 0
34
static ostream &Notify::out(void);

1712 4 null 4 2429 12 Notify::null 0 1 524 0
35
static ostream &Notify::null(void);

1713 12 write_string 4 2429 20 Notify::write_string 0 1 525 0
66
static void Notify::write_string(basic_string< char > const &str);

1714 3 ptr 4 2429 11 Notify::ptr 0 1 526 0
33
static Notify *Notify::ptr(void);

1715 20 upcast_to_MemoryBase 12 2430 36 NotifyCategory::upcast_to_MemoryBase 0 1 555 40
upcast from NotifyCategory to MemoryBase
55
MemoryBase *NotifyCategory::upcast_to_MemoryBase(void);

1716 26 downcast_to_NotifyCategory 12 2402 38 MemoryBase::downcast_to_NotifyCategory 0 1 556 42
downcast from MemoryBase to NotifyCategory
61
NotifyCategory *MemoryBase::downcast_to_NotifyCategory(void);

1717 21 upcast_to_ConfigFlags 12 2430 37 NotifyCategory::upcast_to_ConfigFlags 0 1 557 41
upcast from NotifyCategory to ConfigFlags
57
ConfigFlags *NotifyCategory::upcast_to_ConfigFlags(void);

1718 26 downcast_to_NotifyCategory 12 2382 39 ConfigFlags::downcast_to_NotifyCategory 0 1 558 43
downcast from ConfigFlags to NotifyCategory
62
NotifyCategory *ConfigFlags::downcast_to_NotifyCategory(void);

1719 12 get_fullname 4 2430 28 NotifyCategory::get_fullname 0 1 527 714
// Filename: notifyCategory.I
// Created by:  drose (29Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_fullname
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline basic_string< char > NotifyCategory::get_fullname(void) const;

1720 12 get_basename 4 2430 28 NotifyCategory::get_basename 0 1 528 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_basename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline basic_string< char > NotifyCategory::get_basename(void) const;

1721 12 get_severity 4 2430 28 NotifyCategory::get_severity 0 1 529 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_severity
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline NotifySeverity NotifyCategory::get_severity(void) const;

1722 12 set_severity 4 2430 28 NotifyCategory::set_severity 0 1 530 395
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::set_severity
//       Access: Public
//  Description: Sets the severity level of messages that will be
//               reported from this Category.  This allows any message
//               of this severity level or higher.
////////////////////////////////////////////////////////////////////
66
inline void NotifyCategory::set_severity(NotifySeverity severity);

1723 5 is_on 4 2430 21 NotifyCategory::is_on 0 1 531 331
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_on
//       Access: Public
//  Description: Returns true if messages of the indicated severity
//               level ought to be reported for this Category.
////////////////////////////////////////////////////////////////////
65
inline bool NotifyCategory::is_on(NotifySeverity severity) const;

1724 7 is_spam 4 2430 23 NotifyCategory::is_spam 0 1 532 654
// When NOTIFY_DEBUG is not defined, the categories will never be
// set to "spam" or "debug" severities, and these methods are
// redefined to be static to make it more obvious to the compiler.
// However, we still want to present a consistent interface to our
// scripting language, so during the interrogate pass (that is, when
// CPPPARSER is defined), we still pretend they're nonstatic.

////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_spam
//       Access: Public
//  Description: A shorthand way to write is_on(NS_spam).
////////////////////////////////////////////////////////////////////
48
inline bool NotifyCategory::is_spam(void) const;

1725 8 is_debug 4 2430 24 NotifyCategory::is_debug 0 1 533 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_debug
//       Access: Public
//  Description: A shorthand way to write is_on(NS_debug).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_debug(void) const;

1726 7 is_info 4 2430 23 NotifyCategory::is_info 0 1 534 260
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_info
//       Access: Public
//  Description: A shorthand way to write is_on(NS_info).
////////////////////////////////////////////////////////////////////
48
inline bool NotifyCategory::is_info(void) const;

1727 10 is_warning 4 2430 26 NotifyCategory::is_warning 0 1 535 266
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_warning
//       Access: Public
//  Description: A shorthand way to write is_on(NS_warning).
////////////////////////////////////////////////////////////////////
51
inline bool NotifyCategory::is_warning(void) const;

1728 8 is_error 4 2430 24 NotifyCategory::is_error 0 1 536 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_error
//       Access: Public
//  Description: A shorthand way to write is_on(NS_error).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_error(void) const;

1729 8 is_fatal 4 2430 24 NotifyCategory::is_fatal 0 1 537 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_fatal
//       Access: Public
//  Description: A shorthand way to write is_on(NS_fatal).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_fatal(void) const;

1730 3 out 4 2430 19 NotifyCategory::out 0 2 538 539 0
79
ostream &NotifyCategory::out(NotifySeverity severity, bool prefix = (1)) const;

1731 4 spam 4 2430 20 NotifyCategory::spam 0 2 540 541 255
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::spam
//       Access: Public
//  Description: A shorthand way to write out(NS_spam).
////////////////////////////////////////////////////////////////////
62
inline ostream &NotifyCategory::spam(bool prefix = (1)) const;

1732 5 debug 4 2430 21 NotifyCategory::debug 0 2 542 543 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::debug
//       Access: Public
//  Description: A shorthand way to write out(NS_debug).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::debug(bool prefix = (1)) const;

1733 4 info 4 2430 20 NotifyCategory::info 0 2 544 545 255
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::info
//       Access: Public
//  Description: A shorthand way to write out(NS_info).
////////////////////////////////////////////////////////////////////
62
inline ostream &NotifyCategory::info(bool prefix = (1)) const;

1734 7 warning 4 2430 23 NotifyCategory::warning 0 2 546 547 261
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::warning
//       Access: Public
//  Description: A shorthand way to write out(NS_warning).
////////////////////////////////////////////////////////////////////
65
inline ostream &NotifyCategory::warning(bool prefix = (1)) const;

1735 5 error 4 2430 21 NotifyCategory::error 0 2 548 549 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::error
//       Access: Public
//  Description: A shorthand way to write out(NS_error).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::error(bool prefix = (1)) const;

1736 5 fatal 4 2430 21 NotifyCategory::fatal 0 2 550 551 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::fatal
//       Access: Public
//  Description: A shorthand way to write out(NS_fatal).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::fatal(bool prefix = (1)) const;

1737 16 get_num_children 4 2430 32 NotifyCategory::get_num_children 0 1 552 0
49
int NotifyCategory::get_num_children(void) const;

1738 9 get_child 4 2430 25 NotifyCategory::get_child 0 1 553 0
55
NotifyCategory *NotifyCategory::get_child(int i) const;

1739 16 set_server_delta 4 2430 32 NotifyCategory::set_server_delta 0 1 554 0
61
static void NotifyCategory::set_server_delta(long int delta);

1740 15 ~NotifyCategory 4 2430 31 NotifyCategory::~NotifyCategory 0 0 0
38
NotifyCategory::~NotifyCategory(void);

1741 14 OEncryptStream 4 2432 30 OEncryptStream::OEncryptStream 0 2 559 560 454
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
152
inline OEncryptStream::OEncryptStream(void);
inline OEncryptStream::OEncryptStream(ostream *dest, bool owns_dest, basic_string< char > const &password);

1742 4 open 4 2432 20 OEncryptStream::open 0 1 561 220
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
113
inline OEncryptStream &OEncryptStream::open(ostream *dest, bool owns_dest, basic_string< char > const &password);

1743 5 close 4 2432 21 OEncryptStream::close 0 1 562 344
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
////////////////////////////////////////////////////////////////////
51
inline OEncryptStream &OEncryptStream::close(void);

1744 13 set_algorithm 4 2432 29 OEncryptStream::set_algorithm 0 1 563 722
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_algorithm
//       Access: Published
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to open().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but open() will
//               fail.
////////////////////////////////////////////////////////////////////
81
inline void OEncryptStream::set_algorithm(basic_string< char > const &algorithm);

1745 14 set_key_length 4 2432 30 OEncryptStream::set_key_length 0 1 564 658
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_key_length
//       Access: Published
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               open().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but open() will fail.
////////////////////////////////////////////////////////////////////
59
inline void OEncryptStream::set_key_length(int key_length);

1746 19 set_iteration_count 4 2432 35 OEncryptStream::set_iteration_count 0 1 565 851
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_iteration_count
//       Access: Published
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to open().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               encryption-iteration-count config variable.
////////////////////////////////////////////////////////////////////
69
inline void OEncryptStream::set_iteration_count(int iteration_count);

1747 15 ~OEncryptStream 4 2432 31 OEncryptStream::~OEncryptStream 0 0 0
38
OEncryptStream::~OEncryptStream(void);

1748 11 OFileStream 4 2433 24 OFileStream::OFileStream 0 3 566 567 568 448
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
131
inline OFileStream::OFileStream(void);
inline OFileStream::OFileStream(char const *filename, ios_base::openmode mode = (ios::out));

1749 12 ~OFileStream 4 2433 25 OFileStream::~OFileStream 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline OFileStream::~OFileStream(void);

1750 4 open 4 2433 17 OFileStream::open 0 2 569 570 217
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
90
inline void OFileStream::open(char const *filename, ios_base::openmode mode = (ios::out));

1751 5 close 4 2433 18 OFileStream::close 0 1 571 228
// _WIN32
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline void OFileStream::close(void);

1752 27 upcast_to_StreamWrapperBase 12 2434 43 OStreamWrapper::upcast_to_StreamWrapperBase 0 1 574 47
upcast from OStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *OStreamWrapper::upcast_to_StreamWrapperBase(void);

1753 14 OStreamWrapper 4 2434 30 OStreamWrapper::OStreamWrapper 0 1 572 453
////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline OStreamWrapper::OStreamWrapper(ostream &stream);

1754 15 ~OStreamWrapper 4 2434 31 OStreamWrapper::~OStreamWrapper 0 0 0
38
OStreamWrapper::~OStreamWrapper(void);

1755 11 get_ostream 4 2434 27 OStreamWrapper::get_ostream 0 1 573 271
////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::get_ostream
//       Access: Published
//  Description: Returns the ostream this object is wrapping.
////////////////////////////////////////////////////////////////////
56
inline ostream *OStreamWrapper::get_ostream(void) const;

1756 18 get_version_string 4 2435 31 PandaSystem::get_version_string 0 1 575 0
66
static basic_string< char > PandaSystem::get_version_string(void);

1757 26 get_package_version_string 4 2435 39 PandaSystem::get_package_version_string 0 1 576 0
74
static basic_string< char > PandaSystem::get_package_version_string(void);

1758 20 get_package_host_url 4 2435 33 PandaSystem::get_package_host_url 0 1 577 0
68
static basic_string< char > PandaSystem::get_package_host_url(void);

1759 30 get_p3d_coreapi_version_string 4 2435 43 PandaSystem::get_p3d_coreapi_version_string 0 1 578 0
78
static basic_string< char > PandaSystem::get_p3d_coreapi_version_string(void);

1760 17 get_major_version 4 2435 30 PandaSystem::get_major_version 0 1 579 0
48
static int PandaSystem::get_major_version(void);

1761 17 get_minor_version 4 2435 30 PandaSystem::get_minor_version 0 1 580 0
48
static int PandaSystem::get_minor_version(void);

1762 20 get_sequence_version 4 2435 33 PandaSystem::get_sequence_version 0 1 581 0
51
static int PandaSystem::get_sequence_version(void);

1763 19 is_official_version 4 2435 32 PandaSystem::is_official_version 0 1 582 0
51
static bool PandaSystem::is_official_version(void);

1764 15 get_distributor 4 2435 28 PandaSystem::get_distributor 0 1 583 0
63
static basic_string< char > PandaSystem::get_distributor(void);

1765 12 get_compiler 4 2435 25 PandaSystem::get_compiler 0 1 584 0
60
static basic_string< char > PandaSystem::get_compiler(void);

1766 14 get_build_date 4 2435 27 PandaSystem::get_build_date 0 1 585 0
62
static basic_string< char > PandaSystem::get_build_date(void);

1767 12 get_platform 4 2435 25 PandaSystem::get_platform 0 1 586 0
60
static basic_string< char > PandaSystem::get_platform(void);

1768 10 has_system 4 2435 23 PandaSystem::has_system 0 1 587 0
71
bool PandaSystem::has_system(basic_string< char > const &system) const;

1769 15 get_num_systems 4 2435 28 PandaSystem::get_num_systems 0 1 588 0
45
int PandaSystem::get_num_systems(void) const;

1770 10 get_system 4 2435 23 PandaSystem::get_system 0 1 589 0
58
basic_string< char > PandaSystem::get_system(int n) const;

1771 14 get_system_tag 4 2435 27 PandaSystem::get_system_tag 0 1 590 0
124
basic_string< char > PandaSystem::get_system_tag(basic_string< char > const &system, basic_string< char > const &tag) const;

1772 10 add_system 4 2435 23 PandaSystem::add_system 0 1 591 0
65
void PandaSystem::add_system(basic_string< char > const &system);

1773 14 set_system_tag 4 2435 27 PandaSystem::set_system_tag 0 1 592 0
137
void PandaSystem::set_system_tag(basic_string< char > const &system, basic_string< char > const &tag, basic_string< char > const &value);

1774 9 heap_trim 4 2435 22 PandaSystem::heap_trim 0 1 593 0
46
bool PandaSystem::heap_trim(unsigned int pad);

1775 6 output 4 2435 19 PandaSystem::output 0 1 594 0
45
void PandaSystem::output(ostream &out) const;

1776 5 write 4 2435 18 PandaSystem::write 0 1 595 0
44
void PandaSystem::write(ostream &out) const;

1777 14 get_global_ptr 4 2435 27 PandaSystem::get_global_ptr 0 1 596 0
54
static PandaSystem *PandaSystem::get_global_ptr(void);

1778 14 get_class_type 4 2435 27 PandaSystem::get_class_type 0 1 597 0
52
static TypeHandle PandaSystem::get_class_type(void);

1779 14 PointerToArray 4 2436 39 PointerToArray< float >::PointerToArray 0 4 598 599 600 601 0
282
inline ::PointerToArray< float >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((float const *)(0)))));
inline ::PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
::PointerToArray< float >::PointerToArray(PyObject *self, PyObject *sequence);

1780 11 empty_array 4 2436 36 PointerToArray< float >::empty_array 0 2 602 603 0
160
static inline PointerToArray< float > ::PointerToArray< float >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((float const *)(0)))));

1781 4 size 4 2436 29 PointerToArray< float >::size 0 1 604 0
64
inline unsigned int ::PointerToArray< float >::size(void) const;

1782 9 push_back 4 2436 34 PointerToArray< float >::push_back 0 1 605 0
65
inline void ::PointerToArray< float >::push_back(float const &x);

1783 8 pop_back 4 2436 33 PointerToArray< float >::pop_back 0 1 606 0
54
inline void ::PointerToArray< float >::pop_back(void);

1784 11 get_element 4 2436 36 PointerToArray< float >::get_element 0 1 607 0
81
inline float const &::PointerToArray< float >::get_element(unsigned int n) const;

1785 11 set_element 4 2436 36 PointerToArray< float >::set_element 0 1 608 0
87
inline void ::PointerToArray< float >::set_element(unsigned int n, float const &value);

1786 11 __getitem__ 4 2436 36 PointerToArray< float >::__getitem__ 0 1 609 0
81
inline float const &::PointerToArray< float >::__getitem__(unsigned int n) const;

1787 11 __setitem__ 4 2436 36 PointerToArray< float >::__setitem__ 0 1 610 0
87
inline void ::PointerToArray< float >::__setitem__(unsigned int n, float const &value);

1788 8 get_data 4 2436 33 PointerToArray< float >::get_data 0 1 611 0
76
inline basic_string< char > ::PointerToArray< float >::get_data(void) const;

1789 8 set_data 4 2436 33 PointerToArray< float >::set_data 0 1 612 0
82
inline void ::PointerToArray< float >::set_data(basic_string< char > const &data);

1790 11 get_subdata 4 2436 36 PointerToArray< float >::get_subdata 0 1 613 0
109
inline basic_string< char > ::PointerToArray< float >::get_subdata(unsigned int n, unsigned int count) const;

1791 11 set_subdata 4 2436 36 PointerToArray< float >::set_subdata 0 1 614 0
121
inline void ::PointerToArray< float >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1792 13 get_ref_count 4 2436 38 PointerToArray< float >::get_ref_count 0 1 615 0
64
inline int ::PointerToArray< float >::get_ref_count(void) const;

1793 18 get_node_ref_count 4 2436 43 PointerToArray< float >::get_node_ref_count 0 1 616 0
69
inline int ::PointerToArray< float >::get_node_ref_count(void) const;

1794 15 ~PointerToArray 4 2436 40 PointerToArray< float >::~PointerToArray 0 0 0
49
::PointerToArray< float >::~PointerToArray(void);

1795 14 PointerToArray 4 2437 37 PointerToArray< int >::PointerToArray 0 4 617 618 619 620 0
272
inline ::PointerToArray< int >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((int const *)(0)))));
inline ::PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
::PointerToArray< int >::PointerToArray(PyObject *self, PyObject *sequence);

1796 11 empty_array 4 2437 34 PointerToArray< int >::empty_array 0 2 621 622 0
154
static inline PointerToArray< int > ::PointerToArray< int >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((int const *)(0)))));

1797 4 size 4 2437 27 PointerToArray< int >::size 0 1 623 0
62
inline unsigned int ::PointerToArray< int >::size(void) const;

1798 9 push_back 4 2437 32 PointerToArray< int >::push_back 0 1 624 0
61
inline void ::PointerToArray< int >::push_back(int const &x);

1799 8 pop_back 4 2437 31 PointerToArray< int >::pop_back 0 1 625 0
52
inline void ::PointerToArray< int >::pop_back(void);

1800 11 get_element 4 2437 34 PointerToArray< int >::get_element 0 1 626 0
77
inline int const &::PointerToArray< int >::get_element(unsigned int n) const;

1801 11 set_element 4 2437 34 PointerToArray< int >::set_element 0 1 627 0
83
inline void ::PointerToArray< int >::set_element(unsigned int n, int const &value);

1802 11 __getitem__ 4 2437 34 PointerToArray< int >::__getitem__ 0 1 628 0
77
inline int const &::PointerToArray< int >::__getitem__(unsigned int n) const;

1803 11 __setitem__ 4 2437 34 PointerToArray< int >::__setitem__ 0 1 629 0
83
inline void ::PointerToArray< int >::__setitem__(unsigned int n, int const &value);

1804 8 get_data 4 2437 31 PointerToArray< int >::get_data 0 1 630 0
74
inline basic_string< char > ::PointerToArray< int >::get_data(void) const;

1805 8 set_data 4 2437 31 PointerToArray< int >::set_data 0 1 631 0
80
inline void ::PointerToArray< int >::set_data(basic_string< char > const &data);

1806 11 get_subdata 4 2437 34 PointerToArray< int >::get_subdata 0 1 632 0
107
inline basic_string< char > ::PointerToArray< int >::get_subdata(unsigned int n, unsigned int count) const;

1807 11 set_subdata 4 2437 34 PointerToArray< int >::set_subdata 0 1 633 0
119
inline void ::PointerToArray< int >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1808 13 get_ref_count 4 2437 36 PointerToArray< int >::get_ref_count 0 1 634 0
62
inline int ::PointerToArray< int >::get_ref_count(void) const;

1809 18 get_node_ref_count 4 2437 41 PointerToArray< int >::get_node_ref_count 0 1 635 0
67
inline int ::PointerToArray< int >::get_node_ref_count(void) const;

1810 15 ~PointerToArray 4 2437 38 PointerToArray< int >::~PointerToArray 0 0 0
47
::PointerToArray< int >::~PointerToArray(void);

1811 14 PointerToArray 4 2438 47 PointerToArray< unsigned char >::PointerToArray 0 4 636 637 638 639 0
322
inline ::PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((unsigned char const *)(0)))));
inline ::PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
::PointerToArray< unsigned char >::PointerToArray(PyObject *self, PyObject *sequence);

1812 11 empty_array 4 2438 44 PointerToArray< unsigned char >::empty_array 0 2 640 641 0
184
static inline PointerToArray< unsigned char > ::PointerToArray< unsigned char >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((unsigned char const *)(0)))));

1813 4 size 4 2438 37 PointerToArray< unsigned char >::size 0 1 642 0
72
inline unsigned int ::PointerToArray< unsigned char >::size(void) const;

1814 9 push_back 4 2438 42 PointerToArray< unsigned char >::push_back 0 1 643 0
81
inline void ::PointerToArray< unsigned char >::push_back(unsigned char const &x);

1815 8 pop_back 4 2438 41 PointerToArray< unsigned char >::pop_back 0 1 644 0
62
inline void ::PointerToArray< unsigned char >::pop_back(void);

1816 11 get_element 4 2438 44 PointerToArray< unsigned char >::get_element 0 1 645 0
97
inline unsigned char const &::PointerToArray< unsigned char >::get_element(unsigned int n) const;

1817 11 set_element 4 2438 44 PointerToArray< unsigned char >::set_element 0 1 646 0
103
inline void ::PointerToArray< unsigned char >::set_element(unsigned int n, unsigned char const &value);

1818 11 __getitem__ 4 2438 44 PointerToArray< unsigned char >::__getitem__ 0 1 647 0
97
inline unsigned char const &::PointerToArray< unsigned char >::__getitem__(unsigned int n) const;

1819 11 __setitem__ 4 2438 44 PointerToArray< unsigned char >::__setitem__ 0 1 648 0
103
inline void ::PointerToArray< unsigned char >::__setitem__(unsigned int n, unsigned char const &value);

1820 8 get_data 4 2438 41 PointerToArray< unsigned char >::get_data 0 1 649 0
84
inline basic_string< char > ::PointerToArray< unsigned char >::get_data(void) const;

1821 8 set_data 4 2438 41 PointerToArray< unsigned char >::set_data 0 1 650 0
90
inline void ::PointerToArray< unsigned char >::set_data(basic_string< char > const &data);

1822 11 get_subdata 4 2438 44 PointerToArray< unsigned char >::get_subdata 0 1 651 0
117
inline basic_string< char > ::PointerToArray< unsigned char >::get_subdata(unsigned int n, unsigned int count) const;

1823 11 set_subdata 4 2438 44 PointerToArray< unsigned char >::set_subdata 0 1 652 0
129
inline void ::PointerToArray< unsigned char >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1824 13 get_ref_count 4 2438 46 PointerToArray< unsigned char >::get_ref_count 0 1 653 0
72
inline int ::PointerToArray< unsigned char >::get_ref_count(void) const;

1825 18 get_node_ref_count 4 2438 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 654 0
77
inline int ::PointerToArray< unsigned char >::get_node_ref_count(void) const;

1826 15 ~PointerToArray 4 2438 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
57
::PointerToArray< unsigned char >::~PointerToArray(void);

1827 12 StreamReader 4 2439 26 StreamReader::StreamReader 0 2 655 656 1352
// Filename: streamReader.I
// Created by:  drose (04Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Published
//  Description: If owns_stream is true, the stream pointer will be
//               deleted when the StreamReader destructs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
126
inline StreamReader::StreamReader(istream *in, bool owns_stream);
inline StreamReader::StreamReader(StreamReader const &copy);

1828 10 operator = 4 2439 24 StreamReader::operator = 0 1 657 314
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Assignment Operator
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
63
inline void StreamReader::operator =(StreamReader const &copy);

1829 13 ~StreamReader 4 2439 27 StreamReader::~StreamReader 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline StreamReader::~StreamReader(void);

1830 11 get_istream 4 2439 25 StreamReader::get_istream 0 1 658 251
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_istream
//       Access: Published
//  Description: Returns the stream in use.
////////////////////////////////////////////////////////////////////
54
inline istream *StreamReader::get_istream(void) const;

1831 8 get_bool 4 2439 22 StreamReader::get_bool 0 1 659 247
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_bool
//       Access: Published
//  Description: Extracts a boolean value.
////////////////////////////////////////////////////////////////////
41
inline bool StreamReader::get_bool(void);

1832 8 get_int8 4 2439 22 StreamReader::get_int8 0 1 660 254
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int8
//       Access: Published
//  Description: Extracts a signed 8-bit integer.
////////////////////////////////////////////////////////////////////
48
inline signed char StreamReader::get_int8(void);

1833 9 get_uint8 4 2439 23 StreamReader::get_uint8 0 1 661 258
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint8
//       Access: Published
//  Description: Extracts an unsigned 8-bit integer.
////////////////////////////////////////////////////////////////////
51
inline unsigned char StreamReader::get_uint8(void);

1834 9 get_int16 4 2439 23 StreamReader::get_int16 0 1 662 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int16
//       Access: Published
//  Description: Extracts a signed 16-bit integer.
////////////////////////////////////////////////////////////////////
47
inline short int StreamReader::get_int16(void);

1835 9 get_int32 4 2439 23 StreamReader::get_int32 0 1 663 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int32
//       Access: Published
//  Description: Extracts a signed 32-bit integer.
////////////////////////////////////////////////////////////////////
41
inline int StreamReader::get_int32(void);

1836 9 get_int64 4 2439 23 StreamReader::get_int64 0 1 664 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int64
//       Access: Published
//  Description: Extracts a signed 64-bit integer.
////////////////////////////////////////////////////////////////////
51
inline long long int StreamReader::get_int64(void);

1837 10 get_uint16 4 2439 24 StreamReader::get_uint16 0 1 665 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint16
//       Access: Published
//  Description: Extracts an unsigned 16-bit integer.
////////////////////////////////////////////////////////////////////
57
inline unsigned short int StreamReader::get_uint16(void);

1838 10 get_uint32 4 2439 24 StreamReader::get_uint32 0 1 666 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint32
//       Access: Published
//  Description: Extracts an unsigned 32-bit integer.
////////////////////////////////////////////////////////////////////
51
inline unsigned int StreamReader::get_uint32(void);

1839 10 get_uint64 4 2439 24 StreamReader::get_uint64 0 1 667 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint64
//       Access: Published
//  Description: Extracts an unsigned 64-bit integer.
////////////////////////////////////////////////////////////////////
61
inline unsigned long long int StreamReader::get_uint64(void);

1840 11 get_float32 4 2439 25 StreamReader::get_float32 0 1 668 445
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
////////////////////////////////////////////////////////////////////
45
inline float StreamReader::get_float32(void);

1841 11 get_float64 4 2439 25 StreamReader::get_float64 0 1 669 265
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float64
//       Access: Published
//  Description: Extracts a 64-bit floating-point number.
////////////////////////////////////////////////////////////////////
46
inline double StreamReader::get_float64(void);

1842 12 get_be_int16 4 2439 26 StreamReader::get_be_int16 0 1 670 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int16
//       Access: Published
//  Description: Extracts a signed big-endian 16-bit integer.
////////////////////////////////////////////////////////////////////
50
inline short int StreamReader::get_be_int16(void);

1843 12 get_be_int32 4 2439 26 StreamReader::get_be_int32 0 1 671 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int32
//       Access: Published
//  Description: Extracts a signed big-endian 32-bit integer.
////////////////////////////////////////////////////////////////////
44
inline int StreamReader::get_be_int32(void);

1844 12 get_be_int64 4 2439 26 StreamReader::get_be_int64 0 1 672 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int64
//       Access: Published
//  Description: Extracts a signed big-endian 64-bit integer.
////////////////////////////////////////////////////////////////////
54
inline long long int StreamReader::get_be_int64(void);

1845 13 get_be_uint16 4 2439 27 StreamReader::get_be_uint16 0 1 673 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint16
//       Access: Published
//  Description: Extracts an unsigned big-endian 16-bit integer.
////////////////////////////////////////////////////////////////////
60
inline unsigned short int StreamReader::get_be_uint16(void);

1846 13 get_be_uint32 4 2439 27 StreamReader::get_be_uint32 0 1 674 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint32
//       Access: Published
//  Description: Extracts an unsigned big-endian 32-bit integer.
////////////////////////////////////////////////////////////////////
54
inline unsigned int StreamReader::get_be_uint32(void);

1847 13 get_be_uint64 4 2439 27 StreamReader::get_be_uint64 0 1 675 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint64
//       Access: Published
//  Description: Extracts an unsigned big-endian 64-bit integer.
////////////////////////////////////////////////////////////////////
64
inline unsigned long long int StreamReader::get_be_uint64(void);

1848 14 get_be_float32 4 2439 28 StreamReader::get_be_float32 0 1 676 459
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision big-endian
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
////////////////////////////////////////////////////////////////////
48
inline float StreamReader::get_be_float32(void);

1849 14 get_be_float64 4 2439 28 StreamReader::get_be_float64 0 1 677 279
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float64
//       Access: Published
//  Description: Extracts a 64-bit big-endian floating-point number.
////////////////////////////////////////////////////////////////////
49
inline double StreamReader::get_be_float64(void);

1850 10 get_string 4 2439 24 StreamReader::get_string 0 1 678 0
52
basic_string< char > StreamReader::get_string(void);

1851 12 get_string32 4 2439 26 StreamReader::get_string32 0 1 679 0
54
basic_string< char > StreamReader::get_string32(void);

1852 12 get_z_string 4 2439 26 StreamReader::get_z_string 0 1 680 0
54
basic_string< char > StreamReader::get_z_string(void);

1853 16 get_fixed_string 4 2439 30 StreamReader::get_fixed_string 0 1 681 0
71
basic_string< char > StreamReader::get_fixed_string(unsigned int size);

1854 10 skip_bytes 4 2439 24 StreamReader::skip_bytes 0 1 682 0
49
void StreamReader::skip_bytes(unsigned int size);

1855 13 extract_bytes 4 2439 27 StreamReader::extract_bytes 0 1 683 0
68
basic_string< char > StreamReader::extract_bytes(unsigned int size);

1856 8 readline 4 2439 22 StreamReader::readline 0 1 684 0
50
basic_string< char > StreamReader::readline(void);

1857 24 upcast_to_IStreamWrapper 12 2440 39 StreamWrapper::upcast_to_IStreamWrapper 0 1 687 43
upcast from StreamWrapper to IStreamWrapper
62
IStreamWrapper *StreamWrapper::upcast_to_IStreamWrapper(void);

1858 25 downcast_to_StreamWrapper 12 2426 41 IStreamWrapper::downcast_to_StreamWrapper 0 1 688 45
downcast from IStreamWrapper to StreamWrapper
63
StreamWrapper *IStreamWrapper::downcast_to_StreamWrapper(void);

1859 24 upcast_to_OStreamWrapper 12 2440 39 StreamWrapper::upcast_to_OStreamWrapper 0 1 689 43
upcast from StreamWrapper to OStreamWrapper
62
OStreamWrapper *StreamWrapper::upcast_to_OStreamWrapper(void);

1860 25 downcast_to_StreamWrapper 12 2434 41 OStreamWrapper::downcast_to_StreamWrapper 0 1 690 45
downcast from OStreamWrapper to StreamWrapper
63
StreamWrapper *OStreamWrapper::downcast_to_StreamWrapper(void);

1861 13 StreamWrapper 4 2440 28 StreamWrapper::StreamWrapper 0 1 685 451
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline StreamWrapper::StreamWrapper(iostream &stream);

1862 14 ~StreamWrapper 4 2440 29 StreamWrapper::~StreamWrapper 0 0 0
36
StreamWrapper::~StreamWrapper(void);

1863 12 get_iostream 4 2440 27 StreamWrapper::get_iostream 0 1 686 272
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::get_iostream
//       Access: Published
//  Description: Returns the iostream this object is wrapping.
////////////////////////////////////////////////////////////////////
57
inline iostream *StreamWrapper::get_iostream(void) const;

1864 12 StreamWriter 4 2441 26 StreamWriter::StreamWriter 0 2 691 692 1245
// Filename: streamWriter.I
// Created by:  drose (04Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
127
inline StreamWriter::StreamWriter(ostream *out, bool owns_stream);
inline StreamWriter::StreamWriter(StreamWriter const &copy);

1865 10 operator = 4 2441 24 StreamWriter::operator = 0 1 693 314
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Assignment Operator
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
63
inline void StreamWriter::operator =(StreamWriter const &copy);

1866 13 ~StreamWriter 4 2441 27 StreamWriter::~StreamWriter 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline StreamWriter::~StreamWriter(void);

1867 11 get_ostream 4 2441 25 StreamWriter::get_ostream 0 1 694 251
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::get_ostream
//       Access: Published
//  Description: Returns the stream in use.
////////////////////////////////////////////////////////////////////
54
inline ostream *StreamWriter::get_ostream(void) const;

1868 8 add_bool 4 2441 22 StreamWriter::add_bool 0 1 695 257
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_bool
//       Access: Published
//  Description: Adds a boolean value to the stream.
////////////////////////////////////////////////////////////////////
47
inline void StreamWriter::add_bool(bool value);

1869 8 add_int8 4 2441 22 StreamWriter::add_int8 0 1 696 264
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int8
//       Access: Published
//  Description: Adds a signed 8-bit integer to the stream.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_int8(signed char value);

1870 9 add_uint8 4 2441 23 StreamWriter::add_uint8 0 1 697 268
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint8
//       Access: Published
//  Description: Adds an unsigned 8-bit integer to the stream.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_uint8(unsigned char value);

1871 9 add_int16 4 2441 23 StreamWriter::add_int16 0 1 698 316
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int16
//       Access: Published
//  Description: Adds a signed 16-bit integer to the stream.
////////////////////////////////////////////////////////////////////
53
inline void StreamWriter::add_int16(short int value);

1872 9 add_int32 4 2441 23 StreamWriter::add_int32 0 1 699 316
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int32
//       Access: Published
//  Description: Adds a signed 32-bit integer to the stream.
////////////////////////////////////////////////////////////////////
47
inline void StreamWriter::add_int32(int value);

1873 9 add_int64 4 2441 23 StreamWriter::add_int64 0 1 700 266
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int64
//       Access: Published
//  Description: Adds a signed 64-bit integer to the stream.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_int64(long long int value);

1874 10 add_uint16 4 2441 24 StreamWriter::add_uint16 0 1 701 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit integer to the stream.
////////////////////////////////////////////////////////////////////
63
inline void StreamWriter::add_uint16(unsigned short int value);

1875 10 add_uint32 4 2441 24 StreamWriter::add_uint32 0 1 702 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit integer to the stream.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_uint32(unsigned int value);

1876 10 add_uint64 4 2441 24 StreamWriter::add_uint64 0 1 703 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit integer to the stream.
////////////////////////////////////////////////////////////////////
67
inline void StreamWriter::add_uint64(unsigned long long int value);

1877 11 add_float32 4 2441 25 StreamWriter::add_float32 0 1 704 455
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision floating-point number
//               to the stream.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::add_float32(float value);

1878 11 add_float64 4 2441 25 StreamWriter::add_float64 0 1 705 275
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float64
//       Access: Published
//  Description: Adds a 64-bit floating-point number to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_float64(double value);

1879 12 add_be_int16 4 2441 26 StreamWriter::add_be_int16 0 1 706 372
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int16
//       Access: Published
//  Description: Adds a signed 16-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
56
inline void StreamWriter::add_be_int16(short int value);

1880 12 add_be_int32 4 2441 26 StreamWriter::add_be_int32 0 1 707 372
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int32
//       Access: Published
//  Description: Adds a signed 32-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
50
inline void StreamWriter::add_be_int32(int value);

1881 12 add_be_int64 4 2441 26 StreamWriter::add_be_int64 0 1 708 303
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int64
//       Access: Published
//  Description: Adds a signed 64-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
60
inline void StreamWriter::add_be_int64(long long int value);

1882 13 add_be_uint16 4 2441 27 StreamWriter::add_be_uint16 0 1 709 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
66
inline void StreamWriter::add_be_uint16(unsigned short int value);

1883 13 add_be_uint32 4 2441 27 StreamWriter::add_be_uint32 0 1 710 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
60
inline void StreamWriter::add_be_uint32(unsigned int value);

1884 13 add_be_uint64 4 2441 27 StreamWriter::add_be_uint64 0 1 711 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
70
inline void StreamWriter::add_be_uint64(unsigned long long int value);

1885 14 add_be_float32 4 2441 28 StreamWriter::add_be_float32 0 1 712 469
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the stream.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_be_float32(float value);

1886 14 add_be_float64 4 2441 28 StreamWriter::add_be_float64 0 1 713 312
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float64
//       Access: Published
//  Description: Adds a 64-bit big-endian floating-point number to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
55
inline void StreamWriter::add_be_float64(double value);

1887 10 add_string 4 2441 24 StreamWriter::add_string 0 1 714 334
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string
//       Access: Published
//  Description: Adds a variable-length string to the stream.  This
//               actually adds a count followed by n bytes.
////////////////////////////////////////////////////////////////////
70
inline void StreamWriter::add_string(basic_string< char > const &str);

1888 12 add_string32 4 2441 26 StreamWriter::add_string32 0 1 715 316
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string32
//       Access: Published
//  Description: Adds a variable-length string to the stream, using a
//               32-bit length field.
////////////////////////////////////////////////////////////////////
72
inline void StreamWriter::add_string32(basic_string< char > const &str);

1889 12 add_z_string 4 2441 26 StreamWriter::add_z_string 0 1 716 316
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_z_string
//       Access: Published
//  Description: Adds a variable-length string to the stream, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
65
inline void StreamWriter::add_z_string(basic_string< char > str);

1890 16 add_fixed_string 4 2441 30 StreamWriter::add_fixed_string 0 1 717 517
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_fixed_string
//       Access: Published
//  Description: Adds a fixed-length string to the stream.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
////////////////////////////////////////////////////////////////////
95
inline void StreamWriter::add_fixed_string(basic_string< char > const &str, unsigned int size);

1891 9 pad_bytes 4 2441 23 StreamWriter::pad_bytes 0 1 718 0
48
void StreamWriter::pad_bytes(unsigned int size);

1892 11 append_data 4 2441 25 StreamWriter::append_data 0 1 719 602
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
////////////////////////////////////////////////////////////////////
148
inline void StreamWriter::append_data(void const *data, unsigned int size);
inline void StreamWriter::append_data(basic_string< char > const &data);

1893 5 flush 4 2441 19 StreamWriter::flush 0 1 720 258
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::flush
//       Access: Published
//  Description: Calls flush() on the underlying stream.
////////////////////////////////////////////////////////////////////
38
inline void StreamWriter::flush(void);

1894 5 write 4 2441 19 StreamWriter::write 0 1 721 371
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::write
//       Access: Published
//  Description: A synonym of append_data().  This is useful when
//               assigning the StreamWriter to sys.stderr and/or
//               sys.stdout in Python.
////////////////////////////////////////////////////////////////////
65
inline void StreamWriter::write(basic_string< char > const &str);

1895 10 TypeHandle 4 2442 22 TypeHandle::TypeHandle 0 2 722 723 1252
// Filename: typeHandle.I
// Created by:  drose (22Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
91
inline TypeHandle::TypeHandle(void);
inline TypeHandle::TypeHandle(TypeHandle const &copy);

1896 4 make 4 2442 16 TypeHandle::make 0 1 724 0
54
static PyObject *TypeHandle::make(PyObject *classobj);

1897 11 operator == 4 2442 23 TypeHandle::operator == 0 1 725 244
// HAVE_PYTHON

////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Equality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool TypeHandle::operator ==(TypeHandle const &other) const;

1898 11 operator != 4 2442 23 TypeHandle::operator != 0 1 726 230
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool TypeHandle::operator !=(TypeHandle const &other) const;

1899 10 operator < 4 2442 22 TypeHandle::operator < 0 1 727 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool TypeHandle::operator <(TypeHandle const &other) const;

1900 11 operator <= 4 2442 23 TypeHandle::operator <= 0 1 728 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool TypeHandle::operator <=(TypeHandle const &other) const;

1901 10 operator > 4 2442 22 TypeHandle::operator > 0 1 729 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool TypeHandle::operator >(TypeHandle const &other) const;

1902 11 operator >= 4 2442 23 TypeHandle::operator >= 0 1 730 228
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool TypeHandle::operator >=(TypeHandle const &other) const;

1903 10 compare_to 4 2442 22 TypeHandle::compare_to 0 1 731 463
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::compare_to
//       Access: Published
//  Description: Sorts TypeHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
////////////////////////////////////////////////////////////////////
65
inline int TypeHandle::compare_to(TypeHandle const &other) const;

1904 8 get_hash 4 2442 20 TypeHandle::get_hash 0 1 732 263
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int TypeHandle::get_hash(void) const;

1905 8 get_name 4 2442 20 TypeHandle::get_name 0 2 733 734 484
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_name
//       Access: Published
//  Description: Returns the name of the type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
109
inline basic_string< char > TypeHandle::get_name(TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1906 15 is_derived_from 4 2442 27 TypeHandle::is_derived_from 0 2 735 736 557
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::is_derived_from
//       Access: Published
//  Description: Returns true if this type is derived from the
//               indicated type, false otherwise.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
119
inline bool TypeHandle::is_derived_from(TypeHandle parent, TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1907 22 get_num_parent_classes 4 2442 34 TypeHandle::get_num_parent_classes 0 2 737 738 878
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the number of parent classes that this
//               type is known to have.  This may then be used to
//               index into get_parent_class().  The result will be 0
//               if this class does not inherit from any other
//               classes, 1 if normal, single inheritance is in
//               effect, or greater than one if multiple inheritance
//               is in effect.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
106
inline int TypeHandle::get_num_parent_classes(TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1908 16 get_parent_class 4 2442 28 TypeHandle::get_parent_class 0 1 739 383
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the nth parent class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_parent_classes().
////////////////////////////////////////////////////////////////////
64
inline TypeHandle TypeHandle::get_parent_class(int index) const;

1909 21 get_num_child_classes 4 2442 33 TypeHandle::get_num_child_classes 0 2 740 741 626
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the number of child classes that this
//               type is known to have.  This may then be used to
//               index into get_child_class().
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
105
inline int TypeHandle::get_num_child_classes(TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1910 15 get_child_class 4 2442 27 TypeHandle::get_child_class 0 1 742 380
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the nth child class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_child_classes().
////////////////////////////////////////////////////////////////////
63
inline TypeHandle TypeHandle::get_child_class(int index) const;

1911 18 get_parent_towards 4 2442 30 TypeHandle::get_parent_towards 0 2 743 744 959
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_parent_towards
//       Access: Published
//  Description: Returns the parent class that is in a direct line of
//               inheritance to the indicated ancestor class.  This is
//               useful in the presence of multiple inheritance to try
//               to determine what properties an unknown type may
//               have.
//
//               The return value is TypeHandle::none() if the type
//               does not inherit from the ancestor.  If ancestor is
//               the same as this type, the return value is this type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
130
inline TypeHandle TypeHandle::get_parent_towards(TypeHandle ancestor, TypedObject *object = ((TypedObject *)((void *)(0)))) const;

1912 24 get_best_parent_from_Set 4 2442 36 TypeHandle::get_best_parent_from_Set 0 1 745 274
////////////////////////////////////////////////////////////////////
//     Function: get_best_parent_from_Set
//       Access: Published
//  Description: Return the Index of the BEst fit Classs from a set
////////////////////////////////////////////////////////////////////
84
inline int TypeHandle::get_best_parent_from_Set(set< int > const &legal_vals) const;

1913 16 get_memory_usage 4 2442 28 TypeHandle::get_memory_usage 0 1 746 0
77
int TypeHandle::get_memory_usage(TypeHandle::MemoryClass memory_class) const;

1914 16 inc_memory_usage 4 2442 28 TypeHandle::inc_memory_usage 0 1 747 0
82
void TypeHandle::inc_memory_usage(TypeHandle::MemoryClass memory_class, int size);

1915 16 dec_memory_usage 4 2442 28 TypeHandle::dec_memory_usage 0 1 748 0
82
void TypeHandle::dec_memory_usage(TypeHandle::MemoryClass memory_class, int size);

1916 9 get_index 4 2442 21 TypeHandle::get_index 0 1 749 654
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               TypeHandle. Each different TypeHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               TypeHandles as opaque classes.  This is provided for
//               the convenience of non-C++ scripting languages to
//               build a hashtable of TypeHandles.
////////////////////////////////////////////////////////////////////
45
inline int TypeHandle::get_index(void) const;

1917 6 output 4 2442 18 TypeHandle::output 0 1 750 218
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TypeHandle::output(ostream &out) const;

1918 4 none 4 2442 16 TypeHandle::none 0 1 751 315
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued TypeHandle that is used
//               to indicate no type.
////////////////////////////////////////////////////////////////////
48
static inline TypeHandle TypeHandle::none(void);

1919 11 ~TypeHandle 4 2442 23 TypeHandle::~TypeHandle 0 0 0
30
TypeHandle::~TypeHandle(void);

1920 9 find_type 4 2444 23 TypeRegistry::find_type 0 1 752 0
75
TypeHandle TypeRegistry::find_type(basic_string< char > const &name) const;

1921 15 find_type_by_id 4 2444 29 TypeRegistry::find_type_by_id 0 1 753 0
55
TypeHandle TypeRegistry::find_type_by_id(int id) const;

1922 8 get_name 4 2444 22 TypeRegistry::get_name 0 1 754 0
88
basic_string< char > TypeRegistry::get_name(TypeHandle type, TypedObject *object) const;

1923 15 is_derived_from 4 2444 29 TypeRegistry::is_derived_from 0 1 755 0
97
bool TypeRegistry::is_derived_from(TypeHandle child, TypeHandle base, TypedObject *child_object);

1924 19 get_num_typehandles 4 2444 33 TypeRegistry::get_num_typehandles 0 1 756 0
44
int TypeRegistry::get_num_typehandles(void);

1925 14 get_typehandle 4 2444 28 TypeRegistry::get_typehandle 0 1 757 0
47
TypeHandle TypeRegistry::get_typehandle(int n);

1926 20 get_num_root_classes 4 2444 34 TypeRegistry::get_num_root_classes 0 1 758 0
45
int TypeRegistry::get_num_root_classes(void);

1927 14 get_root_class 4 2444 28 TypeRegistry::get_root_class 0 1 759 0
47
TypeHandle TypeRegistry::get_root_class(int n);

1928 22 get_num_parent_classes 4 2444 36 TypeRegistry::get_num_parent_classes 0 1 760 0
92
int TypeRegistry::get_num_parent_classes(TypeHandle child, TypedObject *child_object) const;

1929 16 get_parent_class 4 2444 30 TypeRegistry::get_parent_class 0 1 761 0
77
TypeHandle TypeRegistry::get_parent_class(TypeHandle child, int index) const;

1930 21 get_num_child_classes 4 2444 35 TypeRegistry::get_num_child_classes 0 1 762 0
91
int TypeRegistry::get_num_child_classes(TypeHandle child, TypedObject *child_object) const;

1931 15 get_child_class 4 2444 29 TypeRegistry::get_child_class 0 1 763 0
76
TypeHandle TypeRegistry::get_child_class(TypeHandle child, int index) const;

1932 18 get_parent_towards 4 2444 32 TypeRegistry::get_parent_towards 0 1 764 0
106
TypeHandle TypeRegistry::get_parent_towards(TypeHandle child, TypeHandle base, TypedObject *child_object);

1933 16 reregister_types 4 2444 30 TypeRegistry::reregister_types 0 1 765 0
49
static void TypeRegistry::reregister_types(void);

1934 5 write 4 2444 19 TypeRegistry::write 0 1 766 0
45
void TypeRegistry::write(ostream &out) const;

1935 3 ptr 4 2444 17 TypeRegistry::ptr 0 1 767 63
// ptr() returns the pointer to the global TypeRegistry object.
45
static TypeRegistry *TypeRegistry::ptr(void);

1936 13 ~TypeRegistry 4 2444 27 TypeRegistry::~TypeRegistry 0 0 0
34
TypeRegistry::~TypeRegistry(void);

1937 20 upcast_to_MemoryBase 12 2445 33 TypedObject::upcast_to_MemoryBase 0 1 773 37
upcast from TypedObject to MemoryBase
52
MemoryBase *TypedObject::upcast_to_MemoryBase(void);

1938 23 downcast_to_TypedObject 12 2402 35 MemoryBase::downcast_to_TypedObject 0 1 774 39
downcast from MemoryBase to TypedObject
55
TypedObject *MemoryBase::downcast_to_TypedObject(void);

1939 12 ~TypedObject 4 2445 25 TypedObject::~TypedObject 0 0 44
// A virtual destructor is just a good idea.
40
virtual TypedObject::~TypedObject(void);

1940 8 get_type 4 2445 21 TypedObject::get_type 0 1 768 79
// Derived classes should override this function to return
// get_class_type().
57
virtual TypeHandle TypedObject::get_type(void) const = 0;

1941 14 get_type_index 4 2445 27 TypedObject::get_type_index 0 1 769 441
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::get_type_index
//       Access: Published
//  Description: Returns the internal index number associated with
//               this object's TypeHandle, a unique number for each
//               different type.  This is equivalent to
//               get_type().get_index().
////////////////////////////////////////////////////////////////////
51
inline int TypedObject::get_type_index(void) const;

1942 10 is_of_type 4 2445 23 TypedObject::is_of_type 0 1 770 313
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_of_type
//       Access: Published
//  Description: Returns true if the current object is or derives from
//               the indicated type.
////////////////////////////////////////////////////////////////////
61
inline bool TypedObject::is_of_type(TypeHandle handle) const;

1943 13 is_exact_type 4 2445 26 TypedObject::is_exact_type 0 1 771 308
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_exact_type
//       Access: Published
//  Description: Returns true if the current object is the indicated
//               type exactly.
////////////////////////////////////////////////////////////////////
64
inline bool TypedObject::is_exact_type(TypeHandle handle) const;

1944 14 get_class_type 4 2445 27 TypedObject::get_class_type 0 1 772 0
52
static TypeHandle TypedObject::get_class_type(void);

1945 7 fstream 4 2446 16 fstream::fstream 0 1 775 0
23
fstream::fstream(void);

1946 5 close 4 2446 14 fstream::close 0 1 776 0
26
void fstream::close(void);

1947 8 ~fstream 4 2446 17 fstream::~fstream 0 0 0
24
fstream::~fstream(void);

1948 8 ifstream 4 2447 18 ifstream::ifstream 0 1 777 0
25
ifstream::ifstream(void);

1949 5 close 4 2447 15 ifstream::close 0 1 778 0
27
void ifstream::close(void);

1950 9 ~ifstream 4 2447 19 ifstream::~ifstream 0 0 0
26
ifstream::~ifstream(void);

1951 8 ofstream 4 2448 18 ofstream::ofstream 0 1 779 0
25
ofstream::ofstream(void);

1952 5 close 4 2448 15 ofstream::close 0 1 780 0
27
void ofstream::close(void);

1953 9 ~ofstream 4 2448 19 ofstream::~ofstream 0 0 0
26
ofstream::~ofstream(void);

1954 11 is_tracking 4 2449 24 MemoryUsage::is_tracking 0 1 781 374
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_tracking
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               tracking memory (e.g. track-memory-usage is
//               configured #t).
////////////////////////////////////////////////////////////////////
50
static inline bool MemoryUsage::is_tracking(void);

1955 11 is_counting 4 2449 24 MemoryUsage::is_counting 0 1 782 413
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_counting
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               at least counting memory (e.g. this is a Windows
//               debug build), even if it's not fully tracking it.
////////////////////////////////////////////////////////////////////
50
static inline bool MemoryUsage::is_counting(void);

1956 20 get_current_cpp_size 4 2449 33 MemoryUsage::get_current_cpp_size 0 1 783 394
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_current_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, not including the memory
//               previously frozen.
////////////////////////////////////////////////////////////////////
67
static inline unsigned int MemoryUsage::get_current_cpp_size(void);

1957 18 get_total_cpp_size 4 2449 31 MemoryUsage::get_total_cpp_size 0 1 784 388
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, including the memory
//               previously frozen.
////////////////////////////////////////////////////////////////////
65
static inline unsigned int MemoryUsage::get_total_cpp_size(void);

1958 26 get_panda_heap_single_size 4 2449 39 MemoryUsage::get_panda_heap_single_size 0 1 785 366
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_single_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for individual objects.
////////////////////////////////////////////////////////////////////
73
static inline unsigned int MemoryUsage::get_panda_heap_single_size(void);

1959 25 get_panda_heap_array_size 4 2449 38 MemoryUsage::get_panda_heap_array_size 0 1 786 353
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_array_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for arrays.
////////////////////////////////////////////////////////////////////
72
static inline unsigned int MemoryUsage::get_panda_heap_array_size(void);

1960 23 get_panda_heap_overhead 4 2449 36 MemoryUsage::get_panda_heap_overhead 0 1 787 465
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_overhead
//       Access: Public, Static
//  Description: Returns the extra bytes allocated from the system
//               that are not immediately used for holding allocated
//               objects.  This can only be determined if
//               ALTERNATIVE_MALLOC is enabled.
////////////////////////////////////////////////////////////////////
70
static inline unsigned int MemoryUsage::get_panda_heap_overhead(void);

1961 19 get_panda_mmap_size 4 2449 32 MemoryUsage::get_panda_mmap_size 0 1 788 350
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_mmap_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               virtual memory pool from code within Panda.
////////////////////////////////////////////////////////////////////
66
static inline unsigned int MemoryUsage::get_panda_mmap_size(void);

1962 17 get_external_size 4 2449 30 MemoryUsage::get_external_size 0 1 789 852
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_external_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               in the heap that Panda didn't seem to be responsible
//               for.  This includes a few bytes for very low-level
//               objects (like ConfigVariables) that cannot use Panda
//               memory tracking because they are so very low-level.
//
//               This also includes all of the memory that might have
//               been allocated by a high-level interpreter, like
//               Python.
//
//               This number is only available if Panda is able to
//               hook into the actual heap callback.
////////////////////////////////////////////////////////////////////
64
static inline unsigned int MemoryUsage::get_external_size(void);

1963 14 get_total_size 4 2449 27 MemoryUsage::get_total_size 0 1 790 348
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_size
//       Access: Public, Static
//  Description: Returns the total size of allocated memory consumed
//               by the process, as nearly as can be determined.
////////////////////////////////////////////////////////////////////
61
static inline unsigned int MemoryUsage::get_total_size(void);

1964 16 get_num_pointers 4 2449 29 MemoryUsage::get_num_pointers 0 1 791 282
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_num_pointers
//       Access: Public, Static
//  Description: Returns the number of pointers currently active.
////////////////////////////////////////////////////////////////////
54
static inline int MemoryUsage::get_num_pointers(void);

1965 12 get_pointers 4 2449 25 MemoryUsage::get_pointers 0 1 792 333
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers currently active.
////////////////////////////////////////////////////////////////////
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

1966 20 get_pointers_of_type 4 2449 33 MemoryUsage::get_pointers_of_type 0 1 793 380
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_type
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers of the indicated type currently
//               active.
////////////////////////////////////////////////////////////////////
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

1967 19 get_pointers_of_age 4 2449 32 MemoryUsage::get_pointers_of_age 0 1 794 416
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_age
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers that were allocated within the range
//               of the indicated number of seconds ago.
////////////////////////////////////////////////////////////////////
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

1968 28 get_pointers_with_zero_count 4 2449 41 MemoryUsage::get_pointers_with_zero_count 0 1 795 1326
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_with_zero_count
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all currently active pointers (that is, pointers
//               allocated since the last call to freeze(), and not
//               yet freed) that have a zero reference count.
//
//               Generally, an undeleted pointer with a zero reference
//               count means its reference count has never been
//               incremented beyond zero (since once it has been
//               incremented, the only way it can return to zero would
//               free the pointer).  This may include objects that are
//               allocated statically or on the stack, which are never
//               intended to be deleted.  Or, it might represent a
//               programmer or compiler error.
//
//               This function has the side-effect of incrementing
//               each of their reference counts by one, thus
//               preventing them from ever being freed--but since they
//               hadn't been freed anyway, probably no additional harm
//               is done.
////////////////////////////////////////////////////////////////////
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

1969 6 freeze 4 2449 19 MemoryUsage::freeze 0 1 796 574
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::freeze
//       Access: Public, Static
//  Description: 'Freezes' all pointers currently stored so that they
//               are no longer reported; only newly allocate pointers
//               from this point on will appear in future information
//               requests.  This makes it easier to differentiate
//               between continuous leaks and one-time memory
//               allocations.
////////////////////////////////////////////////////////////////////
45
static inline void MemoryUsage::freeze(void);

1970 18 show_current_types 4 2449 31 MemoryUsage::show_current_types 0 1 797 312
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               active pointers.
////////////////////////////////////////////////////////////////////
57
static inline void MemoryUsage::show_current_types(void);

1971 16 show_trend_types 4 2449 29 MemoryUsage::show_trend_types 0 1 798 372
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               pointers allocated and freed since the last call to
//               freeze().
////////////////////////////////////////////////////////////////////
55
static inline void MemoryUsage::show_trend_types(void);

1972 17 show_current_ages 4 2449 30 MemoryUsage::show_current_ages 0 1 799 310
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               active pointers.
////////////////////////////////////////////////////////////////////
56
static inline void MemoryUsage::show_current_ages(void);

1973 15 show_trend_ages 4 2449 28 MemoryUsage::show_trend_ages 0 1 800 370
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               pointers allocated and freed since the last call to
//               freeze().
////////////////////////////////////////////////////////////////////
54
static inline void MemoryUsage::show_trend_ages(void);

1974 12 ~MemoryUsage 4 2449 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

1975 18 get_config_express 1 0 18 get_config_express 0 1 1230 142
// Expose the Config variable for Python access.

// Returns the configure object for accessing config variables from a
// scripting language.
34
DConfig &get_config_express(void);

1976 20 upcast_to_MemoryBase 12 2451 36 ReferenceCount::upcast_to_MemoryBase 0 1 807 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

1977 26 downcast_to_ReferenceCount 12 2402 38 MemoryBase::downcast_to_ReferenceCount 0 1 808 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

1978 15 ~ReferenceCount 4 2451 31 ReferenceCount::~ReferenceCount 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
53
virtual inline ReferenceCount::~ReferenceCount(void);

1979 13 get_ref_count 4 2451 29 ReferenceCount::get_ref_count 0 1 801 265
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::get_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
53
inline int ReferenceCount::get_ref_count(void) const;

1980 3 ref 4 2451 19 ReferenceCount::ref 0 1 802 896
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::ref
//       Access: Published
//  Description: Explicitly increments the reference count.  User code
//               should avoid using ref() and unref() directly, which
//               can result in missed reference counts.  Instead, let
//               a PointerTo object manage the reference counting
//               automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
////////////////////////////////////////////////////////////////////
44
inline void ReferenceCount::ref(void) const;

1981 5 unref 4 2451 21 ReferenceCount::unref 0 1 803 1336
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::unref
//       Access: Published, Virtual
//  Description: Explicitly decrements the reference count.  Note that
//               the object will not be implicitly deleted by unref()
//               simply because the reference count drops to zero.
//               (Having a member function delete itself is
//               problematic.) However, see the helper function
//               unref_delete().
//
//               User code should avoid using ref() and unref()
//               directly, which can result in missed reference
//               counts.  Instead, let a PointerTo object manage the
//               reference counting automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
54
virtual inline bool ReferenceCount::unref(void) const;

1982 24 test_ref_count_integrity 4 2451 40 ReferenceCount::test_ref_count_integrity 0 1 804 395
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.  Returns true if ok,
//               false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

1983 22 test_ref_count_nonzero 4 2451 38 ReferenceCount::test_ref_count_nonzero 0 1 805 402
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_nonzero
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't zero, or completely bogus.  Returns true
//               if ok, false otherwise.
////////////////////////////////////////////////////////////////////
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

1984 14 get_class_type 4 2451 30 ReferenceCount::get_class_type 0 1 806 0
55
static TypeHandle ReferenceCount::get_class_type(void);

1985 10 get_length 4 2452 18 Buffer::get_length 0 1 809 695
// Filename: buffer.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Buffer::get_length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline int Buffer::get_length(void) const;

1986 15 compress_string 1 0 15 compress_string 0 1 1231 363
////////////////////////////////////////////////////////////////////
//     Function: compress_string
//       Access: Published
//  Description: Compress the indicated source string at the given
//               compression level (1 through 9).  Returns the
//               compressed string.
////////////////////////////////////////////////////////////////////
96
basic_string< char > compress_string(basic_string< char > const &source, int compression_level);

1987 17 decompress_string 1 0 17 decompress_string 0 1 1232 507
////////////////////////////////////////////////////////////////////
//     Function: decompress_string
//       Access: Published
//  Description: Decompresss the previously-compressed string()).  The
//               return value is the decompressed string.
//
//               Note that a decompression error cannot easily be
//               detected, and the return value may simply be a
//               garbage or truncated string.
////////////////////////////////////////////////////////////////////
75
basic_string< char > decompress_string(basic_string< char > const &source);

1988 13 compress_file 1 0 13 compress_file 0 1 1233 566
////////////////////////////////////////////////////////////////////
//     Function: compress_file
//       Access: Published
//  Description: Compresss the data from the source file at the given
//               compression level (1 through 9).  The source file is
//               read in its entirety, and the compressed results are
//               written to the dest file, overwriting its contents.
//               The return value is bool on success, or false on
//               failure.
////////////////////////////////////////////////////////////////////
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

1989 15 decompress_file 1 0 15 decompress_file 0 1 1234 684
////////////////////////////////////////////////////////////////////
//     Function: decompress_file
//       Access: Published
//  Description: Decompresss the data from the source file.  The
//               source file is read in its entirety, and the
//               decompressed results are written to the dest file,
//               overwriting its contents.  The return value is bool
//               on success, or false on failure.
//
//               Note that a decompression error cannot easily be
//               detected, and the output may simply be a garbage
//               or truncated string.
////////////////////////////////////////////////////////////////////
67
bool decompress_file(Filename const &source, Filename const &dest);

1990 15 compress_stream 1 0 15 compress_stream 0 1 1235 578
////////////////////////////////////////////////////////////////////
//     Function: compress_stream
//       Access: Published
//  Description: Compresss the data from the source stream at the
//               given compression level (1 through 9).  The source
//               stream is read from its current position to the
//               end-of-file, and the compressed results are written
//               to the dest stream.  The return value is bool on
//               success, or false on failure.
////////////////////////////////////////////////////////////////////
76
bool compress_stream(istream &source, ostream &dest, int compression_level);

1991 17 decompress_stream 1 0 17 decompress_stream 0 1 1236 733
////////////////////////////////////////////////////////////////////
//     Function: decompress_stream
//       Access: Published
//  Description: Decompresss the data from the previously-compressed
//               source stream.  The source stream is read from its
//               current position to the end-of-file, and the
//               decompressed results are written to the dest stream.
//               The return value is bool on success, or false on
//               failure.
//
//               Note that a decompression error cannot easily be
//               detected, and the output may simply be a garbage
//               or truncated string.
////////////////////////////////////////////////////////////////////
55
bool decompress_stream(istream &source, ostream &dest);

1992 11 copy_stream 1 0 11 copy_stream 0 1 1237 446
////////////////////////////////////////////////////////////////////
//     Function: copy_stream
//       Access: Published
//  Description: Reads the source stream from its current position to
//               the end of the stream, and writes that data to the
//               dest stream at its current position.  Returns true on
//               success, false on failure.
////////////////////////////////////////////////////////////////////
49
bool copy_stream(istream &source, ostream &dest);

1993 9 add_level 4 2453 36 PStatCollectorForwardBase::add_level 0 1 810 0
68
virtual void PStatCollectorForwardBase::add_level(double level) = 0;

1994 18 get_node_ref_count 4 2454 38 NodeReferenceCount::get_node_ref_count 0 1 811 274
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

1995 8 node_ref 4 2454 28 NodeReferenceCount::node_ref 0 1 812 338
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the node reference count and
//               the normal reference count simultaneously.
////////////////////////////////////////////////////////////////////
53
inline void NodeReferenceCount::node_ref(void) const;

1996 10 node_unref 4 2454 30 NodeReferenceCount::node_unref 0 1 813 462
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
55
inline bool NodeReferenceCount::node_unref(void) const;

1997 24 test_ref_count_integrity 4 2454 44 NodeReferenceCount::test_ref_count_integrity 0 1 814 344
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

1998 14 get_class_type 4 2454 34 NodeReferenceCount::get_class_type 0 1 815 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

1999 8 Datagram 4 2455 18 Datagram::Datagram 0 3 816 817 818 1501
// Filename: datagram.I
// Created by:  drose (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs an empty datagram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline Datagram::Datagram(void);
inline Datagram::Datagram(void const *data, unsigned int size);
inline Datagram::Datagram(basic_string< char > const &data);
inline Datagram::Datagram(Datagram const &copy);

2000 10 operator = 4 2455 20 Datagram::operator = 0 1 819 230
////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void Datagram::operator =(Datagram const &copy);

2001 5 clear 4 2455 15 Datagram::clear 0 1 820 314
////////////////////////////////////////////////////////////////////
//     Function: Datagram::clear
//       Access: Public, Virtual
//  Description: Resets the datagram to empty, in preparation for
//               building up a new datagram.
////////////////////////////////////////////////////////////////////
35
virtual void Datagram::clear(void);

2002 8 dump_hex 4 2455 18 Datagram::dump_hex 0 2 821 822 329
////////////////////////////////////////////////////////////////////
//     Function: Datagram::dump_hex
//       Access: Public
//  Description: Writes a representation of the entire datagram
//               contents, as a sequence of hex (and ASCII) values.
////////////////////////////////////////////////////////////////////
71
void Datagram::dump_hex(ostream &out, unsigned int indent = (0)) const;

2003 8 add_bool 4 2455 18 Datagram::add_bool 0 1 823 252
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_bool
//       Access: Public
//  Description: Adds a boolean value to the datagram.
////////////////////////////////////////////////////////////////////
43
inline void Datagram::add_bool(bool value);

2004 8 add_int8 4 2455 18 Datagram::add_int8 0 1 824 259
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int8
//       Access: Public
//  Description: Adds a signed 8-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_int8(signed char value);

2005 9 add_uint8 4 2455 19 Datagram::add_uint8 0 1 825 263
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint8
//       Access: Public
//  Description: Adds an unsigned 8-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_uint8(unsigned char value);

2006 9 add_int16 4 2455 19 Datagram::add_int16 0 1 826 311
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int16
//       Access: Public
//  Description: Adds a signed 16-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
49
inline void Datagram::add_int16(short int value);

2007 9 add_int32 4 2455 19 Datagram::add_int32 0 1 827 311
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int32
//       Access: Public
//  Description: Adds a signed 32-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
43
inline void Datagram::add_int32(int value);

2008 9 add_int64 4 2455 19 Datagram::add_int64 0 1 828 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int64
//       Access: Public
//  Description: Adds a signed 64-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_int64(long long int value);

2009 10 add_uint16 4 2455 20 Datagram::add_uint16 0 1 829 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
59
inline void Datagram::add_uint16(unsigned short int value);

2010 10 add_uint32 4 2455 20 Datagram::add_uint32 0 1 830 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_uint32(unsigned int value);

2011 10 add_uint64 4 2455 20 Datagram::add_uint64 0 1 831 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
63
inline void Datagram::add_uint64(unsigned long long int value);

2012 11 add_float32 4 2455 21 Datagram::add_float32 0 1 832 450
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision floating-point number
//               to the datagram.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
////////////////////////////////////////////////////////////////////
47
inline void Datagram::add_float32(float value);

2013 11 add_float64 4 2455 21 Datagram::add_float64 0 1 833 270
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float64
//       Access: Public
//  Description: Adds a 64-bit floating-point number to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_float64(double value);

2014 12 add_be_int16 4 2455 22 Datagram::add_be_int16 0 1 834 361
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int16
//       Access: Public
//  Description: Adds a signed 16-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
52
inline void Datagram::add_be_int16(short int value);

2015 12 add_be_int32 4 2455 22 Datagram::add_be_int32 0 1 835 361
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int32
//       Access: Public
//  Description: Adds a signed 32-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
46
inline void Datagram::add_be_int32(int value);

2016 12 add_be_int64 4 2455 22 Datagram::add_be_int64 0 1 836 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int64
//       Access: Public
//  Description: Adds a signed 64-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
56
inline void Datagram::add_be_int64(long long int value);

2017 13 add_be_uint16 4 2455 23 Datagram::add_be_uint16 0 1 837 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
62
inline void Datagram::add_be_uint16(unsigned short int value);

2018 13 add_be_uint32 4 2455 23 Datagram::add_be_uint32 0 1 838 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
56
inline void Datagram::add_be_uint32(unsigned int value);

2019 13 add_be_uint64 4 2455 23 Datagram::add_be_uint64 0 1 839 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
66
inline void Datagram::add_be_uint64(unsigned long long int value);

2020 14 add_be_float32 4 2455 24 Datagram::add_be_float32 0 1 840 464
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the datagram.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_be_float32(float value);

2021 14 add_be_float64 4 2455 24 Datagram::add_be_float64 0 1 841 301
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float64
//       Access: Public
//  Description: Adds a 64-bit big-endian floating-point number to the
//               datagram.
////////////////////////////////////////////////////////////////////
51
inline void Datagram::add_be_float64(double value);

2022 10 add_string 4 2455 20 Datagram::add_string 0 1 842 329
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram.  This
//               actually adds a count followed by n bytes.
////////////////////////////////////////////////////////////////////
66
inline void Datagram::add_string(basic_string< char > const &str);

2023 12 add_string32 4 2455 22 Datagram::add_string32 0 1 843 338
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string32
//       Access: Public
//  Description: Adds a variable-length string to the datagram, using
//               a 32-bit length field to allow very long strings.
////////////////////////////////////////////////////////////////////
68
inline void Datagram::add_string32(basic_string< char > const &str);

2024 12 add_z_string 4 2455 22 Datagram::add_z_string 0 1 844 311
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_z_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
61
inline void Datagram::add_z_string(basic_string< char > str);

2025 16 add_fixed_string 4 2455 26 Datagram::add_fixed_string 0 1 845 512
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_fixed_string
//       Access: Public
//  Description: Adds a fixed-length string to the datagram.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
////////////////////////////////////////////////////////////////////
91
inline void Datagram::add_fixed_string(basic_string< char > const &str, unsigned int size);

2026 11 add_wstring 4 2455 21 Datagram::add_wstring 0 1 846 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_wstring
//       Access: Public
//  Description: Adds a variable-length wstring to the datagram.
////////////////////////////////////////////////////////////////////
63
void Datagram::add_wstring(basic_string< wchar_t > const &str);

2027 9 pad_bytes 4 2455 19 Datagram::pad_bytes 0 1 847 289
////////////////////////////////////////////////////////////////////
//     Function: Datagram::pad_bytes
//       Access: Public
//  Description: Adds the indicated number of zero bytes to the
//               datagram.
////////////////////////////////////////////////////////////////////
44
void Datagram::pad_bytes(unsigned int size);

2028 11 append_data 4 2455 21 Datagram::append_data 0 1 848 580
////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
////////////////////////////////////////////////////////////////////
133
void Datagram::append_data(void const *data, unsigned int size);
inline void Datagram::append_data(basic_string< char > const &data);

2029 6 assign 4 2455 16 Datagram::assign 0 0 0
59
void Datagram::assign(void const *data, unsigned int size);

2030 11 get_message 4 2455 21 Datagram::get_message 0 1 849 258
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_message
//       Access: Public
//  Description: Returns the datagram's data as a string.
////////////////////////////////////////////////////////////////////
62
inline basic_string< char > Datagram::get_message(void) const;

2031 8 get_data 4 2455 18 Datagram::get_data 0 1 850 290
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_data
//       Access: Public
//  Description: Returns a pointer to the beginning of the datagram's
//               data.
////////////////////////////////////////////////////////////////////
50
inline void const *Datagram::get_data(void) const;

2032 10 get_length 4 2455 20 Datagram::get_length 0 1 851 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_length
//       Access: Public
//  Description: Returns the number of bytes in the datagram.
////////////////////////////////////////////////////////////////////
53
inline unsigned int Datagram::get_length(void) const;

2033 9 set_array 4 2455 19 Datagram::set_array 0 1 852 450
////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_array
//       Access: Public
//  Description: Replaces the data in the Datagram with the data in
//               the indicated PTA_uchar.  This is assignment by
//               reference: subsequent changes to the Datagram will
//               also change the source PTA_uchar.
////////////////////////////////////////////////////////////////////
70
inline void Datagram::set_array(PointerToArray< unsigned char > data);

2034 10 copy_array 4 2455 20 Datagram::copy_array 0 1 853 505
////////////////////////////////////////////////////////////////////
//     Function: Datagram::copy_array
//       Access: Public
//  Description: Replaces the data in the Datagram with a copy of the
//               data in the indicated CPTA_uchar.  Unlike
//               set_array(), a complete copy is made of the data;
//               subsequent changes to the Datagram will *not* change
//               the source CPTA_uchar.
////////////////////////////////////////////////////////////////////
76
inline void Datagram::copy_array(ConstPointerToArray< unsigned char > data);

2035 9 get_array 4 2455 19 Datagram::get_array 0 1 854 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_array
//       Access: Public
//  Description: Returns a const pointer to the actual data in
//               the Datagram.
////////////////////////////////////////////////////////////////////
76
inline ConstPointerToArray< unsigned char > Datagram::get_array(void) const;

2036 12 modify_array 4 2455 22 Datagram::modify_array 0 1 855 300
////////////////////////////////////////////////////////////////////
//     Function: Datagram::modify_array
//       Access: Public
//  Description: Returns a modifiable pointer to the actual data in
//               the Datagram.
////////////////////////////////////////////////////////////////////
68
inline PointerToArray< unsigned char > Datagram::modify_array(void);

2037 11 operator == 4 2455 21 Datagram::operator == 0 1 856 217
////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool Datagram::operator ==(Datagram const &other) const;

2038 11 operator != 4 2455 21 Datagram::operator != 0 1 857 217
////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool Datagram::operator !=(Datagram const &other) const;

2039 10 operator < 4 2455 20 Datagram::operator < 0 1 858 216
////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator <
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool Datagram::operator <(Datagram const &other) const;

2040 6 output 4 2455 16 Datagram::output 0 1 859 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
42
void Datagram::output(ostream &out) const;

2041 5 write 4 2455 15 Datagram::write 0 2 860 861 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
68
void Datagram::write(ostream &out, unsigned int indent = (0)) const;

2042 14 get_class_type 4 2455 24 Datagram::get_class_type 0 1 862 0
49
static TypeHandle Datagram::get_class_type(void);

2043 18 ~DatagramGenerator 4 2456 37 DatagramGenerator::~DatagramGenerator 0 0 323
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::Destructor
//       Access: Public, Virtual
//  Description: Does nothing since this is class is just
//               the definition of an interface
////////////////////////////////////////////////////////////////////
52
virtual DatagramGenerator::~DatagramGenerator(void);

2044 12 get_datagram 4 2456 31 DatagramGenerator::get_datagram 0 1 863 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

2045 6 is_eof 4 2456 25 DatagramGenerator::is_eof 0 1 864 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

2046 8 is_error 4 2456 27 DatagramGenerator::is_error 0 1 865 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

2047 8 get_file 4 2456 27 DatagramGenerator::get_file 0 1 866 406
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file
//       Access: Public, Virtual
//  Description: Returns the VirtualFile that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a VirtualFile.
////////////////////////////////////////////////////////////////////
55
virtual VirtualFile *DatagramGenerator::get_file(void);

2048 12 get_file_pos 4 2456 31 DatagramGenerator::get_file_pos 0 1 867 643
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file_pos
//       Access: Public, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramGenerators that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               get_datagram().
////////////////////////////////////////////////////////////////////
50
virtual int DatagramGenerator::get_file_pos(void);

2049 16 DatagramIterator 4 2457 34 DatagramIterator::DatagramIterator 0 4 868 869 870 871 1176
// Filename: datagramIterator.I
// Created by:  drose (08May01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
217
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, unsigned int offset = (0));
inline DatagramIterator::DatagramIterator(DatagramIterator const &copy);

2050 10 operator = 4 2457 28 DatagramIterator::operator = 0 1 872 238
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void DatagramIterator::operator =(DatagramIterator const &copy);

2051 17 ~DatagramIterator 4 2457 35 DatagramIterator::~DatagramIterator 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline DatagramIterator::~DatagramIterator(void);

2052 8 get_bool 4 2457 26 DatagramIterator::get_bool 0 1 873 329
// Various ways to get data and increment the iterator...
// Cut-and-paste-orama
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_bool
//       Access: Public
//  Description: Extracts a boolean value.
////////////////////////////////////////////////////////////////////
45
inline bool DatagramIterator::get_bool(void);

2053 8 get_int8 4 2457 26 DatagramIterator::get_int8 0 1 874 255
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int8
//       Access: Public
//  Description: Extracts a signed 8-bit integer.
////////////////////////////////////////////////////////////////////
52
inline signed char DatagramIterator::get_int8(void);

2054 9 get_uint8 4 2457 27 DatagramIterator::get_uint8 0 1 875 259
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint8
//       Access: Public
//  Description: Extracts an unsigned 8-bit integer.
////////////////////////////////////////////////////////////////////
55
inline unsigned char DatagramIterator::get_uint8(void);

2055 9 get_int16 4 2457 27 DatagramIterator::get_int16 0 1 876 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int16
//       Access: Public
//  Description: Extracts a signed 16-bit integer.
////////////////////////////////////////////////////////////////////
51
inline short int DatagramIterator::get_int16(void);

2056 9 get_int32 4 2457 27 DatagramIterator::get_int32 0 1 877 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int32
//       Access: Public
//  Description: Extracts a signed 32-bit integer.
////////////////////////////////////////////////////////////////////
45
inline int DatagramIterator::get_int32(void);

2057 9 get_int64 4 2457 27 DatagramIterator::get_int64 0 1 878 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int64
//       Access: Public
//  Description: Extracts a signed 64-bit integer.
////////////////////////////////////////////////////////////////////
55
inline long long int DatagramIterator::get_int64(void);

2058 10 get_uint16 4 2457 28 DatagramIterator::get_uint16 0 1 879 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit integer.
////////////////////////////////////////////////////////////////////
61
inline unsigned short int DatagramIterator::get_uint16(void);

2059 10 get_uint32 4 2457 28 DatagramIterator::get_uint32 0 1 880 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit integer.
////////////////////////////////////////////////////////////////////
55
inline unsigned int DatagramIterator::get_uint32(void);

2060 10 get_uint64 4 2457 28 DatagramIterator::get_uint64 0 1 881 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit integer.
////////////////////////////////////////////////////////////////////
65
inline unsigned long long int DatagramIterator::get_uint64(void);

2061 11 get_float32 4 2457 29 DatagramIterator::get_float32 0 1 882 446
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float32
//       Access: Public
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
////////////////////////////////////////////////////////////////////
49
inline float DatagramIterator::get_float32(void);

2062 11 get_float64 4 2457 29 DatagramIterator::get_float64 0 1 883 266
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float64
//       Access: Public
//  Description: Extracts a 64-bit floating-point number.
////////////////////////////////////////////////////////////////////
50
inline double DatagramIterator::get_float64(void);

2063 12 get_be_int16 4 2457 30 DatagramIterator::get_be_int16 0 1 884 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int16
//       Access: Public
//  Description: Extracts a signed 16-bit big-endian integer.
////////////////////////////////////////////////////////////////////
54
inline short int DatagramIterator::get_be_int16(void);

2064 12 get_be_int32 4 2457 30 DatagramIterator::get_be_int32 0 1 885 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int32
//       Access: Public
//  Description: Extracts a signed 32-bit big-endian integer.
////////////////////////////////////////////////////////////////////
48
inline int DatagramIterator::get_be_int32(void);

2065 12 get_be_int64 4 2457 30 DatagramIterator::get_be_int64 0 1 886 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int64
//       Access: Public
//  Description: Extracts a signed 64-bit big-endian integer.
////////////////////////////////////////////////////////////////////
58
inline long long int DatagramIterator::get_be_int64(void);

2066 13 get_be_uint16 4 2457 31 DatagramIterator::get_be_uint16 0 1 887 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit big-endian integer.
////////////////////////////////////////////////////////////////////
64
inline unsigned short int DatagramIterator::get_be_uint16(void);

2067 13 get_be_uint32 4 2457 31 DatagramIterator::get_be_uint32 0 1 888 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit big-endian integer.
////////////////////////////////////////////////////////////////////
58
inline unsigned int DatagramIterator::get_be_uint32(void);

2068 13 get_be_uint64 4 2457 31 DatagramIterator::get_be_uint64 0 1 889 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit big-endian integer.
////////////////////////////////////////////////////////////////////
68
inline unsigned long long int DatagramIterator::get_be_uint64(void);

2069 14 get_be_float32 4 2457 32 DatagramIterator::get_be_float32 0 1 890 460
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float32
//       Access: Public
//  Description: Extracts a 32-bit big-endian single-precision
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
////////////////////////////////////////////////////////////////////
52
inline float DatagramIterator::get_be_float32(void);

2070 14 get_be_float64 4 2457 32 DatagramIterator::get_be_float64 0 1 891 280
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float64
//       Access: Public
//  Description: Extracts a 64-bit big-endian floating-point number.
////////////////////////////////////////////////////////////////////
53
inline double DatagramIterator::get_be_float64(void);

2071 10 get_string 4 2457 28 DatagramIterator::get_string 0 1 892 259
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string
//       Access: Public
//  Description: Extracts a variable-length string.
////////////////////////////////////////////////////////////////////
56
basic_string< char > DatagramIterator::get_string(void);

2072 12 get_string32 4 2457 30 DatagramIterator::get_string32 0 1 893 305
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string32
//       Access: Public
//  Description: Extracts a variable-length string with a 32-bit
//               length field.
////////////////////////////////////////////////////////////////////
58
basic_string< char > DatagramIterator::get_string32(void);

2073 12 get_z_string 4 2457 30 DatagramIterator::get_z_string 0 1 894 307
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_z_string
//       Access: Public
//  Description: Extracts a variable-length string, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
58
basic_string< char > DatagramIterator::get_z_string(void);

2074 16 get_fixed_string 4 2457 34 DatagramIterator::get_fixed_string 0 1 895 379
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_fixed_string
//       Access: Public
//  Description: Extracts a fixed-length string.  However, if a zero
//               byte occurs within the string, it marks the end of
//               the string.
////////////////////////////////////////////////////////////////////
75
basic_string< char > DatagramIterator::get_fixed_string(unsigned int size);

2075 11 get_wstring 4 2457 29 DatagramIterator::get_wstring 0 1 896 307
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_wstring
//       Access: Public
//  Description: Extracts a variable-length wstring (with a 32-bit
//               length field).
////////////////////////////////////////////////////////////////////
60
basic_string< wchar_t > DatagramIterator::get_wstring(void);

2076 10 skip_bytes 4 2457 28 DatagramIterator::skip_bytes 0 1 897 299
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::skip_bytes
//       Access: Public
//  Description: Skips over the indicated number of bytes in the
//               datagram.
////////////////////////////////////////////////////////////////////
60
inline void DatagramIterator::skip_bytes(unsigned int size);

2077 13 extract_bytes 4 2457 31 DatagramIterator::extract_bytes 0 1 898 329
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Public
//  Description: Extracts the indicated number of bytes in the
//               datagram and returns them as a string.
////////////////////////////////////////////////////////////////////
72
basic_string< char > DatagramIterator::extract_bytes(unsigned int size);

2078 19 get_remaining_bytes 4 2457 37 DatagramIterator::get_remaining_bytes 0 1 899 352
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_bytes
//       Access: Public
//  Description: Returns the remaining bytes in the datagram as a
//               string, but does not extract them from the iterator.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > DatagramIterator::get_remaining_bytes(void) const;

2079 18 get_remaining_size 4 2457 36 DatagramIterator::get_remaining_size 0 1 900 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_size
//       Access: Public
//  Description: Return the bytes left in the datagram.
////////////////////////////////////////////////////////////////////
60
inline int DatagramIterator::get_remaining_size(void) const;

2080 12 get_datagram 4 2457 30 DatagramIterator::get_datagram 0 1 901 264
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_datagram
//       Access: Public
//  Description: Return the datagram of this iterator.
////////////////////////////////////////////////////////////////////
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

2081 17 get_current_index 4 2457 35 DatagramIterator::get_current_index 0 1 902 335
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_current_index
//       Access: Public
//  Description: Returns the current position within the datagram of the
//               next piece of data to extract.
////////////////////////////////////////////////////////////////////
68
inline unsigned int DatagramIterator::get_current_index(void) const;

2082 6 output 4 2457 24 DatagramIterator::output 0 1 903 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
50
void DatagramIterator::output(ostream &out) const;

2083 5 write 4 2457 23 DatagramIterator::write 0 2 904 905 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
76
void DatagramIterator::write(ostream &out, unsigned int indent = (0)) const;

2084 13 ~DatagramSink 4 2458 27 DatagramSink::~DatagramSink 0 0 318
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::Destructor
//       Access: Public, Virtual
//  Description: Does nothing since this is class is just
//               the definition of an interface
////////////////////////////////////////////////////////////////////
42
virtual DatagramSink::~DatagramSink(void);

2085 12 put_datagram 4 2458 26 DatagramSink::put_datagram 0 1 906 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

2086 8 is_error 4 2458 22 DatagramSink::is_error 0 1 907 0
46
virtual bool DatagramSink::is_error(void) = 0;

2087 5 flush 4 2458 19 DatagramSink::flush 0 1 908 0
43
virtual void DatagramSink::flush(void) = 0;

2088 14 encrypt_string 1 0 14 encrypt_string 0 4 1238 1239 1240 1241 394
////////////////////////////////////////////////////////////////////
//     Function: encrypt_string
//       Access: Published
//  Description: Encrypts the indicated source string using the given
//               password, and the algorithm specified by
//               encryption-algorithm.  Returns the encrypted string.
////////////////////////////////////////////////////////////////////
215
basic_string< char > encrypt_string(basic_string< char > const &source, basic_string< char > const &password, basic_string< char > const &algorithm = ((string())), int key_length = (-1), int iteration_count = (-1));

2089 14 decrypt_string 1 0 14 decrypt_string 0 1 1242 625
////////////////////////////////////////////////////////////////////
//     Function: decrypt_string
//       Access: Published
//  Description: Decrypts the previously-encrypted string using the
//               given password (which must be the same password
//               passed to encrypt()).  The return value is the
//               decrypted string.
//
//               Note that a decryption error, including an incorrect
//               password, cannot easily be detected, and the return
//               value may simply be a garbage string.
////////////////////////////////////////////////////////////////////
110
basic_string< char > decrypt_string(basic_string< char > const &source, basic_string< char > const &password);

2090 12 encrypt_file 1 0 12 encrypt_file 0 4 1243 1244 1245 1246 527
////////////////////////////////////////////////////////////////////
//     Function: encrypt_file
//       Access: Published
//  Description: Encrypts the data from the source file using the
//               given password.  The source file is read in its
//               entirety, and the encrypted results are written to
//               the dest file, overwriting its contents.  The return
//               value is bool on success, or false on failure.
////////////////////////////////////////////////////////////////////
207
bool encrypt_file(Filename const &source, Filename const &dest, basic_string< char > const &password, basic_string< char > const &algorithm = ((string())), int key_length = (-1), int iteration_count = (-1));

2091 12 decrypt_file 1 0 12 decrypt_file 0 1 1247 792
////////////////////////////////////////////////////////////////////
//     Function: decrypt_file
//       Access: Published
//  Description: Decrypts the data from the source file using the
//               given password (which must match the same password
//               passed to encrypt()).  The source file is read in its
//               entirety, and the decrypted results are written to
//               the dest file, overwriting its contents.  The return
//               value is bool on success, or false on failure.
//
//               Note that a decryption error, including an incorrect
//               password, cannot easily be detected, and the output
//               may simply be a garbage string.
////////////////////////////////////////////////////////////////////
102
bool decrypt_file(Filename const &source, Filename const &dest, basic_string< char > const &password);

2092 14 encrypt_stream 1 0 14 encrypt_stream 0 4 1248 1249 1250 1251 554
////////////////////////////////////////////////////////////////////
//     Function: encrypt_stream
//       Access: Published
//  Description: Encrypts the data from the source stream using the
//               given password.  The source stream is read from its
//               current position to the end-of-file, and the
//               encrypted results are written to the dest stream.
//               The return value is bool on success, or false on
//               failure.
////////////////////////////////////////////////////////////////////
195
bool encrypt_stream(istream &source, ostream &dest, basic_string< char > const &password, basic_string< char > const &algorithm = ((string())), int key_length = (-1), int iteration_count = (-1));

2093 14 decrypt_stream 1 0 14 decrypt_stream 0 1 1252 838
////////////////////////////////////////////////////////////////////
//     Function: decrypt_stream
//       Access: Published
//  Description: Decrypts the data from the previously-encrypted
//               source stream using the given password (which must be
//               the same password passed to encrypt()).  The source
//               stream is read from its current position to the
//               end-of-file, and the decrypted results are written to
//               the dest stream.  The return value is bool on
//               success, or false on failure.
//
//               Note that a decryption error, including an incorrect
//               password, cannot easily be detected, and the output
//               may simply be a garbage string.
////////////////////////////////////////////////////////////////////
90
bool decrypt_stream(istream &source, ostream &dest, basic_string< char > const &password);

2094 13 error_to_text 1 0 13 error_to_text 0 1 1253 185
////////////////////////////////////////////////////////////////////
//     Function: error_to_text
//  Description:
////////////////////////////////////////////////////////////////////
54
basic_string< char > error_to_text(ErrorUtilCode err);

2095 15 get_write_error 1 0 15 get_write_error 0 1 1254 187
////////////////////////////////////////////////////////////////////
//     Function: get_write_error
//  Description:
////////////////////////////////////////////////////////////////////
26
int get_write_error(void);

2096 19 handle_socket_error 1 0 19 handle_socket_error 0 1 1255 191
////////////////////////////////////////////////////////////////////
//     Function: handle_socket_error
//  Description:
////////////////////////////////////////////////////////////////////
47
basic_string< char > handle_socket_error(void);

2097 17 get_network_error 1 0 17 get_network_error 0 1 1256 189
////////////////////////////////////////////////////////////////////
//     Function: get_network_error
//  Description:
////////////////////////////////////////////////////////////////////
28
int get_network_error(void);

2098 11 TextEncoder 4 2460 24 TextEncoder::TextEncoder 0 2 909 910 940
// Filename: textEncoder.I
// Created by:  drose (26Mar03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline TextEncoder::TextEncoder(void);
inline TextEncoder::TextEncoder(TextEncoder const &copy);

2099 12 set_encoding 4 2460 25 TextEncoder::set_encoding 0 1 911 692
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_encoding
//       Access: Published
//  Description: Specifies how the string set via set_text() is to be
//               interpreted.  The default, E_iso8859, means a
//               standard string with one-byte characters
//               (i.e. ASCII).  Other encodings are possible to take
//               advantage of character sets with more than 256
//               characters.
//
//               This affects only future calls to set_text(); it does
//               not change text that was set previously.
////////////////////////////////////////////////////////////////////
70
inline void TextEncoder::set_encoding(TextEncoder::Encoding encoding);

2100 12 get_encoding 4 2460 25 TextEncoder::get_encoding 0 1 912 344
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoding
//       Access: Published
//  Description: Returns the encoding by which the string set via
//               set_text() is to be interpreted.  See set_encoding().
////////////////////////////////////////////////////////////////////
67
inline TextEncoder::Encoding TextEncoder::get_encoding(void) const;

2101 20 set_default_encoding 4 2460 33 TextEncoder::set_default_encoding 0 1 913 387
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
////////////////////////////////////////////////////////////////////
85
static inline void TextEncoder::set_default_encoding(TextEncoder::Encoding encoding);

2102 20 get_default_encoding 4 2460 33 TextEncoder::get_default_encoding 0 1 914 387
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
////////////////////////////////////////////////////////////////////
76
static inline TextEncoder::Encoding TextEncoder::get_default_encoding(void);

2103 8 set_text 4 2460 21 TextEncoder::set_text 0 2 915 916 1135
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: Changes the text that is stored in the encoder.  The
//               text should be encoded according to the method
//               indicated by set_encoding().  Subsequent calls to
//               get_text() will return this same string, while
//               get_wtext() will return the decoded version of the
//               string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
////////////////////////////////////////////////////////////////////
169
inline void TextEncoder::set_text(basic_string< char > const &text);
inline void TextEncoder::set_text(basic_string< char > const &text, TextEncoder::Encoding encoding);

2104 10 clear_text 4 2460 23 TextEncoder::clear_text 0 1 917 261
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::clear_text
//       Access: Published
//  Description: Removes the text from the TextEncoder.
////////////////////////////////////////////////////////////////////
42
inline void TextEncoder::clear_text(void);

2105 8 has_text 4 2460 21 TextEncoder::has_text 0 1 918 220
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::has_text
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool TextEncoder::has_text(void) const;

2106 10 make_upper 4 2460 23 TextEncoder::make_upper 0 1 919 361
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::make_upper
//       Access: Published
//  Description: Adjusts the text stored within the encoder to all
//               uppercase letters (preserving accent marks
//               correctly).
////////////////////////////////////////////////////////////////////
35
void TextEncoder::make_upper(void);

2107 10 make_lower 4 2460 23 TextEncoder::make_lower 0 1 920 361
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::make_lower
//       Access: Published
//  Description: Adjusts the text stored within the encoder to all
//               lowercase letters (preserving accent marks
//               correctly).
////////////////////////////////////////////////////////////////////
35
void TextEncoder::make_lower(void);

2108 8 get_text 4 2460 21 TextEncoder::get_text 0 2 921 922 618
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the current
//               encoding system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the indicated
//               encoding system.
////////////////////////////////////////////////////////////////////
151
inline basic_string< char > TextEncoder::get_text(void) const;
inline basic_string< char > TextEncoder::get_text(TextEncoder::Encoding encoding) const;

2109 11 append_text 4 2460 24 TextEncoder::append_text 0 1 923 300
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
////////////////////////////////////////////////////////////////////
71
inline void TextEncoder::append_text(basic_string< char > const &text);

2110 19 append_unicode_char 4 2460 32 TextEncoder::append_unicode_char 0 1 924 380
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
////////////////////////////////////////////////////////////////////
60
inline void TextEncoder::append_unicode_char(int character);

2111 13 get_num_chars 4 2460 26 TextEncoder::get_num_chars 0 1 925 411
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_num_chars
//       Access: Published
//  Description: Returns the number of characters in the stored text.
//               This is a count of wide characters, after the string
//               has been decoded according to set_encoding().
////////////////////////////////////////////////////////////////////
50
inline int TextEncoder::get_num_chars(void) const;

2112 16 get_unicode_char 4 2460 29 TextEncoder::get_unicode_char 0 1 926 459
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_unicode_char
//       Access: Published
//  Description: Returns the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
////////////////////////////////////////////////////////////////////
58
inline int TextEncoder::get_unicode_char(int index) const;

2113 16 set_unicode_char 4 2460 29 TextEncoder::set_unicode_char 0 1 927 456
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_unicode_char
//       Access: Published
//  Description: Sets the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
////////////////////////////////////////////////////////////////////
68
inline void TextEncoder::set_unicode_char(int index, int character);

2114 16 get_encoded_char 4 2460 29 TextEncoder::get_encoded_char 0 2 928 929 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
////////////////////////////////////////////////////////////////////
183
inline basic_string< char > TextEncoder::get_encoded_char(int index) const;
inline basic_string< char > TextEncoder::get_encoded_char(int index, TextEncoder::Encoding encoding) const;

2115 17 get_text_as_ascii 4 2460 30 TextEncoder::get_text_as_ascii 0 1 930 1136
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain encoded in
//               the encoding specified by set_encoding().
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > TextEncoder::get_text_as_ascii(void) const;

2116 13 reencode_text 4 2460 26 TextEncoder::reencode_text 0 1 931 559
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::reencode_text
//       Access: Published, Static
//  Description: Given the indicated text string, which is assumed to
//               be encoded via the encoding "from", decodes it and
//               then reencodes it into the encoding "to", and returns
//               the newly encoded string.  This does not change or
//               affect any properties on the TextEncoder itself.
////////////////////////////////////////////////////////////////////
150
static inline basic_string< char > TextEncoder::reencode_text(basic_string< char > const &text, TextEncoder::Encoding from, TextEncoder::Encoding to);

2117 15 unicode_isalpha 4 2460 28 TextEncoder::unicode_isalpha 0 1 932 408
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isalpha
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               alphabetic letter, false otherwise.  This is akin to
//               ctype's isalpha(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isalpha(int character);

2118 15 unicode_isdigit 4 2460 28 TextEncoder::unicode_isdigit 0 1 933 403
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isdigit
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               numeric digit, false otherwise.  This is akin to
//               ctype's isdigit(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isdigit(int character);

2119 15 unicode_ispunct 4 2460 28 TextEncoder::unicode_ispunct 0 1 934 406
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_ispunct
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               punctuation mark, false otherwise.  This is akin to
//               ctype's ispunct(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_ispunct(int character);

2120 15 unicode_islower 4 2460 28 TextEncoder::unicode_islower 0 1 935 406
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_islower
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               lowercase letter, false otherwise.  This is akin to
//               ctype's islower(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_islower(int character);

2121 15 unicode_isupper 4 2460 28 TextEncoder::unicode_isupper 0 1 936 407
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isupper
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               uppercase letter, false otherwise.  This is akin to
//               ctype's isupper(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isupper(int character);

2122 15 unicode_isspace 4 2460 28 TextEncoder::unicode_isspace 0 1 937 407
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isspace
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               whitespace letter, false otherwise.  This is akin to
//               ctype's isspace(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isspace(int character);

2123 15 unicode_toupper 4 2460 28 TextEncoder::unicode_toupper 0 1 938 391
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_toupper
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's toupper(),
//               extended to Unicode.
////////////////////////////////////////////////////////////////////
62
static inline int TextEncoder::unicode_toupper(int character);

2124 15 unicode_tolower 4 2460 28 TextEncoder::unicode_tolower 0 1 939 391
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_tolower
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's tolower(),
//               extended to Unicode.
////////////////////////////////////////////////////////////////////
62
static inline int TextEncoder::unicode_tolower(int character);

2125 5 upper 4 2460 18 TextEncoder::upper 0 2 940 941 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the default encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the indicated encoding.
////////////////////////////////////////////////////////////////////
213
static inline basic_string< char > TextEncoder::upper(basic_string< char > const &source);
static inline basic_string< char > TextEncoder::upper(basic_string< char > const &source, TextEncoder::Encoding encoding);

2126 5 lower 4 2460 18 TextEncoder::lower 0 2 942 943 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the default encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the indicated encoding.
////////////////////////////////////////////////////////////////////
213
static inline basic_string< char > TextEncoder::lower(basic_string< char > const &source);
static inline basic_string< char > TextEncoder::lower(basic_string< char > const &source, TextEncoder::Encoding encoding);

2127 9 set_wtext 4 2460 22 TextEncoder::set_wtext 0 1 944 558
// Direct support for wide-character strings.  Now publishable with
// the new wstring support in interrogate.

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_wtext
//       Access: Published
//  Description: Changes the text that is stored in the encoder.
//               Subsequent calls to get_wtext() will return this same
//               string, while get_text() will return the encoded
//               version of the string.
////////////////////////////////////////////////////////////////////
73
inline void TextEncoder::set_wtext(basic_string< wchar_t > const &wtext);

2128 9 get_wtext 4 2460 22 TextEncoder::get_wtext 0 1 945 428
// Direct support for wide-character strings.  Now publishable with
// the new wstring support in interrogate.

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext
//       Access: Published
//  Description: Returns the text associated with the TextEncoder, as
//               a wide-character string.
////////////////////////////////////////////////////////////////////
73
inline basic_string< wchar_t > const &TextEncoder::get_wtext(void) const;

2129 12 append_wtext 4 2460 25 TextEncoder::append_wtext 0 1 946 316
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
////////////////////////////////////////////////////////////////////
75
inline void TextEncoder::append_wtext(basic_string< wchar_t > const &text);

2130 18 get_wtext_as_ascii 4 2460 31 TextEncoder::get_wtext_as_ascii 0 1 947 1108
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain in their
//               original form.
////////////////////////////////////////////////////////////////////
68
basic_string< wchar_t > TextEncoder::get_wtext_as_ascii(void) const;

2131 8 is_wtext 4 2460 21 TextEncoder::is_wtext 0 1 948 466
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::is_wtext
//       Access: Published
//  Description: Returns true if any of the characters in the string
//               returned by get_wtext() are out of the range of an
//               ASCII character (and, therefore, get_wtext() should
//               be called in preference to get_text()).
////////////////////////////////////////////////////////////////////
39
bool TextEncoder::is_wtext(void) const;

2132 12 encode_wchar 4 2460 25 TextEncoder::encode_wchar 0 1 949 374
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wchar
//       Access: Published, Static
//  Description: Encodes a single wide char into a one-, two-, or
//               three-byte string, according to the given encoding
//               system.
////////////////////////////////////////////////////////////////////
98
static basic_string< char > TextEncoder::encode_wchar(wchar_t ch, TextEncoder::Encoding encoding);

2133 12 encode_wtext 4 2460 25 TextEncoder::encode_wtext 0 2 950 951 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published
//  Description: Encodes a wide-text string into a single-char string,
//               according to the current encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published, Static
//  Description: Encodes a wide-text string into a single-char string,
//               according to the given encoding.
////////////////////////////////////////////////////////////////////
223
inline basic_string< char > TextEncoder::encode_wtext(basic_string< wchar_t > const &wtext) const;
static basic_string< char > TextEncoder::encode_wtext(basic_string< wchar_t > const &wtext, TextEncoder::Encoding encoding);

2134 11 decode_text 4 2460 24 TextEncoder::decode_text 0 2 952 953 672
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the current encoding system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published, Static
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the given encoding system.
////////////////////////////////////////////////////////////////////
219
inline basic_string< wchar_t > TextEncoder::decode_text(basic_string< char > const &text) const;
static basic_string< wchar_t > TextEncoder::decode_text(basic_string< char > const &text, TextEncoder::Encoding encoding);

2135 14 get_class_type 4 2460 27 TextEncoder::get_class_type 0 1 954 0
52
static TypeHandle TextEncoder::get_class_type(void);

2136 12 ~TextEncoder 4 2460 25 TextEncoder::~TextEncoder 0 0 0
32
TextEncoder::~TextEncoder(void);

2137 21 upcast_to_TypedObject 12 2462 42 TypedReferenceCount::upcast_to_TypedObject 0 1 956 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

2138 31 downcast_to_TypedReferenceCount 12 2445 44 TypedObject::downcast_to_TypedReferenceCount 0 1 957 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

2139 24 upcast_to_ReferenceCount 12 2462 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 958 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

2140 31 downcast_to_TypedReferenceCount 12 2451 47 ReferenceCount::downcast_to_TypedReferenceCount 0 1 959 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

2141 14 get_class_type 4 2462 35 TypedReferenceCount::get_class_type 0 1 955 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

2142 20 ~TypedReferenceCount 4 2462 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

2143 15 get_file_system 4 2463 28 VirtualFile::get_file_system 0 1 960 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

2144 12 get_filename 4 2463 25 VirtualFile::get_filename 0 1 961 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

2145 21 get_original_filename 4 2463 34 VirtualFile::get_original_filename 0 1 962 418
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_original_filename
//       Access: Published
//  Description: Returns the original filename as it was used to
//               locate this VirtualFile.  This is usually, but not
//               always, the same string returned by get_filename().
////////////////////////////////////////////////////////////////////
70
inline Filename const &VirtualFile::get_original_filename(void) const;

2146 8 has_file 4 2463 21 VirtualFile::has_file 0 1 963 280
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::has_file
//       Access: Published, Virtual
//  Description: Returns true if this file exists, false otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool VirtualFile::has_file(void) const;

2147 12 is_directory 4 2463 25 VirtualFile::is_directory 0 1 964 354
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_directory
//       Access: Published, Virtual
//  Description: Returns true if this file represents a directory (and
//               scan_directory() may be called), false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool VirtualFile::is_directory(void) const;

2148 15 is_regular_file 4 2463 28 VirtualFile::is_regular_file 0 1 965 355
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_regular_file
//       Access: Published, Virtual
//  Description: Returns true if this file represents a regular file
//               (and read_file() may be called), false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool VirtualFile::is_regular_file(void) const;

2149 14 scan_directory 4 2463 27 VirtualFile::scan_directory 0 1 966 522
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
////////////////////////////////////////////////////////////////////
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

2150 6 output 4 2463 19 VirtualFile::output 0 1 967 219
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void VirtualFile::output(ostream &out) const;

2151 2 ls 4 2463 15 VirtualFile::ls 0 2 968 969 287
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls
//       Access: Published
//  Description: If the file represents a directory, lists its
//               contents.
////////////////////////////////////////////////////////////////////
50
void VirtualFile::ls(ostream &out = (cout)) const;

2152 6 ls_all 4 2463 19 VirtualFile::ls_all 0 2 970 971 335
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls_all
//       Access: Published
//  Description: If the file represents a directory, recursively lists
//               its contents and those of all subdirectories.
////////////////////////////////////////////////////////////////////
54
void VirtualFile::ls_all(ostream &out = (cout)) const;

2153 9 read_file 4 2463 22 VirtualFile::read_file 0 1 972 1047
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Returns the entire contents of the file as a string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Fills up the indicated string with the contents of
//               the file, if it is a regular file.  Returns true on
//               success, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public, Virtual
//  Description: Fills up the indicated pvector with the contents of
//               the file, if it is a regular file.  Returns true on
//               success, false otherwise.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > VirtualFile::read_file(bool auto_unwrap) const;

2154 14 open_read_file 4 2463 27 VirtualFile::open_read_file 0 1 973 449
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_file
//       Access: Published, Virtual
//  Description: Opens the file for reading.  Returns a newly
//               allocated istream on success (which you should
//               eventually delete when you are done reading).
//               Returns NULL on failure.
////////////////////////////////////////////////////////////////////
69
virtual istream *VirtualFile::open_read_file(bool auto_unwrap) const;

2155 15 close_read_file 4 2463 28 VirtualFile::close_read_file 0 1 974 516
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_file
//       Access: Public
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
57
void VirtualFile::close_read_file(istream *stream) const;

2156 19 was_read_successful 4 2463 32 VirtualFile::was_read_successful 0 1 975 615
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::was_read_successful
//       Access: Public
//  Description: Call this method after a reading the istream returned
//               by open_read_file() to completion.  If it returns
//               true, the file was read completely and without error;
//               if it returns false, there may have been some errors
//               or a truncated file read.  This is particularly
//               likely if the stream is a VirtualFileHTTP.
////////////////////////////////////////////////////////////////////
58
virtual bool VirtualFile::was_read_successful(void) const;

2157 13 get_file_size 4 2463 26 VirtualFile::get_file_size 0 2 976 977 853
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the already-open file.  Pass in the stream that
//               was returned by open_read_file(); some
//               implementations may require this stream to determine
//               the size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the file before it has been opened.
////////////////////////////////////////////////////////////////////
114
virtual int VirtualFile::get_file_size(istream *stream) const;
virtual int VirtualFile::get_file_size(void) const;

2158 13 get_timestamp 4 2463 26 VirtualFile::get_timestamp 0 1 978 776
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_timestamp
//       Access: Published, Virtual
//  Description: Returns a time_t value that represents the time the
//               file was last modified, to within whatever precision
//               the operating system records this information (on a
//               Windows95 system, for instance, this may only be
//               accurate to within 2 seconds).
//
//               If the timestamp cannot be determined, either because
//               it is not supported by the operating system or
//               because there is some error (such as file not found),
//               returns 0.
////////////////////////////////////////////////////////////////////
60
virtual unsigned int VirtualFile::get_timestamp(void) const;

2159 14 get_class_type 4 2463 27 VirtualFile::get_class_type 0 1 979 0
52
static TypeHandle VirtualFile::get_class_type(void);

2160 12 ~VirtualFile 4 2463 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

2161 14 get_class_type 4 2464 36 VirtualFileComposite::get_class_type 0 1 980 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

2162 21 ~VirtualFileComposite 4 2464 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

2163 15 get_file_system 4 2465 33 VirtualFileMount::get_file_system 0 1 981 304
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_file_system
//       Access: Public
//  Description: Returns the file system this mount object is attached
//               to.
////////////////////////////////////////////////////////////////////
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

2164 15 get_mount_point 4 2465 33 VirtualFileMount::get_mount_point 0 1 982 410
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_point
//       Access: Public
//  Description: Returns the name of the directory within the virtual
//               file system that this mount object is attached to.
//               This directory name will end with a slash.
////////////////////////////////////////////////////////////////////
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

2165 15 get_mount_flags 4 2465 33 VirtualFileMount::get_mount_flags 0 1 983 333
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_flags
//       Access: Public
//  Description: Returns the set of flags passed by the user to the
//               VirtualFileSystem::mount() command.
////////////////////////////////////////////////////////////////////
57
inline int VirtualFileMount::get_mount_flags(void) const;

2166 6 output 4 2465 24 VirtualFileMount::output 0 1 984 230
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::output
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
58
virtual void VirtualFileMount::output(ostream &out) const;

2167 5 write 4 2465 23 VirtualFileMount::write 0 1 985 229
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::write
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
57
virtual void VirtualFileMount::write(ostream &out) const;

2168 14 get_class_type 4 2465 32 VirtualFileMount::get_class_type 0 1 986 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

2169 10 ISubStream 4 2466 22 ISubStream::ISubStream 0 2 987 988 925
// Filename: subStream.I
// Created by:  drose (02Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
139
inline ISubStream::ISubStream(void);
inline ISubStream::ISubStream(IStreamWrapper *source, unsigned long int start, unsigned long int end);

2170 4 open 4 2466 16 ISubStream::open 0 1 989 697
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               source, with the first character being the character
//               at position "start" within the source, for end -
//               start total characters.  The character at "end"
//               within the source will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the ISubStream will
//               continue until the end of the source stream.
////////////////////////////////////////////////////////////////////
108
inline ISubStream &ISubStream::open(IStreamWrapper *source, unsigned long int start, unsigned long int end);

2171 5 close 4 2466 17 ISubStream::close 0 1 990 309
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the source istream.
////////////////////////////////////////////////////////////////////
43
inline ISubStream &ISubStream::close(void);

2172 11 ~ISubStream 4 2466 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

2173 9 Multifile 4 2467 20 Multifile::Multifile 0 1 991 2699
//
// A Multifile consists of the following elements:
//
// (1) A header.  This is always the first n bytes of the Multifile,
// and contains a magic number to identify the file, as well as
// version numbers and any file-specific parameters.
//
//   char[6]    The string Multifile::_header, a magic number.
//   int16      The file's major version number
//   int16      The file's minor version number
//   uint32     Scale factor.  This scales all address references within
//              the file.  Normally 1, this may be set larger to
//              support Multifiles larger than 4GB.
//   uint32     An overall modification timestamp for the entire multifile.
//
// (2) Zero or more index entries, one for each subfile within the
// Multifile.  These entries are of variable length.  The first one of
// these immediately follows the header, and the first word of each
// index entry contains the address of the next index entry.  A zero
// "next" address marks the end of the chain.  These may appear at any
// point within the Multifile; they do not necessarily appear in
// sequential order at the beginning of the file (although they will
// after the file has been "packed").
//
//   uint32     The address of the next entry.  0 to mark the end.
//   uint32     The address of this subfile's data record.
//   uint32     The length in bytes of this subfile's data record.
//   uint16     The Subfile::_flags member.
//  [uint32]    The original, uncompressed and unencrypted length of the
//               subfile, if it is compressed or encrypted.  This field
//               is only present if one or both of the SF_compressed
//               or SF_encrypted bits are set in _flags.
//   uint32     A modification timestamp for the subfile.
//   uint16     The length in bytes of the subfile's name.
//   char[n]    The subfile's name.
//
// (3) Zero or more data entries, one for each subfile.  These may
// appear at any point within the Multifile; they do not necessarily
// follow each index entry, nor are they necessarily all grouped
// together at the end (although they will be all grouped together at
// the end after the file has been "packed").  These are just blocks
// of literal data.
//
////////////////////////////////////////////////////////////////////
//     Function: Multifile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::Copy Constructor
//       Access: Private
//  Description: Don't try to copy Multifiles.
////////////////////////////////////////////////////////////////////
27
Multifile::Multifile(void);

2174 9 open_read 4 2467 20 Multifile::open_read 0 5 992 993 994 995 996 1282
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Published
//  Description: Opens the named Multifile on disk for reading.  The
//               Multifile index is read in, and the list of subfiles
//               becomes available; individual subfiles may then be
//               extracted or read, but the list of subfiles may not
//               be modified.
//
//               Also see the version of open_read() which accepts an
//               istream.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
194
bool Multifile::open_read(Filename const &multifile_name, int const &offset = (0));
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = (0), int const &offset = (0));

2175 10 open_write 4 2467 21 Multifile::open_write 0 3 997 998 999 1366
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Published
//  Description: Opens the named Multifile on disk for writing.  If
//               there already exists a file by that name, it is
//               truncated.  The Multifile is then prepared for
//               accepting a brand new set of subfiles, which will be
//               written to the indicated filename.  Individual
//               subfiles may not be extracted or read.
//
//               Also see the version of open_write() which accepts an
//               ostream.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Public
//  Description: Opens an anonymous Multifile for writing using an
//               ostream.  There must be seek functionality via
//               seekp() and tellp() on the pstream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
139
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(ostream *multifile_stream, bool owns_pointer = (0));

2176 15 open_read_write 4 2467 26 Multifile::open_read_write 0 3 1000 1001 1002 1364
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Published
//  Description: Opens the named Multifile on disk for reading and
//               writing.  If there already exists a file by that
//               name, its index is read.  Subfiles may be added or
//               removed, and the resulting changes will be written to
//               the named file.
//
//               Also see the version of open_read_write() which
//               accepts an iostream.  Returns true on success, false
//               on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Public
//  Description: Opens an anonymous Multifile for reading and writing
//               using an iostream.  There must be seek functionality
//               via seekg()/seekp() and tellg()/tellp() on the
//               iostream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
150
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(iostream *multifile_stream, bool owns_pointer = (0));

2177 5 close 4 2467 16 Multifile::close 0 1 1003 402
////////////////////////////////////////////////////////////////////
//     Function: Multifile::close
//       Access: Published
//  Description: Closes the Multifile if it is open.  All changes are
//               flushed to disk, and the file becomes invalid for
//               further operations until the next call to open().
////////////////////////////////////////////////////////////////////
28
void Multifile::close(void);

2178 18 get_multifile_name 4 2467 29 Multifile::get_multifile_name 0 1 1004 788
// Filename: multifile.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_multifile_name
//       Access: Published
//  Description: Returns the filename of the Multifile, if it is
//               available.
////////////////////////////////////////////////////////////////////
65
inline Filename const &Multifile::get_multifile_name(void) const;

2179 18 set_multifile_name 4 2467 29 Multifile::set_multifile_name 0 1 1005 471
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_multifile_name
//       Access: Published
//  Description: Replaces the filename of the Multifile.  This is
//               primarily used for documentation purposes only;
//               changing this name does not open the indicated file.
//               See open_read() or open_write() for that.
////////////////////////////////////////////////////////////////////
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

2180 13 is_read_valid 4 2467 24 Multifile::is_read_valid 0 1 1006 398
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_read_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               read mode and there have been no errors, and
//               individual Subfile contents may be extracted.
////////////////////////////////////////////////////////////////////
49
inline bool Multifile::is_read_valid(void) const;

2181 14 is_write_valid 4 2467 25 Multifile::is_write_valid 0 1 1007 407
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_write_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               write mode and there have been no errors, and
//               Subfiles may be added or removed from the Multifile.
////////////////////////////////////////////////////////////////////
50
inline bool Multifile::is_write_valid(void) const;

2182 12 needs_repack 4 2467 23 Multifile::needs_repack 0 1 1008 345
////////////////////////////////////////////////////////////////////
//     Function: Multifile::needs_repack
//       Access: Published
//  Description: Returns true if the Multifile index is suboptimal and
//               should be repacked.  Call repack() to achieve this.
////////////////////////////////////////////////////////////////////
48
inline bool Multifile::needs_repack(void) const;

2183 13 get_timestamp 4 2467 24 Multifile::get_timestamp 0 1 1009 588
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_timestamp
//       Access: Published
//  Description: Returns the modification timestamp of the overall
//               Multifile.  This indicates the most recent date at
//               which subfiles were added or removed from the
//               Multifile.  Note that it is logically possible for an
//               individual subfile to have a more recent timestamp
//               than the overall timestamp.
////////////////////////////////////////////////////////////////////
57
inline unsigned int Multifile::get_timestamp(void) const;

2184 20 set_record_timestamp 4 2467 31 Multifile::set_record_timestamp 0 1 1010 900
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_record_timestamp
//       Access: Published
//  Description: Sets the flag indicating whether timestamps should be
//               recorded within the Multifile or not.  The default is
//               true, indicating the Multifile will record timestamps
//               for the overall file and also for each subfile.  
//
//               If this is false, the Multifile will not record
//               timestamps internally.  In this case, the return
//               value from get_timestamp() or get_subfile_timestamp()
//               will be estimations.
//
//               You may want to set this false to minimize the
//               bitwise difference between independently-generated
//               Multifiles.
////////////////////////////////////////////////////////////////////
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

2185 20 get_record_timestamp 4 2467 31 Multifile::get_record_timestamp 0 1 1011 388
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_record_timestamp
//       Access: Published
//  Description: Returns the flag indicating whether timestamps
//               should be recorded within the Multifile or not.  See
//               set_record_timestamp().
////////////////////////////////////////////////////////////////////
56
inline bool Multifile::get_record_timestamp(void) const;

2186 16 set_scale_factor 4 2467 27 Multifile::set_scale_factor 0 1 1012 1220
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_scale_factor
//       Access: Published
//  Description: Changes the internal scale factor for this Multifile.
//
//               This is normally 1, but it may be set to any
//               arbitrary value (greater than zero) to support
//               Multifile archives that exceed 4GB, if necessary.
//               (Individual subfiles may still not exceed 4GB.)
//
//               All addresses within the file are rounded up to the
//               next multiple of _scale_factor, and zeros are written
//               to the file to fill the resulting gaps.  Then the
//               address is divided by _scale_factor and written out
//               as a 32-bit integer.  Thus, setting a scale factor of
//               2 supports up to 8GB files, 3 supports 12GB files,
//               etc.
//
//               Calling this function on an already-existing
//               Multifile will have no immediate effect until a
//               future call to repack() or close() (or until the
//               Multifile is destructed).
////////////////////////////////////////////////////////////////////
60
void Multifile::set_scale_factor(unsigned int scale_factor);

2187 16 get_scale_factor 4 2467 27 Multifile::get_scale_factor 0 1 1013 321
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_scale_factor
//       Access: Published
//  Description: Returns the internal scale factor for this Multifile.
//               See set_scale_factor().
////////////////////////////////////////////////////////////////////
60
inline unsigned int Multifile::get_scale_factor(void) const;

2188 19 set_encryption_flag 4 2467 30 Multifile::set_encryption_flag 0 1 1014 818
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_flag
//       Access: Published
//  Description: Sets the flag indicating whether subsequently-added
//               subfiles should be encrypted before writing them to
//               the multifile.  If true, subfiles will be encrypted;
//               if false (the default), they will be written without
//               encryption.
//
//               When true, subfiles will be encrypted with the
//               password specified by set_encryption_password().  It
//               is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.
////////////////////////////////////////////////////////////////////
54
inline void Multifile::set_encryption_flag(bool flag);

2189 19 get_encryption_flag 4 2467 30 Multifile::get_encryption_flag 0 1 1015 430
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_flag
//       Access: Published
//  Description: Returns the flag indicating whether
//               subsequently-added subfiles should be encrypted
//               before writing them to the multifile.  See
//               set_encryption_flag().
////////////////////////////////////////////////////////////////////
55
inline bool Multifile::get_encryption_flag(void) const;

2190 23 set_encryption_password 4 2467 34 Multifile::set_encryption_password 0 1 1016 696
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_password
//       Access: Published
//  Description: Specifies the password that will be used to encrypt
//               subfiles subsequently added to the multifile, if the
//               encryption flag is also set true (see
//               set_encryption_flag()).
//
//               It is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.  Changing this value may cause an
//               implicit call to flush().
////////////////////////////////////////////////////////////////////
96
inline void Multifile::set_encryption_password(basic_string< char > const &encryption_password);

2191 23 get_encryption_password 4 2467 34 Multifile::get_encryption_password 0 1 1017 395
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_password
//       Access: Published
//  Description: Returns the password that will be used to encrypt
//               subfiles subsequently added to the multifile.  See
//               set_encryption_password().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &Multifile::get_encryption_password(void) const;

2192 24 set_encryption_algorithm 4 2467 35 Multifile::set_encryption_algorithm 0 1 1018 1073
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_algorithm
//       Access: Public
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to add_subfile().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but flush() will fail
//               and the file will be invalid.
//
//               It is possible to apply a different encryption
//               algorithm to different files, and unlike the
//               password, this does not interfere with mounting the
//               multifile via VFS.  Changing this value may cause an
//               implicit call to flush().
////////////////////////////////////////////////////////////////////
98
inline void Multifile::set_encryption_algorithm(basic_string< char > const &encryption_algorithm);

2193 24 get_encryption_algorithm 4 2467 35 Multifile::get_encryption_algorithm 0 1 1019 331
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_algorithm
//       Access: Public
//  Description: Returns the encryption algorithm that was specified
//               by set_encryption_algorithm().
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > const &Multifile::get_encryption_algorithm(void) const;

2194 25 set_encryption_key_length 4 2467 36 Multifile::set_encryption_key_length 0 1 1020 998
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_key_length
//       Access: Public
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               add_subfile().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but flush() will fail and the file will be invalid.
//
//               It is possible to apply a different key length to
//               different files, and unlike the password, this does
//               not interfere with mounting the multifile via VFS.
//               Changing this value may cause an implicit call to
//               flush().
////////////////////////////////////////////////////////////////////
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

2195 25 get_encryption_key_length 4 2467 36 Multifile::get_encryption_key_length 0 1 1021 344
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_key_length
//       Access: Public
//  Description: Returns the encryption key length, in bits, that was
//               specified by set_encryption_key_length().
////////////////////////////////////////////////////////////////////
60
inline int Multifile::get_encryption_key_length(void) const;

2196 30 set_encryption_iteration_count 4 2467 41 Multifile::set_encryption_iteration_count 0 1 1022 1174
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_iteration_count
//       Access: Public
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to add_subfile().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               multifile-encryption-iteration-count config variable.
//
//               It is possible to apply a different iteration count
//               to different files, and unlike the password, this
//               does not interfere with mounting the multifile via
//               VFS.  Changing this value causes an implicit call to
//               flush().
////////////////////////////////////////////////////////////////////
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

2197 30 get_encryption_iteration_count 4 2467 41 Multifile::get_encryption_iteration_count 0 1 1023 328
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_iteration_count
//       Access: Public
//  Description: Returns the value that was specified by
//               set_encryption_iteration_count().
////////////////////////////////////////////////////////////////////
65
inline int Multifile::get_encryption_iteration_count(void) const;

2198 11 add_subfile 4 2467 22 Multifile::add_subfile 0 2 1024 1025 1865
////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Published
//  Description: Adds a file on disk as a subfile to the Multifile.
//               The file named by filename will be read and added to
//               the Multifile at the next call to flush().  If there
//               already exists a subfile with the indicated name, it
//               is replaced without examining its contents (but see
//               also update_subfile).
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Public
//  Description: Adds a file from a stream as a subfile to the Multifile.
//               The indicated istream will be read and its contents
//               added to the Multifile at the next call to flush().
//
//               Note that the istream must remain untouched and
//               unused by any other code until flush() is called.  At
//               that time, the Multifile will read the entire
//               contents of the istream from the current file
//               position to the end of the file.  Subsequently, the
//               Multifile will *not* close or delete the istream.  It
//               is the caller's responsibility to ensure that the
//               istream pointer does not destruct during the lifetime
//               of the Multifile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
////////////////////////////////////////////////////////////////////
268
basic_string< char > Multifile::add_subfile(basic_string< char > const &subfile_name, Filename const &filename, int compression_level);
basic_string< char > Multifile::add_subfile(basic_string< char > const &subfile_name, istream *subfile_data, int compression_level);

2199 14 update_subfile 4 2467 25 Multifile::update_subfile 0 1 1026 523
////////////////////////////////////////////////////////////////////
//     Function: Multifile::update_subfile
//       Access: Published
//  Description: Adds a file on disk to the subfile.  If a subfile
//               already exists with the same name, its contents are
//               compared byte-for-byte to the disk file, and it is
//               replaced only if it is different; otherwise, the
//               multifile is left unchanged.
////////////////////////////////////////////////////////////////////
138
basic_string< char > Multifile::update_subfile(basic_string< char > const &subfile_name, Filename const &filename, int compression_level);

2200 11 ~CertRecord 4 2468 34 Multifile::CertRecord::~CertRecord 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: Multifile::CertRecord::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
48
inline Multifile::CertRecord::~CertRecord(void);

2201 13 add_signature 4 2467 24 Multifile::add_signature 0 5 1027 1028 1029 1030 1031 5970
////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The chain filename may be empty if the certificate
//               does not require an authenticating certificate chain
//               (e.g. because it is self-signed).
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
//
//               This flavor of add_signature() reads the certificate
//               and private key from a PEM-formatted file, for
//               instance as generated by the openssl command.  If the
//               private key file is password-encrypted, the third
//               parameter will be used as the password to decrypt it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               This flavor of add_signature() reads the certificate,
//               private key, and certificate chain from the same
//               PEM-formatted file.  It takes the first private key
//               found as the intended key, and then uses the first
//               certificate found that matches that key as the
//               signing certificate.  Any other certificates in the
//               file are taken to be part of the chain.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               If chain is non-NULL, it represents the certificate
//               chain that validates the certificate.
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The signature certificate is the first certificate on
//               the CertChain object.  Any remaining certificates are
//               support certificates to authenticate the first one.
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
427
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, basic_string< char > const &password = (""));
bool Multifile::add_signature(Filename const &composite, basic_string< char > const &password = (""));
bool Multifile::add_signature(X509 *certificate, unknown *chain, EVP_PKEY *pkey);
bool Multifile::add_signature(vector< Multifile::CertRecord > const &chain, EVP_PKEY *pkey);

2202 18 get_num_signatures 4 2467 29 Multifile::get_num_signatures 0 1 1032 921
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_signatures
//       Access: Published
//  Description: Returns the number of matching signatures found on
//               the Multifile.  These signatures may be iterated via
//               get_signature() and related methods.
//
//               A signature on this list is guaranteed to match the
//               Multifile contents, proving that the Multifile has
//               been unmodified since the signature was applied.
//               However, this does not guarantee that the certificate
//               itself is actually from who it says it is from; only
//               that it matches the Multifile contents.  See
//               validate_signature_certificate() to authenticate a
//               particular certificate.
////////////////////////////////////////////////////////////////////
46
int Multifile::get_num_signatures(void) const;

2203 13 get_signature 4 2467 24 Multifile::get_signature 0 1 1033 332
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature
//       Access: Published
//  Description: Returns the nth signature found on the Multifile.
//               See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
77
vector< Multifile::CertRecord > const &Multifile::get_signature(int n) const;

2204 26 get_signature_subject_name 4 2467 37 Multifile::get_signature_subject_name 0 1 1034 669
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_subject_name
//       Access: Published
//  Description: Returns the "subject name" for the nth signature found
//               on the Multifile.  This is a string formatted
//               according to RFC2253 that should more-or-less
//               identify a particular certificate; when paired with
//               the public key (see get_signature_public_key()), it
//               can uniquely identify a certificate.  See the
//               comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
72
basic_string< char > Multifile::get_signature_subject_name(int n) const;

2205 27 get_signature_friendly_name 4 2467 38 Multifile::get_signature_friendly_name 0 1 1035 598
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_friendly_name
//       Access: Published
//  Description: Returns a "friendly name" for the nth signature found
//               on the Multifile.  This attempts to extract out the
//               most meaningful part of the subject name.  It returns
//               the emailAddress, if it is defined; otherwise, it
//               returns the commonName.
//               See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
73
basic_string< char > Multifile::get_signature_friendly_name(int n) const;

2206 24 get_signature_public_key 4 2467 35 Multifile::get_signature_public_key 0 1 1036 691
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_public_key
//       Access: Published
//  Description: Returns the public key used for the nth signature
//               found on the Multifile.  This is encoded in DER form
//               and returned as a string of hex digits.
//
//               This can be used, in conjunction with the subject
//               name (see get_signature_subject_name()), to uniquely
//               identify a particular certificate and its subsequent
//               reissues.  See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
70
basic_string< char > Multifile::get_signature_public_key(int n) const;

2207 27 write_signature_certificate 4 2467 38 Multifile::write_signature_certificate 0 1 1037 402
////////////////////////////////////////////////////////////////////
//     Function: Multifile::write_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               verbose form, to the indicated stream.  See the
//               comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
71
void Multifile::write_signature_certificate(int n, ostream &out) const;

2208 30 validate_signature_certificate 4 2467 41 Multifile::validate_signature_certificate 0 1 1038 595
////////////////////////////////////////////////////////////////////
//     Function: Multifile::validate_signature_certificate
//       Access: Published
//  Description: Checks that the certificate used for the nth
//               signature is a valid, authorized certificate with
//               some known certificate authority.  Returns 0 if it
//               is valid, -1 if there is some error, or the
//               corresponding OpenSSL error code if it is invalid,
//               out-of-date, or self-signed.
////////////////////////////////////////////////////////////////////
59
int Multifile::validate_signature_certificate(int n) const;

2209 5 flush 4 2467 16 Multifile::flush 0 1 1039 1123
// HAVE_OPENSSL

// HAVE_OPENSSL
////////////////////////////////////////////////////////////////////
//     Function: Multifile::flush
//       Access: Published
//  Description: Writes all contents of the Multifile to disk.  Until
//               flush() is called, add_subfile() and remove_subfile()
//               do not actually do anything to disk.  At this point,
//               all of the recently-added subfiles are read and their
//               contents are added to the end of the Multifile, and
//               the recently-removed subfiles are marked gone from
//               the Multifile.
//
//               This may result in a suboptimal index.  To guarantee
//               that the index is written at the beginning of the
//               file, call repack() instead of flush().
//
//               It is not necessary to call flush() explicitly unless
//               you are concerned about reading the recently-added
//               subfiles immediately.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
28
bool Multifile::flush(void);

2210 6 repack 4 2467 17 Multifile::repack 0 1 1040 959
////////////////////////////////////////////////////////////////////
//     Function: Multifile::repack
//       Access: Published
//  Description: Forces a complete rewrite of the Multifile and all of
//               its contents, so that its index will appear at the
//               beginning of the file with all of the subfiles listed
//               in alphabetical order.  This is considered optimal
//               for reading, and is the standard configuration; but
//               it is not essential to do this.
//
//               It is only valid to call this if the Multifile was
//               opened using open_read_write() and an explicit
//               filename, rather than an iostream.  Also, we must
//               have write permission to the directory containing the
//               Multifile.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
29
bool Multifile::repack(void);

2211 16 get_num_subfiles 4 2467 27 Multifile::get_num_subfiles 0 1 1041 412
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_subfiles
//       Access: Published
//  Description: Returns the number of subfiles within the Multifile.
//               The subfiles may be accessed in alphabetical order by
//               iterating through [0 .. get_num_subfiles()).
////////////////////////////////////////////////////////////////////
44
int Multifile::get_num_subfiles(void) const;

2212 12 find_subfile 4 2467 23 Multifile::find_subfile 0 1 1042 370
////////////////////////////////////////////////////////////////////
//     Function: Multifile::find_subfile
//       Access: Published
//  Description: Returns the index of the subfile with the indicated
//               name, or -1 if the named subfile is not within the
//               Multifile.
////////////////////////////////////////////////////////////////////
76
int Multifile::find_subfile(basic_string< char > const &subfile_name) const;

2213 13 has_directory 4 2467 24 Multifile::has_directory 0 1 1043 461
////////////////////////////////////////////////////////////////////
//     Function: Multifile::has_directory
//       Access: Published
//  Description: Returns true if the indicated subfile name is the
//               directory prefix to one or more files within the
//               Multifile.  That is, the Multifile contains at least
//               one file named "subfile_name/...".
////////////////////////////////////////////////////////////////////
78
bool Multifile::has_directory(basic_string< char > const &subfile_name) const;

2214 14 scan_directory 4 2467 25 Multifile::scan_directory 0 1 1044 755
////////////////////////////////////////////////////////////////////
//     Function: Multifile::scan_directory
//       Access: Published
//  Description: Considers subfile_name to be the name of a
//               subdirectory within the Multifile, but not a file
//               itself; fills the given vector up with the sorted list
//               of subdirectories or files within the named
//               directory.
//
//               Note that directories do not exist explicitly within
//               a Multifile; this just checks for the existence of
//               files with the given initial prefix.
//
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
121
bool Multifile::scan_directory(vector< basic_string< char > > &contents, basic_string< char > const &subfile_name) const;

2215 14 remove_subfile 4 2467 25 Multifile::remove_subfile 0 2 1045 1046 1596
////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the named subfile from the Multifile, if it
//               exists; returns true if successfully removed, or
//               false if it did not exist in the first place.  The
//               file will not actually be removed from the disk until
//               the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the nth subfile from the Multifile.  This
//               will cause all subsequent index numbers to decrease
//               by one.  The file will not actually be removed from
//               the disk until the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
////////////////////////////////////////////////////////////////////
123
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(basic_string< char > const &subfile_name);

2216 16 get_subfile_name 4 2467 27 Multifile::get_subfile_name 0 1 1047 263
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_name
//       Access: Published
//  Description: Returns the name of the nth subfile.
////////////////////////////////////////////////////////////////////
73
basic_string< char > const &Multifile::get_subfile_name(int index) const;

2217 18 get_subfile_length 4 2467 29 Multifile::get_subfile_length 0 1 1048 433
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_length
//       Access: Published
//  Description: Returns the uncompressed data length of the nth
//               subfile.  This might return 0 if the subfile has
//               recently been added and flush() has not yet been
//               called.
////////////////////////////////////////////////////////////////////
60
unsigned int Multifile::get_subfile_length(int index) const;

2218 21 get_subfile_timestamp 4 2467 32 Multifile::get_subfile_timestamp 0 1 1049 567
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_timestamp
//       Access: Published
//  Description: Returns the modification time of the nth
//               subfile.  If this is called on an older .mf file,
//               which did not store individual timestamps in the file
//               (or if get_record_timestamp() is false), this will
//               return the modification time of the overall
//               multifile.
////////////////////////////////////////////////////////////////////
63
unsigned int Multifile::get_subfile_timestamp(int index) const;

2219 21 is_subfile_compressed 4 2467 32 Multifile::is_subfile_compressed 0 1 1050 372
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_compressed
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               compressed when stored within the archive, false
//               otherwise.
////////////////////////////////////////////////////////////////////
55
bool Multifile::is_subfile_compressed(int index) const;

2220 20 is_subfile_encrypted 4 2467 31 Multifile::is_subfile_encrypted 0 1 1051 370
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_encrypted
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               encrypted when stored within the archive, false
//               otherwise.
////////////////////////////////////////////////////////////////////
54
bool Multifile::is_subfile_encrypted(int index) const;

2221 13 get_index_end 4 2467 24 Multifile::get_index_end 0 1 1052 688
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_index_end
//       Access: Published
//  Description: Returns the first byte that is guaranteed to follow
//               any index byte already written to disk in the
//               Multifile.
//
//               This number is largely meaningless in many cases, but
//               if needs_repack() is false, and the file is flushed,
//               this will indicate the number of bytes in the header
//               + index.  Everything at this byte position and later
//               will be actual data.
////////////////////////////////////////////////////////////////////
41
int Multifile::get_index_end(void) const;

2222 26 get_subfile_internal_start 4 2467 37 Multifile::get_subfile_internal_start 0 1 1053 653
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_start
//       Access: Published
//  Description: Returns the starting byte position within the
//               Multifile at which the indicated subfile begins.
//               This may be used, with get_subfile_internal_length(),
//               for low-level access to the subfile, but usually it
//               is better to use open_read_subfile() instead (which
//               automatically decrypts and/or uncompresses the
//               subfile data).
////////////////////////////////////////////////////////////////////
59
int Multifile::get_subfile_internal_start(int index) const;

2223 27 get_subfile_internal_length 4 2467 38 Multifile::get_subfile_internal_length 0 1 1054 639
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_length
//       Access: Published
//  Description: Returns the number of bytes the indicated subfile
//               consumes within the archive.  For compressed
//               subfiles, this will generally be smaller than
//               get_subfile_length(); for encrypted (but
//               noncompressed) subfiles, it may be slightly
//               different, for noncompressed and nonencrypted
//               subfiles, it will be equal.
////////////////////////////////////////////////////////////////////
69
unsigned int Multifile::get_subfile_internal_length(int index) const;

2224 12 read_subfile 4 2467 23 Multifile::read_subfile 0 1 1055 925
////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Published
//  Description: Returns a string that contains the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Public
//  Description: Fills a string with the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Public
//  Description: Fills a pvector with the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > Multifile::read_subfile(int index);

2225 17 open_read_subfile 4 2467 28 Multifile::open_read_subfile 0 1 1056 1636
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Published
//  Description: Returns an istream that may be used to read the
//               indicated subfile.  You may seek() within this
//               istream to your heart's content; even though it will
//               be a reference to the already-opened pfstream of the
//               Multifile itself, byte 0 appears to be the beginning
//               of the subfile and EOF appears to be the end of the
//               subfile.
//
//               The returned istream will have been allocated via
//               new; you should pass the pointer to
//               close_read_subfile() when you are finished with it to
//               delete it and release its resources.
//
//               Any future calls to repack() or close() (or the
//               Multifile destructor) will invalidate all currently
//               open subfile pointers.
//
//               The return value will be NULL if the stream cannot be
//               opened for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Private
//  Description: This variant of open_read_subfile() is used
//               internally only, and accepts a pointer to the
//               internal Subfile object, which is assumed to be valid
//               and written to the multifile.
////////////////////////////////////////////////////////////////////
49
istream *Multifile::open_read_subfile(int index);

2226 18 close_read_subfile 4 2467 29 Multifile::close_read_subfile 0 1 1057 531
////////////////////////////////////////////////////////////////////
//     Function: Multifile::close_read_subfile
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_subfile().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
59
static void Multifile::close_read_subfile(istream *stream);

2227 15 extract_subfile 4 2467 26 Multifile::extract_subfile 0 1 1058 300
////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile
//       Access: Published
//  Description: Extracts the nth subfile into a file with the given
//               name.
////////////////////////////////////////////////////////////////////
69
bool Multifile::extract_subfile(int index, Filename const &filename);

2228 18 extract_subfile_to 4 2467 29 Multifile::extract_subfile_to 0 1 1059 276
////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile_to
//       Access: Public
//  Description: Extracts the nth subfile to the indicated ostream.
////////////////////////////////////////////////////////////////////
60
bool Multifile::extract_subfile_to(int index, ostream &out);

2229 15 compare_subfile 4 2467 26 Multifile::compare_subfile 0 1 1060 464
////////////////////////////////////////////////////////////////////
//     Function: Multifile::compare_subfile
//       Access: Published
//  Description: Performs a byte-for-byte comparison of the indicated
//               file on disk with the nth subfile.  Returns true if
//               the files are equivalent, or false if they are
//               different (or the file is missing).
////////////////////////////////////////////////////////////////////
69
bool Multifile::compare_subfile(int index, Filename const &filename);

2230 6 output 4 2467 17 Multifile::output 0 1 1061 217
////////////////////////////////////////////////////////////////////
//     Function: Multifile::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
void Multifile::output(ostream &out) const;

2231 2 ls 4 2467 13 Multifile::ls 0 2 1062 1063 263
////////////////////////////////////////////////////////////////////
//     Function: Multifile::ls
//       Access: Published
//  Description: Shows a list of all subfiles within the Multifile.
////////////////////////////////////////////////////////////////////
48
void Multifile::ls(ostream &out = (cout)) const;

2232 16 get_magic_number 4 2467 27 Multifile::get_magic_number 0 1 1064 346
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_magic_number
//       Access: Published, Static
//  Description: Returns a string with the first n bytes written to a
//               Multifile, to identify it as a Multifile.
////////////////////////////////////////////////////////////////////
69
static inline basic_string< char > Multifile::get_magic_number(void);

2233 17 set_header_prefix 4 2467 28 Multifile::set_header_prefix 0 1 1065 1041
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_header_prefix
//       Access: Published
//  Description: Sets the string which is written to the Multifile
//               before the Multifile header.  This string must begin
//               with a hash mark and end with a newline character;
//               and if it includes embedded newline characters, each
//               one must be followed by a hash mark.  If these
//               conditions are not initially true, the string will be
//               modified as necessary to make it so.
//
//               This is primarily useful as a simple hack to allow
//               p3d applications to be run directly from the command
//               line on Unix-like systems.
//
//               The return value is true if successful, or false on
//               failure (for instance, because the header prefix
//               violates the above rules).
////////////////////////////////////////////////////////////////////
77
void Multifile::set_header_prefix(basic_string< char > const &header_prefix);

2234 17 get_header_prefix 4 2467 28 Multifile::get_header_prefix 0 1 1066 345
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_header_prefix
//       Access: Published
//  Description: Returns the string that preceded the Multifile header
//               on the file, if any.  See set_header_prefix().
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &Multifile::get_header_prefix(void) const;

2235 25 VirtualFileMountMultifile 4 2469 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 1067 736
// Filename: virtualFileMountMultifile.I
// Created by:  drose (03Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

2236 13 get_multifile 4 2469 40 VirtualFileMountMultifile::get_multifile 0 1 1068 319
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::get_multifile
//       Access: Public
//  Description: Returns the Multifile pointer that this mount object
//               is based on.
////////////////////////////////////////////////////////////////////
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

2237 14 get_class_type 4 2469 41 VirtualFileMountMultifile::get_class_type 0 1 1069 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

2238 22 VirtualFileMountSystem 4 2470 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 1070 730
// Filename: virtualFileMountSystem.I
// Created by:  drose (03Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

2239 21 get_physical_filename 4 2470 45 VirtualFileMountSystem::get_physical_filename 0 1 1071 357
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::get_physical_filename
//       Access: Public
//  Description: Returns the name of the source file on the OS
//               filesystem of the directory or file that is mounted.
////////////////////////////////////////////////////////////////////
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

2240 14 get_class_type 4 2470 38 VirtualFileMountSystem::get_class_type 0 1 1072 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

2241 23 ~VirtualFileMountSystem 4 2470 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

2242 9 get_mount 4 2471 28 VirtualFileSimple::get_mount 0 1 1073 312
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::get_mount
//       Access: Published, Virtual
//  Description: Returns the VirtualFileMount this file is associated
//               with.
////////////////////////////////////////////////////////////////////
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

2243 19 is_implicit_pz_file 4 2471 38 VirtualFileSimple::is_implicit_pz_file 0 1 1074 429
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::is_implicit_pz_file
//       Access: Published
//  Description: Returns true if this file is a .pz file that should
//               be implicitly decompressed on load, or false if it is
//               not a .pz file or if it should not be decompressed.
////////////////////////////////////////////////////////////////////
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

2244 14 get_class_type 4 2471 33 VirtualFileSimple::get_class_type 0 1 1075 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

2245 18 ~VirtualFileSimple 4 2471 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

2246 7 Namable 4 2472 16 Namable::Namable 0 3 1076 1077 1078 922
// Filename: namable.I
// Created by:  drose (16Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Namable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline Namable::Namable(basic_string< char > const &initial_name = (""));
inline Namable::Namable(Namable const &copy);

2247 10 operator = 4 2472 19 Namable::operator = 0 1 1079 229
////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline Namable &Namable::operator =(Namable const &other);

2248 8 set_name 4 2472 17 Namable::set_name 0 1 1080 213
////////////////////////////////////////////////////////////////////
//     Function: Namable::set_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void Namable::set_name(basic_string< char > const &name);

2249 10 clear_name 4 2472 19 Namable::clear_name 0 1 1081 251
////////////////////////////////////////////////////////////////////
//     Function: Namable::clear_name
//       Access: Public
//  Description: Resets the Namable's name to empty.
////////////////////////////////////////////////////////////////////
38
inline void Namable::clear_name(void);

2250 8 has_name 4 2472 17 Namable::has_name 0 1 1082 311
////////////////////////////////////////////////////////////////////
//     Function: Namable::has_name
//       Access: Public
//  Description: Returns true if the Namable has a nonempty name set,
//               false if the name is empty.
////////////////////////////////////////////////////////////////////
42
inline bool Namable::has_name(void) const;

2251 8 get_name 4 2472 17 Namable::get_name 0 1 1083 213
////////////////////////////////////////////////////////////////////
//     Function: Namable::get_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > const &Namable::get_name(void) const;

2252 6 output 4 2472 15 Namable::output 0 1 1084 483
// In the absence of any definition to the contrary, outputting a
// Namable will write out its name.

////////////////////////////////////////////////////////////////////
//     Function: Namable::output
//       Access: Public
//  Description: Outputs the Namable.  This function simply writes the
//               name to the output stream; most Namable derivatives
//               will probably redefine this.
////////////////////////////////////////////////////////////////////
48
inline void Namable::output(ostream &out) const;

2253 14 get_class_type 4 2472 23 Namable::get_class_type 0 1 1085 0
48
static TypeHandle Namable::get_class_type(void);

2254 8 ~Namable 4 2472 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

2255 17 IDecompressStream 4 2473 36 IDecompressStream::IDecompressStream 0 2 1086 1087 937
// Filename: zStream.I
// Created by:  drose (05Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline IDecompressStream::IDecompressStream(void);
inline IDecompressStream::IDecompressStream(istream *source, bool owns_source);

2256 4 open 4 2473 23 IDecompressStream::open 0 1 1088 220
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::open
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
85
inline IDecompressStream &IDecompressStream::open(istream *source, bool owns_source);

2257 5 close 4 2473 24 IDecompressStream::close 0 1 1089 342
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the source istream unless owns_source was true.
////////////////////////////////////////////////////////////////////
57
inline IDecompressStream &IDecompressStream::close(void);

2258 18 ~IDecompressStream 4 2473 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

2259 15 OCompressStream 4 2474 32 OCompressStream::OCompressStream 0 3 1090 1091 1092 450
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
147
inline OCompressStream::OCompressStream(void);
inline OCompressStream::OCompressStream(ostream *dest, bool owns_dest, int compression_level = (6));

2260 4 open 4 2474 21 OCompressStream::open 0 2 1093 1094 218
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::open
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline OCompressStream &OCompressStream::open(ostream *dest, bool owns_dest, int compression_level = (6));

2261 5 close 4 2474 22 OCompressStream::close 0 1 1095 336
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
////////////////////////////////////////////////////////////////////
53
inline OCompressStream &OCompressStream::close(void);

2262 16 ~OCompressStream 4 2474 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

2263 13 get_num_files 4 2475 30 VirtualFileList::get_num_files 0 1 1096 270
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_num_files
//       Access: Published
//  Description: Returns the number of files in the list.
////////////////////////////////////////////////////////////////////
54
inline int VirtualFileList::get_num_files(void) const;

2264 8 get_file 4 2475 25 VirtualFileList::get_file 0 1 1097 258
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_file
//       Access: Published
//  Description: Returns the nth file in the list.
////////////////////////////////////////////////////////////////////
59
inline VirtualFile *VirtualFileList::get_file(int n) const;

2265 11 operator [] 4 2475 28 VirtualFileList::operator [] 0 1 1098 261
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator []
//       Access: Published
//  Description: Returns the nth file in the list.
////////////////////////////////////////////////////////////////////
62
inline VirtualFile *VirtualFileList::operator [](int n) const;

2266 4 size 4 2475 21 VirtualFileList::size 0 1 1099 261
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::size
//       Access: Published
//  Description: Returns the number of files in the list.
////////////////////////////////////////////////////////////////////
45
inline int VirtualFileList::size(void) const;

2267 11 operator += 4 2475 28 VirtualFileList::operator += 0 1 1100 276
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

2268 10 operator + 4 2475 27 VirtualFileList::operator + 0 1 1101 318
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator +
//       Access: Published
//  Description: Returns a VirtualFileList representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

2269 17 VirtualFileSystem 4 2476 36 VirtualFileSystem::VirtualFileSystem 0 1 1102 230
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
VirtualFileSystem::VirtualFileSystem(void);

2270 18 ~VirtualFileSystem 4 2476 37 VirtualFileSystem::~VirtualFileSystem 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
VirtualFileSystem::~VirtualFileSystem(void);

2271 5 mount 4 2476 24 VirtualFileSystem::mount 0 4 1103 1104 1105 1106 2271
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated Multifile at the given mount
//               point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated system file or directory at the
//               given mount point.  If the named file is a directory,
//               mounts the directory.  If the named file is a
//               Multifile, mounts it as a Multifile.  Returns true on
//               success, false on failure.
//
//               A given system directory may be mounted to multiple
//               different mount point, and the same mount point may
//               share multiple system directories.  In the case of
//               ambiguities (that is, two different files with
//               exactly the same full pathname), the most-recently
//               mounted system wins.
//
//               The filename specified as the first parameter must
//               refer to a real, physical filename on disk; it cannot
//               be a virtual file already appearing within the vfs
//               filespace.  However, it is possible to mount such a
//               file; see mount_loop() for this.
////
//               Note that a mounted VirtualFileSystem directory is
//               fully case-sensitive, unlike the native Windows file
//               system, so you must refer to files within the virtual
//               file system with exactly the right case.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Adds the given VirtualFileMount object to the mount
//               list.  This is a lower-level function that the other
//               flavors of mount(); it requires you to create a
//               VirtualFileMount object specifically.
////////////////////////////////////////////////////////////////////
339
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, basic_string< char > const &password = (""));
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

2272 10 mount_loop 4 2476 29 VirtualFileSystem::mount_loop 0 2 1107 1108 971
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount_loop
//       Access: Published
//  Description: This is similar to mount(), but it receives the name
//               of a Multifile that already appears within the
//               virtual file system.  It can be used to mount a
//               Multifile that is itself hosted within a
//               virtually-mounted Multifile.
//
//               This interface can also be used to mount physical
//               files (that appear within the virtual filespace), but
//               it cannot be used to mount directories.  Use mount()
//               if you need to mount a directory.
//
//               Note that there is additional overhead, in the form
//               of additional buffer copies of the data, for
//               recursively mounting a multifile like this.
////////////////////////////////////////////////////////////////////
154
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, basic_string< char > const &password = (""));

2273 7 unmount 4 2476 26 VirtualFileSystem::unmount 0 3 1109 1110 1111 1159
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated Multifile
//               from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated directory
//               name or multifile name from the file system.  Returns
//               the number of appearances unmounted.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts the indicated VirtualFileMount object
//               from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////
177
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

2274 13 unmount_point 4 2476 32 VirtualFileSystem::unmount_point 0 1 1112 388
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_point
//       Access: Published
//  Description: Unmounts all systems attached to the given mount
//               point from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

2275 11 unmount_all 4 2476 30 VirtualFileSystem::unmount_all 0 1 1113 329
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_all
//       Access: Published
//  Description: Unmounts all files from the file system.  Returns the
//               number of systems unmounted.
////////////////////////////////////////////////////////////////////
41
int VirtualFileSystem::unmount_all(void);

2276 14 get_num_mounts 4 2476 33 VirtualFileSystem::get_num_mounts 0 1 1114 304
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_num_mounts
//       Access: Published
//  Description: Returns the number of individual mounts in the
//               system.
////////////////////////////////////////////////////////////////////
50
int VirtualFileSystem::get_num_mounts(void) const;

2277 9 get_mount 4 2476 28 VirtualFileSystem::get_mount 0 1 1115 264
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_mount
//       Access: Published
//  Description: Returns the nth mount in the system.
////////////////////////////////////////////////////////////////////
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

2278 5 chdir 4 2476 24 VirtualFileSystem::chdir 0 1 1116 429
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::chdir
//       Access: Published
//  Description: Changes the current directory.  This is used to
//               resolve relative pathnames in get_file() and/or
//               find_file().  Returns true if successful, false
//               otherwise.
////////////////////////////////////////////////////////////////////
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

2279 7 get_cwd 4 2476 26 VirtualFileSystem::get_cwd 0 1 1117 275
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_cwd
//       Access: Published
//  Description: Returns the current directory name.  See chdir().
////////////////////////////////////////////////////////////////////
48
Filename VirtualFileSystem::get_cwd(void) const;

2280 8 get_file 4 2476 27 VirtualFileSystem::get_file 0 2 1118 1119 902
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_file
//       Access: Published
//  Description: Looks up the file by the indicated name in the file
//               system.  Returns a VirtualFile pointer representing
//               the file if it is found, or NULL if it is not.
//
//               If status_only is true, the file will be checked for
//               existence and length and so on, but the returned
//               file's contents cannot be read.  This is an
//               optimization which is especially important for
//               certain mount types, for instance HTTP, for which
//               opening a file to determine its status is
//               substantially less expensive than opening it to read
//               its contents.
////////////////////////////////////////////////////////////////////
109
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = (0)) const;

2281 9 find_file 4 2476 28 VirtualFileSystem::find_file 0 2 1120 1121 436
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_file
//       Access: Published
//  Description: Uses the indicated search path to find the file
//               within the file system.  Returns the first occurrence
//               of the file found, or NULL if the file cannot be
//               found.
////////////////////////////////////////////////////////////////////
141
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = (0)) const;

2282 16 resolve_filename 4 2476 35 VirtualFileSystem::resolve_filename 0 2 1122 1123 440
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::resolve_filename
//       Access: Public
//  Description: Searches the given search path for the filename.  If
//               it is found, updates the filename to the full
//               pathname found and returns true; otherwise, returns
//               false.
////////////////////////////////////////////////////////////////////
160
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, basic_string< char > const &default_extension = ((string()))) const;

2283 14 find_all_files 4 2476 33 VirtualFileSystem::find_all_files 0 1 1124 672
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_all_files
//       Access: Public
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
////////////////////////////////////////////////////////////////////
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

2284 6 exists 4 2476 25 VirtualFileSystem::exists 0 1 1125 795
// Filename: virtualFileSystem.I
// Created by:  drose (03Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::exists
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists.
////////////////////////////////////////////////////////////////////
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

2285 12 is_directory 4 2476 31 VirtualFileSystem::is_directory 0 1 1126 327
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_directory
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a directory.
////////////////////////////////////////////////////////////////////
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

2286 15 is_regular_file 4 2476 34 VirtualFileSystem::is_regular_file 0 1 1127 333
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_regular_file
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a regular file.
////////////////////////////////////////////////////////////////////
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

2287 14 scan_directory 4 2476 33 VirtualFileSystem::scan_directory 0 1 1128 528
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
////////////////////////////////////////////////////////////////////
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

2288 2 ls 4 2476 21 VirtualFileSystem::ls 0 1 1129 307
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory.
////////////////////////////////////////////////////////////////////
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

2289 6 ls_all 4 2476 25 VirtualFileSystem::ls_all 0 1 1130 362
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls_all
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory, and all files below,
//               recursively.
////////////////////////////////////////////////////////////////////
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

2290 5 write 4 2476 24 VirtualFileSystem::write 0 1 1131 303
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write
//       Access: Published
//  Description: Print debugging information.
//               (e.g. from Python or gdb prompt).
////////////////////////////////////////////////////////////////////
50
void VirtualFileSystem::write(ostream &out) const;

2291 14 get_global_ptr 4 2476 33 VirtualFileSystem::get_global_ptr 0 1 1132 773
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global VirtualFileSystem.  You
//               may create your own personal VirtualFileSystem
//               objects and use them for whatever you like, but Panda
//               will attempt to load models and stuff from this
//               default object.
//
//               Initially, the global VirtualFileSystem is set up to
//               mount the OS filesystem to root; i.e. it is
//               equivalent to the OS filesystem.  This may be
//               subsequently adjusted by the user.
////////////////////////////////////////////////////////////////////
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

2292 15 __py__read_file 4 2476 34 VirtualFileSystem::__py__read_file 0 1 1133 602
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::__py__read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               This variant on read_file() is implemented directly
//               for Python, as a small optimization, to avoid the
//               double-construction of a string object that would be
//               otherwise required for the return value.
////////////////////////////////////////////////////////////////////
95
PyObject *VirtualFileSystem::__py__read_file(Filename const &filename, bool auto_unwrap) const;

2293 9 read_file 4 2476 28 VirtualFileSystem::read_file 0 1 1134 2182
// HAVE_PYTHON

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Public
//  Description: Convenience function; fills the string up with the
//               data from the indicated file, if it exists and can be
//               read.  Returns true on success, false otherwise.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Public
//  Description: Convenience function; fills the pvector up with the
//               data from the indicated file, if it exists and can be
//               read.  Returns true on success, false otherwise.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////
107
inline basic_string< char > VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

2294 14 open_read_file 4 2476 33 VirtualFileSystem::open_read_file 0 1 1135 765
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               istream if the file exists and can be read, or NULL
//               otherwise.  Does not return an invalid istream.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////
93
istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

2295 15 close_read_file 4 2476 34 VirtualFileSystem::close_read_file 0 1 1136 533
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
64
static void VirtualFileSystem::close_read_file(istream *stream);

2296 7 Ramfile 4 2478 16 Ramfile::Ramfile 0 1 1137 701
// Filename: ramfile.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline Ramfile::Ramfile(void);

2297 4 seek 4 2478 13 Ramfile::seek 0 1 1138 363
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::seek
//       Access: Published
//  Description: Moves the data pointer to the indicated byte
//               position.  It is not an error to move the pointer
//               past the end of data.
////////////////////////////////////////////////////////////////////
44
inline void Ramfile::seek(unsigned int pos);

2298 4 tell 4 2478 13 Ramfile::tell 0 1 1139 322
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::tell
//       Access: Published
//  Description: Returns the current data pointer position as a byte
//               offset from the beginning of the stream.
////////////////////////////////////////////////////////////////////
46
inline unsigned int Ramfile::tell(void) const;

2299 4 read 4 2478 13 Ramfile::read 0 1 1140 594
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::read
//       Access: Published
//  Description: Extracts and returns the indicated number of
//               characters from the current data pointer, and
//               advances the data pointer.  If the data pointer
//               exceeds the end of the buffer, returns empty string.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.read() function.
////////////////////////////////////////////////////////////////////
56
basic_string< char > Ramfile::read(unsigned int length);

2300 8 readline 4 2478 17 Ramfile::readline 0 1 1141 599
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::readline
//       Access: Published
//  Description: Assumes the stream represents a text file, and
//               extracts one line up to and including the trailing
//               newline character.  Returns empty string when the end
//               of file is reached.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.readline()
//               function.
////////////////////////////////////////////////////////////////////
45
basic_string< char > Ramfile::readline(void);

2301 8 get_data 4 2478 17 Ramfile::get_data 0 1 1142 321
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data
//       Access: Published
//  Description: Returns the entire buffer contents as a string,
//               regardless of the current data pointer.
////////////////////////////////////////////////////////////////////
65
inline basic_string< char > const &Ramfile::get_data(void) const;

2302 13 get_data_size 4 2478 22 Ramfile::get_data_size 0 1 1143 269
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data_size
//       Access: Published
//  Description: Returns the size of the entire buffer contents.
////////////////////////////////////////////////////////////////////
55
inline unsigned int Ramfile::get_data_size(void) const;

2303 5 clear 4 2478 14 Ramfile::clear 0 1 1144 250
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::clear
//       Access: Published
//  Description: Empties the current buffer contents.
////////////////////////////////////////////////////////////////////
33
inline void Ramfile::clear(void);

2304 8 ~Ramfile 4 2478 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

2305 7 HashVal 4 2479 16 HashVal::HashVal 0 2 1145 1146 928
// Filename: hashVal.I
// Created by:  drose (14Nov00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: HashVal::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

2306 10 operator = 4 2479 19 HashVal::operator = 0 1 1147 232
////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void HashVal::operator =(HashVal const &copy);

2307 11 operator == 4 2479 20 HashVal::operator == 0 1 1148 219
////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool HashVal::operator ==(HashVal const &other) const;

2308 11 operator != 4 2479 20 HashVal::operator != 0 1 1149 219
////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool HashVal::operator !=(HashVal const &other) const;

2309 10 operator < 4 2479 19 HashVal::operator < 0 1 1150 218
////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator <
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline bool HashVal::operator <(HashVal const &other) const;

2310 10 compare_to 4 2479 19 HashVal::compare_to 0 1 1151 218
////////////////////////////////////////////////////////////////////
//     Function: HashVal::compare_to
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline int HashVal::compare_to(HashVal const &other) const;

2311 10 merge_with 4 2479 19 HashVal::merge_with 0 1 1152 311
////////////////////////////////////////////////////////////////////
//     Function: HashVal::merge_with
//       Access: Published
//  Description: Generates a new HashVal representing the xor of this
//               one and the other one.
////////////////////////////////////////////////////////////////////
54
inline void HashVal::merge_with(HashVal const &other);

2312 10 output_dec 4 2479 19 HashVal::output_dec 0 1 1153 290
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_dec
//       Access: Published
//  Description: Outputs the HashVal as four unsigned decimal
//               integers.
////////////////////////////////////////////////////////////////////
52
inline void HashVal::output_dec(ostream &out) const;

2313 9 input_dec 4 2479 18 HashVal::input_dec 0 1 1154 267
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input
//       Access: Published
//  Description: Inputs the HashVal as four unsigned decimal integers.
////////////////////////////////////////////////////////////////////
44
inline void HashVal::input_dec(istream &in);

2314 10 output_hex 4 2479 19 HashVal::output_hex 0 1 1155 288
// HAVE_OPENSSL
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_hex
//       Access: Published
//  Description: Outputs the HashVal as a 32-digit hexadecimal number.
////////////////////////////////////////////////////////////////////
45
void HashVal::output_hex(ostream &out) const;

2315 9 input_hex 4 2479 18 HashVal::input_hex 0 1 1156 270
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_hex
//       Access: Published
//  Description: Inputs the HashVal as a 32-digit hexadecimal number.
////////////////////////////////////////////////////////////////////
37
void HashVal::input_hex(istream &in);

2316 13 output_binary 4 2479 22 HashVal::output_binary 0 1 1157 370
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_binary
//       Access: Published
//  Description: Outputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order generated by
//               write_stream().
////////////////////////////////////////////////////////////////////
48
void HashVal::output_binary(ostream &out) const;

2317 12 input_binary 4 2479 21 HashVal::input_binary 0 1 1158 366
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_binary
//       Access: Published
//  Description: Inputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order expected by
//               read_stream().
////////////////////////////////////////////////////////////////////
40
void HashVal::input_binary(istream &in);

2318 6 output 4 2479 15 HashVal::output 0 1 1159 215
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
inline void HashVal::output(ostream &out) const;

2319 6 as_dec 4 2479 15 HashVal::as_dec 0 1 1160 290
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_dec
//       Access: Published
//  Description: Returns the HashVal as a string with four decimal
//               numbers.
////////////////////////////////////////////////////////////////////
49
basic_string< char > HashVal::as_dec(void) const;

2320 12 set_from_dec 4 2479 21 HashVal::set_from_dec 0 1 1161 336
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_dec
//       Access: Published
//  Description: Sets the HashVal from a string with four decimal
//               numbers.  Returns true if valid, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool HashVal::set_from_dec(basic_string< char > const &text);

2321 6 as_hex 4 2479 15 HashVal::as_hex 0 1 1162 267
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_hex
//       Access: Published
//  Description: Returns the HashVal as a 32-byte hexadecimal string.
////////////////////////////////////////////////////////////////////
49
basic_string< char > HashVal::as_hex(void) const;

2322 12 set_from_hex 4 2479 21 HashVal::set_from_hex 0 1 1163 334
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_hex
//       Access: Published
//  Description: Sets the HashVal from a 32-byte hexademical string.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool HashVal::set_from_hex(basic_string< char > const &text);

2323 6 as_bin 4 2479 15 HashVal::as_bin 0 1 1164 262
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_bin
//       Access: Published
//  Description: Returns the HashVal as a 16-byte binary string.
////////////////////////////////////////////////////////////////////
49
basic_string< char > HashVal::as_bin(void) const;

2324 12 set_from_bin 4 2479 21 HashVal::set_from_bin 0 1 1165 329
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_bin
//       Access: Published
//  Description: Sets the HashVal from a 16-byte binary string.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool HashVal::set_from_bin(basic_string< char > const &text);

2325 14 write_datagram 4 2479 23 HashVal::write_datagram 0 1 1166 223
////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_datagram
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void HashVal::write_datagram(Datagram &destination) const;

2326 13 read_datagram 4 2479 22 HashVal::read_datagram 0 1 1167 222
////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_datagram
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void HashVal::read_datagram(DatagramIterator &source);

2327 12 write_stream 4 2479 21 HashVal::write_stream 0 1 1168 221
////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_stream
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void HashVal::write_stream(StreamWriter &destination) const;

2328 11 read_stream 4 2479 20 HashVal::read_stream 0 1 1169 220
////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_stream
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline void HashVal::read_stream(StreamReader &source);

2329 9 hash_file 4 2479 18 HashVal::hash_file 0 1 1170 500
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_file
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
50
bool HashVal::hash_file(Filename const &filename);

2330 11 hash_stream 4 2479 20 HashVal::hash_stream 0 1 1171 502
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_stream
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
43
bool HashVal::hash_stream(istream &stream);

2331 12 hash_ramfile 4 2479 21 HashVal::hash_ramfile 0 1 1172 433
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_ramfile
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

2332 11 hash_string 4 2479 20 HashVal::hash_string 0 1 1173 432
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_string
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
67
inline void HashVal::hash_string(basic_string< char > const &data);

2333 11 hash_buffer 4 2479 20 HashVal::hash_buffer 0 1 1174 432
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_buffer
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
58
void HashVal::hash_buffer(char const *buffer, int length);

2334 8 ~HashVal 4 2479 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

2335 19 MemoryUsagePointers 4 2480 40 MemoryUsagePointers::MemoryUsagePointers 0 1 1175 246
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
MemoryUsagePointers::MemoryUsagePointers(void);

2336 20 ~MemoryUsagePointers 4 2480 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
MemoryUsagePointers::~MemoryUsagePointers(void);

2337 16 get_num_pointers 4 2480 37 MemoryUsagePointers::get_num_pointers 0 1 1176 279
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_num_pointers
//       Access: Published
//  Description: Returns the number of pointers in the set.
////////////////////////////////////////////////////////////////////
54
int MemoryUsagePointers::get_num_pointers(void) const;

2338 11 get_pointer 4 2480 32 MemoryUsagePointers::get_pointer 0 1 1177 267
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set.
////////////////////////////////////////////////////////////////////
62
ReferenceCount *MemoryUsagePointers::get_pointer(int n) const;

2339 17 get_typed_pointer 4 2480 38 MemoryUsagePointers::get_typed_pointer 0 1 1178 445
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_typed_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set, typecast to a
//               TypedObject if possible.  If the pointer is not a
//               TypedObject or if the cast cannot be made, returns
//               NULL.
////////////////////////////////////////////////////////////////////
65
TypedObject *MemoryUsagePointers::get_typed_pointer(int n) const;

2340 8 get_type 4 2480 29 MemoryUsagePointers::get_type 0 1 1179 305
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type
//       Access: Published
//  Description: Returns the actual type of the nth pointer, if it is
//               known.
////////////////////////////////////////////////////////////////////
54
TypeHandle MemoryUsagePointers::get_type(int n) const;

2341 13 get_type_name 4 2480 34 MemoryUsagePointers::get_type_name 0 1 1180 308
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type_name
//       Access: Published
//  Description: Returns the type name of the nth pointer, if it is
//               known.
////////////////////////////////////////////////////////////////////
69
basic_string< char > MemoryUsagePointers::get_type_name(int n) const;

2342 7 get_age 4 2480 28 MemoryUsagePointers::get_age 0 1 1181 459
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_age
//       Access: Published
//  Description: Returns the age of the nth pointer: the number of
//               seconds elapsed between the time it was allocated and
//               the time it was added to this set via a call to
//               MemoryUsage::get_pointers().
////////////////////////////////////////////////////////////////////
49
double MemoryUsagePointers::get_age(int n) const;

2343 18 get_python_pointer 4 2480 39 MemoryUsagePointers::get_python_pointer 0 1 1182 757
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_python_pointer
//       Access: Published
//  Description: Returns the nth object, represented as a Python
//               object of the appropriate type.  Reference counting
//               will be properly set on the Python object.
//
//               get_typed_pointer() is almost as good as this, but
//               (a) it does not set the reference count, and (b) it
//               does not work for objects that do not inherit from
//               TypedObject.  This will work for any object whose
//               type is known, which has a Python representation.
////////////////////////////////////////////////////////////////////
63
PyObject *MemoryUsagePointers::get_python_pointer(int n) const;

2344 5 clear 4 2480 26 MemoryUsagePointers::clear 0 1 1183 254
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::clear
//       Access: Published
//  Description: Empties the set of pointers.
////////////////////////////////////////////////////////////////////
38
void MemoryUsagePointers::clear(void);

2345 6 output 4 2480 27 MemoryUsagePointers::output 0 1 1184 227
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void MemoryUsagePointers::output(ostream &out) const;

2346 13 get_long_time 4 2481 24 TrueClock::get_long_time 0 1 1185 454
// get_long_time() returns the most accurate timer we have over a
// long interval.  It may not be very precise for measuring short
// intervals, but it should not drift substantially over the long
// haul.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_long_time, Posix implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
38
double TrueClock::get_long_time(void);

2347 14 get_short_time 4 2481 25 TrueClock::get_short_time 0 1 1186 458
// get_short_time() returns the most precise timer we have over a
// short interval.  It may tend to drift over the long haul, but it
// should have lots of digits to measure short intervals very
// precisely.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_time, Posix implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline double TrueClock::get_short_time(void);

2348 18 get_short_raw_time 4 2481 29 TrueClock::get_short_raw_time 0 1 1187 399
// get_short_raw_time() is like get_short_time(), but does not apply
// any corrections (e.g. paranoid-clock) to the result returned by
// the OS.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_raw_time, Posix implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
double TrueClock::get_short_raw_time(void);

2349 15 get_error_count 4 2481 26 TrueClock::get_error_count 0 1 1188 687
// WIN32_VC
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_error_count
//       Access: Published
//  Description: Returns the number of clock errors that have
//               been detected.  Each time a clock error is detected,
//               in which the value returned by either of the above
//               methods is suspect, the value returned by this method
//               will be incremented.  Applications can monitor this
//               value and react, for instance, by resynchronizing
//               their clocks each time this value changes.
////////////////////////////////////////////////////////////////////
50
inline int TrueClock::get_error_count(void) const;

2350 14 get_global_ptr 4 2481 25 TrueClock::get_global_ptr 0 1 1189 309
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one TrueClock object in
//               the world.
////////////////////////////////////////////////////////////////////
57
static inline TrueClock *TrueClock::get_global_ptr(void);

2351 16 set_cpu_affinity 4 2481 27 TrueClock::set_cpu_affinity 0 1 1190 249
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::set_cpu_affinity, Posix implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
bool TrueClock::set_cpu_affinity(unsigned int mask) const;

2352 9 Patchfile 4 2482 20 Patchfile::Patchfile 0 2 1191 1192 527
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create a patch file and initializes internal data
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create patch file with buffer to patch
////////////////////////////////////////////////////////////////////
77
Patchfile::Patchfile(void);
Patchfile::Patchfile(PointerTo< Buffer > buffer);

2353 10 ~Patchfile 4 2482 21 Patchfile::~Patchfile 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
28
Patchfile::~Patchfile(void);

2354 5 build 4 2482 16 Patchfile::build 0 1 1193 680
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::build
//       Access: Public
//  Description:
//               This implementation uses the "greedy differencing
//               algorithm" described in the masters thesis
//               "Differential Compression: A Generalized Solution
//               for Binary Files" by Randal C. Burns (p.13).
//               For an original file of size M and a new file of
//               size N, this algorithm is O(M) in space and
//               O(M*N) (worst-case) in time.
//               return false on error
////////////////////////////////////////////////////////////////////
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

2355 11 read_header 4 2482 22 Patchfile::read_header 0 1 1194 449
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::read_header
//       Access: Published
//  Description: Opens the patch file for reading, and gets the header
//               information from the file but does not begin to do
//               any real work.  This can be used to query the data
//               stored in the patch.
////////////////////////////////////////////////////////////////////
55
int Patchfile::read_header(Filename const &patch_file);

2356 8 initiate 4 2482 19 Patchfile::initiate 0 2 1195 1196 1240
////////////////////////////////////////////////////////////////////
///// PATCH FILE APPLY MEMBER FUNCTIONS
/////
////////////////////
///// NOTE: this patch-application functionality unfortunately has to be
/////       duplicated in the Installer. It is contained in the file
/////       installerApplyPatch.cxx
/////       PLEASE MAKE SURE THAT THAT FILE GETS UPDATED IF ANY OF THIS
/////       LOGIC CHANGES! (i.e. if the patch file format changes)
////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file (original
//               file and patch are destroyed in the process).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file.  In this form,
//               neither the original file nor the patch file are
//               destroyed.
////////////////////////////////////////////////////////////////////
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

2357 3 run 4 2482 14 Patchfile::run 0 1 1197 660
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::run
//       Access: Published
//  Description: Perform one buffer's worth of patching
//               Returns EU_ok while patching
//               Returns EU_success when done
//               If error happens will return one of:
//               EU_error_abort : Patching has not been initiated
//               EU_error_file_invalid : file is corrupted
//               EU_error_invalid_checksum : incompatible patch file
//               EU_error_write_file_rename : could not rename file
////////////////////////////////////////////////////////////////////
25
int Patchfile::run(void);

2358 5 apply 4 2482 16 Patchfile::apply 0 2 1198 1199 788
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will delete the patch file and overwrite
//               the original file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will not delete any files.
////////////////////////////////////////////////////////////////////
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

2359 12 get_progress 4 2482 23 Patchfile::get_progress 0 1 1200 893
// Filename: patchfile.I
// Created by:  darren, mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//#include "config_downloader.h"
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_progress
//       Access: Published
//  Description: Returns a value in the range 0..1, representing the
//               amount of progress through the patchfile, during a
//               session.
////////////////////////////////////////////////////////////////////
49
inline float Patchfile::get_progress(void) const;

2360 19 set_allow_multifile 4 2482 30 Patchfile::set_allow_multifile 0 1 1201 685
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_allow_multifile
//       Access: Published
//  Description: If this flag is set true, the Patchfile will make a
//               special case for patching Panda Multifiles, if
//               detected, and attempt to patch them on a
//               subfile-by-subfile basis.  If this flag is false, the
//               Patchfile will always patch the file on a full-file
//               basis.
//
//               This has effect only when building patches; it is not
//               used for applying patches.
////////////////////////////////////////////////////////////////////
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

2361 19 get_allow_multifile 4 2482 30 Patchfile::get_allow_multifile 0 1 1202 256
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_allow_multifile
//       Access: Published
//  Description: See set_allow_multifile().
////////////////////////////////////////////////////////////////////
49
inline bool Patchfile::get_allow_multifile(void);

2362 20 set_footprint_length 4 2482 31 Patchfile::set_footprint_length 0 1 1203 230
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void Patchfile::set_footprint_length(int length);

2363 20 get_footprint_length 4 2482 31 Patchfile::get_footprint_length 0 1 1204 230
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline int Patchfile::get_footprint_length(void);

2364 22 reset_footprint_length 4 2482 33 Patchfile::reset_footprint_length 0 1 1205 232
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::reset_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void Patchfile::reset_footprint_length(void);

2365 15 has_source_hash 4 2482 26 Patchfile::has_source_hash 0 1 1206 391
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::has_source_hash
//       Access: Published
//  Description: Returns true if the MD5 hash for the source file is
//               known.  (Some early versions of the patch file did
//               not store this information.)
////////////////////////////////////////////////////////////////////
51
inline bool Patchfile::has_source_hash(void) const;

2366 15 get_source_hash 4 2482 26 Patchfile::get_source_hash 0 1 1207 267
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_source_hash
//       Access: Published
//  Description: Returns the MD5 hash for the source file.
////////////////////////////////////////////////////////////////////
61
inline HashVal const &Patchfile::get_source_hash(void) const;

2367 15 get_result_hash 4 2482 26 Patchfile::get_result_hash 0 1 1208 310
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_result_hash
//       Access: Published
//  Description: Returns the MD5 hash for the file after the patch has
//               been applied.
////////////////////////////////////////////////////////////////////
61
inline HashVal const &Patchfile::get_result_hash(void) const;

2368 13 password_hash 1 0 13 password_hash 0 1 1257 1691
////////////////////////////////////////////////////////////////////
//     Function: password_hash
//       Access: Published
//  Description: Generates a non-reversible hash of a particular
//               length based on an arbitrary password and a random
//               salt.  This is much stronger than the algorithm
//               implemented by the standard Unix crypt().
//
//               The resulting hash can be useful for two primary
//               purposes: (1) the hash may be recorded to disk in
//               lieu of recording plaintext passwords, for validation
//               against a password entered by the user later (which
//               should produce the same hash given a particular
//               salt), or (2) the hash may be used as input to an
//               encryption algorithm that requires a key of a
//               particular length.
//
//               password is the text password provided by a user.
//
//               salt should be a string of arbitrary random bytes (it
//               need not be crypotographically secure, just different
//               for each different hash).
//
//               iters should be a number in the thousands to indicate
//               the number of times the hash algorithm should be
//               applied.  In general, iters should be chosen to make
//               the computation as expensive as it can be and still
//               be tolerable, to reduce the attractiveness of a
//               brute-force attack.
//
//               keylen is the length in bytes of the required key
//               hash.
////////////////////////////////////////////////////////////////////
130
basic_string< char > password_hash(basic_string< char > const &password, basic_string< char > const &salt, int iters, int keylen);

2369 12 ProfileTimer 4 2483 26 ProfileTimer::ProfileTimer 0 4 1209 1210 1211 1212 0
144
ProfileTimer::ProfileTimer(char const *name = (0), int maxEntries = (MaxEntriesDefault));
ProfileTimer::ProfileTimer(ProfileTimer const &other);

2370 13 ~ProfileTimer 4 2483 27 ProfileTimer::~ProfileTimer 0 0 0
34
ProfileTimer::~ProfileTimer(void);

2371 4 init 4 2483 18 ProfileTimer::init 0 2 1213 1214 0
80
void ProfileTimer::init(char const *name, int maxEntries = (MaxEntriesDefault));

2372 2 on 4 2483 16 ProfileTimer::on 0 1 1215 472
// Filename: profileTimer.I
// Created by:  
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
28
void ProfileTimer::on(void);

2373 4 mark 4 2483 18 ProfileTimer::mark 0 1 1216 0
41
void ProfileTimer::mark(char const *tag);

2374 3 off 4 2483 17 ProfileTimer::off 0 2 1217 1218 0
70
void ProfileTimer::off(void);
void ProfileTimer::off(char const *tag);

2375 12 getTotalTime 4 2483 26 ProfileTimer::getTotalTime 0 1 1219 110
// Don't call any of the following during timing:
// (Because they are slow, not because anything will break).
46
double ProfileTimer::getTotalTime(void) const;

2376 16 consolidateAllTo 4 2483 30 ProfileTimer::consolidateAllTo 0 2 1220 1221 110
// Don't call any of the following during timing:
// (Because they are slow, not because anything will break).
66
static void ProfileTimer::consolidateAllTo(ostream &out = (cout));

2377 13 consolidateTo 4 2483 27 ProfileTimer::consolidateTo 0 2 1222 1223 0
62
void ProfileTimer::consolidateTo(ostream &out = (cout)) const;

2378 10 printAllTo 4 2483 24 ProfileTimer::printAllTo 0 2 1224 1225 0
60
static void ProfileTimer::printAllTo(ostream &out = (cout));

2379 7 printTo 4 2483 21 ProfileTimer::printTo 0 2 1226 1227 0
56
void ProfileTimer::printTo(ostream &out = (cout)) const;

2380 11 was_deleted 4 2484 30 WeakPointerToVoid::was_deleted 0 1 1228 327
////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::was_deleted
//       Access: Published
//  Description: Returns true if the object we are pointing to has
//               been deleted, false otherwise.
////////////////////////////////////////////////////////////////////
55
inline bool WeakPointerToVoid::was_deleted(void) const;

2381 16 is_valid_pointer 4 2484 35 WeakPointerToVoid::is_valid_pointer 0 1 1229 328
////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::is_valid_pointer
//       Access: Published
//  Description: Returns true if the pointer is not null and the
//               object has not been deleted.
////////////////////////////////////////////////////////////////////
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

1257
1 14 Dtool_KoxtPGVr 6 6 2485 0 14 Dtool_KoxtPGVr 0 0 
2 14 Dtool_KoxtL7Gu 6 7 2485 0 14 Dtool_KoxtL7Gu 0 0 
3 14 Dtool_KoxtUNsX 6 8 2488 0 14 Dtool_KoxtUNsX 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_name
//       Access: Published
//  Description: Returns the name of the page.  If the page was loaded
//               from a .prc file, this is usually the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2486  
4 14 Dtool_KoxtJyhA 6 9 2489 0 14 Dtool_KoxtJyhA 517 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_special
//       Access: Published
//  Description: Returns true if this is the special "default" or
//               "local" page, or false if it is an ordinary page,
//               e.g. an implicit page loaded from a prc file at
//               startup, or an explicit page created by
//               ConfigPageManager::make_explicit_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2486  
5 14 Dtool_KoxteRrb 6 10 2489 0 14 Dtool_KoxteRrb 437 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_implicit
//       Access: Published
//  Description: Returns true if the page was loaded by implicitly
//               searching the config path on startup, or false if it
//               was explicitly loaded by dynamic code after initial
//               startup.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2486  
6 14 Dtool_KoxtKe18 6 11 2490 0 14 Dtool_KoxtKe18 728 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_page_seq
//       Access: Published
//  Description: Returns the sequence number of the page.  
//
//               Sequence numbers for a particular class (implicit
//               vs. explicit) of pages are assigned as each page is
//               loaded; each page is given a higher sequence number
//               than all the pages loaded before it.
//
//               The implicit_load pages, which are discovered in the
//               file system automatically, have a different set of
//               sequence numbers than the explicit pages.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2486  
7 14 Dtool_KoxtK7vW 6 12 2490 0 14 Dtool_KoxtK7vW 592 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_trust_level
//       Access: Published
//  Description: Returns the trust level associated with this page.
//               An untrusted page is trust level 0; if the page was
//               loaded from a signed .prc file, its trust level is
//               the index number of the certificate that signed it.
//               Generally, a higher trust level value represents
//               a greater level of trust.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2486  
8 14 Dtool_KoxtQ6Y4 4 13 2491 0 14 Dtool_KoxtQ6Y4 456 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::set_trust_level
//       Access: Published
//  Description: Explicitly sets the trust level on this particular
//               page.  Note that any subsequent changes to the page,
//               or to any variable declarations on it, will reset the
//               trust level to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2485  11 trust_level 1 2490  
9 14 Dtool_KoxtobQg 6 14 2488 0 14 Dtool_KoxtobQg 399 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_signature
//       Access: Published
//  Description: Returns the raw binary signature that was found in
//               the prc file, if any.  This method is probably not
//               terribly useful for most applications.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2486  
10 14 Dtool_Koxtp8Hx 4 15 2491 0 14 Dtool_Koxtp8Hx 0 1 4 this 3 2485  
11 14 Dtool_KoxtX8QI 6 16 2489 0 14 Dtool_KoxtX8QI 0 2 4 this 3 2485  2 in 1 2492  
12 14 Dtool_KoxtQMAZ 6 17 2489 0 14 Dtool_KoxtQMAZ 0 3 4 this 3 2485  2 in 1 2492  8 password 1 2488  
13 14 Dtool_KoxtbnS0 6 18 2495 0 14 Dtool_KoxtbnS0 0 3 4 this 3 2485  8 variable 1 2493  5 value 1 2488  
14 14 Dtool_Koxta0Ry 6 18 2495 0 14 Dtool_Koxta0Ry 0 3 4 this 3 2485  8 variable 1 2488  5 value 1 2488  
15 14 Dtool_KoxtUNQd 6 19 2489 0 14 Dtool_KoxtUNQd 0 2 4 this 3 2485  4 decl 1 2495  
16 14 Dtool_Koxt4OlT 6 20 2490 0 14 Dtool_Koxt4OlT 0 1 4 this 3 2486  
17 14 Dtool_KoxtLiqb 6 21 2497 0 14 Dtool_KoxtLiqb 0 2 4 this 3 2486  1 n 1 2490  
18 14 Dtool_KoxtvsYV 6 22 2488 0 14 Dtool_KoxtvsYV 0 2 4 this 3 2486  1 n 1 2490  
19 14 Dtool_KoxtTmDS 6 23 2488 0 14 Dtool_KoxtTmDS 0 2 4 this 3 2486  1 n 1 2490  
20 14 Dtool_Koxtt4Y8 6 24 2489 0 14 Dtool_Koxtt4Y8 0 2 4 this 3 2486  1 n 1 2490  
21 14 Dtool_Koxtouea 4 25 2491 0 14 Dtool_Koxtouea 0 2 4 this 3 2486  3 out 1 2499  
22 14 Dtool_Koxtnrvx 4 26 2491 0 14 Dtool_Koxtnrvx 0 2 4 this 3 2486  3 out 1 2499  
23 14 Dtool_KoxtMy5p 4 27 2491 0 14 Dtool_KoxtMy5p 0 2 4 this 3 2486  3 out 1 2499  
24 14 Dtool_KoxtTibR 6 29 2489 0 14 Dtool_KoxtTibR 908 // Filename: configPageManager.I
// Created by:  drose (15Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::loaded_implicit_pages
//       Access: Published
//  Description: Returns true if the implicit *.prc files have already
//               been loaded, false otherwise.  Normally this will
//               only be false briefly before startup.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2500  
25 14 Dtool_Koxt6EjB 4 30 2491 0 14 Dtool_Koxt6EjB 536 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::load_implicit_pages
//       Access: Published
//  Description: Searches the PRC_DIR and/or PRC_PATH directories for
//               *.prc files and loads them in as pages.  This is
//               normally called automatically at startup time, when
//               the first variable's value is referenced.  See also
//               reload_implicit_pages().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2502  
26 14 Dtool_KoxtSIdn 4 31 2491 0 14 Dtool_KoxtSIdn 0 1 4 this 3 2502  
27 14 Dtool_KoxtBr_C 6 32 2503 0 14 Dtool_KoxtBr_C 556 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_search_path
//       Access: Published
//  Description: Returns the search path used to locate implicit .prc
//               files.  This is determined by the PRC_DIR and
//               PRC_PATH environment variables.  The object returned
//               by this method may be modified to change the path at
//               runtime, and then reload_implicit_pages() called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2502  
28 14 Dtool_KoxtOjrt 6 33 2490 0 14 Dtool_KoxtOjrt 574 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.prc", that
//               are compiled in that will be searched for as default
//               config filenames.  Normally there is only one
//               pattern, and it is "*.prc", but others may be
//               specified with the PRC_FILENAME variable in
//               Config.pp.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2500  
29 14 Dtool_Koxt7pmq 6 34 2488 0 14 Dtool_Koxt7pmq 385 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid config file.  See
//               get_num_prc_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2500  1 n 1 2490  
30 14 Dtool_Koxt9X8U 6 35 2490 0 14 Dtool_Koxt9X8U 436 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_encrypted_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.pre", that
//               are compiled in that will be searched for as special
//               config files that are understood to be encrypted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2500  
31 14 Dtool_KoxtzIDb 6 36 2488 0 14 Dtool_KoxtzIDb 415 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_encrypted_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid encrypted config
//               file.  See get_num_prc_encrypted_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2500  1 n 1 2490  
32 14 Dtool_Koxtwzxf 6 37 2490 0 14 Dtool_Koxtwzxf 533 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_executable_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.exe", that
//               are compiled in that will be searched for as special
//               config files that are to be executed as a program,
//               and their output taken to be input.  This is normally
//               empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2500  
33 14 Dtool_KoxtHOFD 6 38 2488 0 14 Dtool_KoxtHOFD 424 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_executable_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid executable-style config
//               file.  See get_num_prc_executable_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2500  1 n 1 2490  
34 14 Dtool_Koxt1BwY 6 39 2485 0 14 Dtool_Koxt1BwY 0 2 4 this 3 2502  4 name 1 2488  
35 14 Dtool_KoxtFhLr 6 40 2489 0 14 Dtool_KoxtFhLr 0 2 4 this 3 2502  4 page 1 2485  
36 14 Dtool_KoxtNpX6 6 41 2490 0 14 Dtool_KoxtNpX6 450 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_implicit_pages
//       Access: Published
//  Description: Returns the current number of implicitly-loaded
//               ConfigPages in the world.  These represent files that
//               were automatically discovered on the disk as .prc
//               files.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2500  
37 14 Dtool_Koxt5iN2 6 42 2485 0 14 Dtool_Koxt5iN2 332 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_implicit_page
//       Access: Published
//  Description: Returns the nth implicit ConfigPage in the world.
//               See get_num_implicit_pages().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2500  1 n 1 2490  
38 14 Dtool_KoxtHC4q 6 43 2490 0 14 Dtool_KoxtHC4q 490 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_explicit_pages
//       Access: Published
//  Description: Returns the current number of explicitly-loaded
//               ConfigPages in the world.  These represent pages that
//               were loaded dynamically at runtime by explicit calls
//               to ConfigPageManager::make_explicit_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2500  
39 14 Dtool_KoxtlDa_ 6 44 2485 0 14 Dtool_KoxtlDa_ 332 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_explicit_page
//       Access: Published
//  Description: Returns the nth explicit ConfigPage in the world.
//               See get_num_explicit_pages().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2500  1 n 1 2490  
40 14 Dtool_KoxtdhHl 4 45 2491 0 14 Dtool_KoxtdhHl 0 2 4 this 3 2500  3 out 1 2499  
41 14 Dtool_KoxtN841 4 46 2491 0 14 Dtool_KoxtN841 0 2 4 this 3 2500  3 out 1 2499  
42 14 Dtool_KoxtH_23 6 47 2502 0 14 Dtool_KoxtH_23 0 0 
43 14 Dtool_KoxtfAWp 7 62 2504 1313 14 Dtool_KoxtfAWp 492 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Published
//  Description: Use this constructor to make a ConfigVariable of an
//               unspecified type.  Usually you'd want to do this just
//               to reference a previously-defined ConfigVariable of a
//               specific type, without having to know what type it is.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
44 14 Dtool_KoxtRHwC 6 64 2497 0 14 Dtool_KoxtRHwC 390 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_default_value
//       Access: Published
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2505  
45 14 Dtool_KoxtvDN0 6 65 2488 0 14 Dtool_KoxtvDN0 315 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_value
//       Access: Published
//  Description: Returns the toplevel value of the variable, formatted
//               as a string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2505  
46 14 Dtool_Koxt3HD1 4 66 2491 0 14 Dtool_Koxt3HD1 443 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_value
//       Access: Published
//  Description: Changes the value assigned to this variable.  This
//               creates a local value that shadows any values defined
//               in the .prc files, until clear_local_value() is
//               called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 value 1 2488  
47 14 Dtool_KoxtcJ_r 4 67 2491 0 14 Dtool_KoxtcJ_r 376 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::clear_value
//       Access: Published
//  Description: Removes the value assigned to this variable, and lets
//               its original value (as read from the prc files) show
//               through.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2504  
48 14 Dtool_Koxtp0MY 6 68 2490 0 14 Dtool_Koxtp0MY 402 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_num_words
//       Access: Published
//  Description: Returns the number of words in the variable's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2505  
49 14 Dtool_Koxt4Tsy 6 69 2489 0 14 Dtool_Koxt4Tsy 446 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_string_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
50 14 Dtool_Koxt94kx 6 70 2489 0 14 Dtool_Koxt94kx 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_bool_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               boolean value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
51 14 Dtool_Koxtd0tj 6 71 2489 0 14 Dtool_Koxtd0tj 325 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
52 14 Dtool_KoxtYzDd 6 72 2489 0 14 Dtool_KoxtYzDd 334 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int64_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               64-bit integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
53 14 Dtool_KoxtxdWD 6 73 2489 0 14 Dtool_KoxtxdWD 328 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_double_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
54 14 Dtool_Koxtg2rl 6 74 2488 0 14 Dtool_Koxtg2rl 401 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_word
//       Access: Published
//  Description: Returns the string value of the nth word of the
//               variable's value, or empty string if there is no
//               nth value.  See also has_string_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
55 14 Dtool_KoxtFdkk 6 75 2489 0 14 Dtool_KoxtFdkk 391 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_bool_word
//       Access: Published
//  Description: Returns the boolean value of the nth word of the
//               variable's value, or false if there is no nth
//               value.  See also has_bool_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
56 14 Dtool_Koxt1RtW 6 76 2490 0 14 Dtool_Koxt1RtW 384 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
57 14 Dtool_KoxtgQCQ 6 77 2507 0 14 Dtool_KoxtgQCQ 384 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int64_word
//       Access: Published
//  Description: Returns the int64 value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
58 14 Dtool_KoxtGzV2 6 78 2508 0 14 Dtool_KoxtGzV2 390 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_double_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_double_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2505  1 n 1 2490  
59 14 Dtool_Koxtz4LI 4 79 2491 0 14 Dtool_Koxtz4LI 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2504  1 n 1 2490  5 value 1 2488  
60 14 Dtool_Koxtytus 4 80 2491 0 14 Dtool_Koxtytus 324 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_bool_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2504  1 n 1 2490  5 value 1 2489  
61 14 Dtool_KoxtzKpF 4 81 2491 0 14 Dtool_KoxtzKpF 323 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2504  1 n 1 2490  5 value 1 2490  
62 14 Dtool_Koxth9s8 4 82 2491 0 14 Dtool_Koxth9s8 325 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int64_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2504  1 n 1 2490  5 value 1 2507  
63 14 Dtool_Koxt9Fer 4 83 2491 0 14 Dtool_Koxt9Fer 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_double_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2504  1 n 1 2490  5 value 1 2508  
64 14 Dtool_KoxtLAYK 6 50 2488 0 14 Dtool_KoxtLAYK 261 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_name
//       Access: Published
//  Description: Returns the name of the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
65 14 Dtool_KoxtSB4b 6 51 2383 0 14 Dtool_KoxtSB4b 386 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_value_type
//       Access: Published
//  Description: Returns the stated type of this variable.  This
//               should be VT_list, unless a later variable
//               declaration has changed it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
66 14 Dtool_KoxtZc0t 6 52 2488 0 14 Dtool_KoxtZc0t 323 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_description
//       Access: Published
//  Description: Returns the brief description of this variable, if
//               it has been defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
67 14 Dtool_KoxtZZnT 6 53 2490 0 14 Dtool_KoxtZZnT 522 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
68 14 Dtool_KoxtE1aP 6 54 2489 0 14 Dtool_KoxtE1aP 749 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
69 14 Dtool_Koxtrrma 6 55 2490 0 14 Dtool_Koxtrrma 835 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
70 14 Dtool_KoxtYuk3 6 56 2489 0 14 Dtool_KoxtYuk3 510 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
71 14 Dtool_KoxtfhKJ 6 57 2489 0 14 Dtool_KoxtfhKJ 525 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::clear_local_value
//       Access: Published
//  Description: Removes the local value defined for this variable,
//               and allows its value to be once again retrieved from
//               the .prc files.
//
//               Returns true if the value was successfully removed,
//               false if it did not exist in the first place.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2511  
72 14 Dtool_KoxtV4Ko 6 58 2489 0 14 Dtool_KoxtV4Ko 403 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_local_value
//       Access: Published
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
73 14 Dtool_KoxtVuDp 6 59 2489 0 14 Dtool_KoxtVuDp 395 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_value
//       Access: Public
//  Description: Returns true if this variable has an explicit value,
//               either from a prc file or locally set, or false if
//               variable has its default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2509  
74 14 Dtool_Koxt35Ii 4 60 2491 0 14 Dtool_Koxt35Ii 226 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2509  3 out 1 2499  
75 14 Dtool_Koxt08N6 4 61 2491 0 14 Dtool_Koxt08N6 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2509  3 out 1 2499  
76 14 Dtool_KoxtgHBK 7 85 2512 1344 14 Dtool_KoxtgHBK 725 // Filename: configVariableBool.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
77 14 Dtool_KoxtTv_r 7 85 2512 1344 14 Dtool_KoxtTv_r 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  5 flags 1 2490  
78 14 Dtool_KoxtcIjg 7 85 2512 1344 14 Dtool_KoxtcIjg 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  
79 14 Dtool_KoxtBzBs 7 85 2512 1344 14 Dtool_KoxtBzBs 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2488  
80 14 Dtool_Koxttw8k 7 85 2512 1344 14 Dtool_Koxttw8k 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2489  11 description 1 2488  5 flags 1 2490  
81 14 Dtool_KoxtjFrl 7 85 2512 1344 14 Dtool_KoxtjFrl 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2489  11 description 1 2488  
82 14 Dtool_KoxtfQgh 7 85 2512 1344 14 Dtool_KoxtfQgh 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2489  
83 14 Dtool_KoxtuDfZ 6 86 2512 0 14 Dtool_KoxtuDfZ 267 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2489  
84 14 Dtool_KoxtJqiY 6 88 2490 0 14 Dtool_KoxtJqiY 277 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
85 14 Dtool_KoxtLNU6 6 89 2489 0 14 Dtool_KoxtLNU6 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  1 n 1 2490  
86 14 Dtool_Koxt2TR9 4 90 2491 0 14 Dtool_Koxt2TR9 266 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2489  
87 14 Dtool_KoxtrUX8 6 91 2489 0 14 Dtool_KoxtrUX8 258 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
88 14 Dtool_Koxtc047 6 92 2489 0 14 Dtool_Koxtc047 274 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
89 14 Dtool_KoxtXBj8 6 93 2489 0 14 Dtool_KoxtXBj8 261 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  1 n 1 2490  
90 14 Dtool_KoxtDBoK 4 94 2491 0 14 Dtool_KoxtDBoK 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2512  1 n 1 2490  5 value 1 2489  
91 14 Dtool_Koxt3sZ9 6 87 2489 0 14 Dtool_Koxt3sZ9 266 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
92 14 Dtool_KoxtCK_u 7 97 2515 1355 14 Dtool_KoxtCK_u 729 // Filename: configVariableDouble.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
93 14 Dtool_KoxtVT_M 7 97 2515 1355 14 Dtool_KoxtVT_M 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  5 flags 1 2490  
94 14 Dtool_KoxtcCSY 7 97 2515 1355 14 Dtool_KoxtcCSY 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  
95 14 Dtool_KoxtEDCV 7 97 2515 1355 14 Dtool_KoxtEDCV 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2488  
96 14 Dtool_KoxtAhLa 7 97 2515 1355 14 Dtool_KoxtAhLa 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2508  11 description 1 2488  5 flags 1 2490  
97 14 Dtool_KoxtWBUH 7 97 2515 1355 14 Dtool_KoxtWBUH 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2508  11 description 1 2488  
98 14 Dtool_KoxtYBO6 7 97 2515 1355 14 Dtool_KoxtYBO6 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2508  
99 14 Dtool_Koxt9oaH 6 98 2515 0 14 Dtool_Koxt9oaH 269 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2508  
100 14 Dtool_KoxtiiNw 6 100 2490 0 14 Dtool_KoxtiiNw 279 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
101 14 Dtool_KoxtLoN2 6 101 2508 0 14 Dtool_KoxtLoN2 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  1 n 1 2490  
102 14 Dtool_Koxtjhoa 4 102 2491 0 14 Dtool_Koxtjhoa 268 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2508  
103 14 Dtool_KoxtbA6h 6 103 2508 0 14 Dtool_KoxtbA6h 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
104 14 Dtool_KoxtFMO4 6 104 2508 0 14 Dtool_KoxtFMO4 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
105 14 Dtool_KoxtHfdb 6 105 2508 0 14 Dtool_KoxtHfdb 263 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  1 n 1 2490  
106 14 Dtool_KoxtTUh2 4 106 2491 0 14 Dtool_KoxtTUh2 340 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2515  1 n 1 2490  5 value 1 2508  
107 14 Dtool_KoxtAOAW 6 99 2508 0 14 Dtool_KoxtAOAW 268 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
108 14 Dtool_KoxtuiRq 7 109 2518 1377 14 Dtool_KoxtuiRq 733 // Filename: configVariableFilename.I
// Created by:  drose (22Nov04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
109 14 Dtool_Koxt5vRW 7 109 2518 1377 14 Dtool_Koxt5vRW 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2519  11 description 1 2488  5 flags 1 2490  
110 14 Dtool_KoxtyAQf 7 109 2518 1377 14 Dtool_KoxtyAQf 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2519  11 description 1 2488  
111 14 Dtool_Koxt0kwV 7 109 2518 1377 14 Dtool_Koxt0kwV 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2519  
112 14 Dtool_Koxttq7m 6 110 2518 0 14 Dtool_Koxttq7m 271 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2518  5 value 1 2519  
113 14 Dtool_KoxtFSXo 6 112 2488 0 14 Dtool_KoxtFSXo 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::c_str
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
114 14 Dtool_KoxtJ1W6 6 113 2489 0 14 Dtool_KoxtJ1W6 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::empty
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
115 14 Dtool_KoxtwSZu 6 114 2523 0 14 Dtool_KoxtwSZu 226 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
116 14 Dtool_KoxtJYNd 6 115 2524 0 14 Dtool_KoxtJYNd 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2521  1 n 1 2490  
117 14 Dtool_KoxtdX94 6 116 2488 0 14 Dtool_KoxtdX94 450 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath
//       Access: Public
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
118 14 Dtool_KoxtdZMt 6 117 2488 0 14 Dtool_KoxtdZMt 391 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_dirname
//       Access: Public
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
119 14 Dtool_Koxt_BB0 6 118 2488 0 14 Dtool_Koxt_BB0 398 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename
//       Access: Public
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
120 14 Dtool_KoxtA2V6 6 119 2488 0 14 Dtool_KoxtA2V6 345 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath_wo_extension
//       Access: Public
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
121 14 Dtool_KoxtxTY1 6 120 2488 0 14 Dtool_KoxtxTY1 333 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename_wo_extension
//       Access: Public
//  Description: Returns the basename part of the filename, without
//               the file extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
122 14 Dtool_KoxtiXPS 6 121 2488 0 14 Dtool_KoxtiXPS 394 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_extension
//       Access: Public
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
123 14 Dtool_Koxtql0m 6 122 2489 0 14 Dtool_Koxtql0m 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Equality operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2521  5 other 1 2519  
124 14 Dtool_Koxt4gwG 6 123 2489 0 14 Dtool_Koxt4gwG 239 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Inequality operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2521  5 other 1 2519  
125 14 Dtool_KoxtKw5E 6 124 2489 0 14 Dtool_KoxtKw5E 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Ordering operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2521  5 other 1 2519  
126 14 Dtool_Koxt6HHO 4 125 2491 0 14 Dtool_Koxt6HHO 270 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2518  5 value 1 2519  
127 14 Dtool_KoxtqvVh 6 126 2519 0 14 Dtool_KoxtqvVh 262 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
128 14 Dtool_KoxtjUSR 7 127 2525 1568 14 Dtool_KoxtjUSR 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
129 14 Dtool_KoxtBeVR 7 128 2525 1568 14 Dtool_KoxtBeVR 265 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2521  1 n 1 2490  
130 14 Dtool_KoxteMQy 4 129 2491 0 14 Dtool_KoxteMQy 342 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2518  1 n 1 2490  5 value 1 2519  
131 14 Dtool_KoxtkJgo 6 111 2519 0 14 Dtool_KoxtkJgo 293 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Filename typecast operator
//       Access: Published
//  Description: Returns the variable's value as a Filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2521  
132 14 Dtool_KoxtZ5NO 7 132 2526 1388 14 Dtool_KoxtZ5NO 723 // Filename: configVariableInt.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
133 14 Dtool_KoxtCIhz 7 132 2526 1388 14 Dtool_KoxtCIhz 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  5 flags 1 2490  
134 14 Dtool_Koxttwuj 7 132 2526 1388 14 Dtool_Koxttwuj 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  
135 14 Dtool_KoxtVauC 7 132 2526 1388 14 Dtool_KoxtVauC 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2488  
136 14 Dtool_KoxtJdKP 7 132 2526 1388 14 Dtool_KoxtJdKP 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2490  11 description 1 2488  5 flags 1 2490  
137 14 Dtool_KoxtIVT4 7 132 2526 1388 14 Dtool_KoxtIVT4 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2490  11 description 1 2488  
138 14 Dtool_Koxt15LP 7 132 2526 1388 14 Dtool_Koxt15LP 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2490  
139 14 Dtool_KoxtvXiv 6 133 2526 0 14 Dtool_KoxtvXiv 266 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2526  5 value 1 2490  
140 14 Dtool_Koxttake 6 135 2490 0 14 Dtool_Koxttake 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2527  
141 14 Dtool_Koxtrtl3 6 136 2490 0 14 Dtool_Koxtrtl3 275 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2527  1 n 1 2490  
142 14 Dtool_KoxtV_rk 4 137 2491 0 14 Dtool_KoxtV_rk 265 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2526  5 value 1 2490  
143 14 Dtool_KoxtUxqZ 6 138 2490 0 14 Dtool_KoxtUxqZ 257 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2527  
144 14 Dtool_KoxtyloR 6 139 2490 0 14 Dtool_KoxtyloR 273 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2527  
145 14 Dtool_Koxtaaqx 6 140 2490 0 14 Dtool_Koxtaaqx 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2527  1 n 1 2490  
146 14 Dtool_KoxtUSbb 4 141 2491 0 14 Dtool_KoxtUSbb 337 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2526  1 n 1 2490  5 value 1 2490  
147 14 Dtool_KoxtFZt6 6 134 2490 0 14 Dtool_KoxtFZt6 265 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2527  
148 14 Dtool_KoxtIBht 7 144 2529 1399 14 Dtool_KoxtIBht 727 // Filename: configVariableInt64.I
// Created by:  drose (19Dec07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
149 14 Dtool_KoxtD0uL 7 144 2529 1399 14 Dtool_KoxtD0uL 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  5 flags 1 2507  
150 14 Dtool_KoxtjHwS 7 144 2529 1399 14 Dtool_KoxtjHwS 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  
151 14 Dtool_Koxt4Cxw 7 144 2529 1399 14 Dtool_Koxt4Cxw 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2488  
152 14 Dtool_KoxtI7Hm 7 144 2529 1399 14 Dtool_KoxtI7Hm 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2507  11 description 1 2488  5 flags 1 2507  
153 14 Dtool_KoxtQRS3 7 144 2529 1399 14 Dtool_KoxtQRS3 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2507  11 description 1 2488  
154 14 Dtool_Koxt8RDd 7 144 2529 1399 14 Dtool_Koxt8RDd 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2507  
155 14 Dtool_Koxt7ape 6 145 2529 0 14 Dtool_Koxt7ape 268 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2529  5 value 1 2507  
156 14 Dtool_KoxtGyZN 6 147 2507 0 14 Dtool_KoxtGyZN 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2530  
157 14 Dtool_KoxtzjjH 6 148 2507 0 14 Dtool_KoxtzjjH 277 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::operator []
//       Access: Published
//  Description: Returns the value of the variable's nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  1 n 1 2490  
158 14 Dtool_KoxtbSyE 4 149 2491 0 14 Dtool_KoxtbSyE 267 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2529  5 value 1 2507  
159 14 Dtool_KoxtrK6I 6 150 2507 0 14 Dtool_KoxtrK6I 259 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2530  
160 14 Dtool_KoxtrQn5 6 151 2507 0 14 Dtool_KoxtrQn5 275 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2530  
161 14 Dtool_Koxts6tO 6 152 2507 0 14 Dtool_Koxts6tO 262 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  1 n 1 2490  
162 14 Dtool_KoxtGHZH 4 153 2491 0 14 Dtool_KoxtGHZH 339 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2529  1 n 1 2490  5 value 1 2507  
163 14 Dtool_KoxtffXj 6 146 2507 0 14 Dtool_KoxtffXj 267 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::typecast operator
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2530  
164 14 Dtool_Koxt0y9H 7 156 2532 1401 14 Dtool_Koxt0y9H 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  11 description 1 2488  5 flags 1 2490  
165 14 Dtool_Koxtb__G 7 156 2532 1401 14 Dtool_Koxtb__G 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  11 description 1 2488  
166 14 Dtool_KoxtQEAl 7 156 2532 1401 14 Dtool_KoxtQEAl 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
167 14 Dtool_KoxtUmrj 6 158 2490 0 14 Dtool_KoxtUmrj 279 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_values
//       Access: Published
//  Description: Returns the number of values in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2533  
168 14 Dtool_KoxtiLnG 6 159 2488 0 14 Dtool_KoxtiLnG 274 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_string_value
//       Access: Published
//  Description: Returns the nth value of the variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2533  1 n 1 2490  
169 14 Dtool_Koxt9_us 6 160 2490 0 14 Dtool_Koxt9_us 293 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_unique_values
//       Access: Published
//  Description: Returns the number of unique values in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2533  
170 14 Dtool_KoxtclMe 6 161 2488 0 14 Dtool_KoxtclMe 281 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_unique_value
//       Access: Published
//  Description: Returns the nth unique value of the variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2533  1 n 1 2490  
171 14 Dtool_KoxttI9s 6 162 2490 0 14 Dtool_KoxttI9s 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::size()
//       Access: Published
//  Description: Returns the number of unique values of the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2533  
172 14 Dtool_KoxtowvO 6 163 2488 0 14 Dtool_KoxtowvO 448 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::operator []
//       Access: Published
//  Description: Returns the nth unique value of the variable.  Note
//               that the indexing operator returns the list of unique
//               values, and so the maximum range is
//               get_num_unique_values().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2533  1 n 1 2490  
173 14 Dtool_Koxt5Asq 4 164 2491 0 14 Dtool_Koxt5Asq 0 2 4 this 3 2533  3 out 1 2499  
174 14 Dtool_KoxthtwC 4 165 2491 0 14 Dtool_KoxthtwC 0 2 4 this 3 2533  3 out 1 2499  
175 14 Dtool_KoxtbUoR 6 167 2493 0 14 Dtool_KoxtbUoR 0 2 4 this 3 2535  4 name 1 2488  
176 14 Dtool_KoxtICHW 6 168 2493 0 14 Dtool_KoxtICHW 0 6 4 this 3 2535  7 pattern 1 2488  4 type 1 2383  13 default_value 1 2488  11 description 1 2488  5 flags 1 2490  
177 14 Dtool_Koxtv8JU 6 168 2493 0 14 Dtool_Koxtv8JU 0 5 4 this 3 2535  7 pattern 1 2488  4 type 1 2383  13 default_value 1 2488  11 description 1 2488  
178 14 Dtool_KoxtfBGQ 6 168 2493 0 14 Dtool_KoxtfBGQ 0 4 4 this 3 2535  7 pattern 1 2488  4 type 1 2383  13 default_value 1 2488  
179 14 Dtool_KoxtvzyQ 6 169 2490 0 14 Dtool_KoxtvzyQ 824 // Filename: configVariableManager.I
// Created by:  drose (15Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_num_variables
//       Access: Published
//  Description: Returns the current number of active ConfigVariableCores in
//               the world.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
180 14 Dtool_Koxt2qFF 6 170 2493 0 14 Dtool_Koxt2qFF 290 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_variable
//       Access: Published
//  Description: Returns the nth active ConfigVariableCore in the world.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  1 n 1 2490  
181 14 Dtool_KoxtuDAj 6 171 2488 0 14 Dtool_KoxtuDAj 0 2 4 this 3 2536  1 n 1 2490  
182 14 Dtool_Koxtp8_h 6 172 2489 0 14 Dtool_Koxtp8_h 0 2 4 this 3 2536  1 n 1 2490  
183 14 Dtool_KoxtfFtp 4 173 2491 0 14 Dtool_KoxtfFtp 0 2 4 this 3 2536  3 out 1 2499  
184 14 Dtool_KoxtH7se 4 174 2491 0 14 Dtool_KoxtH7se 0 2 4 this 3 2536  3 out 1 2499  
185 14 Dtool_Koxt5XCP 4 175 2491 0 14 Dtool_Koxt5XCP 0 2 4 this 3 2536  3 out 1 2499  
186 14 Dtool_KoxtKzQG 4 176 2491 0 14 Dtool_KoxtKzQG 0 1 4 this 3 2536  
187 14 Dtool_Koxtngxf 4 177 2491 0 14 Dtool_Koxtngxf 0 1 4 this 3 2536  
188 14 Dtool_Koxt0fM_ 4 178 2491 0 14 Dtool_Koxt0fM_ 0 1 4 this 3 2536  
189 14 Dtool_KoxtBx3a 6 179 2535 0 14 Dtool_KoxtBx3a 0 0 
190 14 Dtool_KoxtH5sv 7 181 2540 1424 14 Dtool_KoxtH5sv 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2538  11 description 1 2488  5 flags 1 2490  
191 14 Dtool_Koxto2EQ 7 181 2540 1424 14 Dtool_Koxto2EQ 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2538  11 description 1 2488  
192 14 Dtool_KoxtAynx 7 181 2540 1424 14 Dtool_KoxtAynx 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  5 flags 1 2490  
193 14 Dtool_KoxtY3qt 7 181 2540 1424 14 Dtool_KoxtY3qt 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  
194 14 Dtool_KoxtV4V4 7 181 2540 1424 14 Dtool_KoxtV4V4 737 // Filename: configVariableSearchPath.I
// Created by:  drose (21Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  11 description 1 2488  5 flags 1 2490  
195 14 Dtool_Koxti7el 7 181 2540 1424 14 Dtool_Koxti7el 737 // Filename: configVariableSearchPath.I
// Created by:  drose (21Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  11 description 1 2488  
196 14 Dtool_KoxtL6YY 7 181 2540 1424 14 Dtool_KoxtL6YY 737 // Filename: configVariableSearchPath.I
// Created by:  drose (21Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
197 14 Dtool_Koxt8xvO 6 184 2538 0 14 Dtool_Koxt8xvO 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
198 14 Dtool_Koxt_lIw 6 185 2538 0 14 Dtool_Koxt_lIw 243 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_default_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
199 14 Dtool_Koxt9EIJ 6 186 2489 0 14 Dtool_Koxt9EIJ 359 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear_local_value
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2540  
200 14 Dtool_KoxtTT5e 4 187 2491 0 14 Dtool_KoxtTT5e 347 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2540  
201 14 Dtool_KoxtCt4a 4 188 2491 0 14 Dtool_KoxtCt4a 293 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_directory
//       Access: Published
//  Description: Adds a new directory to the end of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2540  9 directory 1 2519  
202 14 Dtool_KoxtClTA 4 189 2491 0 14 Dtool_KoxtClTA 296 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_directory
//       Access: Published
//  Description: Adds a new directory to the front of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2540  9 directory 1 2519  
203 14 Dtool_KoxtsHLH 4 190 2491 0 14 Dtool_KoxtsHLH 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2540  4 path 1 2538  
204 14 Dtool_KoxtA5UV 4 190 2491 0 14 Dtool_KoxtA5UV 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2540  4 path 1 2488  9 separator 1 2488  
205 14 Dtool_KoxtqRVC 4 190 2491 0 14 Dtool_KoxtqRVC 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2540  4 path 1 2488  
206 14 Dtool_KoxtUO8I 4 191 2491 0 14 Dtool_KoxtUO8I 345 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the beginning of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2540  4 path 1 2538  
207 14 Dtool_KoxtRA60 6 192 2489 0 14 Dtool_KoxtRA60 309 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::is_empty
//       Access: Published
//  Description: Returns true if the search list is empty, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
208 14 Dtool_KoxtSVN5 6 193 2490 0 14 Dtool_KoxtSVN5 298 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_num_directories
//       Access: Published
//  Description: Returns the number of directories on the search list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
209 14 Dtool_Koxtcr0V 6 194 2519 0 14 Dtool_Koxtcr0V 284 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_directory
//       Access: Published
//  Description: Returns the nth directory on the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  1 n 1 2490  
210 14 Dtool_KoxtXwzn 7 195 2525 1568 14 Dtool_KoxtXwzn 466 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_file
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Returns the full
//               matching pathname of the first match if found, or the
//               empty string if not found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  8 filename 1 2519  
211 14 Dtool_Koxt7lh2 7 196 2543 1503 14 Dtool_Koxt7lh2 458 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  8 filename 1 2519  
212 14 Dtool_KoxtJhmL 6 196 2490 0 14 Dtool_KoxtJhmL 682 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  8 filename 1 2519  7 results 1 2543  
213 14 Dtool_KoxtkYNJ 4 197 2491 0 14 Dtool_KoxtkYNJ 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  3 out 1 2499  
214 14 Dtool_Koxtj3CN 4 198 2491 0 14 Dtool_Koxtj3CN 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  3 out 1 2499  
215 14 Dtool_Koxtzr0K 6 183 2538 0 14 Dtool_Koxtzr0K 275 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::DSearchPath typecast
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
216 14 Dtool_KoxtxoFd 7 200 2544 1456 14 Dtool_KoxtxoFd 729 // Filename: configVariableString.I
// Created by:  drose (20Oct04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2488  
217 14 Dtool_KoxtlDF7 7 200 2544 1456 14 Dtool_KoxtlDF7 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  5 flags 1 2490  
218 14 Dtool_KoxtZRZG 7 200 2544 1456 14 Dtool_KoxtZRZG 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2488  13 default_value 1 2488  11 description 1 2488  
219 14 Dtool_KoxtpyKD 7 200 2544 1456 14 Dtool_KoxtpyKD 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 2488  13 default_value 1 2488  
220 14 Dtool_KoxtlnPz 6 201 2544 0 14 Dtool_KoxtlnPz 269 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::operator =
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2544  5 value 1 2488  
221 14 Dtool_KoxtehBq 6 203 2488 0 14 Dtool_KoxtehBq 223 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::c_str
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2545  
222 14 Dtool_KoxtYAjn 6 204 2489 0 14 Dtool_KoxtYAjn 223 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::empty
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2545  
223 14 Dtool_KoxtkRuz 6 205 2523 0 14 Dtool_KoxtkRuz 224 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2545  
224 14 Dtool_KoxtjG7L 6 206 2524 0 14 Dtool_KoxtjG7L 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2545  1 n 1 2490  
225 14 Dtool_Koxtvnj9 6 207 2489 0 14 Dtool_Koxtvnj9 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Equality operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2545  5 other 1 2488  
226 14 Dtool_Koxt8nB4 6 208 2489 0 14 Dtool_Koxt8nB4 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Inequality operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2545  5 other 1 2488  
227 14 Dtool_KoxtfdFk 6 209 2489 0 14 Dtool_KoxtfdFk 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Ordering operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2545  5 other 1 2488  
228 14 Dtool_KoxteOBH 4 210 2491 0 14 Dtool_KoxteOBH 268 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2544  5 value 1 2488  
229 14 Dtool_Koxtiqp3 6 211 2488 0 14 Dtool_Koxtiqp3 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2545  
230 14 Dtool_Koxtlm9N 6 212 2488 0 14 Dtool_Koxtlm9N 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2545  
231 14 Dtool_KoxtkWLx 6 213 2488 0 14 Dtool_KoxtkWLx 263 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2545  1 n 1 2490  
232 14 Dtool_KoxtBIo5 4 214 2491 0 14 Dtool_KoxtBIo5 340 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2544  1 n 1 2490  5 value 1 2488  
233 14 Dtool_Koxtjh74 6 202 2488 0 14 Dtool_Koxtjh74 275 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::string typecast operator
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2545  
234 14 Dtool_Koxtb8ol 7 226 2549 1470 14 Dtool_Koxtb8ol 0 1 4 copy 1 2547  
235 14 Dtool_KoxtCK16 7 226 2549 1470 14 Dtool_KoxtCK16 0 1 4 copy 1 2550  
236 14 Dtool_Koxt3KKa 6 227 2523 0 14 Dtool_Koxt3KKa 0 1 4 this 3 2547  
237 14 Dtool_KoxtxmeB 6 228 2552 0 14 Dtool_KoxtxmeB 0 2 4 this 3 2547  1 n 1 2523  
238 14 Dtool_KoxtBs41 6 229 2552 0 14 Dtool_KoxtBs41 0 2 4 this 3 2547  1 n 1 2523  
239 14 Dtool_Koxt5XDU 6 230 2488 0 14 Dtool_Koxt5XDU 0 1 4 this 3 2547  
240 14 Dtool_KoxtVswo 6 231 2488 0 14 Dtool_KoxtVswo 0 3 4 this 3 2547  1 n 1 2523  5 count 1 2523  
241 14 Dtool_KoxtrYtN 6 232 2490 0 14 Dtool_KoxtrYtN 0 1 4 this 3 2547  
242 14 Dtool_KoxtK31w 6 233 2490 0 14 Dtool_KoxtK31w 0 1 4 this 3 2547  
243 14 Dtool_Koxt6tah 4 223 2491 0 14 Dtool_Koxt6tah 0 1 4 this 3 2553  
244 14 Dtool_KoxtL9NI 4 224 2491 0 14 Dtool_KoxtL9NI 0 2 4 this 3 2554  3 out 1 2499  
245 14 Dtool_Koxtrcp6 6 221 2489 0 14 Dtool_Koxtrcp6 372 ////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::is_null
//       Access: Published
//  Description: Returns true if the PointerTo is a NULL pointer,
//               false otherwise.  (Direct comparison to a NULL
//               pointer also works.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2556  
246 14 Dtool_KoxtYp0r 6 222 2523 0 14 Dtool_KoxtYp0r 219 ////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::get_hash
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2556  
247 14 Dtool_Koxtw0oZ 7 241 2560 1482 14 Dtool_Koxtw0oZ 0 1 4 copy 1 2558  
248 14 Dtool_KoxtA_J2 7 241 2560 1482 14 Dtool_KoxtA_J2 0 1 4 copy 1 2561  
249 14 Dtool_KoxtAAHC 6 242 2523 0 14 Dtool_KoxtAAHC 0 1 4 this 3 2558  
250 14 Dtool_KoxtUudi 6 243 2490 0 14 Dtool_KoxtUudi 0 2 4 this 3 2558  1 n 1 2523  
251 14 Dtool_Koxt5vUQ 6 244 2490 0 14 Dtool_Koxt5vUQ 0 2 4 this 3 2558  1 n 1 2523  
252 14 Dtool_Koxt6KKu 6 245 2488 0 14 Dtool_Koxt6KKu 0 1 4 this 3 2558  
253 14 Dtool_KoxtSNVu 6 246 2488 0 14 Dtool_KoxtSNVu 0 3 4 this 3 2558  1 n 1 2523  5 count 1 2523  
254 14 Dtool_KoxtURN7 6 247 2490 0 14 Dtool_KoxtURN7 0 1 4 this 3 2558  
255 14 Dtool_KoxtIiJn 6 248 2490 0 14 Dtool_KoxtIiJn 0 1 4 this 3 2558  
256 14 Dtool_Koxt0b1d 4 238 2491 0 14 Dtool_Koxt0b1d 0 1 4 this 3 2563  
257 14 Dtool_Koxt7SJI 4 239 2491 0 14 Dtool_Koxt7SJI 0 2 4 this 3 2564  3 out 1 2499  
258 14 Dtool_KoxtiaPN 7 256 2568 1494 14 Dtool_KoxtiaPN 0 1 4 copy 1 2566  
259 14 Dtool_KoxtFege 7 256 2568 1494 14 Dtool_KoxtFege 0 1 4 copy 1 2569  
260 14 Dtool_Koxt6lat 6 257 2523 0 14 Dtool_Koxt6lat 0 1 4 this 3 2566  
261 14 Dtool_KoxtZSAv 6 258 2571 0 14 Dtool_KoxtZSAv 0 2 4 this 3 2566  1 n 1 2523  
262 14 Dtool_Koxt3Rdm 6 259 2571 0 14 Dtool_Koxt3Rdm 0 2 4 this 3 2566  1 n 1 2523  
263 14 Dtool_KoxteEod 6 260 2488 0 14 Dtool_KoxteEod 0 1 4 this 3 2566  
264 14 Dtool_KoxtaNne 6 261 2488 0 14 Dtool_KoxtaNne 0 3 4 this 3 2566  1 n 1 2523  5 count 1 2523  
265 14 Dtool_Koxt9K1R 6 262 2490 0 14 Dtool_Koxt9K1R 0 1 4 this 3 2566  
266 14 Dtool_Koxt1msB 6 263 2490 0 14 Dtool_Koxt1msB 0 1 4 this 3 2566  
267 14 Dtool_Koxt_ZKV 4 253 2491 0 14 Dtool_Koxt_ZKV 0 1 4 this 3 2572  
268 14 Dtool_KoxtYDh_ 4 254 2491 0 14 Dtool_KoxtYDh_ 0 2 4 this 3 2573  3 out 1 2499  
269 14 Dtool_KoxtItBT 6 266 2489 0 14 Dtool_KoxtItBT 0 2 3 sym 1 2488  3 def 1 2489  
270 14 Dtool_KoxtdJ1K 6 266 2489 0 14 Dtool_KoxtdJ1K 0 1 3 sym 1 2488  
271 14 Dtool_KoxtoKMu 6 267 2490 0 14 Dtool_KoxtoKMu 0 2 3 sym 1 2488  3 def 1 2490  
272 14 Dtool_Koxt6AVX 6 267 2490 0 14 Dtool_Koxt6AVX 0 1 3 sym 1 2488  
273 14 Dtool_Koxtyb_D 6 268 2552 0 14 Dtool_Koxtyb_D 0 2 3 sym 1 2488  3 def 1 2552  
274 14 Dtool_KoxtjW43 6 268 2552 0 14 Dtool_KoxtjW43 0 1 3 sym 1 2488  
275 14 Dtool_Koxthf_c 6 269 2508 0 14 Dtool_Koxthf_c 0 2 3 sym 1 2488  3 def 1 2508  
276 14 Dtool_Koxt8wvR 6 269 2508 0 14 Dtool_Koxt8wvR 0 1 3 sym 1 2488  
277 14 Dtool_KoxtGDMQ 6 270 2488 0 14 Dtool_KoxtGDMQ 0 2 3 sym 1 2488  3 def 1 2488  
278 14 Dtool_KoxtAIIq 6 270 2488 0 14 Dtool_KoxtAIIq 0 1 3 sym 1 2488  
279 14 Dtool_KoxtxUgk 7 284 2503 1513 14 Dtool_KoxtxUgk 0 0 
280 14 Dtool_KoxtzohW 7 284 2503 1513 14 Dtool_KoxtzohW 0 1 4 copy 1 2538  
281 14 Dtool_KoxtmjlH 7 284 2503 1513 14 Dtool_KoxtmjlH 0 1 9 directory 1 2519  
282 14 Dtool_KoxttuI2 7 284 2503 1513 14 Dtool_KoxttuI2 0 2 4 path 1 2488  9 separator 1 2488  
283 14 Dtool_KoxtbE_t 7 284 2503 1513 14 Dtool_KoxtbE_t 0 1 4 path 1 2488  
284 14 Dtool_Koxt4_r9 6 285 2503 0 14 Dtool_Koxt4_r9 0 2 4 this 3 2503  4 copy 1 2538  
285 14 Dtool_Koxt_ecb 4 287 2491 0 14 Dtool_Koxt_ecb 0 1 4 this 3 2503  
286 14 Dtool_Koxtdvve 4 288 2491 0 14 Dtool_Koxtdvve 0 2 4 this 3 2503  9 directory 1 2519  
287 14 Dtool_KoxtSYWa 4 289 2491 0 14 Dtool_KoxtSYWa 0 2 4 this 3 2503  9 directory 1 2519  
288 14 Dtool_KoxtAcLB 4 290 2491 0 14 Dtool_KoxtAcLB 0 2 4 this 3 2503  4 path 1 2538  
289 14 Dtool_KoxtwDyg 4 290 2491 0 14 Dtool_KoxtwDyg 0 3 4 this 3 2503  4 path 1 2488  9 separator 1 2488  
290 14 Dtool_KoxtufoY 4 290 2491 0 14 Dtool_KoxtufoY 0 2 4 this 3 2503  4 path 1 2488  
291 14 Dtool_Koxtihym 4 291 2491 0 14 Dtool_Koxtihym 0 2 4 this 3 2503  4 path 1 2538  
292 14 Dtool_KoxtbEii 6 292 2489 0 14 Dtool_KoxtbEii 0 1 4 this 3 2538  
293 14 Dtool_KoxtQk9K 6 293 2490 0 14 Dtool_KoxtQk9K 0 1 4 this 3 2538  
294 14 Dtool_KoxteLbZ 6 294 2519 0 14 Dtool_KoxteLbZ 0 2 4 this 3 2538  1 n 1 2490  
295 14 Dtool_Koxt86AY 7 295 2525 1568 14 Dtool_Koxt86AY 0 2 4 this 3 2538  8 filename 1 2519  
296 14 Dtool_KoxtkIB3 7 296 2543 1503 14 Dtool_KoxtkIB3 445 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2538  8 filename 1 2519  
297 14 Dtool_KoxtOBvK 6 296 2490 0 14 Dtool_KoxtOBvK 0 3 4 this 3 2538  8 filename 1 2519  7 results 1 2543  
298 14 Dtool_KoxtgvcZ 7 297 2525 1568 14 Dtool_KoxtgvcZ 531 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::search_path
//       Access: Published, Static
//  Description: A quick-and-easy way to search a searchpath for a
//               file when you don't feel like building or keeping
//               around a DSearchPath object.  This simply
//               constructs a temporary DSearchPath based on the
//               indicated path string, and searches that.
//////////////////////////////////////////////////////////////////// 3 8 filename 1 2519  4 path 1 2488  9 separator 1 2488  
299 14 Dtool_KoxtFJd4 7 297 2525 1568 14 Dtool_KoxtFJd4 531 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::search_path
//       Access: Published, Static
//  Description: A quick-and-easy way to search a searchpath for a
//               file when you don't feel like building or keeping
//               around a DSearchPath object.  This simply
//               constructs a temporary DSearchPath based on the
//               indicated path string, and searches that.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2519  4 path 1 2488  
300 14 Dtool_KoxtfyrW 4 298 2491 0 14 Dtool_KoxtfyrW 0 3 4 this 3 2538  3 out 1 2499  9 separator 1 2488  
301 14 Dtool_Koxtx5QI 4 298 2491 0 14 Dtool_Koxtx5QI 0 2 4 this 3 2538  3 out 1 2499  
302 14 Dtool_KoxtGTuw 4 299 2491 0 14 Dtool_KoxtGTuw 0 3 4 this 3 2538  3 out 1 2499  12 indent_level 1 2490  
303 14 Dtool_KoxtIVg1 4 299 2491 0 14 Dtool_KoxtIVg1 0 2 4 this 3 2538  3 out 1 2499  
304 14 Dtool_KoxtjIw0 7 274 2543 1503 14 Dtool_KoxtjIw0 0 0 
305 14 Dtool_Koxtx6Kt 7 274 2543 1503 14 Dtool_Koxtx6Kt 0 1 4 copy 1 2575  
306 14 Dtool_KoxtaaFk 6 275 2543 0 14 Dtool_KoxtaaFk 0 2 4 this 3 2543  4 copy 1 2575  
307 14 Dtool_Koxtkmuw 4 277 2491 0 14 Dtool_Koxtkmuw 0 1 4 this 3 2543  
308 14 Dtool_Koxt9HaP 6 278 2490 0 14 Dtool_Koxt9HaP 0 1 4 this 3 2575  
309 14 Dtool_Koxt6aQP 6 279 2519 0 14 Dtool_Koxt6aQP 0 2 4 this 3 2575  1 n 1 2490  
310 14 Dtool_KoxtiKMD 7 280 2525 1568 14 Dtool_KoxtiKMD 872 // Filename: dSearchPath.I
// Created by:  drose (01Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::Results::operator []
//       Access: Published
//  Description: Returns the nth filename in the set.  This method is
//               defined to make the Results object appear to be a
//               list in Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2575  1 n 1 2490  
311 14 Dtool_KoxtMQN9 6 281 2490 0 14 Dtool_KoxtMQN9 382 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::Results::size
//       Access: Published
//  Description: Returns the num of filenames in the set.  This method
//               is defined to make the Results object appear to be a
//               list in Python.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2575  
312 14 Dtool_KoxtU5RW 4 282 2491 0 14 Dtool_KoxtU5RW 0 2 4 this 3 2575  3 out 1 2499  
313 14 Dtool_Koxt2EVj 4 283 2491 0 14 Dtool_Koxt2EVj 0 3 4 this 3 2575  3 out 1 2499  12 indent_level 1 2490  
314 14 Dtool_KoxtcV9T 4 283 2491 0 14 Dtool_KoxtcV9T 0 2 4 this 3 2575  3 out 1 2499  
315 14 Dtool_KoxtH3XS 6 301 2489 0 14 Dtool_KoxtH3XS 826 // Filename: executionEnvironment.I
// Created by:  drose (15May00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::has_environment_variable
//       Access: Public, Static
//  Description: Returns true if the indicated environment variable
//               is defined.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2488  
316 14 Dtool_Koxtqf8R 6 302 2488 0 14 Dtool_Koxtqf8R 396 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_environment_variable
//       Access: Public, Static
//  Description: Returns the definition of the indicated environment
//               variable, or the empty string if the variable is
//               undefined.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2488  
317 14 Dtool_KoxtLmhJ 4 303 2491 0 14 Dtool_KoxtLmhJ 329 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_environment_variable
//       Access: Public, Static
//  Description: Changes the definition of the indicated environment
//               variable.
//////////////////////////////////////////////////////////////////// 2 3 var 1 2488  5 value 1 2488  
318 14 Dtool_Koxte_G_ 4 304 2491 0 14 Dtool_Koxte_G_ 588 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::shadow_environment_variable
//       Access: Public, Static
//  Description: Changes the apparent definition of the indicated
//               environment variable by masking it within this class
//               with a new value.  This does not change the actual
//               environment variable, but future calls to
//               get_environment_variable() will return this new
//               value.
//////////////////////////////////////////////////////////////////// 2 3 var 1 2488  5 value 1 2488  
319 14 Dtool_Koxt9ku2 4 305 2491 0 14 Dtool_Koxt9ku2 399 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::clear_shadow
//       Access: Public, Static
//  Description: Removes a value set by a previous call to
//               shadow_environment_variable(), and lets the actual
//               value of the variable show again.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2488  
320 14 Dtool_Koxt156e 6 306 2488 0 14 Dtool_Koxt156e 0 1 3 str 1 2488  
321 14 Dtool_Koxtz8EB 6 307 2490 0 14 Dtool_Koxtz8EB 348 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_num_args
//       Access: Public, Static
//  Description: Returns the number of command-line arguments
//               available, not counting arg 0, the binary name.
//////////////////////////////////////////////////////////////////// 0 
322 14 Dtool_Koxtl2fT 6 308 2488 0 14 Dtool_Koxtl2fT 462 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_arg
//       Access: Public, Static
//  Description: Returns the nth command-line argument.  The index n
//               must be in the range [0 .. get_num_args()).  The
//               first parameter, n == 0, is the first actual
//               parameter, not the binary name.
//////////////////////////////////////////////////////////////////// 1 1 n 1 2490  
323 14 Dtool_Koxt_LAg 6 309 2488 0 14 Dtool_Koxt_LAg 352 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_binary_name
//       Access: Public, Static
//  Description: Returns the name of the binary executable that
//               started this program, if it can be determined.
//////////////////////////////////////////////////////////////////// 0 
324 14 Dtool_KoxtpyuE 6 310 2488 0 14 Dtool_KoxtpyuE 349 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_dtool_name
//       Access: Public, Static
//  Description: Returns the name of the libdtool DLL that
//               is used in this program, if it can be determined.
//////////////////////////////////////////////////////////////////// 0 
325 14 Dtool_KoxtDDsB 7 311 2525 1568 14 Dtool_KoxtDDsB 0 0 
326 14 Dtool_KoxtpZ5U 7 345 2577 1564 14 Dtool_KoxtpZ5U 222 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
327 14 Dtool_KoxtIhSy 7 345 2577 1564 14 Dtool_KoxtIhSy 222 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2488  4 mode 1 2419  
328 14 Dtool_Koxtn3do 7 345 2577 1564 14 Dtool_Koxtn3do 222 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
329 14 Dtool_Koxtb85a 4 347 2491 0 14 Dtool_Koxtb85a 216 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2577  8 filename 1 2488  4 mode 1 2419  
330 14 Dtool_KoxtCiyr 4 347 2491 0 14 Dtool_KoxtCiyr 216 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2577  8 filename 1 2488  
331 14 Dtool_Koxts2nM 4 348 2491 0 14 Dtool_Koxts2nM 227 // _WIN32
////////////////////////////////////////////////////////////////////
//     Function: FileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2577  
332 14 Dtool_KoxtrDS9 4 343 2491 0 14 Dtool_KoxtrDS9 0 1 4 this 3 2578  
333 14 Dtool_KoxtbMFg 6 332 2492 0 14 Dtool_KoxtbMFg 0 1 4 this 3 2578  
334 14 Dtool_Koxtpp1t 6 333 2578 0 14 Dtool_Koxtpp1t 0 1 4 this 3 2492  
335 14 Dtool_Koxt4uln 6 328 2490 0 14 Dtool_Koxt4uln 0 1 4 this 3 2492  
336 14 Dtool_Koxt9n9K 6 329 2579 0 14 Dtool_Koxt9n9K 0 1 4 this 3 2492  
337 14 Dtool_KoxtopQR 4 330 2491 0 14 Dtool_KoxtopQR 0 3 4 this 3 2492  3 off 1 2580  3 dir 1 2418  
338 14 Dtool_KoxtIWSF 4 330 2491 0 14 Dtool_KoxtIWSF 0 2 4 this 3 2492  3 pos 1 2579  
339 14 Dtool_KoxtFYBG 6 327 2581 0 14 Dtool_KoxtFYBG 0 1 4 this 3 2492  
340 14 Dtool_Koxt7W6h 6 341 2499 0 14 Dtool_Koxt7W6h 0 1 4 this 3 2578  
341 14 Dtool_KoxtHU9t 6 342 2578 0 14 Dtool_KoxtHU9t 0 1 4 this 3 2499  
342 14 Dtool_Koxtiovs 4 336 2491 0 14 Dtool_Koxtiovs 0 2 4 this 3 2499  1 c 1 2524  
343 14 Dtool_Koxtstz3 4 337 2491 0 14 Dtool_Koxtstz3 0 1 4 this 3 2499  
344 14 Dtool_KoxtwJlq 6 338 2579 0 14 Dtool_KoxtwJlq 0 1 4 this 3 2499  
345 14 Dtool_Koxtfa4w 4 339 2491 0 14 Dtool_Koxtfa4w 0 3 4 this 3 2499  3 off 1 2580  3 dir 1 2418  
346 14 Dtool_Koxt9D5k 4 339 2491 0 14 Dtool_Koxt9D5k 0 2 4 this 3 2499  3 pos 1 2579  
347 14 Dtool_KoxtT3JG 6 335 2581 0 14 Dtool_KoxtT3JG 0 1 4 this 3 2499  
348 14 Dtool_KoxtnXqS 6 321 2489 0 14 Dtool_KoxtnXqS 0 1 4 this 3 2582  
349 14 Dtool_KoxtZWpE 6 322 2489 0 14 Dtool_KoxtZWpE 0 1 4 this 3 2582  
350 14 Dtool_KoxtZTNl 6 323 2489 0 14 Dtool_KoxtZTNl 0 1 4 this 3 2582  
351 14 Dtool_KoxtBfVl 6 324 2489 0 14 Dtool_KoxtBfVl 0 1 4 this 3 2582  
352 14 Dtool_KoxtRFcH 4 325 2491 0 14 Dtool_KoxtRFcH 0 1 4 this 3 2581  
353 14 Dtool_Koxt0xIC 7 351 2525 1568 14 Dtool_Koxt0xIC 225 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2519  
354 14 Dtool_Koxtz3ik 7 351 2525 1568 14 Dtool_Koxtz3ik 0 2 7 dirname 1 2519  8 basename 1 2519  
355 14 Dtool_KoxtLYs9 7 351 2525 1568 14 Dtool_KoxtLYs9 704 // Filename: filename.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
356 14 Dtool_KoxtzHmO 7 351 2525 1568 14 Dtool_KoxtzHmO 704 // Filename: filename.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
357 14 Dtool_KoxtYS9H 7 351 2525 1568 14 Dtool_KoxtYS9H 220 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
358 14 Dtool_KoxtFi19 6 353 2584 0 14 Dtool_KoxtFi19 0 2 4 this 3 2519  4 self 1 2584  
359 14 Dtool_Koxtfamt 7 354 2525 1568 14 Dtool_Koxtfamt 240 ////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
360 14 Dtool_Koxtuv92 7 355 2525 1568 14 Dtool_Koxtuv92 242 ////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
361 14 Dtool_KoxtPXPP 7 356 2525 1568 14 Dtool_KoxtPXPP 239 ////////////////////////////////////////////////////////////////////
//     Function: Filename::dso_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
362 14 Dtool_Koxt_2MI 7 357 2525 1568 14 Dtool_Koxt_2MI 246 ////////////////////////////////////////////////////////////////////
//     Function: Filename::executable_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
363 14 Dtool_KoxtKsMA 7 358 2525 1568 14 Dtool_KoxtKsMA 348 ////////////////////////////////////////////////////////////////////
//     Function: Filename::pattern_filename named constructor
//       Access: Published
//  Description: Constructs a filename that represents a sequence of
//               numbered files.  See set_pattern().
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
364 14 Dtool_KoxtIF4r 7 359 2525 1568 14 Dtool_KoxtIF4r 0 2 11 os_specific 1 2488  4 type 1 2422  
365 14 Dtool_Koxt9IuR 7 359 2525 1568 14 Dtool_Koxt9IuR 0 1 11 os_specific 1 2488  
366 14 Dtool_KoxtZ4vm 7 360 2525 1568 14 Dtool_KoxtZ4vm 0 2 11 user_string 1 2488  4 type 1 2422  
367 14 Dtool_Koxt_Iq5 7 360 2525 1568 14 Dtool_Koxt_Iq5 0 1 11 user_string 1 2488  
368 14 Dtool_KoxtZ_3D 7 361 2525 1568 14 Dtool_KoxtZ_3D 0 4 7 dirname 1 2488  6 prefix 1 2488  6 suffix 1 2488  4 type 1 2422  
369 14 Dtool_KoxtLpPZ 7 361 2525 1568 14 Dtool_KoxtLpPZ 0 3 7 dirname 1 2488  6 prefix 1 2488  6 suffix 1 2488  
370 14 Dtool_KoxtwIGw 7 361 2525 1568 14 Dtool_KoxtwIGw 0 2 7 dirname 1 2488  6 prefix 1 2488  
371 14 Dtool_Koxtf_0B 6 362 2519 0 14 Dtool_Koxtf_0B 0 0 
372 14 Dtool_KoxteDx2 6 363 2519 0 14 Dtool_KoxteDx2 0 0 
373 14 Dtool_Koxt4CLy 6 364 2519 0 14 Dtool_Koxt4CLy 0 0 
374 14 Dtool_Koxtw0eY 6 365 2519 0 14 Dtool_Koxtw0eY 0 0 
375 14 Dtool_Koxte4GP 6 366 2525 0 14 Dtool_Koxte4GP 233 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  4 copy 1 2519  
376 14 Dtool_Koxt6V61 6 366 2525 0 14 Dtool_Koxt6V61 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  8 filename 1 2488  
377 14 Dtool_KoxtAn_g 6 366 2525 0 14 Dtool_KoxtAn_g 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  8 filename 1 2488  
378 14 Dtool_KoxtmyvU 6 368 2488 0 14 Dtool_KoxtmyvU 214 ////////////////////////////////////////////////////////////////////
//     Function: Filename::c_str
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
379 14 Dtool_KoxtOFzc 6 369 2489 0 14 Dtool_KoxtOFzc 214 ////////////////////////////////////////////////////////////////////
//     Function: Filename::empty
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
380 14 Dtool_KoxtgE4s 6 370 2523 0 14 Dtool_KoxtgE4s 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
381 14 Dtool_Koxt6cHo 6 371 2524 0 14 Dtool_Koxt6cHo 226 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  1 n 1 2490  
382 14 Dtool_KoxtkJiX 6 372 2488 0 14 Dtool_KoxtkJiX 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::substr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2519  5 begin 1 2523  3 end 1 2523  
383 14 Dtool_KoxtMKvI 6 372 2488 0 14 Dtool_KoxtMKvI 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::substr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 begin 1 2523  
384 14 Dtool_KoxtXGAt 6 373 2525 0 14 Dtool_KoxtXGAt 413 ////////////////////////////////////////////////////////////////////
//     Function: Filename::operator +=
//       Access: Published
//  Description: Appends the other filename onto the end of this one.
//               This does not introduce an intervening slash, but see
//               the Filename constructor that takes two parameters.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  5 other 1 2488  
385 14 Dtool_Koxtwk78 7 374 2525 1568 14 Dtool_Koxtwk78 312 ////////////////////////////////////////////////////////////////////
//     Function: Filename::operator +
//       Access: Published
//  Description: Returns a new Filename representing the concatenation
//               of the two filenames.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2488  
386 14 Dtool_KoxtFzJX 6 375 2488 0 14 Dtool_KoxtFzJX 439 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath
//       Access: Published
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
387 14 Dtool_KoxtnZLo 6 376 2488 0 14 Dtool_KoxtnZLo 380 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_dirname
//       Access: Published
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
388 14 Dtool_KoxtdGTD 6 377 2488 0 14 Dtool_KoxtdGTD 387 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename
//       Access: Published
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
389 14 Dtool_KoxtpN0c 6 378 2488 0 14 Dtool_KoxtpN0c 334 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_wo_extension
//       Access: Published
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
390 14 Dtool_KoxtNi_I 6 379 2488 0 14 Dtool_KoxtNi_I 322 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename_wo_extension
//       Access: Published
//  Description: Returns the basename part of the filename, without
//               the file extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
391 14 Dtool_Koxt_MQ8 6 380 2488 0 14 Dtool_Koxt_MQ8 383 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_extension
//       Access: Published
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
392 14 Dtool_KoxtoUip 4 381 2491 0 14 Dtool_KoxtoUip 68 // You can also use any of these to reassign pieces of the filename. 2 4 this 3 2525  1 s 1 2488  
393 14 Dtool_KoxtSdlj 4 382 2491 0 14 Dtool_KoxtSdlj 68 // You can also use any of these to reassign pieces of the filename. 2 4 this 3 2525  1 s 1 2488  
394 14 Dtool_KoxtSasV 4 383 2491 0 14 Dtool_KoxtSasV 0 2 4 this 3 2525  1 s 1 2488  
395 14 Dtool_Koxtu0Xc 4 384 2491 0 14 Dtool_Koxtu0Xc 0 2 4 this 3 2525  1 s 1 2488  
396 14 Dtool_KoxtQChI 4 385 2491 0 14 Dtool_KoxtQChI 0 2 4 this 3 2525  1 s 1 2488  
397 14 Dtool_Koxtx6fv 4 386 2491 0 14 Dtool_Koxtx6fv 0 2 4 this 3 2525  1 s 1 2488  
398 14 Dtool_KoxtK9mc 4 387 2491 0 14 Dtool_KoxtK9mc 445 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_binary
//       Access: Published
//  Description: Indicates that the filename represents a binary file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2525  
399 14 Dtool_KoxtBixh 4 388 2491 0 14 Dtool_KoxtBixh 441 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_text
//       Access: Published
//  Description: Indicates that the filename represents a text file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2525  
400 14 Dtool_KoxtnswQ 6 389 2489 0 14 Dtool_KoxtnswQ 523 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a binary file via a previous call to
//               set_binary().  It is possible that neither
//               is_binary() nor is_text() will be true, if neither
//               set_binary() nor set_text() was ever called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
401 14 Dtool_Koxtf3Vw 6 390 2489 0 14 Dtool_Koxtf3Vw 517 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_text
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a text file via a previous call to
//               set_text().  It is possible that neither is_binary()
//               nor is_text() will be true, if neither set_binary()
//               nor set_text() was ever called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
402 14 Dtool_Koxtc7yW 4 391 2491 0 14 Dtool_Koxtc7yW 646 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_type
//       Access: Published
//  Description: Sets the type of the file represented by the
//               filename.  This is useful for to_os_specific(),
//               resolve_filename(), test_existence(), and all such
//               real-world access functions.  It helps the Filename
//               know how to map the internal filename to the
//               OS-specific filename (for instance, maybe executables
//               should have an .exe extension).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  4 type 1 2422  
403 14 Dtool_KoxtELir 6 392 2422 0 14 Dtool_KoxtELir 325 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_type
//       Access: Published
//  Description: Returns the type of the file represented by the
//               filename, as previously set by set_type().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
404 14 Dtool_Koxt0_BT 4 393 2491 0 14 Dtool_Koxt0_BT 1075 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_pattern
//       Access: Published
//  Description: Sets the flag indicating whether this is a filename
//               pattern.  When this is true, the filename is
//               understood to be a placeholder for a numbered
//               sequence of filename, such as an image sequence.  In
//               this case, a sequence of one or more hash characters
//               ("#") should appear in the filename string; these
//               characters will be filled in with the corresponding
//               number (or more) of digits representing the sequence
//               number.  Sequence numbers always begin counting at 0.
//
//               When this is true, methods like has_hash() and
//               get_hash_to_end() and get_filename_index() may be
//               called.  Methods like is_exists() will implicitly
//               test for existance of filename sequence 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  7 pattern 1 2489  
405 14 Dtool_KoxtJg4Y 6 394 2489 0 14 Dtool_KoxtJg4Y 321 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_pattern
//       Access: Published
//  Description: Returns the flag indicating whether this is a
//               filename pattern.  See set_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
406 14 Dtool_KoxtNmUz 6 395 2489 0 14 Dtool_KoxtNmUz 651 ////////////////////////////////////////////////////////////////////
//     Function: Filename::has_hash
//       Access: Published
//  Description: Returns true if the filename is indicated to be a
//               filename pattern (that is, set_pattern(true) was
//               called), and the filename pattern did include a
//               sequence of hash marks, or false if it was not a
//               filename pattern or did not include hash marks.  If
//               this is true, then get_filename_index() will return a
//               different filename each time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
407 14 Dtool_Koxtq4gP 7 396 2525 1568 14 Dtool_Koxtq4gP 0 2 4 this 3 2519  5 index 1 2490  
408 14 Dtool_Koxt4SYs 6 397 2488 0 14 Dtool_Koxt4SYs 375 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_hash_to_end
//       Access: Published
//  Description: Returns the part of the filename beginning at the
//               hash sequence (if any), and continuing to the end of
//               the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
409 14 Dtool_KoxtIn6M 4 398 2491 0 14 Dtool_KoxtIn6M 0 2 4 this 3 2525  1 s 1 2488  
410 14 Dtool_KoxtTzFq 4 399 2491 0 14 Dtool_KoxtTzFq 0 2 4 this 3 2519  10 components 1 2586  
411 14 Dtool_KoxtMUbk 4 400 2491 0 14 Dtool_KoxtMUbk 0 1 4 this 3 2525  
412 14 Dtool_KoxtGI_b 6 401 2489 0 14 Dtool_KoxtGI_b 383 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_local
//       Access: Published
//  Description: Returns true if the filename is local, e.g. does not
//               begin with a slash, or false if the filename is fully
//               specified from the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
413 14 Dtool_KoxttIAk 6 402 2489 0 14 Dtool_KoxttIAk 782 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_fully_qualified
//       Access: Published
//  Description: Returns true if the filename is fully qualified,
//               e.g. begins with a slash.  This is almost, but not
//               quite, the same thing as !is_local().  It's not
//               exactly the same because a special case is made for
//               filenames that begin with a single dot followed by a
//               slash--these are considered to be fully qualified
//               (they are explicitly relative to the current
//               directory, and do not refer to a filename on a search
//               path somewhere).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
414 14 Dtool_Koxt_eKM 4 403 2491 0 14 Dtool_Koxt_eKM 0 1 4 this 3 2525  
415 14 Dtool_KoxtudOz 4 403 2491 0 14 Dtool_KoxtudOz 0 2 4 this 3 2525  15 start_directory 1 2519  
416 14 Dtool_KoxttwJA 6 404 2489 0 14 Dtool_KoxttwJA 0 1 4 this 3 2525  
417 14 Dtool_KoxtX1o1 6 405 2489 0 14 Dtool_KoxtX1o1 0 1 4 this 3 2525  
418 14 Dtool_KoxtHThn 6 406 2488 0 14 Dtool_KoxtHThn 0 1 4 this 3 2519  
419 14 Dtool_KoxtT7Xd 6 407 2488 0 14 Dtool_KoxtT7Xd 0 1 4 this 3 2519  
420 14 Dtool_KoxtXTVO 6 408 2488 0 14 Dtool_KoxtXTVO 0 1 4 this 3 2519  
421 14 Dtool_Koxto4Sv 6 409 2488 0 14 Dtool_Koxto4Sv 0 1 4 this 3 2519  
422 14 Dtool_KoxtXz2_ 6 410 2489 0 14 Dtool_KoxtXz2_ 0 1 4 this 3 2519  
423 14 Dtool_Koxt4vqn 6 411 2489 0 14 Dtool_Koxt4vqn 0 1 4 this 3 2519  
424 14 Dtool_KoxtADlT 6 412 2489 0 14 Dtool_KoxtADlT 0 1 4 this 3 2519  
425 14 Dtool_KoxtdwcX 6 413 2489 0 14 Dtool_KoxtdwcX 0 1 4 this 3 2519  
426 14 Dtool_KoxtQRcf 6 414 2490 0 14 Dtool_KoxtQRcf 0 4 4 this 3 2519  5 other 1 2519  19 this_missing_is_old 1 2489  20 other_missing_is_old 1 2489  
427 14 Dtool_Koxtihlq 6 414 2490 0 14 Dtool_Koxtihlq 0 3 4 this 3 2519  5 other 1 2519  19 this_missing_is_old 1 2489  
428 14 Dtool_Koxt3wx_ 6 414 2490 0 14 Dtool_Koxt3wx_ 0 2 4 this 3 2519  5 other 1 2519  
429 14 Dtool_KoxtKJyF 6 415 2523 0 14 Dtool_KoxtKJyF 0 1 4 this 3 2519  
430 14 Dtool_Koxt3OVg 6 416 2523 0 14 Dtool_Koxt3OVg 0 1 4 this 3 2519  
431 14 Dtool_KoxtjnXJ 6 417 2490 0 14 Dtool_KoxtjnXJ 0 1 4 this 3 2519  
432 14 Dtool_KoxtKd7B 6 418 2489 0 14 Dtool_KoxtKd7B 0 3 4 this 3 2525  10 searchpath 1 2538  17 default_extension 1 2488  
433 14 Dtool_Koxtk2zY 6 418 2489 0 14 Dtool_Koxtk2zY 0 2 4 this 3 2525  10 searchpath 1 2538  
434 14 Dtool_KoxtfEHg 6 419 2489 0 14 Dtool_KoxtfEHg 0 3 4 this 3 2525  9 directory 1 2525  13 allow_backups 1 2489  
435 14 Dtool_Koxt85oI 6 419 2489 0 14 Dtool_Koxt85oI 0 2 4 this 3 2525  9 directory 1 2525  
436 14 Dtool_Koxt45N1 6 420 2490 0 14 Dtool_Koxt45N1 0 2 4 this 3 2525  10 searchpath 1 2538  
437 14 Dtool_KoxtQaV2 6 421 2584 0 14 Dtool_KoxtQaV2 0 1 4 this 3 2519  
438 14 Dtool_KoxtPKbx 6 421 2489 0 14 Dtool_KoxtPKbx 0 2 4 this 3 2519  8 contents 1 2586  
439 14 Dtool_KoxtNbBG 6 422 2489 0 14 Dtool_KoxtNbBG 0 2 4 this 3 2519  6 stream 1 2588  
440 14 Dtool_KoxtZ4Va 6 422 2489 0 14 Dtool_KoxtZ4Va 0 2 4 this 3 2519  6 stream 1 2589  
441 14 Dtool_Koxt8bVc 6 423 2489 0 14 Dtool_Koxt8bVc 0 3 4 this 3 2519  6 stream 1 2590  8 truncate 1 2489  
442 14 Dtool_KoxtsSM1 6 423 2489 0 14 Dtool_KoxtsSM1 0 2 4 this 3 2519  6 stream 1 2590  
443 14 Dtool_KoxtqfrI 6 423 2489 0 14 Dtool_KoxtqfrI 0 3 4 this 3 2519  6 stream 1 2591  8 truncate 1 2489  
444 14 Dtool_Koxt6E__ 6 423 2489 0 14 Dtool_Koxt6E__ 0 2 4 this 3 2519  6 stream 1 2591  
445 14 Dtool_KoxtcumQ 6 424 2489 0 14 Dtool_KoxtcumQ 0 2 4 this 3 2519  6 stream 1 2590  
446 14 Dtool_Koxts6KK 6 424 2489 0 14 Dtool_Koxts6KK 0 2 4 this 3 2519  6 stream 1 2591  
447 14 Dtool_KoxthqDy 6 425 2489 0 14 Dtool_KoxthqDy 0 3 4 this 3 2519  6 stream 1 2577  8 truncate 1 2489  
448 14 Dtool_KoxtknnX 6 425 2489 0 14 Dtool_KoxtknnX 0 2 4 this 3 2519  6 stream 1 2577  
449 14 Dtool_Koxt1dSR 6 425 2489 0 14 Dtool_Koxt1dSR 0 3 4 this 3 2519  6 stream 1 2592  8 truncate 1 2489  
450 14 Dtool_KoxtLMts 6 425 2489 0 14 Dtool_KoxtLMts 0 2 4 this 3 2519  6 stream 1 2592  
451 14 Dtool_KoxtPADv 6 426 2489 0 14 Dtool_KoxtPADv 0 2 4 this 3 2519  6 stream 1 2577  
452 14 Dtool_KoxtakwR 6 426 2489 0 14 Dtool_KoxtakwR 0 2 4 this 3 2519  6 stream 1 2592  
453 14 Dtool_Koxtm9kw 6 427 2489 0 14 Dtool_Koxtm9kw 22 // USE_PANDAFILESTREAM 1 4 this 3 2519  
454 14 Dtool_KoxtCry9 6 428 2489 0 14 Dtool_KoxtCry9 0 1 4 this 3 2519  
455 14 Dtool_KoxtaMuO 6 429 2489 0 14 Dtool_KoxtaMuO 0 1 4 this 3 2519  
456 14 Dtool_Koxtaavz 6 430 2489 0 14 Dtool_Koxtaavz 0 2 4 this 3 2519  5 other 1 2519  
457 14 Dtool_KoxtjPPu 6 431 2489 0 14 Dtool_KoxtjPPu 0 2 4 this 3 2519  5 other 1 2519  
458 14 Dtool_KoxtOOnR 6 432 2489 0 14 Dtool_KoxtOOnR 0 1 4 this 3 2519  
459 14 Dtool_Koxteeq4 6 433 2489 0 14 Dtool_Koxteeq4 0 1 4 this 3 2519  
460 14 Dtool_KoxtCI79 6 434 2489 0 14 Dtool_KoxtCI79 0 1 4 this 3 2519  
461 14 Dtool_KoxtTm2T 6 435 2489 0 14 Dtool_KoxtTm2T 226 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Equality operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2488  
462 14 Dtool_KoxtNclT 6 436 2489 0 14 Dtool_KoxtNclT 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Inequality operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2488  
463 14 Dtool_KoxtyKFd 6 437 2489 0 14 Dtool_KoxtyKFd 226 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Ordering operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2488  
464 14 Dtool_KoxtwktQ 6 438 2490 0 14 Dtool_KoxtwktQ 219 ////////////////////////////////////////////////////////////////////
//     Function: Filename::compare_to
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2519  
465 14 Dtool_KoxteHUw 6 439 2489 0 14 Dtool_KoxteHUw 646 ////////////////////////////////////////////////////////////////////
//     Function: Filename::__nonzero__
//       Access: Published
//  Description: Returns true if the Filename is valid (not empty),
//               or false if it is an empty string.
//
//               This implements the Python equivalent to operator
//               bool.  Defining an actual operator bool method for
//               C++ use would work too, but it seems to cause too
//               many ambiguities for the C++ compiler, so we use this
//               Python-only approach instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
466 14 Dtool_KoxtnnHL 6 440 2490 0 14 Dtool_KoxtnnHL 0 1 4 this 3 2519  
467 14 Dtool_Koxto_Iv 4 441 2491 0 14 Dtool_Koxto_Iv 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  3 out 1 2499  
468 14 Dtool_KoxtsafE 7 442 2593 1919 14 Dtool_KoxtsafE 0 0 
469 14 Dtool_KoxtCFZV 6 367 2488 0 14 Dtool_KoxtCFZV 233 ////////////////////////////////////////////////////////////////////
//     Function: Filename::string typecast operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
470 14 Dtool_KoxtXLB8 7 444 2596 1675 14 Dtool_KoxtXLB8 225 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2594  
471 14 Dtool_KoxtA2Rm 7 444 2596 1675 14 Dtool_KoxtA2Rm 707 // Filename: globPattern.I
// Created by:  drose (30May00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 7 pattern 1 2488  
472 14 Dtool_KoxtIp0c 7 444 2596 1675 14 Dtool_KoxtIp0c 707 // Filename: globPattern.I
// Created by:  drose (30May00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
473 14 Dtool_KoxtgOgc 6 445 2596 0 14 Dtool_KoxtgOgc 233 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2596  4 copy 1 2594  
474 14 Dtool_KoxtD9Td 6 446 2489 0 14 Dtool_KoxtD9Td 220 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  5 other 1 2594  
475 14 Dtool_KoxtK_Dx 6 447 2489 0 14 Dtool_KoxtK_Dx 220 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  5 other 1 2594  
476 14 Dtool_KoxtyvIe 6 448 2489 0 14 Dtool_KoxtyvIe 219 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::operator <
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  5 other 1 2594  
477 14 Dtool_KoxtkjXp 4 449 2491 0 14 Dtool_KoxtkjXp 301 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_pattern
//       Access: Public
//  Description: Changes the pattern string that the GlobPattern
//               object matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2596  7 pattern 1 2488  
478 14 Dtool_KoxttRZ0 6 450 2488 0 14 Dtool_KoxttRZ0 301 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_pattern
//       Access: Public
//  Description: Returns the pattern string that the GlobPattern
//               object matches.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2594  
479 14 Dtool_KoxtiND_ 4 451 2491 0 14 Dtool_KoxtiND_ 370 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_case_sensitive
//       Access: Public
//  Description: Sets whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2596  14 case_sensitive 1 2489  
480 14 Dtool_KoxtCAJw 6 452 2489 0 14 Dtool_KoxtCAJw 373 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_case_sensitive
//       Access: Public
//  Description: Returns whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2594  
481 14 Dtool_Koxtp_S7 4 453 2491 0 14 Dtool_Koxtp_S7 305 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_nomatch_chars
//       Access: Public
//  Description: Specifies a set of characters that are not matched by
//               * or ?.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2596  13 nomatch_chars 1 2488  
482 14 Dtool_KoxtlN_R 6 454 2488 0 14 Dtool_KoxtlN_R 305 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_nomatch_chars
//       Access: Public
//  Description: Returns the set of characters that are not matched by
//               * or ?.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2594  
483 14 Dtool_Koxt6aT3 6 455 2489 0 14 Dtool_Koxt6aT3 308 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::matches
//       Access: Public
//  Description: Returns true if the candidate string matches the
//               pattern, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  9 candidate 1 2488  
484 14 Dtool_KoxtEKr3 4 456 2491 0 14 Dtool_KoxtEKr3 215 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  3 out 1 2499  
485 14 Dtool_KoxtP369 6 457 2489 0 14 Dtool_KoxtP369 0 1 4 this 3 2594  
486 14 Dtool_KoxtrrPx 6 458 2488 0 14 Dtool_KoxtrrPx 0 1 4 this 3 2594  
487 14 Dtool_Koxtuzy2 6 459 2490 0 14 Dtool_Koxtuzy2 0 3 4 this 3 2596  7 results 1 2586  3 cwd 1 2519  
488 14 Dtool_Koxtdu9b 6 459 2490 0 14 Dtool_Koxtdu9b 0 2 4 this 3 2596  7 results 1 2586  
489 14 Dtool_KoxtcAKz 7 462 2597 1682 14 Dtool_KoxtcAKz 715 // Filename: encryptStream.I
// Created by:  drose (01Sep04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
490 14 Dtool_KoxtMBmb 7 462 2597 1682 14 Dtool_KoxtMBmb 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 source 1 2492  11 owns_source 1 2489  8 password 1 2488  
491 14 Dtool_Koxthqhe 6 463 2597 0 14 Dtool_Koxthqhe 220 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2597  6 source 1 2492  11 owns_source 1 2489  8 password 1 2488  
492 14 Dtool_Koxt6J2x 6 464 2597 0 14 Dtool_Koxt6J2x 348 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the source istream unless owns_source was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2597  
493 14 Dtool_Koxt17sJ 6 465 2488 0 14 Dtool_Koxt17sJ 309 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_algorithm
//       Access: Published
//  Description: Returns the encryption algorithm that was read from
//               the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2598  
494 14 Dtool_Koxt9d5i 6 466 2490 0 14 Dtool_Koxt9d5i 321 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_key_length
//       Access: Published
//  Description: Returns the encryption key length, in bits, that was
//               read from the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2598  
495 14 Dtool_Koxtqoid 6 467 2490 0 14 Dtool_Koxtqoid 287 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_iteration_count
//       Access: Published
//  Description: Returns the value that was was read from the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2598  
496 14 Dtool_KoxtoIx1 7 470 2588 1684 14 Dtool_KoxtoIx1 714 // Filename: pandaFileStream.I
// Created by:  drose (08Sep08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
497 14 Dtool_KoxtSAk0 7 470 2588 1684 14 Dtool_KoxtSAk0 223 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2488  4 mode 1 2419  
498 14 Dtool_KoxtbO8N 7 470 2588 1684 14 Dtool_KoxtbO8N 223 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
499 14 Dtool_KoxtzuIj 4 472 2491 0 14 Dtool_KoxtzuIj 217 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2588  8 filename 1 2488  4 mode 1 2419  
500 14 Dtool_Koxt2hR_ 4 472 2491 0 14 Dtool_Koxt2hR_ 217 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  8 filename 1 2488  
501 14 Dtool_KoxtIJHX 4 473 2491 0 14 Dtool_KoxtIJHX 228 // _WIN32
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
502 14 Dtool_KoxtjqD_ 7 480 2600 1692 14 Dtool_KoxtjqD_ 227 ////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2492  
503 14 Dtool_KoxthXQN 6 482 2492 0 14 Dtool_KoxthXQN 271 ////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::get_istream
//       Access: Published
//  Description: Returns the istream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2601  
504 14 Dtool_Koxtg7Or 6 479 2603 0 14 Dtool_Koxtg7Or 0 1 4 this 3 2600  
505 14 Dtool_KoxtPMTM 4 476 2491 0 14 Dtool_KoxtPMTM 952 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::acquire
//       Access: Published
//  Description: Acquires the internal lock.  
//
//               User code should call this to take temporary
//               possession of the stream and perform direct I/O
//               operations on it, for instance to make several
//               sequential atomic reads.  You may not call any of the
//               StreamWrapper methods while the lock is held, other
//               than release().
//
//               Use with extreme caution!  This is a very low-level,
//               non-recursive lock.  You must call acquire() only
//               once, and you must later call release() exactly once.
//               Failing to do so may result in a hard deadlock with
//               no available debugging features.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2603  
506 14 Dtool_KoxtomSF 4 477 2491 0 14 Dtool_KoxtomSF 381 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::release
//       Access: Published
//  Description: Releases the internal lock.  Must be called exactly
//               once following a call to acquire().  See the cautions
//               with acquire().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2603  
507 14 Dtool_KoxtaaXn 6 484 2523 0 14 Dtool_KoxtaaXn 353 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_alloc
//       Access: Published, Static
//  Description: Returns the total number of bytes consumed by all the
//               pages allocated internally by this object.
//////////////////////////////////////////////////////////////////// 0 
508 14 Dtool_KoxtBAnY 6 485 2523 0 14 Dtool_KoxtBAnY 356 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_used
//       Access: Published, Static
//  Description: Returns the total number of bytes requested by the
//               application in calls to NeverFreeMemory::alloc().
//////////////////////////////////////////////////////////////////// 0 
509 14 Dtool_KoxtsUU4 6 486 2523 0 14 Dtool_KoxtsUU4 454 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_unused
//       Access: Published, Static
//  Description: Returns the difference between get_total_alloc() and
//               get_total_used().  This represents bytes in allocated
//               pages that have not (yet) been used by the
//               application.
//////////////////////////////////////////////////////////////////// 0 
510 14 Dtool_KoxtdB8d 7 489 2604 1699 14 Dtool_KoxtdB8d 0 0 
511 14 Dtool_KoxtvrEn 4 491 2491 0 14 Dtool_KoxtvrEn 0 3 4 this 3 2604  11 ostream_ptr 1 2499  12 delete_later 1 2489  
512 14 Dtool_KoxtVkUe 6 492 2499 0 14 Dtool_KoxtVkUe 0 1 4 this 3 2605  
513 14 Dtool_Koxt5Y26 4 494 2491 0 14 Dtool_Koxt5Y26 0 1 4 this 3 2604  
514 14 Dtool_Koxt_0e5 6 495 2489 0 14 Dtool_Koxt_0e5 0 1 4 this 3 2605  
515 14 Dtool_Koxt6z03 4 496 2491 0 14 Dtool_Koxt6z03 0 1 4 this 3 2605  
516 14 Dtool_KoxtWXtw 6 497 2489 0 14 Dtool_KoxtWXtw 0 1 4 this 3 2605  
517 14 Dtool_KoxtSHZe 6 498 2488 0 14 Dtool_KoxtSHZe 0 1 4 this 3 2605  
518 14 Dtool_Koxtu1XD 4 499 2491 0 14 Dtool_Koxtu1XD 0 1 4 this 3 2604  
519 14 Dtool_Koxt6gyi 6 500 2607 0 14 Dtool_Koxt6gyi 0 1 4 this 3 2604  
520 14 Dtool_Koxtx5dT 6 501 2607 0 14 Dtool_Koxtx5dT 0 2 4 this 3 2604  8 fullname 1 2488  
521 14 Dtool_Koxt73Bf 6 501 2607 0 14 Dtool_Koxt73Bf 0 3 4 this 3 2604  8 basename 1 2488  15 parent_category 1 2607  
522 14 Dtool_Koxt1kmX 6 501 2607 0 14 Dtool_Koxt1kmX 0 3 4 this 3 2604  8 basename 1 2488  15 parent_fullname 1 2488  
523 14 Dtool_Koxtppce 6 502 2499 0 14 Dtool_Koxtppce 0 0 
524 14 Dtool_KoxtYCcj 6 503 2499 0 14 Dtool_KoxtYCcj 0 0 
525 14 Dtool_KoxtzqoR 4 504 2491 0 14 Dtool_KoxtzqoR 0 1 3 str 1 2488  
526 14 Dtool_Koxt8DCI 6 505 2604 0 14 Dtool_Koxt8DCI 0 0 
527 14 Dtool_KoxtFwaK 6 511 2488 0 14 Dtool_KoxtFwaK 714 // Filename: notifyCategory.I
// Created by:  drose (29Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_fullname
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
528 14 Dtool_Koxt66Av 6 512 2488 0 14 Dtool_Koxt66Av 224 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_basename
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
529 14 Dtool_Koxtjotj 6 513 2431 0 14 Dtool_Koxtjotj 224 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_severity
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
530 14 Dtool_KoxtQmtm 4 514 2491 0 14 Dtool_KoxtQmtm 395 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::set_severity
//       Access: Public
//  Description: Sets the severity level of messages that will be
//               reported from this Category.  This allows any message
//               of this severity level or higher.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  8 severity 1 2431  
531 14 Dtool_KoxtNeuG 6 515 2489 0 14 Dtool_KoxtNeuG 331 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_on
//       Access: Public
//  Description: Returns true if messages of the indicated severity
//               level ought to be reported for this Category.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2608  8 severity 1 2431  
532 14 Dtool_KoxtdQtp 6 516 2489 0 14 Dtool_KoxtdQtp 392 // When NOTIFY_DEBUG is not defined, the categories will never be
// set to "spam" or "debug" severities, and these methods are
// redefined to be static to make it more obvious to the compiler.
// However, we still want to present a consistent interface to our
// scripting language, so during the interrogate pass (that is, when
// CPPPARSER is defined), we still pretend they're nonstatic. 1 4 this 3 2608  
533 14 Dtool_KoxtyDGx 6 517 2489 0 14 Dtool_KoxtyDGx 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_debug
//       Access: Public
//  Description: A shorthand way to write is_on(NS_debug).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
534 14 Dtool_KoxtlDsK 6 518 2489 0 14 Dtool_KoxtlDsK 260 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_info
//       Access: Public
//  Description: A shorthand way to write is_on(NS_info).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
535 14 Dtool_KoxtPEpj 6 519 2489 0 14 Dtool_KoxtPEpj 266 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_warning
//       Access: Public
//  Description: A shorthand way to write is_on(NS_warning).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
536 14 Dtool_Koxt6Fq4 6 520 2489 0 14 Dtool_Koxt6Fq4 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_error
//       Access: Public
//  Description: A shorthand way to write is_on(NS_error).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
537 14 Dtool_Koxtvd58 6 521 2489 0 14 Dtool_Koxtvd58 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_fatal
//       Access: Public
//  Description: A shorthand way to write is_on(NS_fatal).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
538 14 Dtool_KoxtTXie 6 522 2499 0 14 Dtool_KoxtTXie 0 3 4 this 3 2608  8 severity 1 2431  6 prefix 1 2489  
539 14 Dtool_KoxtUVa3 6 522 2499 0 14 Dtool_KoxtUVa3 0 2 4 this 3 2608  8 severity 1 2431  
540 14 Dtool_KoxtYZYH 6 523 2499 0 14 Dtool_KoxtYZYH 255 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::spam
//       Access: Public
//  Description: A shorthand way to write out(NS_spam).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2608  6 prefix 1 2489  
541 14 Dtool_Koxt1AGf 6 523 2499 0 14 Dtool_Koxt1AGf 255 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::spam
//       Access: Public
//  Description: A shorthand way to write out(NS_spam).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
542 14 Dtool_KoxtdLBq 6 524 2499 0 14 Dtool_KoxtdLBq 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::debug
//       Access: Public
//  Description: A shorthand way to write out(NS_debug).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2608  6 prefix 1 2489  
543 14 Dtool_Koxtoz6f 6 524 2499 0 14 Dtool_Koxtoz6f 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::debug
//       Access: Public
//  Description: A shorthand way to write out(NS_debug).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
544 14 Dtool_KoxtdLKB 6 525 2499 0 14 Dtool_KoxtdLKB 255 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::info
//       Access: Public
//  Description: A shorthand way to write out(NS_info).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2608  6 prefix 1 2489  
545 14 Dtool_Koxt9Q3Y 6 525 2499 0 14 Dtool_Koxt9Q3Y 255 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::info
//       Access: Public
//  Description: A shorthand way to write out(NS_info).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
546 14 Dtool_Koxtic9G 6 526 2499 0 14 Dtool_Koxtic9G 261 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::warning
//       Access: Public
//  Description: A shorthand way to write out(NS_warning).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2608  6 prefix 1 2489  
547 14 Dtool_Koxt6bPB 6 526 2499 0 14 Dtool_Koxt6bPB 261 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::warning
//       Access: Public
//  Description: A shorthand way to write out(NS_warning).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
548 14 Dtool_Koxte0DR 6 527 2499 0 14 Dtool_Koxte0DR 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::error
//       Access: Public
//  Description: A shorthand way to write out(NS_error).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2608  6 prefix 1 2489  
549 14 Dtool_Koxtos7G 6 527 2499 0 14 Dtool_Koxtos7G 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::error
//       Access: Public
//  Description: A shorthand way to write out(NS_error).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
550 14 Dtool_Koxt_JPC 6 528 2499 0 14 Dtool_Koxt_JPC 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::fatal
//       Access: Public
//  Description: A shorthand way to write out(NS_fatal).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2608  6 prefix 1 2489  
551 14 Dtool_KoxtreI4 6 528 2499 0 14 Dtool_KoxtreI4 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::fatal
//       Access: Public
//  Description: A shorthand way to write out(NS_fatal).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2608  
552 14 Dtool_Koxt8NNN 6 529 2490 0 14 Dtool_Koxt8NNN 0 1 4 this 3 2608  
553 14 Dtool_Koxt1YK4 6 530 2607 0 14 Dtool_Koxt1YK4 0 2 4 this 3 2608  1 i 1 2490  
554 14 Dtool_Koxtup_Y 4 531 2491 0 14 Dtool_Koxtup_Y 0 1 5 delta 1 2580  
555 14 Dtool_KoxtynKP 6 507 2610 0 14 Dtool_KoxtynKP 0 1 4 this 3 2607  
556 14 Dtool_Koxtn75q 6 508 2607 0 14 Dtool_Koxtn75q 0 1 4 this 3 2610  
557 14 Dtool_KoxtfhwH 6 509 2611 0 14 Dtool_KoxtfhwH 0 1 4 this 3 2607  
558 14 Dtool_KoxtaaZz 6 510 2607 0 14 Dtool_KoxtaaZz 0 1 4 this 3 2611  
559 14 Dtool_KoxtPdJc 7 535 2612 1747 14 Dtool_KoxtPdJc 226 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
560 14 Dtool_Koxt_s5u 7 535 2612 1747 14 Dtool_Koxt_s5u 226 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 dest 1 2499  9 owns_dest 1 2489  8 password 1 2488  
561 14 Dtool_KoxtnSkJ 6 536 2612 0 14 Dtool_KoxtnSkJ 220 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2612  4 dest 1 2499  9 owns_dest 1 2489  8 password 1 2488  
562 14 Dtool_Koxt3RUi 6 537 2612 0 14 Dtool_Koxt3RUi 344 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2612  
563 14 Dtool_KoxtyArK 4 538 2491 0 14 Dtool_KoxtyArK 722 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_algorithm
//       Access: Published
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to open().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but open() will
//               fail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2612  9 algorithm 1 2488  
564 14 Dtool_KoxtxEjT 4 539 2491 0 14 Dtool_KoxtxEjT 658 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_key_length
//       Access: Published
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               open().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but open() will fail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2612  10 key_length 1 2490  
565 14 Dtool_KoxtzC0T 4 540 2491 0 14 Dtool_KoxtzC0T 851 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_iteration_count
//       Access: Published
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to open().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               encryption-iteration-count config variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2612  15 iteration_count 1 2490  
566 14 Dtool_Koxt5e4K 7 543 2590 1749 14 Dtool_Koxt5e4K 223 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
567 14 Dtool_Koxt9vsJ 7 543 2590 1749 14 Dtool_Koxt9vsJ 223 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2488  4 mode 1 2419  
568 14 Dtool_KoxtHXDj 7 543 2590 1749 14 Dtool_KoxtHXDj 223 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2488  
569 14 Dtool_KoxtZBQj 4 545 2491 0 14 Dtool_KoxtZBQj 217 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2590  8 filename 1 2488  4 mode 1 2419  
570 14 Dtool_KoxtI_W_ 4 545 2491 0 14 Dtool_KoxtI_W_ 217 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2590  8 filename 1 2488  
571 14 Dtool_KoxtidOX 4 546 2491 0 14 Dtool_KoxtidOX 228 // _WIN32
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2590  
572 14 Dtool_Koxt4vyG 7 549 2613 1754 14 Dtool_Koxt4vyG 227 ////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2499  
573 14 Dtool_KoxtrwMP 6 551 2499 0 14 Dtool_KoxtrwMP 271 ////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::get_ostream
//       Access: Published
//  Description: Returns the ostream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2614  
574 14 Dtool_KoxtWXWr 6 548 2603 0 14 Dtool_KoxtWXWr 0 1 4 this 3 2613  
575 14 Dtool_KoxtTzDo 6 553 2488 0 14 Dtool_KoxtTzDo 0 0 
576 14 Dtool_Koxt3E_r 6 554 2488 0 14 Dtool_Koxt3E_r 0 0 
577 14 Dtool_KoxtFXHg 6 555 2488 0 14 Dtool_KoxtFXHg 0 0 
578 14 Dtool_Koxt_hDl 6 556 2488 0 14 Dtool_Koxt_hDl 0 0 
579 14 Dtool_KoxtlpKc 6 557 2490 0 14 Dtool_KoxtlpKc 0 0 
580 14 Dtool_KoxtB4NU 6 558 2490 0 14 Dtool_KoxtB4NU 0 0 
581 14 Dtool_KoxtoXlJ 6 559 2490 0 14 Dtool_KoxtoXlJ 0 0 
582 14 Dtool_KoxtCKGJ 6 560 2489 0 14 Dtool_KoxtCKGJ 0 0 
583 14 Dtool_Koxtu2tG 6 561 2488 0 14 Dtool_Koxtu2tG 0 0 
584 14 Dtool_KoxtcM8j 6 562 2488 0 14 Dtool_KoxtcM8j 0 0 
585 14 Dtool_KoxtPPs0 6 563 2488 0 14 Dtool_KoxtPPs0 0 0 
586 14 Dtool_Koxt9Y1A 6 564 2488 0 14 Dtool_Koxt9Y1A 0 0 
587 14 Dtool_KoxttmeQ 6 565 2489 0 14 Dtool_KoxttmeQ 0 2 4 this 3 2616  6 system 1 2488  
588 14 Dtool_KoxtcMuF 6 566 2490 0 14 Dtool_KoxtcMuF 0 1 4 this 3 2616  
589 14 Dtool_Koxt5Z39 6 567 2488 0 14 Dtool_Koxt5Z39 0 2 4 this 3 2616  1 n 1 2490  
590 14 Dtool_KoxtdRlZ 6 568 2488 0 14 Dtool_KoxtdRlZ 0 3 4 this 3 2616  6 system 1 2488  3 tag 1 2488  
591 14 Dtool_KoxtF5dG 4 569 2491 0 14 Dtool_KoxtF5dG 0 2 4 this 3 2618  6 system 1 2488  
592 14 Dtool_Koxtr7j9 4 570 2491 0 14 Dtool_Koxtr7j9 0 4 4 this 3 2618  6 system 1 2488  3 tag 1 2488  5 value 1 2488  
593 14 Dtool_KoxtUwJH 6 571 2489 0 14 Dtool_KoxtUwJH 0 2 4 this 3 2618  3 pad 1 2523  
594 14 Dtool_KoxtJrBc 4 572 2491 0 14 Dtool_KoxtJrBc 0 2 4 this 3 2616  3 out 1 2499  
595 14 Dtool_KoxtB7SJ 4 573 2491 0 14 Dtool_KoxtB7SJ 0 2 4 this 3 2616  3 out 1 2499  
596 14 Dtool_KoxtF_U4 6 574 2618 0 14 Dtool_KoxtF_U4 0 0 
597 14 Dtool_KoxtO5cE 7 575 2593 1919 14 Dtool_KoxtO5cE 0 0 
598 14 Dtool_KoxtStqk 7 577 2619 1794 14 Dtool_KoxtStqk 0 1 4 copy 1 2550  
599 14 Dtool_KoxtaJOr 7 577 2619 1794 14 Dtool_KoxtaJOr 0 2 4 self 1 2584  8 sequence 1 2584  
600 14 Dtool_Koxt50ve 7 577 2619 1794 14 Dtool_Koxt50ve 0 1 11 type_handle 1 2593  
601 14 Dtool_KoxtBCOm 7 577 2619 1794 14 Dtool_KoxtBCOm 0 0 
602 14 Dtool_KoxtvSvC 7 578 2619 1794 14 Dtool_KoxtvSvC 0 2 1 n 1 2523  11 type_handle 1 2593  
603 14 Dtool_Koxtamlq 7 578 2619 1794 14 Dtool_Koxtamlq 0 1 1 n 1 2523  
604 14 Dtool_KoxtA9gr 6 579 2523 0 14 Dtool_KoxtA9gr 0 1 4 this 3 2550  
605 14 Dtool_KoxtjyFM 4 580 2491 0 14 Dtool_KoxtjyFM 0 2 4 this 3 2619  1 x 1 2552  
606 14 Dtool_KoxtSmNP 4 581 2491 0 14 Dtool_KoxtSmNP 0 1 4 this 3 2619  
607 14 Dtool_Koxt4XI_ 6 582 2552 0 14 Dtool_Koxt4XI_ 0 2 4 this 3 2550  1 n 1 2523  
608 14 Dtool_Koxta5Zj 4 583 2491 0 14 Dtool_Koxta5Zj 0 3 4 this 3 2619  1 n 1 2523  5 value 1 2552  
609 14 Dtool_KoxtP4V5 6 584 2552 0 14 Dtool_KoxtP4V5 0 2 4 this 3 2550  1 n 1 2523  
610 14 Dtool_Koxt66jT 4 585 2491 0 14 Dtool_Koxt66jT 0 3 4 this 3 2619  1 n 1 2523  5 value 1 2552  
611 14 Dtool_KoxtS1aI 6 586 2488 0 14 Dtool_KoxtS1aI 0 1 4 this 3 2550  
612 14 Dtool_KoxtJcjR 4 587 2491 0 14 Dtool_KoxtJcjR 0 2 4 this 3 2619  4 data 1 2488  
613 14 Dtool_KoxtSZwS 6 588 2488 0 14 Dtool_KoxtSZwS 0 3 4 this 3 2550  1 n 1 2523  5 count 1 2523  
614 14 Dtool_KoxtQ8Pa 4 589 2491 0 14 Dtool_KoxtQ8Pa 0 4 4 this 3 2619  1 n 1 2523  5 count 1 2523  4 data 1 2488  
615 14 Dtool_KoxtwKPl 6 590 2490 0 14 Dtool_KoxtwKPl 0 1 4 this 3 2550  
616 14 Dtool_Koxthu1W 6 591 2490 0 14 Dtool_Koxthu1W 0 1 4 this 3 2550  
617 14 Dtool_Koxtpby3 7 594 2620 1810 14 Dtool_Koxtpby3 0 1 4 copy 1 2561  
618 14 Dtool_KoxtFhuK 7 594 2620 1810 14 Dtool_KoxtFhuK 0 2 4 self 1 2584  8 sequence 1 2584  
619 14 Dtool_Koxtwp67 7 594 2620 1810 14 Dtool_Koxtwp67 0 1 11 type_handle 1 2593  
620 14 Dtool_Koxtv7BB 7 594 2620 1810 14 Dtool_Koxtv7BB 0 0 
621 14 Dtool_Koxtx96y 7 595 2620 1810 14 Dtool_Koxtx96y 0 2 1 n 1 2523  11 type_handle 1 2593  
622 14 Dtool_KoxtcHV1 7 595 2620 1810 14 Dtool_KoxtcHV1 0 1 1 n 1 2523  
623 14 Dtool_KoxtTHff 6 596 2523 0 14 Dtool_KoxtTHff 0 1 4 this 3 2561  
624 14 Dtool_KoxtGd3r 4 597 2491 0 14 Dtool_KoxtGd3r 0 2 4 this 3 2620  1 x 1 2490  
625 14 Dtool_KoxtnxdE 4 598 2491 0 14 Dtool_KoxtnxdE 0 1 4 this 3 2620  
626 14 Dtool_Koxteumv 6 599 2490 0 14 Dtool_Koxteumv 0 2 4 this 3 2561  1 n 1 2523  
627 14 Dtool_KoxtVPk1 4 600 2491 0 14 Dtool_KoxtVPk1 0 3 4 this 3 2620  1 n 1 2523  5 value 1 2490  
628 14 Dtool_KoxtAVjm 6 601 2490 0 14 Dtool_KoxtAVjm 0 2 4 this 3 2561  1 n 1 2523  
629 14 Dtool_Koxt9ssv 4 602 2491 0 14 Dtool_Koxt9ssv 0 3 4 this 3 2620  1 n 1 2523  5 value 1 2490  
630 14 Dtool_Koxt9yf1 6 603 2488 0 14 Dtool_Koxt9yf1 0 1 4 this 3 2561  
631 14 Dtool_KoxtnQKG 4 604 2491 0 14 Dtool_KoxtnQKG 0 2 4 this 3 2620  4 data 1 2488  
632 14 Dtool_Koxt4Bh1 6 605 2488 0 14 Dtool_Koxt4Bh1 0 3 4 this 3 2561  1 n 1 2523  5 count 1 2523  
633 14 Dtool_KoxtASSD 4 606 2491 0 14 Dtool_KoxtASSD 0 4 4 this 3 2620  1 n 1 2523  5 count 1 2523  4 data 1 2488  
634 14 Dtool_KoxtQsA8 6 607 2490 0 14 Dtool_KoxtQsA8 0 1 4 this 3 2561  
635 14 Dtool_Koxtbl8R 6 608 2490 0 14 Dtool_Koxtbl8R 0 1 4 this 3 2561  
636 14 Dtool_Koxt6Txu 7 611 2621 1826 14 Dtool_Koxt6Txu 0 1 4 copy 1 2569  
637 14 Dtool_Koxt_9TC 7 611 2621 1826 14 Dtool_Koxt_9TC 0 2 4 self 1 2584  8 sequence 1 2584  
638 14 Dtool_Koxt9RDH 7 611 2621 1826 14 Dtool_Koxt9RDH 0 1 11 type_handle 1 2593  
639 14 Dtool_KoxtPkXb 7 611 2621 1826 14 Dtool_KoxtPkXb 0 0 
640 14 Dtool_KoxtHrIj 7 612 2621 1826 14 Dtool_KoxtHrIj 0 2 1 n 1 2523  11 type_handle 1 2593  
641 14 Dtool_Koxtx6ks 7 612 2621 1826 14 Dtool_Koxtx6ks 0 1 1 n 1 2523  
642 14 Dtool_KoxtZxGV 6 613 2523 0 14 Dtool_KoxtZxGV 0 1 4 this 3 2569  
643 14 Dtool_KoxtxVTf 4 614 2491 0 14 Dtool_KoxtxVTf 0 2 4 this 3 2621  1 x 1 2571  
644 14 Dtool_Koxtz2Bp 4 615 2491 0 14 Dtool_Koxtz2Bp 0 1 4 this 3 2621  
645 14 Dtool_Koxt7t3V 6 616 2571 0 14 Dtool_Koxt7t3V 0 2 4 this 3 2569  1 n 1 2523  
646 14 Dtool_Koxtu15P 4 617 2491 0 14 Dtool_Koxtu15P 0 3 4 this 3 2621  1 n 1 2523  5 value 1 2571  
647 14 Dtool_KoxtuQmx 6 618 2571 0 14 Dtool_KoxtuQmx 0 2 4 this 3 2569  1 n 1 2523  
648 14 Dtool_KoxtI0W4 4 619 2491 0 14 Dtool_KoxtI0W4 0 3 4 this 3 2621  1 n 1 2523  5 value 1 2571  
649 14 Dtool_KoxtD9Ot 6 620 2488 0 14 Dtool_KoxtD9Ot 0 1 4 this 3 2569  
650 14 Dtool_Koxtx8_v 4 621 2491 0 14 Dtool_Koxtx8_v 0 2 4 this 3 2621  4 data 1 2488  
651 14 Dtool_KoxtG9ot 6 622 2488 0 14 Dtool_KoxtG9ot 0 3 4 this 3 2569  1 n 1 2523  5 count 1 2523  
652 14 Dtool_Koxtgv2k 4 623 2491 0 14 Dtool_Koxtgv2k 0 4 4 this 3 2621  1 n 1 2523  5 count 1 2523  4 data 1 2488  
653 14 Dtool_Koxt8vTH 6 624 2490 0 14 Dtool_Koxt8vTH 0 1 4 this 3 2569  
654 14 Dtool_Koxty6Of 6 625 2490 0 14 Dtool_Koxty6Of 0 1 4 this 3 2569  
655 14 Dtool_KoxtFpUz 7 628 2624 1829 14 Dtool_KoxtFpUz 306 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2622  
656 14 Dtool_KoxtRUwl 7 628 2624 1829 14 Dtool_KoxtRUwl 333 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Published
//  Description: If owns_stream is true, the stream pointer will be
//               deleted when the StreamReader destructs.
//////////////////////////////////////////////////////////////////// 2 2 in 1 2492  11 owns_stream 1 2489  
657 14 Dtool_Koxt9fei 6 629 2624 0 14 Dtool_Koxt9fei 314 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Assignment Operator
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2624  4 copy 1 2622  
658 14 Dtool_KoxtBqye 6 631 2492 0 14 Dtool_KoxtBqye 251 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_istream
//       Access: Published
//  Description: Returns the stream in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2622  
659 14 Dtool_KoxtRU6i 6 632 2489 0 14 Dtool_KoxtRU6i 247 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_bool
//       Access: Published
//  Description: Extracts a boolean value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
660 14 Dtool_KoxtKvu5 6 633 2625 0 14 Dtool_KoxtKvu5 254 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int8
//       Access: Published
//  Description: Extracts a signed 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
661 14 Dtool_Koxt3bcv 6 634 2571 0 14 Dtool_Koxt3bcv 258 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint8
//       Access: Published
//  Description: Extracts an unsigned 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
662 14 Dtool_KoxtC3S_ 6 635 2626 0 14 Dtool_KoxtC3S_ 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int16
//       Access: Published
//  Description: Extracts a signed 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
663 14 Dtool_KoxtfHEw 6 636 2490 0 14 Dtool_KoxtfHEw 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int32
//       Access: Published
//  Description: Extracts a signed 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
664 14 Dtool_KoxtVfP_ 6 637 2507 0 14 Dtool_KoxtVfP_ 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int64
//       Access: Published
//  Description: Extracts a signed 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
665 14 Dtool_KoxtCGYB 6 638 2627 0 14 Dtool_KoxtCGYB 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint16
//       Access: Published
//  Description: Extracts an unsigned 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
666 14 Dtool_Koxtq8Q6 6 639 2523 0 14 Dtool_Koxtq8Q6 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint32
//       Access: Published
//  Description: Extracts an unsigned 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
667 14 Dtool_KoxtlBk_ 6 640 2628 0 14 Dtool_KoxtlBk_ 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint64
//       Access: Published
//  Description: Extracts an unsigned 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
668 14 Dtool_KoxtFJu6 6 641 2552 0 14 Dtool_KoxtFJu6 445 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
669 14 Dtool_KoxtMMwk 6 642 2508 0 14 Dtool_KoxtMMwk 265 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float64
//       Access: Published
//  Description: Extracts a 64-bit floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
670 14 Dtool_Koxtx_KM 6 643 2626 0 14 Dtool_Koxtx_KM 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int16
//       Access: Published
//  Description: Extracts a signed big-endian 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
671 14 Dtool_KoxtntwJ 6 644 2490 0 14 Dtool_KoxtntwJ 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int32
//       Access: Published
//  Description: Extracts a signed big-endian 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
672 14 Dtool_KoxtM_CL 6 645 2507 0 14 Dtool_KoxtM_CL 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int64
//       Access: Published
//  Description: Extracts a signed big-endian 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
673 14 Dtool_KoxtiU6t 6 646 2627 0 14 Dtool_KoxtiU6t 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint16
//       Access: Published
//  Description: Extracts an unsigned big-endian 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
674 14 Dtool_KoxthfBh 6 647 2523 0 14 Dtool_KoxthfBh 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint32
//       Access: Published
//  Description: Extracts an unsigned big-endian 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
675 14 Dtool_KoxtCq6J 6 648 2628 0 14 Dtool_KoxtCq6J 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint64
//       Access: Published
//  Description: Extracts an unsigned big-endian 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
676 14 Dtool_KoxttDBP 6 649 2552 0 14 Dtool_KoxttDBP 459 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision big-endian
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
677 14 Dtool_KoxtxzXr 6 650 2508 0 14 Dtool_KoxtxzXr 279 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float64
//       Access: Published
//  Description: Extracts a 64-bit big-endian floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2624  
678 14 Dtool_KoxtSbCK 6 651 2488 0 14 Dtool_KoxtSbCK 0 1 4 this 3 2624  
679 14 Dtool_Koxtjatw 6 652 2488 0 14 Dtool_Koxtjatw 0 1 4 this 3 2624  
680 14 Dtool_KoxttLbM 6 653 2488 0 14 Dtool_KoxttLbM 0 1 4 this 3 2624  
681 14 Dtool_Koxtdj5Y 6 654 2488 0 14 Dtool_Koxtdj5Y 0 2 4 this 3 2624  4 size 1 2523  
682 14 Dtool_KoxtRyDw 4 655 2491 0 14 Dtool_KoxtRyDw 0 2 4 this 3 2624  4 size 1 2523  
683 14 Dtool_Koxtxpca 6 656 2488 0 14 Dtool_Koxtxpca 0 2 4 this 3 2624  4 size 1 2523  
684 14 Dtool_KoxtUfmk 6 657 2488 0 14 Dtool_KoxtUfmk 0 1 4 this 3 2624  
685 14 Dtool_KoxtwzNG 7 663 2629 1862 14 Dtool_KoxtwzNG 226 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2578  
686 14 Dtool_Koxt5AbJ 6 665 2578 0 14 Dtool_Koxt5AbJ 272 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::get_iostream
//       Access: Published
//  Description: Returns the iostream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2630  
687 14 Dtool_Koxt74T2 6 659 2600 0 14 Dtool_Koxt74T2 0 1 4 this 3 2629  
688 14 Dtool_Koxt5iuL 6 660 2629 0 14 Dtool_Koxt5iuL 0 1 4 this 3 2600  
689 14 Dtool_Koxt7F95 6 661 2613 0 14 Dtool_Koxt7F95 0 1 4 this 3 2629  
690 14 Dtool_KoxtjP2L 6 662 2629 0 14 Dtool_KoxtjP2L 0 1 4 this 3 2613  
691 14 Dtool_Koxt9OZ1 7 667 2634 1866 14 Dtool_Koxt9OZ1 306 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2632  
692 14 Dtool_KoxtPb0_ 7 667 2634 1866 14 Dtool_KoxtPb0_ 225 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 3 out 1 2499  11 owns_stream 1 2489  
693 14 Dtool_KoxtDFlt 6 668 2634 0 14 Dtool_KoxtDFlt 314 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Assignment Operator
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  4 copy 1 2632  
694 14 Dtool_KoxtUDoY 6 670 2499 0 14 Dtool_KoxtUDoY 251 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::get_ostream
//       Access: Published
//  Description: Returns the stream in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2632  
695 14 Dtool_Koxt3JN5 4 671 2491 0 14 Dtool_Koxt3JN5 257 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_bool
//       Access: Published
//  Description: Adds a boolean value to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2489  
696 14 Dtool_KoxtTGkZ 4 672 2491 0 14 Dtool_KoxtTGkZ 264 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int8
//       Access: Published
//  Description: Adds a signed 8-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2625  
697 14 Dtool_KoxtEVDZ 4 673 2491 0 14 Dtool_KoxtEVDZ 268 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint8
//       Access: Published
//  Description: Adds an unsigned 8-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2571  
698 14 Dtool_KoxtmnpY 4 674 2491 0 14 Dtool_KoxtmnpY 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int16
//       Access: Published
//  Description: Adds a signed 16-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2626  
699 14 Dtool_KoxtIJDD 4 675 2491 0 14 Dtool_KoxtIJDD 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int32
//       Access: Published
//  Description: Adds a signed 32-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2490  
700 14 Dtool_Koxtftmj 4 676 2491 0 14 Dtool_Koxtftmj 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int64
//       Access: Published
//  Description: Adds a signed 64-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2507  
701 14 Dtool_Koxtq_Hu 4 677 2491 0 14 Dtool_Koxtq_Hu 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2627  
702 14 Dtool_KoxtT9bJ 4 678 2491 0 14 Dtool_KoxtT9bJ 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2523  
703 14 Dtool_KoxtBqdY 4 679 2491 0 14 Dtool_KoxtBqdY 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2628  
704 14 Dtool_KoxtyymY 4 680 2491 0 14 Dtool_KoxtyymY 455 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision floating-point number
//               to the stream.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2552  
705 14 Dtool_KoxtREib 4 681 2491 0 14 Dtool_KoxtREib 275 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float64
//       Access: Published
//  Description: Adds a 64-bit floating-point number to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2508  
706 14 Dtool_KoxtoxlG 4 682 2491 0 14 Dtool_KoxtoxlG 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int16
//       Access: Published
//  Description: Adds a signed 16-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2626  
707 14 Dtool_KoxtPp6h 4 683 2491 0 14 Dtool_KoxtPp6h 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int32
//       Access: Published
//  Description: Adds a signed 32-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2490  
708 14 Dtool_Koxtvvb1 4 684 2491 0 14 Dtool_Koxtvvb1 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int64
//       Access: Published
//  Description: Adds a signed 64-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2507  
709 14 Dtool_Koxtt7kL 4 685 2491 0 14 Dtool_Koxtt7kL 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2627  
710 14 Dtool_KoxtQrp1 4 686 2491 0 14 Dtool_KoxtQrp1 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2523  
711 14 Dtool_KoxtGnon 4 687 2491 0 14 Dtool_KoxtGnon 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2628  
712 14 Dtool_Koxtgr8S 4 688 2491 0 14 Dtool_Koxtgr8S 469 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the stream.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2552  
713 14 Dtool_KoxtgAln 4 689 2491 0 14 Dtool_KoxtgAln 312 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float64
//       Access: Published
//  Description: Adds a 64-bit big-endian floating-point number to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  5 value 1 2508  
714 14 Dtool_KoxtV9F1 4 690 2491 0 14 Dtool_KoxtV9F1 334 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string
//       Access: Published
//  Description: Adds a variable-length string to the stream.  This
//               actually adds a count followed by n bytes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  3 str 1 2488  
715 14 Dtool_KoxtMtIk 4 691 2491 0 14 Dtool_KoxtMtIk 316 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string32
//       Access: Published
//  Description: Adds a variable-length string to the stream, using a
//               32-bit length field.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  3 str 1 2488  
716 14 Dtool_KoxtYv3_ 4 692 2491 0 14 Dtool_KoxtYv3_ 316 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_z_string
//       Access: Published
//  Description: Adds a variable-length string to the stream, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  3 str 1 2488  
717 14 Dtool_KoxtXQSq 4 693 2491 0 14 Dtool_KoxtXQSq 517 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_fixed_string
//       Access: Published
//  Description: Adds a fixed-length string to the stream.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2634  3 str 1 2488  4 size 1 2523  
718 14 Dtool_KoxtMjY_ 4 694 2491 0 14 Dtool_KoxtMjY_ 0 2 4 this 3 2634  4 size 1 2523  
719 14 Dtool_KoxtbBfh 4 695 2491 0 14 Dtool_KoxtbBfh 300 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  4 data 1 2488  
720 14 Dtool_KoxtRiFD 4 696 2491 0 14 Dtool_KoxtRiFD 258 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::flush
//       Access: Published
//  Description: Calls flush() on the underlying stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2634  
721 14 Dtool_KoxtH0bl 4 697 2491 0 14 Dtool_KoxtH0bl 371 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::write
//       Access: Published
//  Description: A synonym of append_data().  This is useful when
//               assigning the StreamWriter to sys.stderr and/or
//               sys.stdout in Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  3 str 1 2488  
722 14 Dtool_KoxtN5ho 7 700 2593 1919 14 Dtool_KoxtN5ho 1023 // Filename: typeHandle.I
// Created by:  drose (22Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
//////////////////////////////////////////////////////////////////// 0 
723 14 Dtool_KoxtGniZ 7 700 2593 1919 14 Dtool_KoxtGniZ 227 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2635  
724 14 Dtool_KoxtsZUg 6 701 2584 0 14 Dtool_KoxtsZUg 0 1 8 classobj 1 2584  
725 14 Dtool_KoxtxgMZ 6 702 2489 0 14 Dtool_KoxtxgMZ 228 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Equality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 other 1 2635  
726 14 Dtool_Koxt9A0H 6 703 2489 0 14 Dtool_Koxt9A0H 230 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Inequality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 other 1 2635  
727 14 Dtool_Koxt0HOQ 6 704 2489 0 14 Dtool_Koxt0HOQ 228 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 other 1 2635  
728 14 Dtool_Koxtx4bP 6 705 2489 0 14 Dtool_Koxtx4bP 228 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 other 1 2635  
729 14 Dtool_Koxt0Xwj 6 706 2489 0 14 Dtool_Koxt0Xwj 228 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 other 1 2635  
730 14 Dtool_Koxtxo9i 6 707 2489 0 14 Dtool_Koxtxo9i 228 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Ordering Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 other 1 2635  
731 14 Dtool_KoxtbjGQ 6 708 2490 0 14 Dtool_KoxtbjGQ 463 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::compare_to
//       Access: Published
//  Description: Sorts TypeHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 other 1 2635  
732 14 Dtool_Koxt3PTn 6 709 2523 0 14 Dtool_Koxt3PTn 263 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2635  
733 14 Dtool_KoxtRQdg 6 710 2488 0 14 Dtool_KoxtRQdg 484 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_name
//       Access: Published
//  Description: Returns the name of the type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  6 object 1 2637  
734 14 Dtool_Koxthwj6 6 710 2488 0 14 Dtool_Koxthwj6 484 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_name
//       Access: Published
//  Description: Returns the name of the type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2635  
735 14 Dtool_Koxtvx87 6 711 2489 0 14 Dtool_Koxtvx87 557 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::is_derived_from
//       Access: Published
//  Description: Returns true if this type is derived from the
//               indicated type, false otherwise.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2635  6 parent 1 2593  6 object 1 2637  
736 14 Dtool_KoxtviuC 6 711 2489 0 14 Dtool_KoxtviuC 557 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::is_derived_from
//       Access: Published
//  Description: Returns true if this type is derived from the
//               indicated type, false otherwise.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  6 parent 1 2593  
737 14 Dtool_KoxthY1k 6 712 2490 0 14 Dtool_KoxthY1k 878 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the number of parent classes that this
//               type is known to have.  This may then be used to
//               index into get_parent_class().  The result will be 0
//               if this class does not inherit from any other
//               classes, 1 if normal, single inheritance is in
//               effect, or greater than one if multiple inheritance
//               is in effect.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  6 object 1 2637  
738 14 Dtool_Koxt_rZb 6 712 2490 0 14 Dtool_Koxt_rZb 878 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the number of parent classes that this
//               type is known to have.  This may then be used to
//               index into get_parent_class().  The result will be 0
//               if this class does not inherit from any other
//               classes, 1 if normal, single inheritance is in
//               effect, or greater than one if multiple inheritance
//               is in effect.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2635  
739 14 Dtool_Koxt4htB 7 713 2593 1919 14 Dtool_Koxt4htB 383 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the nth parent class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_parent_classes().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 index 1 2490  
740 14 Dtool_KoxtbcCX 6 714 2490 0 14 Dtool_KoxtbcCX 626 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the number of child classes that this
//               type is known to have.  This may then be used to
//               index into get_child_class().
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  6 object 1 2637  
741 14 Dtool_Koxt3vxm 6 714 2490 0 14 Dtool_Koxt3vxm 626 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the number of child classes that this
//               type is known to have.  This may then be used to
//               index into get_child_class().
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2635  
742 14 Dtool_KoxtUvhk 7 715 2593 1919 14 Dtool_KoxtUvhk 380 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the nth child class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_child_classes().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  5 index 1 2490  
743 14 Dtool_KoxtCbxt 7 716 2593 1919 14 Dtool_KoxtCbxt 959 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_parent_towards
//       Access: Published
//  Description: Returns the parent class that is in a direct line of
//               inheritance to the indicated ancestor class.  This is
//               useful in the presence of multiple inheritance to try
//               to determine what properties an unknown type may
//               have.
//
//               The return value is TypeHandle::none() if the type
//               does not inherit from the ancestor.  If ancestor is
//               the same as this type, the return value is this type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2635  8 ancestor 1 2593  6 object 1 2637  
744 14 Dtool_KoxtjV7z 7 716 2593 1919 14 Dtool_KoxtjV7z 959 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_parent_towards
//       Access: Published
//  Description: Returns the parent class that is in a direct line of
//               inheritance to the indicated ancestor class.  This is
//               useful in the presence of multiple inheritance to try
//               to determine what properties an unknown type may
//               have.
//
//               The return value is TypeHandle::none() if the type
//               does not inherit from the ancestor.  If ancestor is
//               the same as this type, the return value is this type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  8 ancestor 1 2593  
745 14 Dtool_KoxtKt8F 6 717 2490 0 14 Dtool_KoxtKt8F 274 ////////////////////////////////////////////////////////////////////
//     Function: get_best_parent_from_Set
//       Access: Published
//  Description: Return the Index of the BEst fit Classs from a set
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  10 legal_vals 1 2638  
746 14 Dtool_KoxtrJ7e 6 718 2490 0 14 Dtool_KoxtrJ7e 0 2 4 this 3 2635  12 memory_class 1 2443  
747 14 Dtool_KoxtlJTw 4 719 2491 0 14 Dtool_KoxtlJTw 0 3 4 this 3 2593  12 memory_class 1 2443  4 size 1 2490  
748 14 Dtool_KoxtAHQK 4 720 2491 0 14 Dtool_KoxtAHQK 0 3 4 this 3 2593  12 memory_class 1 2443  4 size 1 2490  
749 14 Dtool_KoxtPmiQ 6 721 2490 0 14 Dtool_KoxtPmiQ 654 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               TypeHandle. Each different TypeHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               TypeHandles as opaque classes.  This is provided for
//               the convenience of non-C++ scripting languages to
//               build a hashtable of TypeHandles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2635  
750 14 Dtool_KoxtVMV9 4 722 2491 0 14 Dtool_KoxtVMV9 218 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2635  3 out 1 2499  
751 14 Dtool_Koxtp1S_ 7 723 2593 1919 14 Dtool_Koxtp1S_ 315 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued TypeHandle that is used
//               to indicate no type.
//////////////////////////////////////////////////////////////////// 0 
752 14 Dtool_Koxtx9n6 7 726 2593 1919 14 Dtool_Koxtx9n6 0 2 4 this 3 2641  4 name 1 2488  
753 14 Dtool_Koxt89Zn 7 727 2593 1919 14 Dtool_Koxt89Zn 0 2 4 this 3 2641  2 id 1 2490  
754 14 Dtool_Koxt5DEU 6 728 2488 0 14 Dtool_Koxt5DEU 0 3 4 this 3 2641  4 type 1 2593  6 object 1 2637  
755 14 Dtool_KoxtMBOu 6 729 2489 0 14 Dtool_KoxtMBOu 0 4 4 this 3 2643  5 child 1 2593  4 base 1 2593  12 child_object 1 2637  
756 14 Dtool_KoxtEPGQ 6 730 2490 0 14 Dtool_KoxtEPGQ 0 1 4 this 3 2643  
757 14 Dtool_KoxtOGBx 7 731 2593 1919 14 Dtool_KoxtOGBx 0 2 4 this 3 2643  1 n 1 2490  
758 14 Dtool_KoxtPxO1 6 732 2490 0 14 Dtool_KoxtPxO1 0 1 4 this 3 2643  
759 14 Dtool_KoxtLFNI 7 733 2593 1919 14 Dtool_KoxtLFNI 0 2 4 this 3 2643  1 n 1 2490  
760 14 Dtool_Koxtlx7d 6 734 2490 0 14 Dtool_Koxtlx7d 0 3 4 this 3 2641  5 child 1 2593  12 child_object 1 2637  
761 14 Dtool_Koxt4LWH 7 735 2593 1919 14 Dtool_Koxt4LWH 0 3 4 this 3 2641  5 child 1 2593  5 index 1 2490  
762 14 Dtool_KoxtmVbL 6 736 2490 0 14 Dtool_KoxtmVbL 0 3 4 this 3 2641  5 child 1 2593  12 child_object 1 2637  
763 14 Dtool_KoxtfTRM 7 737 2593 1919 14 Dtool_KoxtfTRM 0 3 4 this 3 2641  5 child 1 2593  5 index 1 2490  
764 14 Dtool_Koxt3YQ7 7 738 2593 1919 14 Dtool_Koxt3YQ7 0 4 4 this 3 2643  5 child 1 2593  4 base 1 2593  12 child_object 1 2637  
765 14 Dtool_Koxt5_p8 4 739 2491 0 14 Dtool_Koxt5_p8 0 0 
766 14 Dtool_KoxteZEC 4 740 2491 0 14 Dtool_KoxteZEC 0 2 4 this 3 2641  3 out 1 2499  
767 14 Dtool_Koxtuwsa 6 741 2643 0 14 Dtool_Koxtuwsa 63 // ptr() returns the pointer to the global TypeRegistry object. 0 
768 14 Dtool_Koxt1uxI 7 747 2593 1919 14 Dtool_Koxt1uxI 79 // Derived classes should override this function to return
// get_class_type(). 1 4 this 3 2644  
769 14 Dtool_Koxtm7AU 6 748 2490 0 14 Dtool_Koxtm7AU 441 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::get_type_index
//       Access: Published
//  Description: Returns the internal index number associated with
//               this object's TypeHandle, a unique number for each
//               different type.  This is equivalent to
//               get_type().get_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2644  
770 14 Dtool_KoxtnFKt 6 749 2489 0 14 Dtool_KoxtnFKt 313 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_of_type
//       Access: Published
//  Description: Returns true if the current object is or derives from
//               the indicated type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2644  6 handle 1 2593  
771 14 Dtool_Koxt7Xzz 6 750 2489 0 14 Dtool_Koxt7Xzz 308 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_exact_type
//       Access: Published
//  Description: Returns true if the current object is the indicated
//               type exactly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2644  6 handle 1 2593  
772 14 Dtool_KoxtEGqZ 7 751 2593 1919 14 Dtool_KoxtEGqZ 0 0 
773 14 Dtool_Koxtr4rO 6 744 2610 0 14 Dtool_Koxtr4rO 0 1 4 this 3 2637  
774 14 Dtool_Koxtfhug 6 745 2637 0 14 Dtool_Koxtfhug 0 1 4 this 3 2610  
775 14 Dtool_KoxtIgAg 7 753 2592 1947 14 Dtool_KoxtIgAg 0 0 
776 14 Dtool_KoxtqVe2 4 754 2491 0 14 Dtool_KoxtqVe2 0 1 4 this 3 2592  
777 14 Dtool_KoxtkUnH 7 757 2589 1950 14 Dtool_KoxtkUnH 0 0 
778 14 Dtool_KoxtIq5S 4 758 2491 0 14 Dtool_KoxtIq5S 0 1 4 this 3 2589  
779 14 Dtool_KoxtyzMI 7 761 2591 1953 14 Dtool_KoxtyzMI 0 0 
780 14 Dtool_Koxt2_AT 4 762 2491 0 14 Dtool_Koxt2_AT 0 1 4 this 3 2591  
781 14 Dtool_Koxt_ZlF 6 766 2489 0 14 Dtool_Koxt_ZlF 374 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_tracking
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               tracking memory (e.g. track-memory-usage is
//               configured #t).
//////////////////////////////////////////////////////////////////// 0 
782 14 Dtool_KoxtX_zM 6 767 2489 0 14 Dtool_KoxtX_zM 413 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_counting
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               at least counting memory (e.g. this is a Windows
//               debug build), even if it's not fully tracking it.
//////////////////////////////////////////////////////////////////// 0 
783 14 Dtool_KoxtCy97 6 768 2523 0 14 Dtool_KoxtCy97 394 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_current_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, not including the memory
//               previously frozen.
//////////////////////////////////////////////////////////////////// 0 
784 14 Dtool_Koxt_T5n 6 769 2523 0 14 Dtool_Koxt_T5n 388 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, including the memory
//               previously frozen.
//////////////////////////////////////////////////////////////////// 0 
785 14 Dtool_KoxtVdCh 6 770 2523 0 14 Dtool_KoxtVdCh 366 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_single_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for individual objects.
//////////////////////////////////////////////////////////////////// 0 
786 14 Dtool_Koxt_A1B 6 771 2523 0 14 Dtool_Koxt_A1B 353 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_array_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for arrays.
//////////////////////////////////////////////////////////////////// 0 
787 14 Dtool_KoxtghU5 6 772 2523 0 14 Dtool_KoxtghU5 465 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_overhead
//       Access: Public, Static
//  Description: Returns the extra bytes allocated from the system
//               that are not immediately used for holding allocated
//               objects.  This can only be determined if
//               ALTERNATIVE_MALLOC is enabled.
//////////////////////////////////////////////////////////////////// 0 
788 14 Dtool_Koxt5Oa9 6 773 2523 0 14 Dtool_Koxt5Oa9 350 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_mmap_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               virtual memory pool from code within Panda.
//////////////////////////////////////////////////////////////////// 0 
789 14 Dtool_KoxtBWZR 6 774 2523 0 14 Dtool_KoxtBWZR 852 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_external_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               in the heap that Panda didn't seem to be responsible
//               for.  This includes a few bytes for very low-level
//               objects (like ConfigVariables) that cannot use Panda
//               memory tracking because they are so very low-level.
//
//               This also includes all of the memory that might have
//               been allocated by a high-level interpreter, like
//               Python.
//
//               This number is only available if Panda is able to
//               hook into the actual heap callback.
//////////////////////////////////////////////////////////////////// 0 
790 14 Dtool_Koxtlqev 6 775 2523 0 14 Dtool_Koxtlqev 348 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_size
//       Access: Public, Static
//  Description: Returns the total size of allocated memory consumed
//               by the process, as nearly as can be determined.
//////////////////////////////////////////////////////////////////// 0 
791 14 Dtool_Koxtu9Wa 6 776 2490 0 14 Dtool_Koxtu9Wa 282 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_num_pointers
//       Access: Public, Static
//  Description: Returns the number of pointers currently active.
//////////////////////////////////////////////////////////////////// 0 
792 14 Dtool_Koxt7lLT 4 777 2491 0 14 Dtool_Koxt7lLT 333 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers currently active.
//////////////////////////////////////////////////////////////////// 1 6 result 1 2646  
793 14 Dtool_Koxt4iVB 4 778 2491 0 14 Dtool_Koxt4iVB 380 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_type
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers of the indicated type currently
//               active.
//////////////////////////////////////////////////////////////////// 2 6 result 1 2646  4 type 1 2593  
794 14 Dtool_KoxtWkjk 4 779 2491 0 14 Dtool_KoxtWkjk 416 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_age
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers that were allocated within the range
//               of the indicated number of seconds ago.
//////////////////////////////////////////////////////////////////// 3 6 result 1 2646  4 from 1 2508  2 to 1 2508  
795 14 Dtool_Koxt0zJ5 4 780 2491 0 14 Dtool_Koxt0zJ5 1326 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_with_zero_count
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all currently active pointers (that is, pointers
//               allocated since the last call to freeze(), and not
//               yet freed) that have a zero reference count.
//
//               Generally, an undeleted pointer with a zero reference
//               count means its reference count has never been
//               incremented beyond zero (since once it has been
//               incremented, the only way it can return to zero would
//               free the pointer).  This may include objects that are
//               allocated statically or on the stack, which are never
//               intended to be deleted.  Or, it might represent a
//               programmer or compiler error.
//
//               This function has the side-effect of incrementing
//               each of their reference counts by one, thus
//               preventing them from ever being freed--but since they
//               hadn't been freed anyway, probably no additional harm
//               is done.
//////////////////////////////////////////////////////////////////// 1 6 result 1 2646  
796 14 Dtool_KoxtfpsO 4 781 2491 0 14 Dtool_KoxtfpsO 574 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::freeze
//       Access: Public, Static
//  Description: 'Freezes' all pointers currently stored so that they
//               are no longer reported; only newly allocate pointers
//               from this point on will appear in future information
//               requests.  This makes it easier to differentiate
//               between continuous leaks and one-time memory
//               allocations.
//////////////////////////////////////////////////////////////////// 0 
797 14 Dtool_KoxtIacH 4 782 2491 0 14 Dtool_KoxtIacH 312 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               active pointers.
//////////////////////////////////////////////////////////////////// 0 
798 14 Dtool_KoxtPdpO 4 783 2491 0 14 Dtool_KoxtPdpO 372 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               pointers allocated and freed since the last call to
//               freeze().
//////////////////////////////////////////////////////////////////// 0 
799 14 Dtool_KoxtCD9U 4 784 2491 0 14 Dtool_KoxtCD9U 310 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               active pointers.
//////////////////////////////////////////////////////////////////// 0 
800 14 Dtool_Koxty1oy 4 785 2491 0 14 Dtool_Koxty1oy 370 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               pointers allocated and freed since the last call to
//               freeze().
//////////////////////////////////////////////////////////////////// 0 
801 14 Dtool_KoxtP11_ 6 792 2490 0 14 Dtool_KoxtP11_ 265 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::get_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2647  
802 14 Dtool_KoxtaS5_ 4 793 2491 0 14 Dtool_KoxtaS5_ 896 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::ref
//       Access: Published
//  Description: Explicitly increments the reference count.  User code
//               should avoid using ref() and unref() directly, which
//               can result in missed reference counts.  Instead, let
//               a PointerTo object manage the reference counting
//               automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2647  
803 14 Dtool_KoxtwyVy 6 794 2489 0 14 Dtool_KoxtwyVy 1336 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::unref
//       Access: Published, Virtual
//  Description: Explicitly decrements the reference count.  Note that
//               the object will not be implicitly deleted by unref()
//               simply because the reference count drops to zero.
//               (Having a member function delete itself is
//               problematic.) However, see the helper function
//               unref_delete().
//
//               User code should avoid using ref() and unref()
//               directly, which can result in missed reference
//               counts.  Instead, let a PointerTo object manage the
//               reference counting automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2647  
804 14 Dtool_Koxtvpj2 6 795 2489 0 14 Dtool_Koxtvpj2 395 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.  Returns true if ok,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2647  
805 14 Dtool_KoxttT6g 6 796 2489 0 14 Dtool_KoxttT6g 402 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_nonzero
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't zero, or completely bogus.  Returns true
//               if ok, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2647  
806 14 Dtool_Koxtn3ZO 7 797 2593 1919 14 Dtool_Koxtn3ZO 0 0 
807 14 Dtool_Koxt5zFh 6 789 2610 0 14 Dtool_Koxt5zFh 0 1 4 this 3 2649  
808 14 Dtool_KoxtKg08 7 790 2649 1978 14 Dtool_KoxtKg08 0 1 4 this 3 2610  
809 14 Dtool_KoxtBAQY 6 799 2490 0 14 Dtool_KoxtBAQY 695 // Filename: buffer.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Buffer::get_length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2650  
810 14 Dtool_KoxtYzxl 4 808 2491 0 14 Dtool_KoxtYzxl 0 2 4 this 3 2652  5 level 1 2508  
811 14 Dtool_Koxtm2GB 6 810 2490 0 14 Dtool_Koxtm2GB 274 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2653  
812 14 Dtool_Koxt9lbd 4 811 2491 0 14 Dtool_Koxt9lbd 338 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the node reference count and
//               the normal reference count simultaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2653  
813 14 Dtool_KoxtVC3D 6 812 2489 0 14 Dtool_KoxtVC3D 462 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2653  
814 14 Dtool_KoxtnZkN 6 813 2489 0 14 Dtool_KoxtnZkN 344 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2653  
815 14 Dtool_KoxtTnH7 7 814 2593 1919 14 Dtool_KoxtTnH7 0 0 
816 14 Dtool_KoxtCJxx 7 816 2655 1939 14 Dtool_KoxtCJxx 731 // Filename: datagram.I
// Created by:  drose (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs an empty datagram.
//////////////////////////////////////////////////////////////////// 0 
817 14 Dtool_KoxteUaC 7 816 2655 1939 14 Dtool_KoxteUaC 222 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2656  
818 14 Dtool_Koxtgu3g 7 816 2655 1939 14 Dtool_Koxtgu3g 271 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
//////////////////////////////////////////////////////////////////// 1 4 data 1 2488  
819 14 Dtool_KoxtfPb_ 6 817 2655 0 14 Dtool_KoxtfPb_ 230 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  4 copy 1 2656  
820 14 Dtool_KoxtSYfy 4 818 2491 0 14 Dtool_KoxtSYfy 314 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::clear
//       Access: Public, Virtual
//  Description: Resets the datagram to empty, in preparation for
//               building up a new datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2655  
821 14 Dtool_KoxtthFz 4 819 2491 0 14 Dtool_KoxtthFz 329 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::dump_hex
//       Access: Public
//  Description: Writes a representation of the entire datagram
//               contents, as a sequence of hex (and ASCII) values.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2656  3 out 1 2499  6 indent 1 2523  
822 14 Dtool_KoxtPUpE 4 819 2491 0 14 Dtool_KoxtPUpE 329 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::dump_hex
//       Access: Public
//  Description: Writes a representation of the entire datagram
//               contents, as a sequence of hex (and ASCII) values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2656  3 out 1 2499  
823 14 Dtool_KoxtO0pV 4 820 2491 0 14 Dtool_KoxtO0pV 252 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_bool
//       Access: Public
//  Description: Adds a boolean value to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2489  
824 14 Dtool_KoxtmQ0b 4 821 2491 0 14 Dtool_KoxtmQ0b 259 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int8
//       Access: Public
//  Description: Adds a signed 8-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2625  
825 14 Dtool_KoxttZzT 4 822 2491 0 14 Dtool_KoxttZzT 263 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint8
//       Access: Public
//  Description: Adds an unsigned 8-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2571  
826 14 Dtool_KoxtR6wM 4 823 2491 0 14 Dtool_KoxtR6wM 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int16
//       Access: Public
//  Description: Adds a signed 16-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2626  
827 14 Dtool_Koxtyw0y 4 824 2491 0 14 Dtool_Koxtyw0y 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int32
//       Access: Public
//  Description: Adds a signed 32-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2490  
828 14 Dtool_KoxtDYd8 4 825 2491 0 14 Dtool_KoxtDYd8 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int64
//       Access: Public
//  Description: Adds a signed 64-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2507  
829 14 Dtool_KoxtPwfl 4 826 2491 0 14 Dtool_KoxtPwfl 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2627  
830 14 Dtool_KoxtZc5Z 4 827 2491 0 14 Dtool_KoxtZc5Z 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2523  
831 14 Dtool_Koxt1L4K 4 828 2491 0 14 Dtool_Koxt1L4K 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2628  
832 14 Dtool_Koxt9aTM 4 829 2491 0 14 Dtool_Koxt9aTM 450 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision floating-point number
//               to the datagram.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2552  
833 14 Dtool_Koxth7H7 4 830 2491 0 14 Dtool_Koxth7H7 270 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float64
//       Access: Public
//  Description: Adds a 64-bit floating-point number to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2508  
834 14 Dtool_KoxtStGs 4 831 2491 0 14 Dtool_KoxtStGs 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int16
//       Access: Public
//  Description: Adds a signed 16-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2626  
835 14 Dtool_Koxt0Dch 4 832 2491 0 14 Dtool_Koxt0Dch 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int32
//       Access: Public
//  Description: Adds a signed 32-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2490  
836 14 Dtool_Koxt2ica 4 833 2491 0 14 Dtool_Koxt2ica 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int64
//       Access: Public
//  Description: Adds a signed 64-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2507  
837 14 Dtool_Koxtvmv8 4 834 2491 0 14 Dtool_Koxtvmv8 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2627  
838 14 Dtool_KoxtkGod 4 835 2491 0 14 Dtool_KoxtkGod 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2523  
839 14 Dtool_KoxtoaE_ 4 836 2491 0 14 Dtool_KoxtoaE_ 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2628  
840 14 Dtool_KoxtvJGy 4 837 2491 0 14 Dtool_KoxtvJGy 464 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the datagram.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2552  
841 14 Dtool_Koxtk_M8 4 838 2491 0 14 Dtool_Koxtk_M8 301 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float64
//       Access: Public
//  Description: Adds a 64-bit big-endian floating-point number to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  5 value 1 2508  
842 14 Dtool_KoxtLkWU 4 839 2491 0 14 Dtool_KoxtLkWU 329 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram.  This
//               actually adds a count followed by n bytes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  3 str 1 2488  
843 14 Dtool_KoxtWlwF 4 840 2491 0 14 Dtool_KoxtWlwF 338 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string32
//       Access: Public
//  Description: Adds a variable-length string to the datagram, using
//               a 32-bit length field to allow very long strings.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  3 str 1 2488  
844 14 Dtool_KoxtfOXB 4 841 2491 0 14 Dtool_KoxtfOXB 311 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_z_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  3 str 1 2488  
845 14 Dtool_Koxt6J1o 4 842 2491 0 14 Dtool_Koxt6J1o 512 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_fixed_string
//       Access: Public
//  Description: Adds a fixed-length string to the datagram.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2655  3 str 1 2488  4 size 1 2523  
846 14 Dtool_KoxtwzVX 4 843 2491 0 14 Dtool_KoxtwzVX 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_wstring
//       Access: Public
//  Description: Adds a variable-length wstring to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  3 str 1 2488  
847 14 Dtool_Koxtqdvo 4 844 2491 0 14 Dtool_Koxtqdvo 289 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::pad_bytes
//       Access: Public
//  Description: Adds the indicated number of zero bytes to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  4 size 1 2523  
848 14 Dtool_Koxt1lCb 4 845 2491 0 14 Dtool_Koxt1lCb 289 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  4 data 1 2488  
849 14 Dtool_KoxtrWvj 6 847 2488 0 14 Dtool_KoxtrWvj 258 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_message
//       Access: Public
//  Description: Returns the datagram's data as a string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2656  
850 14 Dtool_KoxtT0sE 4 848 2491 0 14 Dtool_KoxtT0sE 290 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_data
//       Access: Public
//  Description: Returns a pointer to the beginning of the datagram's
//               data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2656  
851 14 Dtool_Koxtkk_0 6 849 2523 0 14 Dtool_Koxtkk_0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_length
//       Access: Public
//  Description: Returns the number of bytes in the datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2656  
852 14 Dtool_KoxtgvMz 4 850 2491 0 14 Dtool_KoxtgvMz 450 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_array
//       Access: Public
//  Description: Replaces the data in the Datagram with the data in
//               the indicated PTA_uchar.  This is assignment by
//               reference: subsequent changes to the Datagram will
//               also change the source PTA_uchar.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  4 data 1 2621  
853 14 Dtool_Koxtv3Ez 4 851 2491 0 14 Dtool_Koxtv3Ez 505 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::copy_array
//       Access: Public
//  Description: Replaces the data in the Datagram with a copy of the
//               data in the indicated CPTA_uchar.  Unlike
//               set_array(), a complete copy is made of the data;
//               subsequent changes to the Datagram will *not* change
//               the source CPTA_uchar.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2655  4 data 1 2568  
854 14 Dtool_Koxt27U6 7 852 2568 1494 14 Dtool_Koxt27U6 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_array
//       Access: Public
//  Description: Returns a const pointer to the actual data in
//               the Datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2656  
855 14 Dtool_KoxtDsO3 7 853 2621 1826 14 Dtool_KoxtDsO3 300 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::modify_array
//       Access: Public
//  Description: Returns a modifiable pointer to the actual data in
//               the Datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2655  
856 14 Dtool_KoxtN2MM 6 854 2489 0 14 Dtool_KoxtN2MM 217 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2656  5 other 1 2656  
857 14 Dtool_Koxtrt7L 6 855 2489 0 14 Dtool_Koxtrt7L 217 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2656  5 other 1 2656  
858 14 Dtool_KoxthPT3 6 856 2489 0 14 Dtool_KoxthPT3 216 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::operator <
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2656  5 other 1 2656  
859 14 Dtool_Koxt9OXp 4 857 2491 0 14 Dtool_Koxt9OXp 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2656  3 out 1 2499  
860 14 Dtool_Koxtm1mc 4 858 2491 0 14 Dtool_Koxtm1mc 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2656  3 out 1 2499  6 indent 1 2523  
861 14 Dtool_KoxtXtYv 4 858 2491 0 14 Dtool_KoxtXtYv 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2656  3 out 1 2499  
862 14 Dtool_Koxt4Vv_ 7 859 2593 1919 14 Dtool_Koxt4Vv_ 0 0 
863 14 Dtool_KoxtdfGa 6 862 2489 0 14 Dtool_KoxtdfGa 0 2 4 this 3 2658  4 data 1 2655  
864 14 Dtool_KoxtteR3 6 863 2489 0 14 Dtool_KoxtteR3 0 1 4 this 3 2658  
865 14 Dtool_KoxtG1W9 6 864 2489 0 14 Dtool_KoxtG1W9 0 1 4 this 3 2658  
866 14 Dtool_KoxtXdnL 7 865 2659 2160 14 Dtool_KoxtXdnL 406 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file
//       Access: Public, Virtual
//  Description: Returns the VirtualFile that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a VirtualFile.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2658  
867 14 Dtool_KoxtKzXi 6 866 2490 0 14 Dtool_KoxtKzXi 643 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file_pos
//       Access: Public, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramGenerators that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               get_datagram().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2658  
868 14 Dtool_KoxtlJZb 7 868 2660 2051 14 Dtool_KoxtlJZb 717 // Filename: datagramIterator.I
// Created by:  drose (08May01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
869 14 Dtool_KoxtEwZZ 7 868 2660 2051 14 Dtool_KoxtEwZZ 225 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 datagram 1 2656  6 offset 1 2523  
870 14 Dtool_Koxtz_OF 7 868 2660 2051 14 Dtool_Koxtz_OF 225 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 datagram 1 2656  
871 14 Dtool_KoxtYg7_ 7 868 2660 2051 14 Dtool_KoxtYg7_ 230 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2661  
872 14 Dtool_KoxtnHKF 6 869 2660 0 14 Dtool_KoxtnHKF 238 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2660  4 copy 1 2661  
873 14 Dtool_KoxtgFgv 6 871 2489 0 14 Dtool_KoxtgFgv 329 // Various ways to get data and increment the iterator...
// Cut-and-paste-orama
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_bool
//       Access: Public
//  Description: Extracts a boolean value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
874 14 Dtool_KoxtFX9M 6 872 2625 0 14 Dtool_KoxtFX9M 255 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int8
//       Access: Public
//  Description: Extracts a signed 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
875 14 Dtool_KoxtD6SU 6 873 2571 0 14 Dtool_KoxtD6SU 259 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint8
//       Access: Public
//  Description: Extracts an unsigned 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
876 14 Dtool_KoxtEVNl 6 874 2626 0 14 Dtool_KoxtEVNl 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int16
//       Access: Public
//  Description: Extracts a signed 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
877 14 Dtool_KoxtFcUY 6 875 2490 0 14 Dtool_KoxtFcUY 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int32
//       Access: Public
//  Description: Extracts a signed 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
878 14 Dtool_KoxtkKNB 6 876 2507 0 14 Dtool_KoxtkKNB 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int64
//       Access: Public
//  Description: Extracts a signed 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
879 14 Dtool_KoxtX2ad 6 877 2627 0 14 Dtool_KoxtX2ad 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
880 14 Dtool_KoxtpR_A 6 878 2523 0 14 Dtool_KoxtpR_A 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
881 14 Dtool_KoxtFGTd 6 879 2628 0 14 Dtool_KoxtFGTd 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
882 14 Dtool_KoxtvFBB 6 880 2552 0 14 Dtool_KoxtvFBB 446 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float32
//       Access: Public
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
883 14 Dtool_Koxt0JoL 6 881 2508 0 14 Dtool_Koxt0JoL 266 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float64
//       Access: Public
//  Description: Extracts a 64-bit floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
884 14 Dtool_KoxtzzGa 6 882 2626 0 14 Dtool_KoxtzzGa 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int16
//       Access: Public
//  Description: Extracts a signed 16-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
885 14 Dtool_Koxt6U9R 6 883 2490 0 14 Dtool_Koxt6U9R 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int32
//       Access: Public
//  Description: Extracts a signed 32-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
886 14 Dtool_KoxtAdBm 6 884 2507 0 14 Dtool_KoxtAdBm 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int64
//       Access: Public
//  Description: Extracts a signed 64-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
887 14 Dtool_Koxte_MA 6 885 2627 0 14 Dtool_Koxte_MA 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
888 14 Dtool_Koxt7bZ7 6 886 2523 0 14 Dtool_Koxt7bZ7 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
889 14 Dtool_KoxtF489 6 887 2628 0 14 Dtool_KoxtF489 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
890 14 Dtool_KoxtgTRq 6 888 2552 0 14 Dtool_KoxtgTRq 460 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float32
//       Access: Public
//  Description: Extracts a 32-bit big-endian single-precision
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
891 14 Dtool_KoxtjsC8 6 889 2508 0 14 Dtool_KoxtjsC8 280 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float64
//       Access: Public
//  Description: Extracts a 64-bit big-endian floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
892 14 Dtool_KoxtxS8B 6 890 2488 0 14 Dtool_KoxtxS8B 259 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string
//       Access: Public
//  Description: Extracts a variable-length string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
893 14 Dtool_Koxtp2Xo 6 891 2488 0 14 Dtool_Koxtp2Xo 305 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string32
//       Access: Public
//  Description: Extracts a variable-length string with a 32-bit
//               length field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
894 14 Dtool_KoxtjyF6 6 892 2488 0 14 Dtool_KoxtjyF6 307 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_z_string
//       Access: Public
//  Description: Extracts a variable-length string, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
895 14 Dtool_KoxtmT0q 6 893 2488 0 14 Dtool_KoxtmT0q 379 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_fixed_string
//       Access: Public
//  Description: Extracts a fixed-length string.  However, if a zero
//               byte occurs within the string, it marks the end of
//               the string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2660  4 size 1 2523  
896 14 Dtool_KoxtPayl 6 894 2488 0 14 Dtool_KoxtPayl 307 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_wstring
//       Access: Public
//  Description: Extracts a variable-length wstring (with a 32-bit
//               length field).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2660  
897 14 Dtool_KoxtTwSY 4 895 2491 0 14 Dtool_KoxtTwSY 299 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::skip_bytes
//       Access: Public
//  Description: Skips over the indicated number of bytes in the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2660  4 size 1 2523  
898 14 Dtool_Koxt3j8S 6 896 2488 0 14 Dtool_Koxt3j8S 329 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Public
//  Description: Extracts the indicated number of bytes in the
//               datagram and returns them as a string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2660  4 size 1 2523  
899 14 Dtool_KoxtyKhi 6 897 2488 0 14 Dtool_KoxtyKhi 352 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_bytes
//       Access: Public
//  Description: Returns the remaining bytes in the datagram as a
//               string, but does not extract them from the iterator.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2661  
900 14 Dtool_KoxtOxKa 6 898 2490 0 14 Dtool_KoxtOxKa 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_size
//       Access: Public
//  Description: Return the bytes left in the datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2661  
901 14 Dtool_Koxtdg_H 6 899 2656 0 14 Dtool_Koxtdg_H 264 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_datagram
//       Access: Public
//  Description: Return the datagram of this iterator.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2661  
902 14 Dtool_Koxt_KNH 6 900 2523 0 14 Dtool_Koxt_KNH 335 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_current_index
//       Access: Public
//  Description: Returns the current position within the datagram of the
//               next piece of data to extract.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2661  
903 14 Dtool_KoxtG38c 4 901 2491 0 14 Dtool_KoxtG38c 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2661  3 out 1 2499  
904 14 Dtool_KoxtcoYU 4 902 2491 0 14 Dtool_KoxtcoYU 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2661  3 out 1 2499  6 indent 1 2523  
905 14 Dtool_KoxtuJe3 4 902 2491 0 14 Dtool_KoxtuJe3 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2661  3 out 1 2499  
906 14 Dtool_Koxt8kXb 6 905 2489 0 14 Dtool_Koxt8kXb 0 2 4 this 3 2663  4 data 1 2656  
907 14 Dtool_KoxtngMM 6 906 2489 0 14 Dtool_KoxtngMM 0 1 4 this 3 2663  
908 14 Dtool_KoxtLW8s 4 907 2491 0 14 Dtool_KoxtLW8s 0 1 4 this 3 2663  
909 14 Dtool_Koxtfza9 7 921 2664 2136 14 Dtool_Koxtfza9 710 // Filename: textEncoder.I
// Created by:  drose (26Mar03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
910 14 Dtool_KoxtihQr 7 921 2664 2136 14 Dtool_KoxtihQr 228 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2665  
911 14 Dtool_KoxtrlQJ 4 922 2491 0 14 Dtool_KoxtrlQJ 692 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_encoding
//       Access: Published
//  Description: Specifies how the string set via set_text() is to be
//               interpreted.  The default, E_iso8859, means a
//               standard string with one-byte characters
//               (i.e. ASCII).  Other encodings are possible to take
//               advantage of character sets with more than 256
//               characters.
//
//               This affects only future calls to set_text(); it does
//               not change text that was set previously.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2664  8 encoding 1 2461  
912 14 Dtool_KoxtMWo7 6 923 2461 0 14 Dtool_KoxtMWo7 344 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoding
//       Access: Published
//  Description: Returns the encoding by which the string set via
//               set_text() is to be interpreted.  See set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2665  
913 14 Dtool_KoxtFCJv 4 924 2491 0 14 Dtool_KoxtFCJv 387 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
//////////////////////////////////////////////////////////////////// 1 8 encoding 1 2461  
914 14 Dtool_KoxtroPl 6 925 2461 0 14 Dtool_KoxtroPl 387 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
//////////////////////////////////////////////////////////////////// 0 
915 14 Dtool_KoxtNXzC 4 926 2491 0 14 Dtool_KoxtNXzC 561 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: Changes the text that is stored in the encoder.  The
//               text should be encoded according to the method
//               indicated by set_encoding().  Subsequent calls to
//               get_text() will return this same string, while
//               get_wtext() will return the decoded version of the
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2664  4 text 1 2488  
916 14 Dtool_Koxt5aXk 4 926 2491 0 14 Dtool_Koxt5aXk 572 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2664  4 text 1 2488  8 encoding 1 2461  
917 14 Dtool_Koxtz_D5 4 927 2491 0 14 Dtool_Koxtz_D5 261 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::clear_text
//       Access: Published
//  Description: Removes the text from the TextEncoder.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2664  
918 14 Dtool_Koxt97oh 6 928 2489 0 14 Dtool_Koxt97oh 220 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::has_text
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2665  
919 14 Dtool_KoxtqMP7 4 929 2491 0 14 Dtool_KoxtqMP7 361 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::make_upper
//       Access: Published
//  Description: Adjusts the text stored within the encoder to all
//               uppercase letters (preserving accent marks
//               correctly).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2664  
920 14 Dtool_KoxtT0Ve 4 930 2491 0 14 Dtool_KoxtT0Ve 361 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::make_lower
//       Access: Published
//  Description: Adjusts the text stored within the encoder to all
//               lowercase letters (preserving accent marks
//               correctly).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2664  
921 14 Dtool_Koxtp9Te 6 931 2488 0 14 Dtool_Koxtp9Te 307 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the current
//               encoding system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2665  
922 14 Dtool_KoxtJTNv 6 931 2488 0 14 Dtool_KoxtJTNv 309 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the indicated
//               encoding system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2665  8 encoding 1 2461  
923 14 Dtool_Koxt2ChQ 4 932 2491 0 14 Dtool_Koxt2ChQ 300 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2664  4 text 1 2488  
924 14 Dtool_KoxtoBY2 4 933 2491 0 14 Dtool_KoxtoBY2 380 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2664  9 character 1 2490  
925 14 Dtool_Koxt5x3n 6 934 2490 0 14 Dtool_Koxt5x3n 411 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_num_chars
//       Access: Published
//  Description: Returns the number of characters in the stored text.
//               This is a count of wide characters, after the string
//               has been decoded according to set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2665  
926 14 Dtool_KoxtjULv 6 935 2490 0 14 Dtool_KoxtjULv 459 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_unicode_char
//       Access: Published
//  Description: Returns the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2665  5 index 1 2490  
927 14 Dtool_KoxtSkrk 4 936 2491 0 14 Dtool_KoxtSkrk 456 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_unicode_char
//       Access: Published
//  Description: Sets the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2664  5 index 1 2490  9 character 1 2490  
928 14 Dtool_KoxtIGUu 6 937 2488 0 14 Dtool_KoxtIGUu 333 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2665  5 index 1 2490  
929 14 Dtool_KoxtJIi_ 6 937 2488 0 14 Dtool_KoxtJIi_ 333 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2665  5 index 1 2490  8 encoding 1 2461  
930 14 Dtool_KoxtzcrI 6 938 2488 0 14 Dtool_KoxtzcrI 1136 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain encoded in
//               the encoding specified by set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2665  
931 14 Dtool_KoxtT63X 6 939 2488 0 14 Dtool_KoxtT63X 559 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::reencode_text
//       Access: Published, Static
//  Description: Given the indicated text string, which is assumed to
//               be encoded via the encoding "from", decodes it and
//               then reencodes it into the encoding "to", and returns
//               the newly encoded string.  This does not change or
//               affect any properties on the TextEncoder itself.
//////////////////////////////////////////////////////////////////// 3 4 text 1 2488  4 from 1 2461  2 to 1 2461  
932 14 Dtool_Koxtojqf 6 940 2489 0 14 Dtool_Koxtojqf 408 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isalpha
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               alphabetic letter, false otherwise.  This is akin to
//               ctype's isalpha(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2490  
933 14 Dtool_KoxtvaR4 6 941 2489 0 14 Dtool_KoxtvaR4 403 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isdigit
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               numeric digit, false otherwise.  This is akin to
//               ctype's isdigit(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2490  
934 14 Dtool_KoxtIDmv 6 942 2489 0 14 Dtool_KoxtIDmv 406 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_ispunct
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               punctuation mark, false otherwise.  This is akin to
//               ctype's ispunct(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2490  
935 14 Dtool_KoxtX0SC 6 943 2489 0 14 Dtool_KoxtX0SC 406 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_islower
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               lowercase letter, false otherwise.  This is akin to
//               ctype's islower(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2490  
936 14 Dtool_KoxtrvC8 6 944 2489 0 14 Dtool_KoxtrvC8 407 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isupper
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               uppercase letter, false otherwise.  This is akin to
//               ctype's isupper(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2490  
937 14 Dtool_KoxtzKc0 6 945 2489 0 14 Dtool_KoxtzKc0 407 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isspace
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               whitespace letter, false otherwise.  This is akin to
//               ctype's isspace(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2490  
938 14 Dtool_Koxt0HrF 6 946 2490 0 14 Dtool_Koxt0HrF 391 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_toupper
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's toupper(),
//               extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2490  
939 14 Dtool_KoxtFs8L 6 947 2490 0 14 Dtool_KoxtFs8L 391 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_tolower
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's tolower(),
//               extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2490  
940 14 Dtool_Koxts0pk 6 948 2488 0 14 Dtool_Koxts0pk 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the default encoding.
//////////////////////////////////////////////////////////////////// 1 6 source 1 2488  
941 14 Dtool_Koxtxe6q 6 948 2488 0 14 Dtool_Koxtxe6q 334 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the indicated encoding.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2488  8 encoding 1 2461  
942 14 Dtool_KoxtiTMW 6 949 2488 0 14 Dtool_KoxtiTMW 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the default encoding.
//////////////////////////////////////////////////////////////////// 1 6 source 1 2488  
943 14 Dtool_Koxt9Pec 6 949 2488 0 14 Dtool_Koxt9Pec 334 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the indicated encoding.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2488  8 encoding 1 2461  
944 14 Dtool_KoxtmA0p 4 950 2491 0 14 Dtool_KoxtmA0p 446 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_wtext
//       Access: Published
//  Description: Changes the text that is stored in the encoder.
//               Subsequent calls to get_wtext() will return this same
//               string, while get_text() will return the encoded
//               version of the string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2664  5 wtext 1 2488  
945 14 Dtool_Koxt1Bjn 6 951 2488 0 14 Dtool_Koxt1Bjn 316 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext
//       Access: Published
//  Description: Returns the text associated with the TextEncoder, as
//               a wide-character string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2665  
946 14 Dtool_KoxtiCsX 4 952 2491 0 14 Dtool_KoxtiCsX 316 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2664  4 text 1 2488  
947 14 Dtool_KoxtD9G1 6 953 2488 0 14 Dtool_KoxtD9G1 1108 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain in their
//               original form.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2665  
948 14 Dtool_KoxteSU3 6 954 2489 0 14 Dtool_KoxteSU3 466 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::is_wtext
//       Access: Published
//  Description: Returns true if any of the characters in the string
//               returned by get_wtext() are out of the range of an
//               ASCII character (and, therefore, get_wtext() should
//               be called in preference to get_text()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2665  
949 14 Dtool_KoxtL6gl 6 955 2488 0 14 Dtool_KoxtL6gl 374 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wchar
//       Access: Published, Static
//  Description: Encodes a single wide char into a one-, two-, or
//               three-byte string, according to the given encoding
//               system.
//////////////////////////////////////////////////////////////////// 2 2 ch 1 2667  8 encoding 1 2461  
950 14 Dtool_KoxtDN1f 6 956 2488 0 14 Dtool_KoxtDN1f 330 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published
//  Description: Encodes a wide-text string into a single-char string,
//               according to the current encoding.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2665  5 wtext 1 2488  
951 14 Dtool_Koxtk4q6 6 956 2488 0 14 Dtool_Koxtk4q6 336 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published, Static
//  Description: Encodes a wide-text string into a single-char string,
//               according to the given encoding.
//////////////////////////////////////////////////////////////////// 2 5 wtext 1 2488  8 encoding 1 2461  
952 14 Dtool_Koxtw6DP 6 957 2488 0 14 Dtool_Koxtw6DP 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the current encoding system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2665  4 text 1 2488  
953 14 Dtool_Koxt5DE9 6 957 2488 0 14 Dtool_Koxt5DE9 338 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published, Static
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the given encoding system.
//////////////////////////////////////////////////////////////////// 2 4 text 1 2488  8 encoding 1 2461  
954 14 Dtool_KoxtnTj2 7 958 2593 1919 14 Dtool_KoxtnTj2 0 0 
955 14 Dtool_KoxtWE3r 7 965 2593 1919 14 Dtool_KoxtWE3r 0 0 
956 14 Dtool_KoxtJ7TI 6 961 2637 0 14 Dtool_KoxtJ7TI 0 1 4 this 3 2668  
957 14 Dtool_Koxt3_Dr 7 962 2668 2142 14 Dtool_Koxt3_Dr 0 1 4 this 3 2637  
958 14 Dtool_KoxtKE8f 7 963 2649 1978 14 Dtool_KoxtKE8f 0 1 4 this 3 2668  
959 14 Dtool_KoxtsWXj 7 964 2668 2142 14 Dtool_KoxtsWXj 0 1 4 this 3 2649  
960 14 Dtool_KoxtWaEw 6 968 2671 0 14 Dtool_KoxtWaEw 0 1 4 this 3 2669  
961 14 Dtool_Koxt7aYo 7 969 2525 1568 14 Dtool_Koxt7aYo 0 1 4 this 3 2669  
962 14 Dtool_KoxtI9XN 6 970 2519 0 14 Dtool_KoxtI9XN 418 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_original_filename
//       Access: Published
//  Description: Returns the original filename as it was used to
//               locate this VirtualFile.  This is usually, but not
//               always, the same string returned by get_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
963 14 Dtool_KoxtnxR0 6 971 2489 0 14 Dtool_KoxtnxR0 280 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::has_file
//       Access: Published, Virtual
//  Description: Returns true if this file exists, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
964 14 Dtool_Koxt3gtu 6 972 2489 0 14 Dtool_Koxt3gtu 354 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_directory
//       Access: Published, Virtual
//  Description: Returns true if this file represents a directory (and
//               scan_directory() may be called), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
965 14 Dtool_KoxtxCeS 6 973 2489 0 14 Dtool_KoxtxCeS 355 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_regular_file
//       Access: Published, Virtual
//  Description: Returns true if this file represents a regular file
//               (and read_file() may be called), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
966 14 Dtool_Koxt4egf 7 974 2672 1978 14 Dtool_Koxt4egf 522 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
967 14 Dtool_KoxtJKgU 4 975 2491 0 14 Dtool_KoxtJKgU 219 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2669  3 out 1 2499  
968 14 Dtool_KoxtkWDV 4 976 2491 0 14 Dtool_KoxtkWDV 287 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls
//       Access: Published
//  Description: If the file represents a directory, lists its
//               contents.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2669  3 out 1 2499  
969 14 Dtool_Koxt42an 4 976 2491 0 14 Dtool_Koxt42an 287 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls
//       Access: Published
//  Description: If the file represents a directory, lists its
//               contents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
970 14 Dtool_KoxtlJmn 4 977 2491 0 14 Dtool_KoxtlJmn 335 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls_all
//       Access: Published
//  Description: If the file represents a directory, recursively lists
//               its contents and those of all subdirectories.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2669  3 out 1 2499  
971 14 Dtool_Koxt_9x0 4 977 2491 0 14 Dtool_Koxt_9x0 335 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls_all
//       Access: Published
//  Description: If the file represents a directory, recursively lists
//               its contents and those of all subdirectories.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
972 14 Dtool_Koxt6zyQ 6 978 2488 0 14 Dtool_Koxt6zyQ 271 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Returns the entire contents of the file as a string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2669  11 auto_unwrap 1 2489  
973 14 Dtool_Koxt_qft 6 979 2492 0 14 Dtool_Koxt_qft 449 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_file
//       Access: Published, Virtual
//  Description: Opens the file for reading.  Returns a newly
//               allocated istream on success (which you should
//               eventually delete when you are done reading).
//               Returns NULL on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2669  11 auto_unwrap 1 2489  
974 14 Dtool_KoxtUTlQ 4 980 2491 0 14 Dtool_KoxtUTlQ 516 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_file
//       Access: Public
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2669  6 stream 1 2492  
975 14 Dtool_KoxtV5c7 6 981 2489 0 14 Dtool_KoxtV5c7 615 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::was_read_successful
//       Access: Public
//  Description: Call this method after a reading the istream returned
//               by open_read_file() to completion.  If it returns
//               true, the file was read completely and without error;
//               if it returns false, there may have been some errors
//               or a truncated file read.  This is particularly
//               likely if the stream is a VirtualFileHTTP.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
976 14 Dtool_KoxtVVtH 6 982 2490 0 14 Dtool_KoxtVVtH 343 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the file before it has been opened.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
977 14 Dtool_KoxtklGA 6 982 2490 0 14 Dtool_KoxtklGA 508 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the already-open file.  Pass in the stream that
//               was returned by open_read_file(); some
//               implementations may require this stream to determine
//               the size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2669  6 stream 1 2492  
978 14 Dtool_KoxtW49E 6 983 2523 0 14 Dtool_KoxtW49E 776 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_timestamp
//       Access: Published, Virtual
//  Description: Returns a time_t value that represents the time the
//               file was last modified, to within whatever precision
//               the operating system records this information (on a
//               Windows95 system, for instance, this may only be
//               accurate to within 2 seconds).
//
//               If the timestamp cannot be determined, either because
//               it is not supported by the operating system or
//               because there is some error (such as file not found),
//               returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2669  
979 14 Dtool_Koxt1f88 7 984 2593 1919 14 Dtool_Koxt1f88 0 0 
980 14 Dtool_KoxtghyY 7 987 2593 1919 14 Dtool_KoxtghyY 0 0 
981 14 Dtool_KoxtbFir 6 990 2671 0 14 Dtool_KoxtbFir 304 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_file_system
//       Access: Public
//  Description: Returns the file system this mount object is attached
//               to.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2673  
982 14 Dtool_KoxtIF_a 6 991 2519 0 14 Dtool_KoxtIF_a 410 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_point
//       Access: Public
//  Description: Returns the name of the directory within the virtual
//               file system that this mount object is attached to.
//               This directory name will end with a slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2673  
983 14 Dtool_Koxtt09F 6 992 2490 0 14 Dtool_Koxtt09F 333 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_flags
//       Access: Public
//  Description: Returns the set of flags passed by the user to the
//               VirtualFileSystem::mount() command.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2673  
984 14 Dtool_KoxtIEZ0 4 993 2491 0 14 Dtool_KoxtIEZ0 230 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::output
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2673  3 out 1 2499  
985 14 Dtool_Koxth28O 4 994 2491 0 14 Dtool_Koxth28O 229 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::write
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2673  3 out 1 2499  
986 14 Dtool_Koxt2sRF 7 995 2593 1919 14 Dtool_Koxt2sRF 0 0 
987 14 Dtool_KoxtL5jx 7 997 2675 2172 14 Dtool_KoxtL5jx 704 // Filename: subStream.I
// Created by:  drose (02Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
988 14 Dtool_Koxty41P 7 997 2675 2172 14 Dtool_Koxty41P 219 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 source 1 2600  5 start 1 2579  3 end 1 2579  
989 14 Dtool_Koxte7pl 6 998 2675 0 14 Dtool_Koxte7pl 697 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               source, with the first character being the character
//               at position "start" within the source, for end -
//               start total characters.  The character at "end"
//               within the source will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the ISubStream will
//               continue until the end of the source stream.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2675  6 source 1 2600  5 start 1 2579  3 end 1 2579  
990 14 Dtool_KoxtklXc 6 999 2675 0 14 Dtool_KoxtklXc 309 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the source istream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2675  
991 14 Dtool_Koxtwqaa 7 1002 2676 1978 14 Dtool_Koxtwqaa 2443 //
// A Multifile consists of the following elements:
//
// (1) A header.  This is always the first n bytes of the Multifile,
// and contains a magic number to identify the file, as well as
// version numbers and any file-specific parameters.
//
//   char[6]    The string Multifile::_header, a magic number.
//   int16      The file's major version number
//   int16      The file's minor version number
//   uint32     Scale factor.  This scales all address references within
//              the file.  Normally 1, this may be set larger to
//              support Multifiles larger than 4GB.
//   uint32     An overall modification timestamp for the entire multifile.
//
// (2) Zero or more index entries, one for each subfile within the
// Multifile.  These entries are of variable length.  The first one of
// these immediately follows the header, and the first word of each
// index entry contains the address of the next index entry.  A zero
// "next" address marks the end of the chain.  These may appear at any
// point within the Multifile; they do not necessarily appear in
// sequential order at the beginning of the file (although they will
// after the file has been "packed").
//
//   uint32     The address of the next entry.  0 to mark the end.
//   uint32     The address of this subfile's data record.
//   uint32     The length in bytes of this subfile's data record.
//   uint16     The Subfile::_flags member.
//  [uint32]    The original, uncompressed and unencrypted length of the
//               subfile, if it is compressed or encrypted.  This field
//               is only present if one or both of the SF_compressed
//               or SF_encrypted bits are set in _flags.
//   uint32     A modification timestamp for the subfile.
//   uint16     The length in bytes of the subfile's name.
//   char[n]    The subfile's name.
//
// (3) Zero or more data entries, one for each subfile.  These may
// appear at any point within the Multifile; they do not necessarily
// follow each index entry, nor are they necessarily all grouped
// together at the end (although they will be all grouped together at
// the end after the file has been "packed").  These are just blocks
// of literal data.
//
////////////////////////////////////////////////////////////////////
//     Function: Multifile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
992 14 Dtool_KoxtH5sK 6 1003 2489 0 14 Dtool_KoxtH5sK 651 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Published
//  Description: Opens the named Multifile on disk for reading.  The
//               Multifile index is read in, and the list of subfiles
//               becomes available; individual subfiles may then be
//               extracted or read, but the list of subfiles may not
//               be modified.
//
//               Also see the version of open_read() which accepts an
//               istream.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  14 multifile_name 1 2519  6 offset 1 2490  
993 14 Dtool_Koxt9Q56 6 1003 2489 0 14 Dtool_Koxt9Q56 651 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Published
//  Description: Opens the named Multifile on disk for reading.  The
//               Multifile index is read in, and the list of subfiles
//               becomes available; individual subfiles may then be
//               extracted or read, but the list of subfiles may not
//               be modified.
//
//               Also see the version of open_read() which accepts an
//               istream.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  14 multifile_name 1 2519  
994 14 Dtool_KoxtQI1P 6 1003 2489 0 14 Dtool_KoxtQI1P 629 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2676  16 multifile_stream 1 2600  12 owns_pointer 1 2489  6 offset 1 2490  
995 14 Dtool_Koxt4z4L 6 1003 2489 0 14 Dtool_Koxt4z4L 629 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  16 multifile_stream 1 2600  12 owns_pointer 1 2489  
996 14 Dtool_KoxtNztD 6 1003 2489 0 14 Dtool_KoxtNztD 629 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  16 multifile_stream 1 2600  
997 14 Dtool_KoxtfyBJ 6 1004 2489 0 14 Dtool_KoxtfyBJ 734 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Published
//  Description: Opens the named Multifile on disk for writing.  If
//               there already exists a file by that name, it is
//               truncated.  The Multifile is then prepared for
//               accepting a brand new set of subfiles, which will be
//               written to the indicated filename.  Individual
//               subfiles may not be extracted or read.
//
//               Also see the version of open_write() which accepts an
//               ostream.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  14 multifile_name 1 2519  
998 14 Dtool_Koxt2HOv 6 1004 2489 0 14 Dtool_Koxt2HOv 630 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Public
//  Description: Opens an anonymous Multifile for writing using an
//               ostream.  There must be seek functionality via
//               seekp() and tellp() on the pstream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  16 multifile_stream 1 2499  12 owns_pointer 1 2489  
999 14 Dtool_KoxtciH3 6 1004 2489 0 14 Dtool_KoxtciH3 630 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Public
//  Description: Opens an anonymous Multifile for writing using an
//               ostream.  There must be seek functionality via
//               seekp() and tellp() on the pstream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  16 multifile_stream 1 2499  
1000 14 Dtool_KoxtIEQv 6 1005 2489 0 14 Dtool_KoxtIEQv 680 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Published
//  Description: Opens the named Multifile on disk for reading and
//               writing.  If there already exists a file by that
//               name, its index is read.  Subfiles may be added or
//               removed, and the resulting changes will be written to
//               the named file.
//
//               Also see the version of open_read_write() which
//               accepts an iostream.  Returns true on success, false
//               on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  14 multifile_name 1 2519  
1001 14 Dtool_Koxt7Aku 6 1005 2489 0 14 Dtool_Koxt7Aku 682 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Public
//  Description: Opens an anonymous Multifile for reading and writing
//               using an iostream.  There must be seek functionality
//               via seekg()/seekp() and tellg()/tellp() on the
//               iostream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  16 multifile_stream 1 2578  12 owns_pointer 1 2489  
1002 14 Dtool_KoxtZ3Zm 6 1005 2489 0 14 Dtool_KoxtZ3Zm 682 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Public
//  Description: Opens an anonymous Multifile for reading and writing
//               using an iostream.  There must be seek functionality
//               via seekg()/seekp() and tellg()/tellp() on the
//               iostream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  16 multifile_stream 1 2578  
1003 14 Dtool_KoxtMa18 4 1006 2491 0 14 Dtool_KoxtMa18 402 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::close
//       Access: Published
//  Description: Closes the Multifile if it is open.  All changes are
//               flushed to disk, and the file becomes invalid for
//               further operations until the next call to open().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2676  
1004 14 Dtool_Koxtit0K 6 1007 2519 0 14 Dtool_Koxtit0K 788 // Filename: multifile.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_multifile_name
//       Access: Published
//  Description: Returns the filename of the Multifile, if it is
//               available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1005 14 Dtool_Koxto4Nx 4 1008 2491 0 14 Dtool_Koxto4Nx 471 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_multifile_name
//       Access: Published
//  Description: Replaces the filename of the Multifile.  This is
//               primarily used for documentation purposes only;
//               changing this name does not open the indicated file.
//               See open_read() or open_write() for that.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  14 multifile_name 1 2519  
1006 14 Dtool_KoxtbS6p 6 1009 2489 0 14 Dtool_KoxtbS6p 398 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_read_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               read mode and there have been no errors, and
//               individual Subfile contents may be extracted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1007 14 Dtool_KoxtpFGO 6 1010 2489 0 14 Dtool_KoxtpFGO 407 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_write_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               write mode and there have been no errors, and
//               Subfiles may be added or removed from the Multifile.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1008 14 Dtool_Koxt0bT4 6 1011 2489 0 14 Dtool_Koxt0bT4 345 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::needs_repack
//       Access: Published
//  Description: Returns true if the Multifile index is suboptimal and
//               should be repacked.  Call repack() to achieve this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1009 14 Dtool_KoxtU5Uu 6 1012 2523 0 14 Dtool_KoxtU5Uu 588 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_timestamp
//       Access: Published
//  Description: Returns the modification timestamp of the overall
//               Multifile.  This indicates the most recent date at
//               which subfiles were added or removed from the
//               Multifile.  Note that it is logically possible for an
//               individual subfile to have a more recent timestamp
//               than the overall timestamp.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1010 14 Dtool_KoxtueTw 4 1013 2491 0 14 Dtool_KoxtueTw 900 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_record_timestamp
//       Access: Published
//  Description: Sets the flag indicating whether timestamps should be
//               recorded within the Multifile or not.  The default is
//               true, indicating the Multifile will record timestamps
//               for the overall file and also for each subfile.  
//
//               If this is false, the Multifile will not record
//               timestamps internally.  In this case, the return
//               value from get_timestamp() or get_subfile_timestamp()
//               will be estimations.
//
//               You may want to set this false to minimize the
//               bitwise difference between independently-generated
//               Multifiles.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  16 record_timestamp 1 2489  
1011 14 Dtool_KoxtylFu 6 1014 2489 0 14 Dtool_KoxtylFu 388 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_record_timestamp
//       Access: Published
//  Description: Returns the flag indicating whether timestamps
//               should be recorded within the Multifile or not.  See
//               set_record_timestamp().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1012 14 Dtool_Koxt2jcN 4 1015 2491 0 14 Dtool_Koxt2jcN 1220 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_scale_factor
//       Access: Published
//  Description: Changes the internal scale factor for this Multifile.
//
//               This is normally 1, but it may be set to any
//               arbitrary value (greater than zero) to support
//               Multifile archives that exceed 4GB, if necessary.
//               (Individual subfiles may still not exceed 4GB.)
//
//               All addresses within the file are rounded up to the
//               next multiple of _scale_factor, and zeros are written
//               to the file to fill the resulting gaps.  Then the
//               address is divided by _scale_factor and written out
//               as a 32-bit integer.  Thus, setting a scale factor of
//               2 supports up to 8GB files, 3 supports 12GB files,
//               etc.
//
//               Calling this function on an already-existing
//               Multifile will have no immediate effect until a
//               future call to repack() or close() (or until the
//               Multifile is destructed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  12 scale_factor 1 2523  
1013 14 Dtool_KoxtWN1X 6 1016 2523 0 14 Dtool_KoxtWN1X 321 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_scale_factor
//       Access: Published
//  Description: Returns the internal scale factor for this Multifile.
//               See set_scale_factor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1014 14 Dtool_Koxta6QQ 4 1017 2491 0 14 Dtool_Koxta6QQ 818 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_flag
//       Access: Published
//  Description: Sets the flag indicating whether subsequently-added
//               subfiles should be encrypted before writing them to
//               the multifile.  If true, subfiles will be encrypted;
//               if false (the default), they will be written without
//               encryption.
//
//               When true, subfiles will be encrypted with the
//               password specified by set_encryption_password().  It
//               is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  4 flag 1 2489  
1015 14 Dtool_KoxtDazL 6 1018 2489 0 14 Dtool_KoxtDazL 430 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_flag
//       Access: Published
//  Description: Returns the flag indicating whether
//               subsequently-added subfiles should be encrypted
//               before writing them to the multifile.  See
//               set_encryption_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1016 14 Dtool_Koxt7mjs 4 1019 2491 0 14 Dtool_Koxt7mjs 696 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_password
//       Access: Published
//  Description: Specifies the password that will be used to encrypt
//               subfiles subsequently added to the multifile, if the
//               encryption flag is also set true (see
//               set_encryption_flag()).
//
//               It is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.  Changing this value may cause an
//               implicit call to flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  19 encryption_password 1 2488  
1017 14 Dtool_KoxtSjUj 6 1020 2488 0 14 Dtool_KoxtSjUj 395 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_password
//       Access: Published
//  Description: Returns the password that will be used to encrypt
//               subfiles subsequently added to the multifile.  See
//               set_encryption_password().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1018 14 Dtool_Koxtwrql 4 1021 2491 0 14 Dtool_Koxtwrql 1073 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_algorithm
//       Access: Public
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to add_subfile().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but flush() will fail
//               and the file will be invalid.
//
//               It is possible to apply a different encryption
//               algorithm to different files, and unlike the
//               password, this does not interfere with mounting the
//               multifile via VFS.  Changing this value may cause an
//               implicit call to flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  20 encryption_algorithm 1 2488  
1019 14 Dtool_KoxtN_wJ 6 1022 2488 0 14 Dtool_KoxtN_wJ 331 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_algorithm
//       Access: Public
//  Description: Returns the encryption algorithm that was specified
//               by set_encryption_algorithm().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1020 14 Dtool_KoxtOFfa 4 1023 2491 0 14 Dtool_KoxtOFfa 998 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_key_length
//       Access: Public
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               add_subfile().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but flush() will fail and the file will be invalid.
//
//               It is possible to apply a different key length to
//               different files, and unlike the password, this does
//               not interfere with mounting the multifile via VFS.
//               Changing this value may cause an implicit call to
//               flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  21 encryption_key_length 1 2490  
1021 14 Dtool_KoxtIEKW 6 1024 2490 0 14 Dtool_KoxtIEKW 344 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_key_length
//       Access: Public
//  Description: Returns the encryption key length, in bits, that was
//               specified by set_encryption_key_length().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1022 14 Dtool_KoxtOTvt 4 1025 2491 0 14 Dtool_KoxtOTvt 1174 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_iteration_count
//       Access: Public
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to add_subfile().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               multifile-encryption-iteration-count config variable.
//
//               It is possible to apply a different iteration count
//               to different files, and unlike the password, this
//               does not interfere with mounting the multifile via
//               VFS.  Changing this value causes an implicit call to
//               flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  26 encryption_iteration_count 1 2490  
1023 14 Dtool_Koxt_0WC 6 1026 2490 0 14 Dtool_Koxt_0WC 328 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_iteration_count
//       Access: Public
//  Description: Returns the value that was specified by
//               set_encryption_iteration_count().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1024 14 Dtool_KoxtDhxy 6 1027 2488 0 14 Dtool_KoxtDhxy 731 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Published
//  Description: Adds a file on disk as a subfile to the Multifile.
//               The file named by filename will be read and added to
//               the Multifile at the next call to flush().  If there
//               already exists a subfile with the indicated name, it
//               is replaced without examining its contents (but see
//               also update_subfile).
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2676  12 subfile_name 1 2488  8 filename 1 2519  17 compression_level 1 2490  
1025 14 Dtool_KoxtuXK4 6 1027 2488 0 14 Dtool_KoxtuXK4 1132 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Public
//  Description: Adds a file from a stream as a subfile to the Multifile.
//               The indicated istream will be read and its contents
//               added to the Multifile at the next call to flush().
//
//               Note that the istream must remain untouched and
//               unused by any other code until flush() is called.  At
//               that time, the Multifile will read the entire
//               contents of the istream from the current file
//               position to the end of the file.  Subsequently, the
//               Multifile will *not* close or delete the istream.  It
//               is the caller's responsibility to ensure that the
//               istream pointer does not destruct during the lifetime
//               of the Multifile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2676  12 subfile_name 1 2488  12 subfile_data 1 2492  17 compression_level 1 2490  
1026 14 Dtool_Koxtz3H7 6 1028 2488 0 14 Dtool_Koxtz3H7 523 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::update_subfile
//       Access: Published
//  Description: Adds a file on disk to the subfile.  If a subfile
//               already exists with the same name, its contents are
//               compared byte-for-byte to the disk file, and it is
//               replaced only if it is different; otherwise, the
//               multifile is left unchanged.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2676  12 subfile_name 1 2488  8 filename 1 2519  17 compression_level 1 2490  
1027 14 Dtool_Koxtqbym 6 1031 2489 0 14 Dtool_Koxtqbym 1856 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The chain filename may be empty if the certificate
//               does not require an authenticating certificate chain
//               (e.g. because it is self-signed).
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
//
//               This flavor of add_signature() reads the certificate
//               and private key from a PEM-formatted file, for
//               instance as generated by the openssl command.  If the
//               private key file is password-encrypted, the third
//               parameter will be used as the password to decrypt it.
//////////////////////////////////////////////////////////////////// 5 4 this 3 2676  11 certificate 1 2519  5 chain 1 2519  4 pkey 1 2519  8 password 1 2488  
1028 14 Dtool_Koxt89Td 6 1031 2489 0 14 Dtool_Koxt89Td 1856 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The chain filename may be empty if the certificate
//               does not require an authenticating certificate chain
//               (e.g. because it is self-signed).
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
//
//               This flavor of add_signature() reads the certificate
//               and private key from a PEM-formatted file, for
//               instance as generated by the openssl command.  If the
//               private key file is password-encrypted, the third
//               parameter will be used as the password to decrypt it.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2676  11 certificate 1 2519  5 chain 1 2519  4 pkey 1 2519  
1029 14 Dtool_KoxtigeL 6 1031 2489 0 14 Dtool_KoxtigeL 1131 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               This flavor of add_signature() reads the certificate,
//               private key, and certificate chain from the same
//               PEM-formatted file.  It takes the first private key
//               found as the intended key, and then uses the first
//               certificate found that matches that key as the
//               signing certificate.  Any other certificates in the
//               file are taken to be part of the chain.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  9 composite 1 2519  8 password 1 2488  
1030 14 Dtool_Koxtll9W 6 1031 2489 0 14 Dtool_Koxtll9W 1131 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               This flavor of add_signature() reads the certificate,
//               private key, and certificate chain from the same
//               PEM-formatted file.  It takes the first private key
//               found as the intended key, and then uses the first
//               certificate found that matches that key as the
//               signing certificate.  Any other certificates in the
//               file are taken to be part of the chain.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  9 composite 1 2519  
1031 14 Dtool_KoxtZz0C 6 1031 2489 0 14 Dtool_KoxtZz0C 1532 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The signature certificate is the first certificate on
//               the CertChain object.  Any remaining certificates are
//               support certificates to authenticate the first one.
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  5 chain 1 2679  4 pkey 1 2682  
1032 14 Dtool_KoxtKvMM 6 1032 2490 0 14 Dtool_KoxtKvMM 921 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_signatures
//       Access: Published
//  Description: Returns the number of matching signatures found on
//               the Multifile.  These signatures may be iterated via
//               get_signature() and related methods.
//
//               A signature on this list is guaranteed to match the
//               Multifile contents, proving that the Multifile has
//               been unmodified since the signature was applied.
//               However, this does not guarantee that the certificate
//               itself is actually from who it says it is from; only
//               that it matches the Multifile contents.  See
//               validate_signature_certificate() to authenticate a
//               particular certificate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1033 14 Dtool_Koxt60_P 6 1033 2679 0 14 Dtool_Koxt60_P 332 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature
//       Access: Published
//  Description: Returns the nth signature found on the Multifile.
//               See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  1 n 1 2490  
1034 14 Dtool_KoxtQ6Ip 6 1034 2488 0 14 Dtool_KoxtQ6Ip 669 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_subject_name
//       Access: Published
//  Description: Returns the "subject name" for the nth signature found
//               on the Multifile.  This is a string formatted
//               according to RFC2253 that should more-or-less
//               identify a particular certificate; when paired with
//               the public key (see get_signature_public_key()), it
//               can uniquely identify a certificate.  See the
//               comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  1 n 1 2490  
1035 14 Dtool_Koxtft_9 6 1035 2488 0 14 Dtool_Koxtft_9 598 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_friendly_name
//       Access: Published
//  Description: Returns a "friendly name" for the nth signature found
//               on the Multifile.  This attempts to extract out the
//               most meaningful part of the subject name.  It returns
//               the emailAddress, if it is defined; otherwise, it
//               returns the commonName.
//               See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  1 n 1 2490  
1036 14 Dtool_KoxtEK3x 6 1036 2488 0 14 Dtool_KoxtEK3x 691 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_public_key
//       Access: Published
//  Description: Returns the public key used for the nth signature
//               found on the Multifile.  This is encoded in DER form
//               and returned as a string of hex digits.
//
//               This can be used, in conjunction with the subject
//               name (see get_signature_subject_name()), to uniquely
//               identify a particular certificate and its subsequent
//               reissues.  See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  1 n 1 2490  
1037 14 Dtool_KoxtAJfy 4 1037 2491 0 14 Dtool_KoxtAJfy 402 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::write_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               verbose form, to the indicated stream.  See the
//               comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2677  1 n 1 2490  3 out 1 2499  
1038 14 Dtool_KoxtT0ZM 6 1038 2490 0 14 Dtool_KoxtT0ZM 595 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::validate_signature_certificate
//       Access: Published
//  Description: Checks that the certificate used for the nth
//               signature is a valid, authorized certificate with
//               some known certificate authority.  Returns 0 if it
//               is valid, -1 if there is some error, or the
//               corresponding OpenSSL error code if it is invalid,
//               out-of-date, or self-signed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  1 n 1 2490  
1039 14 Dtool_Koxt7cnZ 6 1039 2489 0 14 Dtool_Koxt7cnZ 1106 // HAVE_OPENSSL
////////////////////////////////////////////////////////////////////
//     Function: Multifile::flush
//       Access: Published
//  Description: Writes all contents of the Multifile to disk.  Until
//               flush() is called, add_subfile() and remove_subfile()
//               do not actually do anything to disk.  At this point,
//               all of the recently-added subfiles are read and their
//               contents are added to the end of the Multifile, and
//               the recently-removed subfiles are marked gone from
//               the Multifile.
//
//               This may result in a suboptimal index.  To guarantee
//               that the index is written at the beginning of the
//               file, call repack() instead of flush().
//
//               It is not necessary to call flush() explicitly unless
//               you are concerned about reading the recently-added
//               subfiles immediately.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2676  
1040 14 Dtool_KoxthLqr 6 1040 2489 0 14 Dtool_KoxthLqr 959 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::repack
//       Access: Published
//  Description: Forces a complete rewrite of the Multifile and all of
//               its contents, so that its index will appear at the
//               beginning of the file with all of the subfiles listed
//               in alphabetical order.  This is considered optimal
//               for reading, and is the standard configuration; but
//               it is not essential to do this.
//
//               It is only valid to call this if the Multifile was
//               opened using open_read_write() and an explicit
//               filename, rather than an iostream.  Also, we must
//               have write permission to the directory containing the
//               Multifile.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2676  
1041 14 Dtool_KoxtCa0B 6 1041 2490 0 14 Dtool_KoxtCa0B 412 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_subfiles
//       Access: Published
//  Description: Returns the number of subfiles within the Multifile.
//               The subfiles may be accessed in alphabetical order by
//               iterating through [0 .. get_num_subfiles()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1042 14 Dtool_KoxtAvHU 6 1042 2490 0 14 Dtool_KoxtAvHU 370 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::find_subfile
//       Access: Published
//  Description: Returns the index of the subfile with the indicated
//               name, or -1 if the named subfile is not within the
//               Multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  12 subfile_name 1 2488  
1043 14 Dtool_Koxt_fnT 6 1043 2489 0 14 Dtool_Koxt_fnT 461 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::has_directory
//       Access: Published
//  Description: Returns true if the indicated subfile name is the
//               directory prefix to one or more files within the
//               Multifile.  That is, the Multifile contains at least
//               one file named "subfile_name/...".
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  12 subfile_name 1 2488  
1044 14 Dtool_KoxtC9bD 6 1044 2489 0 14 Dtool_KoxtC9bD 755 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::scan_directory
//       Access: Published
//  Description: Considers subfile_name to be the name of a
//               subdirectory within the Multifile, but not a file
//               itself; fills the given vector up with the sorted list
//               of subdirectories or files within the named
//               directory.
//
//               Note that directories do not exist explicitly within
//               a Multifile; this just checks for the existence of
//               files with the given initial prefix.
//
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2677  8 contents 1 2586  12 subfile_name 1 2488  
1045 14 Dtool_KoxtllPZ 6 1045 2489 0 14 Dtool_KoxtllPZ 824 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the named subfile from the Multifile, if it
//               exists; returns true if successfully removed, or
//               false if it did not exist in the first place.  The
//               file will not actually be removed from the disk until
//               the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  12 subfile_name 1 2488  
1046 14 Dtool_KoxtyAb8 4 1045 2491 0 14 Dtool_KoxtyAb8 770 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the nth subfile from the Multifile.  This
//               will cause all subsequent index numbers to decrease
//               by one.  The file will not actually be removed from
//               the disk until the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  5 index 1 2490  
1047 14 Dtool_KoxtUz_f 6 1046 2488 0 14 Dtool_KoxtUz_f 263 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_name
//       Access: Published
//  Description: Returns the name of the nth subfile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  5 index 1 2490  
1048 14 Dtool_KoxteCrf 6 1047 2523 0 14 Dtool_KoxteCrf 433 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_length
//       Access: Published
//  Description: Returns the uncompressed data length of the nth
//               subfile.  This might return 0 if the subfile has
//               recently been added and flush() has not yet been
//               called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  5 index 1 2490  
1049 14 Dtool_KoxtzErL 6 1048 2523 0 14 Dtool_KoxtzErL 567 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_timestamp
//       Access: Published
//  Description: Returns the modification time of the nth
//               subfile.  If this is called on an older .mf file,
//               which did not store individual timestamps in the file
//               (or if get_record_timestamp() is false), this will
//               return the modification time of the overall
//               multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  5 index 1 2490  
1050 14 Dtool_KoxtYA9O 6 1049 2489 0 14 Dtool_KoxtYA9O 372 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_compressed
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               compressed when stored within the archive, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  5 index 1 2490  
1051 14 Dtool_KoxtlEUv 6 1050 2489 0 14 Dtool_KoxtlEUv 370 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_encrypted
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               encrypted when stored within the archive, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  5 index 1 2490  
1052 14 Dtool_Koxtw4OY 6 1051 2490 0 14 Dtool_Koxtw4OY 688 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_index_end
//       Access: Published
//  Description: Returns the first byte that is guaranteed to follow
//               any index byte already written to disk in the
//               Multifile.
//
//               This number is largely meaningless in many cases, but
//               if needs_repack() is false, and the file is flushed,
//               this will indicate the number of bytes in the header
//               + index.  Everything at this byte position and later
//               will be actual data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1053 14 Dtool_Koxt2Ow3 6 1052 2490 0 14 Dtool_Koxt2Ow3 653 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_start
//       Access: Published
//  Description: Returns the starting byte position within the
//               Multifile at which the indicated subfile begins.
//               This may be used, with get_subfile_internal_length(),
//               for low-level access to the subfile, but usually it
//               is better to use open_read_subfile() instead (which
//               automatically decrypts and/or uncompresses the
//               subfile data).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  5 index 1 2490  
1054 14 Dtool_KoxtqvJ_ 6 1053 2523 0 14 Dtool_KoxtqvJ_ 639 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_length
//       Access: Published
//  Description: Returns the number of bytes the indicated subfile
//               consumes within the archive.  For compressed
//               subfiles, this will generally be smaller than
//               get_subfile_length(); for encrypted (but
//               noncompressed) subfiles, it may be slightly
//               different, for noncompressed and nonencrypted
//               subfiles, it will be equal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  5 index 1 2490  
1055 14 Dtool_KoxtNjWf 6 1054 2488 0 14 Dtool_KoxtNjWf 316 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Published
//  Description: Returns a string that contains the entire contents of
//               the indicated subfile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  5 index 1 2490  
1056 14 Dtool_KoxtGXxf 6 1055 2492 0 14 Dtool_KoxtGXxf 1184 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Published
//  Description: Returns an istream that may be used to read the
//               indicated subfile.  You may seek() within this
//               istream to your heart's content; even though it will
//               be a reference to the already-opened pfstream of the
//               Multifile itself, byte 0 appears to be the beginning
//               of the subfile and EOF appears to be the end of the
//               subfile.
//
//               The returned istream will have been allocated via
//               new; you should pass the pointer to
//               close_read_subfile() when you are finished with it to
//               delete it and release its resources.
//
//               Any future calls to repack() or close() (or the
//               Multifile destructor) will invalidate all currently
//               open subfile pointers.
//
//               The return value will be NULL if the stream cannot be
//               opened for some reason.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  5 index 1 2490  
1057 14 Dtool_Koxtoe15 4 1056 2491 0 14 Dtool_Koxtoe15 531 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::close_read_subfile
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_subfile().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2492  
1058 14 Dtool_KoxtxPcf 6 1057 2489 0 14 Dtool_KoxtxPcf 300 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile
//       Access: Published
//  Description: Extracts the nth subfile into a file with the given
//               name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  5 index 1 2490  8 filename 1 2519  
1059 14 Dtool_KoxtRGB7 6 1058 2489 0 14 Dtool_KoxtRGB7 276 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile_to
//       Access: Public
//  Description: Extracts the nth subfile to the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  5 index 1 2490  3 out 1 2499  
1060 14 Dtool_Koxt0DCF 6 1059 2489 0 14 Dtool_Koxt0DCF 464 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::compare_subfile
//       Access: Published
//  Description: Performs a byte-for-byte comparison of the indicated
//               file on disk with the nth subfile.  Returns true if
//               the files are equivalent, or false if they are
//               different (or the file is missing).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2676  5 index 1 2490  8 filename 1 2519  
1061 14 Dtool_KoxtHX_Y 4 1060 2491 0 14 Dtool_KoxtHX_Y 217 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  3 out 1 2499  
1062 14 Dtool_Koxt_Zzn 4 1061 2491 0 14 Dtool_Koxt_Zzn 263 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::ls
//       Access: Published
//  Description: Shows a list of all subfiles within the Multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2677  3 out 1 2499  
1063 14 Dtool_KoxthACw 4 1061 2491 0 14 Dtool_KoxthACw 263 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::ls
//       Access: Published
//  Description: Shows a list of all subfiles within the Multifile.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1064 14 Dtool_KoxtZpID 6 1062 2488 0 14 Dtool_KoxtZpID 346 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_magic_number
//       Access: Published, Static
//  Description: Returns a string with the first n bytes written to a
//               Multifile, to identify it as a Multifile.
//////////////////////////////////////////////////////////////////// 0 
1065 14 Dtool_KoxtoxE_ 4 1063 2491 0 14 Dtool_KoxtoxE_ 1041 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_header_prefix
//       Access: Published
//  Description: Sets the string which is written to the Multifile
//               before the Multifile header.  This string must begin
//               with a hash mark and end with a newline character;
//               and if it includes embedded newline characters, each
//               one must be followed by a hash mark.  If these
//               conditions are not initially true, the string will be
//               modified as necessary to make it so.
//
//               This is primarily useful as a simple hack to allow
//               p3d applications to be run directly from the command
//               line on Unix-like systems.
//
//               The return value is true if successful, or false on
//               failure (for instance, because the header prefix
//               violates the above rules).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2676  13 header_prefix 1 2488  
1066 14 Dtool_Koxty_G9 6 1064 2488 0 14 Dtool_Koxty_G9 345 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_header_prefix
//       Access: Published
//  Description: Returns the string that preceded the Multifile header
//               on the file, if any.  See set_header_prefix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2677  
1067 14 Dtool_KoxtMpBt 7 1066 2684 2142 14 Dtool_KoxtMpBt 736 // Filename: virtualFileMountMultifile.I
// Created by:  drose (03Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 9 multifile 1 2676  
1068 14 Dtool_Koxt6pdK 7 1067 2676 1978 14 Dtool_Koxt6pdK 319 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::get_multifile
//       Access: Public
//  Description: Returns the Multifile pointer that this mount object
//               is based on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2685  
1069 14 Dtool_KoxtYZWf 7 1068 2593 1919 14 Dtool_KoxtYZWf 0 0 
1070 14 Dtool_KoxtRiai 7 1070 2687 2241 14 Dtool_KoxtRiai 730 // Filename: virtualFileMountSystem.I
// Created by:  drose (03Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 17 physical_filename 1 2519  
1071 14 Dtool_KoxtZtvx 6 1071 2519 0 14 Dtool_KoxtZtvx 357 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::get_physical_filename
//       Access: Public
//  Description: Returns the name of the source file on the OS
//               filesystem of the directory or file that is mounted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2688  
1072 14 Dtool_Koxtt_Ma 7 1072 2593 1919 14 Dtool_Koxtt_Ma 0 0 
1073 14 Dtool_Koxt3NWF 7 1075 2692 2142 14 Dtool_Koxt3NWF 312 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::get_mount
//       Access: Published, Virtual
//  Description: Returns the VirtualFileMount this file is associated
//               with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2690  
1074 14 Dtool_KoxtdtR9 6 1076 2489 0 14 Dtool_KoxtdtR9 429 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::is_implicit_pz_file
//       Access: Published
//  Description: Returns true if this file is a .pz file that should
//               be implicitly decompressed on load, or false if it is
//               not a .pz file or if it should not be decompressed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2690  
1075 14 Dtool_KoxttrqK 7 1077 2593 1919 14 Dtool_KoxttrqK 0 0 
1076 14 Dtool_KoxtxaR_ 7 1080 2695 2254 14 Dtool_KoxtxaR_ 221 ////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2693  
1077 14 Dtool_KoxtZXC2 7 1080 2695 2254 14 Dtool_KoxtZXC2 699 // Filename: namable.I
// Created by:  drose (16Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Namable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 2488  
1078 14 Dtool_KoxtAFnx 7 1080 2695 2254 14 Dtool_KoxtAFnx 699 // Filename: namable.I
// Created by:  drose (16Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Namable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1079 14 Dtool_Koxtp1bI 6 1081 2695 0 14 Dtool_Koxtp1bI 229 ////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2695  5 other 1 2693  
1080 14 Dtool_KoxtLNBW 4 1082 2491 0 14 Dtool_KoxtLNBW 213 ////////////////////////////////////////////////////////////////////
//     Function: Namable::set_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2695  4 name 1 2488  
1081 14 Dtool_KoxtZvUl 4 1083 2491 0 14 Dtool_KoxtZvUl 251 ////////////////////////////////////////////////////////////////////
//     Function: Namable::clear_name
//       Access: Public
//  Description: Resets the Namable's name to empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2695  
1082 14 Dtool_KoxtYjhC 6 1084 2489 0 14 Dtool_KoxtYjhC 311 ////////////////////////////////////////////////////////////////////
//     Function: Namable::has_name
//       Access: Public
//  Description: Returns true if the Namable has a nonempty name set,
//               false if the name is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2693  
1083 14 Dtool_KoxtfARN 6 1085 2488 0 14 Dtool_KoxtfARN 213 ////////////////////////////////////////////////////////////////////
//     Function: Namable::get_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2693  
1084 14 Dtool_Koxtoz7q 4 1086 2491 0 14 Dtool_Koxtoz7q 380 ////////////////////////////////////////////////////////////////////
//     Function: Namable::output
//       Access: Public
//  Description: Outputs the Namable.  This function simply writes the
//               name to the output stream; most Namable derivatives
//               will probably redefine this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2693  3 out 1 2499  
1085 14 Dtool_Koxt_mnx 7 1087 2593 1919 14 Dtool_Koxt_mnx 0 0 
1086 14 Dtool_KoxtQ7NE 7 1090 2696 2258 14 Dtool_KoxtQ7NE 709 // Filename: zStream.I
// Created by:  drose (05Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1087 14 Dtool_Koxtk44L 7 1090 2696 2258 14 Dtool_Koxtk44L 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 source 1 2492  11 owns_source 1 2489  
1088 14 Dtool_Koxt1V_W 6 1091 2696 0 14 Dtool_Koxt1V_W 220 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::open
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2696  6 source 1 2492  11 owns_source 1 2489  
1089 14 Dtool_Koxt6Q7g 6 1092 2696 0 14 Dtool_Koxt6Q7g 342 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the source istream unless owns_source was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2696  
1090 14 Dtool_Koxt50F0 7 1095 2697 2262 14 Dtool_Koxt50F0 224 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1091 14 Dtool_Koxt1V5H 7 1095 2697 2262 14 Dtool_Koxt1V5H 224 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 dest 1 2499  9 owns_dest 1 2489  17 compression_level 1 2490  
1092 14 Dtool_KoxtrO__ 7 1095 2697 2262 14 Dtool_KoxtrO__ 224 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 dest 1 2499  9 owns_dest 1 2489  
1093 14 Dtool_Koxtas20 6 1096 2697 0 14 Dtool_Koxtas20 218 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::open
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2697  4 dest 1 2499  9 owns_dest 1 2489  17 compression_level 1 2490  
1094 14 Dtool_KoxtWCyY 6 1096 2697 0 14 Dtool_KoxtWCyY 218 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::open
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2697  4 dest 1 2499  9 owns_dest 1 2489  
1095 14 Dtool_KoxtDmax 6 1097 2697 0 14 Dtool_KoxtDmax 336 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2697  
1096 14 Dtool_KoxtqGsI 6 1100 2490 0 14 Dtool_KoxtqGsI 270 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_num_files
//       Access: Published
//  Description: Returns the number of files in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2698  
1097 14 Dtool_Koxt2Wno 7 1101 2659 2160 14 Dtool_Koxt2Wno 258 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_file
//       Access: Published
//  Description: Returns the nth file in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2698  1 n 1 2490  
1098 14 Dtool_KoxtMjkC 7 1102 2659 2160 14 Dtool_KoxtMjkC 261 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator []
//       Access: Published
//  Description: Returns the nth file in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2698  1 n 1 2490  
1099 14 Dtool_Koxtmtmf 6 1103 2490 0 14 Dtool_Koxtmtmf 261 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::size
//       Access: Published
//  Description: Returns the number of files in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2698  
1100 14 Dtool_Koxtn06M 7 1104 2672 1978 14 Dtool_Koxtn06M 276 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2672  5 other 1 2698  
1101 14 Dtool_KoxtwdLO 7 1105 2672 1978 14 Dtool_KoxtwdLO 318 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator +
//       Access: Published
//  Description: Returns a VirtualFileList representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2698  5 other 1 2698  
1102 14 Dtool_KoxtEd6o 7 1107 2671 2270 14 Dtool_KoxtEd6o 230 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1103 14 Dtool_KoxtJfYT 6 1110 2489 0 14 Dtool_KoxtJfYT 1505 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated system file or directory at the
//               given mount point.  If the named file is a directory,
//               mounts the directory.  If the named file is a
//               Multifile, mounts it as a Multifile.  Returns true on
//               success, false on failure.
//
//               A given system directory may be mounted to multiple
//               different mount point, and the same mount point may
//               share multiple system directories.  In the case of
//               ambiguities (that is, two different files with
//               exactly the same full pathname), the most-recently
//               mounted system wins.
//
//               The filename specified as the first parameter must
//               refer to a real, physical filename on disk; it cannot
//               be a virtual file already appearing within the vfs
//               filespace.  However, it is possible to mount such a
//               file; see mount_loop() for this.
////
//               Note that a mounted VirtualFileSystem directory is
//               fully case-sensitive, unlike the native Windows file
//               system, so you must refer to files within the virtual
//               file system with exactly the right case.
//////////////////////////////////////////////////////////////////// 5 4 this 3 2671  17 physical_filename 1 2519  11 mount_point 1 2519  5 flags 1 2490  8 password 1 2488  
1104 14 Dtool_Koxt_Equ 6 1110 2489 0 14 Dtool_Koxt_Equ 1505 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated system file or directory at the
//               given mount point.  If the named file is a directory,
//               mounts the directory.  If the named file is a
//               Multifile, mounts it as a Multifile.  Returns true on
//               success, false on failure.
//
//               A given system directory may be mounted to multiple
//               different mount point, and the same mount point may
//               share multiple system directories.  In the case of
//               ambiguities (that is, two different files with
//               exactly the same full pathname), the most-recently
//               mounted system wins.
//
//               The filename specified as the first parameter must
//               refer to a real, physical filename on disk; it cannot
//               be a virtual file already appearing within the vfs
//               filespace.  However, it is possible to mount such a
//               file; see mount_loop() for this.
////
//               Note that a mounted VirtualFileSystem directory is
//               fully case-sensitive, unlike the native Windows file
//               system, so you must refer to files within the virtual
//               file system with exactly the right case.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2671  17 physical_filename 1 2519  11 mount_point 1 2519  5 flags 1 2490  
1105 14 Dtool_Koxt29yD 6 1110 2489 0 14 Dtool_Koxt29yD 297 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated Multifile at the given mount
//               point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2671  9 multifile 1 2676  11 mount_point 1 2519  5 flags 1 2490  
1106 14 Dtool_KoxtsUDo 6 1110 2489 0 14 Dtool_KoxtsUDo 465 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Adds the given VirtualFileMount object to the mount
//               list.  This is a lower-level function that the other
//               flavors of mount(); it requires you to create a
//               VirtualFileMount object specifically.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2671  5 mount 1 2692  11 mount_point 1 2519  5 flags 1 2490  
1107 14 Dtool_KoxtrLXA 6 1111 2489 0 14 Dtool_KoxtrLXA 971 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount_loop
//       Access: Published
//  Description: This is similar to mount(), but it receives the name
//               of a Multifile that already appears within the
//               virtual file system.  It can be used to mount a
//               Multifile that is itself hosted within a
//               virtually-mounted Multifile.
//
//               This interface can also be used to mount physical
//               files (that appear within the virtual filespace), but
//               it cannot be used to mount directories.  Use mount()
//               if you need to mount a directory.
//
//               Note that there is additional overhead, in the form
//               of additional buffer copies of the data, for
//               recursively mounting a multifile like this.
//////////////////////////////////////////////////////////////////// 5 4 this 3 2671  16 virtual_filename 1 2519  11 mount_point 1 2519  5 flags 1 2490  8 password 1 2488  
1108 14 Dtool_KoxtSS42 6 1111 2489 0 14 Dtool_KoxtSS42 971 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount_loop
//       Access: Published
//  Description: This is similar to mount(), but it receives the name
//               of a Multifile that already appears within the
//               virtual file system.  It can be used to mount a
//               Multifile that is itself hosted within a
//               virtually-mounted Multifile.
//
//               This interface can also be used to mount physical
//               files (that appear within the virtual filespace), but
//               it cannot be used to mount directories.  Use mount()
//               if you need to mount a directory.
//
//               Note that there is additional overhead, in the form
//               of additional buffer copies of the data, for
//               recursively mounting a multifile like this.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2671  16 virtual_filename 1 2519  11 mount_point 1 2519  5 flags 1 2490  
1109 14 Dtool_Koxt_kpP 6 1112 2490 0 14 Dtool_Koxt_kpP 402 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated directory
//               name or multifile name from the file system.  Returns
//               the number of appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2671  17 physical_filename 1 2519  
1110 14 Dtool_Koxty9Qn 6 1112 2490 0 14 Dtool_Koxty9Qn 379 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated Multifile
//               from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2671  9 multifile 1 2676  
1111 14 Dtool_Koxt_fue 6 1112 2490 0 14 Dtool_Koxt_fue 374 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts the indicated VirtualFileMount object
//               from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2671  5 mount 1 2692  
1112 14 Dtool_KoxtxowA 6 1113 2490 0 14 Dtool_KoxtxowA 388 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_point
//       Access: Published
//  Description: Unmounts all systems attached to the given mount
//               point from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2671  11 mount_point 1 2519  
1113 14 Dtool_KoxtatSe 6 1114 2490 0 14 Dtool_KoxtatSe 329 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_all
//       Access: Published
//  Description: Unmounts all files from the file system.  Returns the
//               number of systems unmounted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2671  
1114 14 Dtool_Koxt0cQ0 6 1115 2490 0 14 Dtool_Koxt0cQ0 304 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_num_mounts
//       Access: Published
//  Description: Returns the number of individual mounts in the
//               system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2700  
1115 14 Dtool_KoxtZfqm 7 1116 2692 2142 14 Dtool_KoxtZfqm 264 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_mount
//       Access: Published
//  Description: Returns the nth mount in the system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  1 n 1 2490  
1116 14 Dtool_Koxtvcex 6 1117 2489 0 14 Dtool_Koxtvcex 429 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::chdir
//       Access: Published
//  Description: Changes the current directory.  This is used to
//               resolve relative pathnames in get_file() and/or
//               find_file().  Returns true if successful, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2671  13 new_directory 1 2519  
1117 14 Dtool_KoxtDRrG 7 1118 2525 1568 14 Dtool_KoxtDRrG 275 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_cwd
//       Access: Published
//  Description: Returns the current directory name.  See chdir().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2700  
1118 14 Dtool_KoxtwdJ4 7 1119 2659 2160 14 Dtool_KoxtwdJ4 902 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_file
//       Access: Published
//  Description: Looks up the file by the indicated name in the file
//               system.  Returns a VirtualFile pointer representing
//               the file if it is found, or NULL if it is not.
//
//               If status_only is true, the file will be checked for
//               existence and length and so on, but the returned
//               file's contents cannot be read.  This is an
//               optimization which is especially important for
//               certain mount types, for instance HTTP, for which
//               opening a file to determine its status is
//               substantially less expensive than opening it to read
//               its contents.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2700  8 filename 1 2519  11 status_only 1 2489  
1119 14 Dtool_Koxty3zk 7 1119 2659 2160 14 Dtool_Koxty3zk 902 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_file
//       Access: Published
//  Description: Looks up the file by the indicated name in the file
//               system.  Returns a VirtualFile pointer representing
//               the file if it is found, or NULL if it is not.
//
//               If status_only is true, the file will be checked for
//               existence and length and so on, but the returned
//               file's contents cannot be read.  This is an
//               optimization which is especially important for
//               certain mount types, for instance HTTP, for which
//               opening a file to determine its status is
//               substantially less expensive than opening it to read
//               its contents.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  8 filename 1 2519  
1120 14 Dtool_Koxtk2oc 7 1120 2659 2160 14 Dtool_Koxtk2oc 436 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_file
//       Access: Published
//  Description: Uses the indicated search path to find the file
//               within the file system.  Returns the first occurrence
//               of the file found, or NULL if the file cannot be
//               found.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2700  8 filename 1 2519  10 searchpath 1 2538  11 status_only 1 2489  
1121 14 Dtool_Koxt9oz3 7 1120 2659 2160 14 Dtool_Koxt9oz3 436 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_file
//       Access: Published
//  Description: Uses the indicated search path to find the file
//               within the file system.  Returns the first occurrence
//               of the file found, or NULL if the file cannot be
//               found.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2700  8 filename 1 2519  10 searchpath 1 2538  
1122 14 Dtool_KoxtgtIn 6 1121 2489 0 14 Dtool_KoxtgtIn 440 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::resolve_filename
//       Access: Public
//  Description: Searches the given search path for the filename.  If
//               it is found, updates the filename to the full
//               pathname found and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2700  8 filename 1 2525  10 searchpath 1 2538  17 default_extension 1 2488  
1123 14 Dtool_KoxtqRwJ 6 1121 2489 0 14 Dtool_KoxtqRwJ 440 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::resolve_filename
//       Access: Public
//  Description: Searches the given search path for the filename.  If
//               it is found, updates the filename to the full
//               pathname found and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2700  8 filename 1 2525  10 searchpath 1 2538  
1124 14 Dtool_Koxtvy79 6 1122 2490 0 14 Dtool_Koxtvy79 672 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_all_files
//       Access: Public
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2700  8 filename 1 2519  10 searchpath 1 2538  7 results 1 2543  
1125 14 Dtool_KoxtFDjI 6 1123 2489 0 14 Dtool_KoxtFDjI 795 // Filename: virtualFileSystem.I
// Created by:  drose (03Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::exists
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  8 filename 1 2519  
1126 14 Dtool_KoxtpcNJ 6 1124 2489 0 14 Dtool_KoxtpcNJ 327 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_directory
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a directory.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  8 filename 1 2519  
1127 14 Dtool_KoxtkO_z 6 1125 2489 0 14 Dtool_KoxtkO_z 333 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_regular_file
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a regular file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  8 filename 1 2519  
1128 14 Dtool_KoxtHp2g 7 1126 2672 1978 14 Dtool_KoxtHp2g 528 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  8 filename 1 2519  
1129 14 Dtool_Koxt1Olg 4 1127 2491 0 14 Dtool_Koxt1Olg 307 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  8 filename 1 2519  
1130 14 Dtool_Koxt9bcd 4 1128 2491 0 14 Dtool_Koxt9bcd 362 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls_all
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory, and all files below,
//               recursively.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  8 filename 1 2519  
1131 14 Dtool_KoxtGxed 4 1129 2491 0 14 Dtool_KoxtGxed 303 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write
//       Access: Published
//  Description: Print debugging information.
//               (e.g. from Python or gdb prompt).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2700  3 out 1 2499  
1132 14 Dtool_Koxt_zcf 6 1130 2671 0 14 Dtool_Koxt_zcf 773 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global VirtualFileSystem.  You
//               may create your own personal VirtualFileSystem
//               objects and use them for whatever you like, but Panda
//               will attempt to load models and stuff from this
//               default object.
//
//               Initially, the global VirtualFileSystem is set up to
//               mount the OS filesystem to root; i.e. it is
//               equivalent to the OS filesystem.  This may be
//               subsequently adjusted by the user.
//////////////////////////////////////////////////////////////////// 0 
1133 14 Dtool_Koxt8S_s 6 1131 2584 0 14 Dtool_Koxt8S_s 602 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::__py__read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               This variant on read_file() is implemented directly
//               for Python, as a small optimization, to avoid the
//               double-construction of a string object that would be
//               otherwise required for the return value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2700  8 filename 1 2519  11 auto_unwrap 1 2489  
1134 14 Dtool_KoxtONnn 6 1132 2488 0 14 Dtool_KoxtONnn 665 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2700  8 filename 1 2519  11 auto_unwrap 1 2489  
1135 14 Dtool_KoxtcxPd 6 1133 2492 0 14 Dtool_KoxtcxPd 765 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               istream if the file exists and can be read, or NULL
//               otherwise.  Does not return an invalid istream.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2700  8 filename 1 2519  11 auto_unwrap 1 2489  
1136 14 Dtool_KoxtZbfU 4 1134 2491 0 14 Dtool_KoxtZbfU 533 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2492  
1137 14 Dtool_KoxtzbIp 7 1136 2702 2304 14 Dtool_KoxtzbIp 701 // Filename: ramfile.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1138 14 Dtool_KoxtKGYV 4 1137 2491 0 14 Dtool_KoxtKGYV 363 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::seek
//       Access: Published
//  Description: Moves the data pointer to the indicated byte
//               position.  It is not an error to move the pointer
//               past the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2702  3 pos 1 2523  
1139 14 Dtool_KoxtQvNL 6 1138 2523 0 14 Dtool_KoxtQvNL 322 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::tell
//       Access: Published
//  Description: Returns the current data pointer position as a byte
//               offset from the beginning of the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2703  
1140 14 Dtool_KoxtAU2w 6 1139 2488 0 14 Dtool_KoxtAU2w 594 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::read
//       Access: Published
//  Description: Extracts and returns the indicated number of
//               characters from the current data pointer, and
//               advances the data pointer.  If the data pointer
//               exceeds the end of the buffer, returns empty string.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.read() function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2702  6 length 1 2523  
1141 14 Dtool_KoxtCYbY 6 1140 2488 0 14 Dtool_KoxtCYbY 599 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::readline
//       Access: Published
//  Description: Assumes the stream represents a text file, and
//               extracts one line up to and including the trailing
//               newline character.  Returns empty string when the end
//               of file is reached.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.readline()
//               function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2702  
1142 14 Dtool_KoxtBwPQ 6 1141 2488 0 14 Dtool_KoxtBwPQ 321 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data
//       Access: Published
//  Description: Returns the entire buffer contents as a string,
//               regardless of the current data pointer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2703  
1143 14 Dtool_KoxtPi28 6 1142 2523 0 14 Dtool_KoxtPi28 269 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data_size
//       Access: Published
//  Description: Returns the size of the entire buffer contents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2703  
1144 14 Dtool_KoxtlxtV 4 1143 2491 0 14 Dtool_KoxtlxtV 250 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::clear
//       Access: Published
//  Description: Empties the current buffer contents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2702  
1145 14 Dtool_KoxtI_Ud 7 1146 2705 2334 14 Dtool_KoxtI_Ud 702 // Filename: hashVal.I
// Created by:  drose (14Nov00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: HashVal::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1146 14 Dtool_KoxtH_4C 7 1146 2705 2334 14 Dtool_KoxtH_4C 224 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2706  
1147 14 Dtool_Koxt3FRA 6 1147 2705 0 14 Dtool_Koxt3FRA 232 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  4 copy 1 2706  
1148 14 Dtool_Koxtnq7I 6 1148 2489 0 14 Dtool_Koxtnq7I 219 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  5 other 1 2706  
1149 14 Dtool_Koxt7G7E 6 1149 2489 0 14 Dtool_Koxt7G7E 219 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  5 other 1 2706  
1150 14 Dtool_KoxtyVFW 6 1150 2489 0 14 Dtool_KoxtyVFW 218 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::operator <
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  5 other 1 2706  
1151 14 Dtool_KoxtpxYW 6 1151 2490 0 14 Dtool_KoxtpxYW 218 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::compare_to
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  5 other 1 2706  
1152 14 Dtool_Koxtvbg2 4 1152 2491 0 14 Dtool_Koxtvbg2 311 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::merge_with
//       Access: Published
//  Description: Generates a new HashVal representing the xor of this
//               one and the other one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  5 other 1 2706  
1153 14 Dtool_KoxtPh3K 4 1153 2491 0 14 Dtool_KoxtPh3K 290 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_dec
//       Access: Published
//  Description: Outputs the HashVal as four unsigned decimal
//               integers.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  3 out 1 2499  
1154 14 Dtool_Koxtl92_ 4 1154 2491 0 14 Dtool_Koxtl92_ 267 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input
//       Access: Published
//  Description: Inputs the HashVal as four unsigned decimal integers.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  2 in 1 2492  
1155 14 Dtool_Koxtn_Zx 4 1155 2491 0 14 Dtool_Koxtn_Zx 288 // HAVE_OPENSSL
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_hex
//       Access: Published
//  Description: Outputs the HashVal as a 32-digit hexadecimal number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  3 out 1 2499  
1156 14 Dtool_KoxtZ1DR 4 1156 2491 0 14 Dtool_KoxtZ1DR 270 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_hex
//       Access: Published
//  Description: Inputs the HashVal as a 32-digit hexadecimal number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  2 in 1 2492  
1157 14 Dtool_Koxt_T88 4 1157 2491 0 14 Dtool_Koxt_T88 370 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_binary
//       Access: Published
//  Description: Outputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order generated by
//               write_stream().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  3 out 1 2499  
1158 14 Dtool_Koxt_JzH 4 1158 2491 0 14 Dtool_Koxt_JzH 366 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_binary
//       Access: Published
//  Description: Inputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order expected by
//               read_stream().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  2 in 1 2492  
1159 14 Dtool_KoxtL3Nu 4 1159 2491 0 14 Dtool_KoxtL3Nu 215 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  3 out 1 2499  
1160 14 Dtool_KoxtzYur 6 1160 2488 0 14 Dtool_KoxtzYur 290 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_dec
//       Access: Published
//  Description: Returns the HashVal as a string with four decimal
//               numbers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2706  
1161 14 Dtool_KoxtOC7K 6 1161 2489 0 14 Dtool_KoxtOC7K 336 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_dec
//       Access: Published
//  Description: Sets the HashVal from a string with four decimal
//               numbers.  Returns true if valid, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  4 text 1 2488  
1162 14 Dtool_KoxtyITU 6 1162 2488 0 14 Dtool_KoxtyITU 267 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_hex
//       Access: Published
//  Description: Returns the HashVal as a 32-byte hexadecimal string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2706  
1163 14 Dtool_KoxtWCVt 6 1163 2489 0 14 Dtool_KoxtWCVt 334 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_hex
//       Access: Published
//  Description: Sets the HashVal from a 32-byte hexademical string.
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  4 text 1 2488  
1164 14 Dtool_Koxt8zkt 6 1164 2488 0 14 Dtool_Koxt8zkt 262 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_bin
//       Access: Published
//  Description: Returns the HashVal as a 16-byte binary string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2706  
1165 14 Dtool_KoxtIsUA 6 1165 2489 0 14 Dtool_KoxtIsUA 329 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_bin
//       Access: Published
//  Description: Sets the HashVal from a 16-byte binary string.
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  4 text 1 2488  
1166 14 Dtool_Koxticbw 4 1166 2491 0 14 Dtool_Koxticbw 223 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_datagram
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  11 destination 1 2655  
1167 14 Dtool_Koxto9e6 4 1167 2491 0 14 Dtool_Koxto9e6 222 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_datagram
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  6 source 1 2660  
1168 14 Dtool_Koxtb0yS 4 1168 2491 0 14 Dtool_Koxtb0yS 221 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_stream
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2706  11 destination 1 2634  
1169 14 Dtool_KoxtUgPU 4 1169 2491 0 14 Dtool_KoxtUgPU 220 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_stream
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  6 source 1 2624  
1170 14 Dtool_Koxt1jdB 6 1170 2489 0 14 Dtool_Koxt1jdB 500 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_file
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  8 filename 1 2519  
1171 14 Dtool_KoxtHVPV 6 1171 2489 0 14 Dtool_KoxtHVPV 502 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_stream
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  6 stream 1 2492  
1172 14 Dtool_Koxtk7sL 4 1172 2491 0 14 Dtool_Koxtk7sL 433 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_ramfile
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  7 ramfile 1 2703  
1173 14 Dtool_KoxtIiKt 4 1173 2491 0 14 Dtool_KoxtIiKt 432 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_string
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2705  4 data 1 2488  
1174 14 Dtool_KoxtWiK7 4 1174 2491 0 14 Dtool_KoxtWiK7 432 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_buffer
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2705  6 buffer 1 2488  6 length 1 2490  
1175 14 Dtool_Koxt07zQ 7 1177 2646 2336 14 Dtool_Koxt07zQ 246 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1176 14 Dtool_Koxt2Eh_ 6 1179 2490 0 14 Dtool_Koxt2Eh_ 279 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_num_pointers
//       Access: Published
//  Description: Returns the number of pointers in the set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2708  
1177 14 Dtool_KoxtTp6p 7 1180 2649 1978 14 Dtool_KoxtTp6p 267 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2708  1 n 1 2490  
1178 14 Dtool_Koxt_vMi 6 1181 2637 0 14 Dtool_Koxt_vMi 445 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_typed_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set, typecast to a
//               TypedObject if possible.  If the pointer is not a
//               TypedObject or if the cast cannot be made, returns
//               NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2708  1 n 1 2490  
1179 14 Dtool_KoxtqdPA 7 1182 2593 1919 14 Dtool_KoxtqdPA 305 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type
//       Access: Published
//  Description: Returns the actual type of the nth pointer, if it is
//               known.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2708  1 n 1 2490  
1180 14 Dtool_KoxtEzrP 6 1183 2488 0 14 Dtool_KoxtEzrP 308 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type_name
//       Access: Published
//  Description: Returns the type name of the nth pointer, if it is
//               known.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2708  1 n 1 2490  
1181 14 Dtool_KoxtWkMr 6 1184 2508 0 14 Dtool_KoxtWkMr 459 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_age
//       Access: Published
//  Description: Returns the age of the nth pointer: the number of
//               seconds elapsed between the time it was allocated and
//               the time it was added to this set via a call to
//               MemoryUsage::get_pointers().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2708  1 n 1 2490  
1182 14 Dtool_KoxttIUs 6 1185 2584 0 14 Dtool_KoxttIUs 757 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_python_pointer
//       Access: Published
//  Description: Returns the nth object, represented as a Python
//               object of the appropriate type.  Reference counting
//               will be properly set on the Python object.
//
//               get_typed_pointer() is almost as good as this, but
//               (a) it does not set the reference count, and (b) it
//               does not work for objects that do not inherit from
//               TypedObject.  This will work for any object whose
//               type is known, which has a Python representation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2708  1 n 1 2490  
1183 14 Dtool_Koxt0z2G 4 1186 2491 0 14 Dtool_Koxt0z2G 254 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::clear
//       Access: Published
//  Description: Empties the set of pointers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2646  
1184 14 Dtool_KoxtwA_7 4 1187 2491 0 14 Dtool_KoxtwA_7 227 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2708  3 out 1 2499  
1185 14 Dtool_KoxtpaeF 6 1189 2508 0 14 Dtool_KoxtpaeF 246 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_long_time, Posix implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2710  
1186 14 Dtool_KoxtzmNC 6 1190 2508 0 14 Dtool_KoxtzmNC 247 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_time, Posix implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2710  
1187 14 Dtool_KoxtJZRW 6 1191 2508 0 14 Dtool_KoxtJZRW 251 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_raw_time, Posix implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2710  
1188 14 Dtool_Koxtvd5Y 6 1192 2490 0 14 Dtool_Koxtvd5Y 687 // WIN32_VC
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_error_count
//       Access: Published
//  Description: Returns the number of clock errors that have
//               been detected.  Each time a clock error is detected,
//               in which the value returned by either of the above
//               methods is suspect, the value returned by this method
//               will be incremented.  Applications can monitor this
//               value and react, for instance, by resynchronizing
//               their clocks each time this value changes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2711  
1189 14 Dtool_KoxtWw9n 6 1193 2710 0 14 Dtool_KoxtWw9n 309 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one TrueClock object in
//               the world.
//////////////////////////////////////////////////////////////////// 0 
1190 14 Dtool_Koxt6yne 6 1194 2489 0 14 Dtool_Koxt6yne 249 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::set_cpu_affinity, Posix implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2711  4 mask 1 2523  
1191 14 Dtool_KoxtYIfo 7 1196 2713 2353 14 Dtool_KoxtYIfo 268 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create a patch file and initializes internal data
//////////////////////////////////////////////////////////////////// 0 
1192 14 Dtool_Koxthsa6 7 1196 2713 2353 14 Dtool_Koxthsa6 257 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create patch file with buffer to patch
//////////////////////////////////////////////////////////////////// 1 6 buffer 1 2714  
1193 14 Dtool_KoxtH5YG 6 1198 2489 0 14 Dtool_KoxtH5YG 680 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::build
//       Access: Public
//  Description:
//               This implementation uses the "greedy differencing
//               algorithm" described in the masters thesis
//               "Differential Compression: A Generalized Solution
//               for Binary Files" by Randal C. Burns (p.13).
//               For an original file of size M and a new file of
//               size N, this algorithm is O(M) in space and
//               O(M*N) (worst-case) in time.
//               return false on error
//////////////////////////////////////////////////////////////////// 4 4 this 3 2713  9 file_orig 1 2525  8 file_new 1 2525  10 patch_name 1 2525  
1194 14 Dtool_KoxtDEDi 6 1199 2490 0 14 Dtool_KoxtDEDi 449 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::read_header
//       Access: Published
//  Description: Opens the patch file for reading, and gets the header
//               information from the file but does not begin to do
//               any real work.  This can be used to query the data
//               stored in the patch.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2713  10 patch_file 1 2519  
1195 14 Dtool_KoxtatBi 6 1200 2490 0 14 Dtool_KoxtatBi 872 ////////////////////////////////////////////////////////////////////
///// PATCH FILE APPLY MEMBER FUNCTIONS
/////
////////////////////
///// NOTE: this patch-application functionality unfortunately has to be
/////       duplicated in the Installer. It is contained in the file
/////       installerApplyPatch.cxx
/////       PLEASE MAKE SURE THAT THAT FILE GETS UPDATED IF ANY OF THIS
/////       LOGIC CHANGES! (i.e. if the patch file format changes)
////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file (original
//               file and patch are destroyed in the process).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2713  10 patch_file 1 2519  4 file 1 2519  
1196 14 Dtool_KoxtYIwX 6 1200 2490 0 14 Dtool_KoxtYIwX 366 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file.  In this form,
//               neither the original file nor the patch file are
//               destroyed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2713  10 patch_file 1 2519  9 orig_file 1 2519  11 target_file 1 2519  
1197 14 Dtool_KoxtAkYw 6 1201 2490 0 14 Dtool_KoxtAkYw 660 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::run
//       Access: Published
//  Description: Perform one buffer's worth of patching
//               Returns EU_ok while patching
//               Returns EU_success when done
//               If error happens will return one of:
//               EU_error_abort : Patching has not been initiated
//               EU_error_file_invalid : file is corrupted
//               EU_error_invalid_checksum : incompatible patch file
//               EU_error_write_file_rename : could not rename file
//////////////////////////////////////////////////////////////////// 1 4 this 3 2713  
1198 14 Dtool_KoxtrMgQ 6 1202 2489 0 14 Dtool_KoxtrMgQ 418 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will delete the patch file and overwrite
//               the original file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2713  10 patch_file 1 2525  4 file 1 2525  
1199 14 Dtool_KoxtnczI 6 1202 2489 0 14 Dtool_KoxtnczI 368 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will not delete any files.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2713  10 patch_file 1 2525  9 orig_file 1 2525  11 target_file 1 2519  
1200 14 Dtool_KoxtKJeX 6 1203 2552 0 14 Dtool_KoxtKJeX 893 // Filename: patchfile.I
// Created by:  darren, mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//#include "config_downloader.h"
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_progress
//       Access: Published
//  Description: Returns a value in the range 0..1, representing the
//               amount of progress through the patchfile, during a
//               session.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2715  
1201 14 Dtool_KoxtqUQ9 4 1204 2491 0 14 Dtool_KoxtqUQ9 685 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_allow_multifile
//       Access: Published
//  Description: If this flag is set true, the Patchfile will make a
//               special case for patching Panda Multifiles, if
//               detected, and attempt to patch them on a
//               subfile-by-subfile basis.  If this flag is false, the
//               Patchfile will always patch the file on a full-file
//               basis.
//
//               This has effect only when building patches; it is not
//               used for applying patches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2713  15 allow_multifile 1 2489  
1202 14 Dtool_KoxtTyCX 6 1205 2489 0 14 Dtool_KoxtTyCX 256 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_allow_multifile
//       Access: Published
//  Description: See set_allow_multifile().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2713  
1203 14 Dtool_Koxtbc1x 4 1206 2491 0 14 Dtool_Koxtbc1x 230 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2713  6 length 1 2490  
1204 14 Dtool_KoxtAsYn 6 1207 2490 0 14 Dtool_KoxtAsYn 230 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2713  
1205 14 Dtool_KoxtlU88 4 1208 2491 0 14 Dtool_KoxtlU88 232 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::reset_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2713  
1206 14 Dtool_KoxtMoom 6 1209 2489 0 14 Dtool_KoxtMoom 391 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::has_source_hash
//       Access: Published
//  Description: Returns true if the MD5 hash for the source file is
//               known.  (Some early versions of the patch file did
//               not store this information.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2715  
1207 14 Dtool_Koxt4eHg 6 1210 2706 0 14 Dtool_Koxt4eHg 267 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_source_hash
//       Access: Published
//  Description: Returns the MD5 hash for the source file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2715  
1208 14 Dtool_KoxtmkYw 6 1211 2706 0 14 Dtool_KoxtmkYw 310 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_result_hash
//       Access: Published
//  Description: Returns the MD5 hash for the file after the patch has
//               been applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2715  
1209 14 Dtool_KoxtvclK 7 1214 2719 2370 14 Dtool_KoxtvclK 0 1 5 other 1 2717  
1210 14 Dtool_KoxtCJKJ 7 1214 2719 2370 14 Dtool_KoxtCJKJ 0 2 4 name 1 2488  10 maxEntries 1 2490  
1211 14 Dtool_Koxt1b5J 7 1214 2719 2370 14 Dtool_Koxt1b5J 0 1 4 name 1 2488  
1212 14 Dtool_Koxtyvu0 7 1214 2719 2370 14 Dtool_Koxtyvu0 0 0 
1213 14 Dtool_Koxt98tX 4 1216 2491 0 14 Dtool_Koxt98tX 0 3 4 this 3 2719  4 name 1 2488  10 maxEntries 1 2490  
1214 14 Dtool_Koxti6RM 4 1216 2491 0 14 Dtool_Koxti6RM 0 2 4 this 3 2719  4 name 1 2488  
1215 14 Dtool_Koxt8f04 4 1217 2491 0 14 Dtool_Koxt8f04 472 // Filename: profileTimer.I
// Created by:  
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2719  
1216 14 Dtool_KoxtZpR4 4 1218 2491 0 14 Dtool_KoxtZpR4 0 2 4 this 3 2719  3 tag 1 2488  
1217 14 Dtool_Koxt5qDp 4 1219 2491 0 14 Dtool_Koxt5qDp 0 1 4 this 3 2719  
1218 14 Dtool_Koxtez0S 4 1219 2491 0 14 Dtool_Koxtez0S 0 2 4 this 3 2719  3 tag 1 2488  
1219 14 Dtool_KoxtQ1Vu 6 1220 2508 0 14 Dtool_KoxtQ1Vu 110 // Don't call any of the following during timing:
// (Because they are slow, not because anything will break). 1 4 this 3 2717  
1220 14 Dtool_Koxtr9_x 4 1221 2491 0 14 Dtool_Koxtr9_x 110 // Don't call any of the following during timing:
// (Because they are slow, not because anything will break). 1 3 out 1 2499  
1221 14 Dtool_KoxtQiNX 4 1221 2491 0 14 Dtool_KoxtQiNX 110 // Don't call any of the following during timing:
// (Because they are slow, not because anything will break). 0 
1222 14 Dtool_KoxtLAMQ 4 1222 2491 0 14 Dtool_KoxtLAMQ 0 2 4 this 3 2717  3 out 1 2499  
1223 14 Dtool_KoxtENRS 4 1222 2491 0 14 Dtool_KoxtENRS 0 1 4 this 3 2717  
1224 14 Dtool_Koxt0a5y 4 1223 2491 0 14 Dtool_Koxt0a5y 0 1 3 out 1 2499  
1225 14 Dtool_Koxtupg_ 4 1223 2491 0 14 Dtool_Koxtupg_ 0 0 
1226 14 Dtool_KoxtUUXZ 4 1224 2491 0 14 Dtool_KoxtUUXZ 0 2 4 this 3 2717  3 out 1 2499  
1227 14 Dtool_KoxtBgcv 4 1224 2491 0 14 Dtool_KoxtBgcv 0 1 4 this 3 2717  
1228 14 Dtool_Koxt51lz 6 1226 2489 0 14 Dtool_Koxt51lz 327 ////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::was_deleted
//       Access: Published
//  Description: Returns true if the object we are pointing to has
//               been deleted, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2720  
1229 14 Dtool_KoxtEthC 6 1227 2489 0 14 Dtool_KoxtEthC 328 ////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::is_valid_pointer
//       Access: Published
//  Description: Returns true if the pointer is not null and the
//               object has not been deleted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2720  
1230 14 Dtool_Koxt_Q2z 6 787 2722 0 14 Dtool_Koxt_Q2z 92 // Returns the configure object for accessing config variables from a
// scripting language. 0 
1231 14 Dtool_Koxt_Igl 6 800 2488 0 14 Dtool_Koxt_Igl 363 ////////////////////////////////////////////////////////////////////
//     Function: compress_string
//       Access: Published
//  Description: Compress the indicated source string at the given
//               compression level (1 through 9).  Returns the
//               compressed string.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2488  17 compression_level 1 2490  
1232 14 Dtool_KoxtWZVW 6 801 2488 0 14 Dtool_KoxtWZVW 507 ////////////////////////////////////////////////////////////////////
//     Function: decompress_string
//       Access: Published
//  Description: Decompresss the previously-compressed string()).  The
//               return value is the decompressed string.
//
//               Note that a decompression error cannot easily be
//               detected, and the return value may simply be a
//               garbage or truncated string.
//////////////////////////////////////////////////////////////////// 1 6 source 1 2488  
1233 14 Dtool_KoxtBvBY 6 802 2489 0 14 Dtool_KoxtBvBY 566 ////////////////////////////////////////////////////////////////////
//     Function: compress_file
//       Access: Published
//  Description: Compresss the data from the source file at the given
//               compression level (1 through 9).  The source file is
//               read in its entirety, and the compressed results are
//               written to the dest file, overwriting its contents.
//               The return value is bool on success, or false on
//               failure.
//////////////////////////////////////////////////////////////////// 3 6 source 1 2519  4 dest 1 2519  17 compression_level 1 2490  
1234 14 Dtool_KoxtC5jl 6 803 2489 0 14 Dtool_KoxtC5jl 684 ////////////////////////////////////////////////////////////////////
//     Function: decompress_file
//       Access: Published
//  Description: Decompresss the data from the source file.  The
//               source file is read in its entirety, and the
//               decompressed results are written to the dest file,
//               overwriting its contents.  The return value is bool
//               on success, or false on failure.
//
//               Note that a decompression error cannot easily be
//               detected, and the output may simply be a garbage
//               or truncated string.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2519  4 dest 1 2519  
1235 14 Dtool_KoxtNHUN 6 804 2489 0 14 Dtool_KoxtNHUN 578 ////////////////////////////////////////////////////////////////////
//     Function: compress_stream
//       Access: Published
//  Description: Compresss the data from the source stream at the
//               given compression level (1 through 9).  The source
//               stream is read from its current position to the
//               end-of-file, and the compressed results are written
//               to the dest stream.  The return value is bool on
//               success, or false on failure.
//////////////////////////////////////////////////////////////////// 3 6 source 1 2492  4 dest 1 2499  17 compression_level 1 2490  
1236 14 Dtool_KoxtDtAh 6 805 2489 0 14 Dtool_KoxtDtAh 733 ////////////////////////////////////////////////////////////////////
//     Function: decompress_stream
//       Access: Published
//  Description: Decompresss the data from the previously-compressed
//               source stream.  The source stream is read from its
//               current position to the end-of-file, and the
//               decompressed results are written to the dest stream.
//               The return value is bool on success, or false on
//               failure.
//
//               Note that a decompression error cannot easily be
//               detected, and the output may simply be a garbage
//               or truncated string.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2492  4 dest 1 2499  
1237 14 Dtool_Koxt49MX 6 806 2489 0 14 Dtool_Koxt49MX 446 ////////////////////////////////////////////////////////////////////
//     Function: copy_stream
//       Access: Published
//  Description: Reads the source stream from its current position to
//               the end of the stream, and writes that data to the
//               dest stream at its current position.  Returns true on
//               success, false on failure.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2492  4 dest 1 2499  
1238 14 Dtool_KoxtF10e 6 908 2488 0 14 Dtool_KoxtF10e 394 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_string
//       Access: Published
//  Description: Encrypts the indicated source string using the given
//               password, and the algorithm specified by
//               encryption-algorithm.  Returns the encrypted string.
//////////////////////////////////////////////////////////////////// 5 6 source 1 2488  8 password 1 2488  9 algorithm 1 2488  10 key_length 1 2490  15 iteration_count 1 2490  
1239 14 Dtool_KoxtWz9H 6 908 2488 0 14 Dtool_KoxtWz9H 394 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_string
//       Access: Published
//  Description: Encrypts the indicated source string using the given
//               password, and the algorithm specified by
//               encryption-algorithm.  Returns the encrypted string.
//////////////////////////////////////////////////////////////////// 4 6 source 1 2488  8 password 1 2488  9 algorithm 1 2488  10 key_length 1 2490  
1240 14 Dtool_Koxtm3h8 6 908 2488 0 14 Dtool_Koxtm3h8 394 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_string
//       Access: Published
//  Description: Encrypts the indicated source string using the given
//               password, and the algorithm specified by
//               encryption-algorithm.  Returns the encrypted string.
//////////////////////////////////////////////////////////////////// 3 6 source 1 2488  8 password 1 2488  9 algorithm 1 2488  
1241 14 Dtool_KoxtiH_H 6 908 2488 0 14 Dtool_KoxtiH_H 394 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_string
//       Access: Published
//  Description: Encrypts the indicated source string using the given
//               password, and the algorithm specified by
//               encryption-algorithm.  Returns the encrypted string.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2488  8 password 1 2488  
1242 14 Dtool_KoxtJ1fC 6 909 2488 0 14 Dtool_KoxtJ1fC 625 ////////////////////////////////////////////////////////////////////
//     Function: decrypt_string
//       Access: Published
//  Description: Decrypts the previously-encrypted string using the
//               given password (which must be the same password
//               passed to encrypt()).  The return value is the
//               decrypted string.
//
//               Note that a decryption error, including an incorrect
//               password, cannot easily be detected, and the return
//               value may simply be a garbage string.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2488  8 password 1 2488  
1243 14 Dtool_KoxtK7Ye 6 910 2489 0 14 Dtool_KoxtK7Ye 527 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_file
//       Access: Published
//  Description: Encrypts the data from the source file using the
//               given password.  The source file is read in its
//               entirety, and the encrypted results are written to
//               the dest file, overwriting its contents.  The return
//               value is bool on success, or false on failure.
//////////////////////////////////////////////////////////////////// 6 6 source 1 2519  4 dest 1 2519  8 password 1 2488  9 algorithm 1 2488  10 key_length 1 2490  15 iteration_count 1 2490  
1244 14 Dtool_Koxtw9Ww 6 910 2489 0 14 Dtool_Koxtw9Ww 527 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_file
//       Access: Published
//  Description: Encrypts the data from the source file using the
//               given password.  The source file is read in its
//               entirety, and the encrypted results are written to
//               the dest file, overwriting its contents.  The return
//               value is bool on success, or false on failure.
//////////////////////////////////////////////////////////////////// 5 6 source 1 2519  4 dest 1 2519  8 password 1 2488  9 algorithm 1 2488  10 key_length 1 2490  
1245 14 Dtool_Koxt8MX5 6 910 2489 0 14 Dtool_Koxt8MX5 527 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_file
//       Access: Published
//  Description: Encrypts the data from the source file using the
//               given password.  The source file is read in its
//               entirety, and the encrypted results are written to
//               the dest file, overwriting its contents.  The return
//               value is bool on success, or false on failure.
//////////////////////////////////////////////////////////////////// 4 6 source 1 2519  4 dest 1 2519  8 password 1 2488  9 algorithm 1 2488  
1246 14 Dtool_Koxt7a3v 6 910 2489 0 14 Dtool_Koxt7a3v 527 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_file
//       Access: Published
//  Description: Encrypts the data from the source file using the
//               given password.  The source file is read in its
//               entirety, and the encrypted results are written to
//               the dest file, overwriting its contents.  The return
//               value is bool on success, or false on failure.
//////////////////////////////////////////////////////////////////// 3 6 source 1 2519  4 dest 1 2519  8 password 1 2488  
1247 14 Dtool_KoxtiIWq 6 911 2489 0 14 Dtool_KoxtiIWq 792 ////////////////////////////////////////////////////////////////////
//     Function: decrypt_file
//       Access: Published
//  Description: Decrypts the data from the source file using the
//               given password (which must match the same password
//               passed to encrypt()).  The source file is read in its
//               entirety, and the decrypted results are written to
//               the dest file, overwriting its contents.  The return
//               value is bool on success, or false on failure.
//
//               Note that a decryption error, including an incorrect
//               password, cannot easily be detected, and the output
//               may simply be a garbage string.
//////////////////////////////////////////////////////////////////// 3 6 source 1 2519  4 dest 1 2519  8 password 1 2488  
1248 14 Dtool_KoxtMWEu 6 912 2489 0 14 Dtool_KoxtMWEu 554 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_stream
//       Access: Published
//  Description: Encrypts the data from the source stream using the
//               given password.  The source stream is read from its
//               current position to the end-of-file, and the
//               encrypted results are written to the dest stream.
//               The return value is bool on success, or false on
//               failure.
//////////////////////////////////////////////////////////////////// 6 6 source 1 2492  4 dest 1 2499  8 password 1 2488  9 algorithm 1 2488  10 key_length 1 2490  15 iteration_count 1 2490  
1249 14 Dtool_Koxt7aMX 6 912 2489 0 14 Dtool_Koxt7aMX 554 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_stream
//       Access: Published
//  Description: Encrypts the data from the source stream using the
//               given password.  The source stream is read from its
//               current position to the end-of-file, and the
//               encrypted results are written to the dest stream.
//               The return value is bool on success, or false on
//               failure.
//////////////////////////////////////////////////////////////////// 5 6 source 1 2492  4 dest 1 2499  8 password 1 2488  9 algorithm 1 2488  10 key_length 1 2490  
1250 14 Dtool_Koxt_WwL 6 912 2489 0 14 Dtool_Koxt_WwL 554 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_stream
//       Access: Published
//  Description: Encrypts the data from the source stream using the
//               given password.  The source stream is read from its
//               current position to the end-of-file, and the
//               encrypted results are written to the dest stream.
//               The return value is bool on success, or false on
//               failure.
//////////////////////////////////////////////////////////////////// 4 6 source 1 2492  4 dest 1 2499  8 password 1 2488  9 algorithm 1 2488  
1251 14 Dtool_KoxthwPX 6 912 2489 0 14 Dtool_KoxthwPX 554 ////////////////////////////////////////////////////////////////////
//     Function: encrypt_stream
//       Access: Published
//  Description: Encrypts the data from the source stream using the
//               given password.  The source stream is read from its
//               current position to the end-of-file, and the
//               encrypted results are written to the dest stream.
//               The return value is bool on success, or false on
//               failure.
//////////////////////////////////////////////////////////////////// 3 6 source 1 2492  4 dest 1 2499  8 password 1 2488  
1252 14 Dtool_KoxtYiuR 6 913 2489 0 14 Dtool_KoxtYiuR 838 ////////////////////////////////////////////////////////////////////
//     Function: decrypt_stream
//       Access: Published
//  Description: Decrypts the data from the previously-encrypted
//               source stream using the given password (which must be
//               the same password passed to encrypt()).  The source
//               stream is read from its current position to the
//               end-of-file, and the decrypted results are written to
//               the dest stream.  The return value is bool on
//               success, or false on failure.
//
//               Note that a decryption error, including an incorrect
//               password, cannot easily be detected, and the output
//               may simply be a garbage string.
//////////////////////////////////////////////////////////////////// 3 6 source 1 2492  4 dest 1 2499  8 password 1 2488  
1253 14 Dtool_Koxts1c1 6 915 2488 0 14 Dtool_Koxts1c1 185 ////////////////////////////////////////////////////////////////////
//     Function: error_to_text
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 err 1 2459  
1254 14 Dtool_Koxtp_jp 6 916 2490 0 14 Dtool_Koxtp_jp 187 ////////////////////////////////////////////////////////////////////
//     Function: get_write_error
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1255 14 Dtool_Koxtyg1b 6 917 2488 0 14 Dtool_Koxtyg1b 191 ////////////////////////////////////////////////////////////////////
//     Function: handle_socket_error
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1256 14 Dtool_Koxt_VSF 6 918 2490 0 14 Dtool_Koxt_VSF 189 ////////////////////////////////////////////////////////////////////
//     Function: get_network_error
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1257 14 Dtool_KoxtG9V_ 6 1212 2488 0 14 Dtool_KoxtG9V_ 1691 ////////////////////////////////////////////////////////////////////
//     Function: password_hash
//       Access: Published
//  Description: Generates a non-reversible hash of a particular
//               length based on an arbitrary password and a random
//               salt.  This is much stronger than the algorithm
//               implemented by the standard Unix crypt().
//
//               The resulting hash can be useful for two primary
//               purposes: (1) the hash may be recorded to disk in
//               lieu of recording plaintext passwords, for validation
//               against a password entered by the user later (which
//               should produce the same hash given a particular
//               salt), or (2) the hash may be used as input to an
//               encryption algorithm that requires a key of a
//               particular length.
//
//               password is the text password provided by a user.
//
//               salt should be a string of arbitrary random bytes (it
//               need not be crypotographically secure, just different
//               for each different hash).
//
//               iters should be a number in the thousands to indicate
//               the number of times the hash algorithm should be
//               applied.  In general, iters should be chosen to make
//               the computation as expensive as it can be and still
//               be tolerable, to reduce the attractiveness of a
//               brute-force attack.
//
//               keylen is the length in bytes of the required key
//               hash.
//////////////////////////////////////////////////////////////////// 4 8 password 1 2488  4 salt 1 2488  5 iters 1 2490  6 keylen 1 2490  
342
2382 11 ConfigFlags 141313 11 ConfigFlags 11 ConfigFlags 0 0 0 0 1258 0 0 0 0 0 0 2 2383 2384 414
////////////////////////////////////////////////////////////////////
//       Class : ConfigFlags
// Description : This class is the base class of both ConfigVariable
//               and ConfigVariableCore.  It exists only to provide a
//               convenient name scoping for some enumerated values
//               common to both classes.
////////////////////////////////////////////////////////////////////

2383 9 ValueType 794624 22 ConfigFlags::ValueType 22 ConfigFlags::ValueType 2382 0 0 0 0 0 0 0 0 0 10 12 VT_undefined 25 ConfigFlags::VT_undefined 0 7 VT_list 20 ConfigFlags::VT_list 1 9 VT_string 22 ConfigFlags::VT_string 2 11 VT_filename 24 ConfigFlags::VT_filename 3 7 VT_bool 20 ConfigFlags::VT_bool 4 6 VT_int 19 ConfigFlags::VT_int 5 9 VT_double 22 ConfigFlags::VT_double 6 7 VT_enum 20 ConfigFlags::VT_enum 7 14 VT_search_path 27 ConfigFlags::VT_search_path 8 8 VT_int64 21 ConfigFlags::VT_int64 9 0 0

2384 13 VariableFlags 794624 26 ConfigFlags::VariableFlags 26 ConfigFlags::VariableFlags 2382 0 0 0 0 0 0 0 0 0 5 18 F_trust_level_mask 31 ConfigFlags::F_trust_level_mask 4095 6 F_open 19 ConfigFlags::F_open 4096 8 F_closed 21 ConfigFlags::F_closed 8192 9 F_dynamic 22 ConfigFlags::F_dynamic 16384 9 F_dconfig 22 ConfigFlags::F_dconfig 32768 0 0

2385 10 ConfigPage 43009 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 22 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 0 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : ConfigPage
// Description : A page of ConfigDeclarations that may be loaded or
//               unloaded.  Typically this represents a single .prc
//               file that is read from disk at runtime, but it may
//               also represent a list of declarations built up
//               by application code and explicitly loaded.
////////////////////////////////////////////////////////////////////

2386 17 ConfigPageManager 43009 17 ConfigPageManager 17 ConfigPageManager 0 0 0 0 0 0 19 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 0 0 1 0 2382 0 0 0 0 334
////////////////////////////////////////////////////////////////////
//       Class : ConfigPageManager
// Description : A global object that maintains the set of ConfigPages
//               everywhere in the world, and keeps them in sorted
//               order.
////////////////////////////////////////////////////////////////////

2387 14 ConfigVariable 26625 14 ConfigVariable 14 ConfigVariable 0 0 0 1 1312 1313 0 20 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 0 0 1 0 2388 0 0 0 0 709
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariable
// Description : This is a generic, untyped ConfigVariable.  It is
//               also the base class for the typed ConfigVariables,
//               and contains all of the code common to
//               ConfigVariables of all types (except
//               ConfigVariableList, which is a bit of a special
//               case).
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

2388 18 ConfigVariableBase 43009 18 ConfigVariableBase 18 ConfigVariableBase 0 0 0 0 0 0 12 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 0 0 1 0 2382 0 0 0 0 698
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableBase
// Description : This class is the base class for both
//               ConfigVariableList and ConfigVariable (and hence for
//               all of the ConfigVariableBool, ConfigVaribleString,
//               etc. classes).  It collects together the common
//               interface for all generic ConfigVariables.
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

2389 18 ConfigVariableBool 141313 18 ConfigVariableBool 18 ConfigVariableBool 0 0 0 1 1334 1344 0 8 1335 1337 1338 1339 1340 1341 1342 1343 0 1 1336 1 0 2387 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableBool
// Description : This is a convenience class to specialize
//               ConfigVariable as a boolean type.
////////////////////////////////////////////////////////////////////

2390 20 ConfigVariableDouble 141313 20 ConfigVariableDouble 20 ConfigVariableDouble 0 0 0 1 1345 1355 0 8 1346 1348 1349 1350 1351 1352 1353 1354 0 1 1347 1 0 2387 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableDouble
// Description : This is a convenience class to specialize
//               ConfigVariable as a floating-point type.
////////////////////////////////////////////////////////////////////

2391 22 ConfigVariableFilename 141313 22 ConfigVariableFilename 22 ConfigVariableFilename 0 0 0 1 1356 1377 0 19 1357 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 0 1 1358 1 0 2387 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableFilename
// Description : This is a convenience class to specialize
//               ConfigVariable as a Filename type.  It is almost the
//               same thing as ConfigVariableString, except it handles
//               an implicit Filename::expand_from() operation so that
//               the user may put OS-specific filenames, or filenames
//               based on environment variables, in the prc file.
////////////////////////////////////////////////////////////////////

2392 17 ConfigVariableInt 141313 17 ConfigVariableInt 17 ConfigVariableInt 0 0 0 1 1378 1388 0 8 1379 1381 1382 1383 1384 1385 1386 1387 0 1 1380 1 0 2387 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableInt
// Description : This is a convenience class to specialize
//               ConfigVariable as an integer type.
////////////////////////////////////////////////////////////////////

2393 19 ConfigVariableInt64 141313 19 ConfigVariableInt64 19 ConfigVariableInt64 0 0 0 1 1389 1399 0 8 1390 1392 1393 1394 1395 1396 1397 1398 0 1 1391 1 0 2387 0 0 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableInt64
// Description : This is a convenience class to specialize
//               ConfigVariable as a 64-bit integer type.
////////////////////////////////////////////////////////////////////

2394 18 ConfigVariableList 26625 18 ConfigVariableList 18 ConfigVariableList 0 0 0 1 1400 1401 0 8 1402 1403 1404 1405 1406 1407 1408 1409 0 0 1 0 2388 0 0 0 0 779
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableList
// Description : This class is similar to ConfigVariable, but it
//               reports its value as a list of strings.  In this
//               special case, all of the declarations of the variable
//               are returned as the elements of this list, in order.
//
//               Note that this is different from a normal
//               ConfigVariableString, which just returns its topmost
//               value, which can optionally be treated as a number of
//               discrete words by dividing it at the spaces.
//
//               A ConfigVariableList cannot be modified locally.
////////////////////////////////////////////////////////////////////

2395 21 ConfigVariableManager 43009 21 ConfigVariableManager 21 ConfigVariableManager 0 0 0 0 0 0 13 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 0 0 0 0 0 391
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableManager
// Description : A global object that maintains the set of
//               ConfigVariables (actually, ConfigVariableCores)
//               everywhere in the world, and keeps them in sorted
//               order.
////////////////////////////////////////////////////////////////////

2396 24 ConfigVariableSearchPath 26625 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 1 1423 1424 0 15 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1 2724 1 1425 1 0 2388 0 0 0 0 1125
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableSearchPath
// Description : This is similar to a ConfigVariableList, but it
//               returns its list as a DSearchPath, as a list of
//               directories.
//
//               You may locally append directories to the end of the
//               search path with the methods here, or prepend them to
//               the beginning.  Use these methods to make adjustments
//               to the path; do not attempt to directly modify the
//               const DSearchPath object returned by get_value().
//
//               Unlike other ConfigVariable types, local changes
//               (made by calling append_directory() and
//               prepend_directory()) are specific to this particular
//               instance of the ConfigVariableSearchPath.  A separate
//               instance of the same variable, created by using the
//               same name to the constructor, will not reflect the
//               local changes.
////////////////////////////////////////////////////////////////////

2397 20 ConfigVariableString 141313 20 ConfigVariableString 20 ConfigVariableString 0 0 0 1 1441 1456 0 13 1442 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 0 1 1443 1 0 2387 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableString
// Description : This is a convenience class to specialize
//               ConfigVariable as a string type.
////////////////////////////////////////////////////////////////////

2398 9 CPTAFloat 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 1462 1470 0 7 1463 1464 1465 1466 1467 1468 1469 0 0 1 0 2399 0 0 0 0 0

2399 27 PointerToArrayBase< float > 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 1461 0 0 0 0 1 0 2400 0 0 0 0 0

2400 48 PointerToBase< ReferenceCountedVector< float > > 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 1459 1460 0 0 1 0 2401 0 0 0 0 0

2401 13 PointerToVoid 43009 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 2 1457 1458 0 0 1 0 2402 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

2402 10 MemoryBase 2049 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 704
////////////////////////////////////////////////////////////////////
//       Class : MemoryBase
// Description : This class is intended to be the base class of all
//               objects in Panda that might be allocated and deleted
//               via the new and delete operators.  It redefines these
//               operators to provide some memory tracking support.
//
//               We used to try to override the global operator new
//               and delete methods, but that seems to cause problems
//               when including header files for C++-based system
//               libraries (such as are found on OSX).
////////////////////////////////////////////////////////////////////

2403 7 CPTAInt 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 1474 1482 0 7 1475 1476 1477 1478 1479 1480 1481 0 0 1 0 2404 0 0 0 0 0

2404 25 PointerToArrayBase< int > 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 1473 0 0 0 0 1 0 2405 0 0 0 0 0

2405 46 PointerToBase< ReferenceCountedVector< int > > 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 1471 1472 0 0 1 0 2401 0 0 0 0 0

2406 9 CPTAUchar 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 1486 1494 0 7 1487 1488 1489 1490 1491 1492 1493 0 0 1 0 2407 0 0 0 0 0

2407 35 PointerToArrayBase< unsigned char > 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 1485 0 0 0 0 1 0 2408 0 0 0 0 0

2408 56 PointerToBase< ReferenceCountedVector< unsigned char > > 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 1483 1484 0 0 1 0 2401 0 0 0 0 0

2409 7 DConfig 141313 7 DConfig 7 DConfig 0 0 0 0 1500 0 5 1495 1496 1497 1498 1499 0 0 0 0 0 535
////////////////////////////////////////////////////////////////////
//       Class : DConfig
// Description : This class emulates the old dconfig-style interface
//               to our Panda config system.  It exists only to
//               provide backward-compatible support, and it is used
//               primarily by Python code.  For modern code, use the
//               new ConfigVariable* interface instead of this
//               deprecated interface.
////////////////////////////////////////////////////////////////////

2410 11 DSearchPath 26625 11 DSearchPath 11 DSearchPath 0 0 0 1 1511 1513 0 14 1512 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1 2725 0 0 0 1 2411 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

2411 7 Results 288769 20 DSearchPath::Results 20 DSearchPath::Results 2410 0 0 1 1501 1503 0 8 1502 1504 1505 1506 1507 1508 1509 1510 0 0 0 0 0 0

2412 20 ExecutionEnvironment 141313 20 ExecutionEnvironment 20 ExecutionEnvironment 0 0 0 0 1538 0 11 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 0 0 0 0 0 475
////////////////////////////////////////////////////////////////////
//       Class : ExecutionEnvironment
// Description : Encapsulates access to the environment variables and
//               command-line arguments at the time of execution.
//               This is encapsulated to support accessing these
//               things during static init time, which seems to be
//               risky at best.
////////////////////////////////////////////////////////////////////

2413 10 FileStream 26625 10 FileStream 10 FileStream 0 0 0 1 1563 1564 0 2 1565 1566 0 0 1 0 2414 0 0 0 0 569
////////////////////////////////////////////////////////////////////
//       Class : FileStream
// Description : Implements a C++ stream object suitable for reading
//               from and/or writing to files on disk.  This is
//               similar to fstream, but it provides low-level support
//               for Panda's simple-threading implementation (using
//               this interface will block only the current thread,
//               rather than the entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2414 8 iostream 141313 8 iostream 8 iostream 0 0 0 0 1562 0 1 1561 0 0 2 3 2415 1551 1552 3 2420 1559 1560 0 0 0

2415 7 istream 141313 7 istream 7 istream 0 0 0 0 1550 0 3 1547 1548 1549 0 0 1 5 2416 1546 0 0 0 0

2416 3 ios 141313 3 ios 3 ios 0 0 0 0 1545 0 5 1540 1541 1542 1543 1544 0 0 1 0 2417 0 0 0 0 0

2417 8 ios_base 141313 8 ios_base 8 ios_base 0 0 0 0 1539 0 0 0 0 0 0 2 2418 2419 293
// We don't care (much) about the actual definition of the various
// iostream classes, but we do need to know the classnames that are
// available.
// We need to expose one method in each class to force it to publish.
// But we'd like to expose some of these methods anyway, so no
// problem.

2418 7 seekdir 794624 17 ios_base::seekdir 17 ios_base::seekdir 2417 0 0 0 0 0 0 0 0 0 3 3 beg 13 ios_base::beg 0 3 cur 13 ios_base::cur 1 3 end 13 ios_base::end 2 0 0

2419 8 openmode 794624 18 ios_base::openmode 18 ios_base::openmode 2417 0 0 0 0 0 0 0 0 0 0 0 0

2420 7 ostream 141313 7 ostream 7 ostream 0 0 0 0 1558 0 4 1554 1555 1556 1557 0 0 1 5 2416 1553 0 0 0 0

2421 8 Filename 26625 8 Filename 8 Filename 0 0 0 1 1567 1568 0 89 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 0 1 1583 0 0 1 2422 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

2422 4 Type 794624 14 Filename::Type 14 Filename::Type 2421 0 0 0 0 0 0 0 0 0 3 9 T_general 19 Filename::T_general 0 5 T_dso 15 Filename::T_dso 1 12 T_executable 22 Filename::T_executable 2 0 0

2423 11 GlobPattern 141313 11 GlobPattern 11 GlobPattern 0 0 0 1 1659 1675 0 15 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

2424 14 IDecryptStream 141313 14 IDecryptStream 14 IDecryptStream 0 0 0 1 1676 1682 0 5 1677 1678 1679 1680 1681 0 0 1 0 2415 0 0 0 0 603
////////////////////////////////////////////////////////////////////
//       Class : IDecryptStream
// Description : An input stream object that uses OpenSSL to decrypt
//               the input from another source stream on-the-fly.
//
//               Attach an IDecryptStream to an existing istream that
//               provides encrypted data, as generated by an
//               OEncryptStream, and read the corresponding
//               unencrypted data from the IDecryptStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2425 11 IFileStream 26625 11 IFileStream 11 IFileStream 0 0 0 1 1683 1684 0 2 1685 1686 0 0 1 0 2415 0 0 0 0 553
////////////////////////////////////////////////////////////////////
//       Class : IFileStream
// Description : Implements a C++ stream object suitable for reading
//               from files on disk.  This is similar to ifstream, but
//               it provides low-level support for Panda's
//               simple-threading implementation (using this interface
//               will block only the current thread, rather than the
//               entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2426 14 IStreamWrapper 26625 14 IStreamWrapper 14 IStreamWrapper 0 0 0 1 1691 1692 0 1 1693 0 0 1 5 2427 1690 0 0 0 390
////////////////////////////////////////////////////////////////////
//       Class : IStreamWrapper
// Description : This class provides a locking wrapper around an
//               arbitrary istream pointer.  A thread may use this
//               class to perform an atomic seek/read/gcount
//               operation.
////////////////////////////////////////////////////////////////////

2427 17 StreamWrapperBase 141313 17 StreamWrapperBase 17 StreamWrapperBase 0 0 0 0 1689 0 2 1687 1688 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : StreamWrapperBase
// Description : The base class for both IStreamWrapper and
//               OStreamWrapper, this provides the common locking
//               interface.
////////////////////////////////////////////////////////////////////

2428 15 NeverFreeMemory 141313 15 NeverFreeMemory 15 NeverFreeMemory 0 0 0 0 1697 0 3 1694 1695 1696 0 0 0 0 0 818
////////////////////////////////////////////////////////////////////
//       Class : NeverFreeMemory
// Description : This class is used to allocate bytes of memory from a
//               pool that is never intended to be freed.  It is
//               particularly useful to support DeletedChain, which
//               allocates memory in just such a fashion.
//
//               When it is known that memory will not be freed, it is
//               preferable to use this instead of the standard
//               malloc() (or global_operator_new()) call, since this
//               will help reduce fragmentation problems in the
//               dynamic heap.  Also, memory allocated from here will
//               exhibit less wasted space.
////////////////////////////////////////////////////////////////////

2429 6 Notify 26625 6 Notify 6 Notify 0 0 0 1 1698 1699 0 15 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 0 0 0 0 0 833
////////////////////////////////////////////////////////////////////
//       Class : Notify
// Description : An object that handles general error reporting to the
//               user.  It contains a pointer to an ostream, initially
//               cerr, which can be reset at will to point to
//               different output devices, according to the needs of
//               the application.  All output generated within Panda
//               should vector through the Notify ostream.
//
//               This also includes a collection of Categories and
//               Severities, which may be independently enabled or
//               disabled, so that error messages may be squelched or
//               respected according to the wishes of the user.
////////////////////////////////////////////////////////////////////

2430 14 NotifyCategory 141313 14 NotifyCategory 14 NotifyCategory 0 0 0 0 1740 0 21 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 0 0 2 3 2402 1715 1716 3 2382 1717 1718 0 0 536
////////////////////////////////////////////////////////////////////
//       Class : NotifyCategory
// Description : A particular category of error messages.  Typically
//               there will be one of these per package, so that we
//               can turn on or off error messages at least at a
//               package level; further nested categories can be
//               created within a package if a finer grain of control
//               is required.
////////////////////////////////////////////////////////////////////

2431 14 NotifySeverity 532481 14 NotifySeverity 14 NotifySeverity 0 0 0 0 0 0 0 0 0 0 7 14 NS_unspecified 14 NS_unspecified 0 7 NS_spam 7 NS_spam 1 8 NS_debug 8 NS_debug 2 7 NS_info 7 NS_info 3 10 NS_warning 10 NS_warning 4 8 NS_error 8 NS_error 5 8 NS_fatal 8 NS_fatal 6 0 0

2432 14 OEncryptStream 141313 14 OEncryptStream 14 OEncryptStream 0 0 0 1 1741 1747 0 5 1742 1743 1744 1745 1746 0 0 1 0 2420 0 0 0 0 545
////////////////////////////////////////////////////////////////////
//       Class : OEncryptStream
// Description : An input stream object that uses OpenSSL to encrypt
//               data to another destination stream on-the-fly.
//
//               Attach an OEncryptStream to an existing ostream that
//               will accept encrypted data, and write your
//               unencrypted source data to the OEncryptStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2433 11 OFileStream 26625 11 OFileStream 11 OFileStream 0 0 0 1 1748 1749 0 2 1750 1751 0 0 1 0 2420 0 0 0 0 551
////////////////////////////////////////////////////////////////////
//       Class : OFileStream
// Description : Implements a C++ stream object suitable for writing
//               to files on disk.  This is similar to ofstream, but
//               it provides low-level support for Panda's
//               simple-threading implementation (using this interface
//               will block only the current thread, rather than the
//               entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2434 14 OStreamWrapper 26625 14 OStreamWrapper 14 OStreamWrapper 0 0 0 1 1753 1754 0 1 1755 0 0 1 5 2427 1752 0 0 0 367
////////////////////////////////////////////////////////////////////
//       Class : OStreamWrapper
// Description : This class provides a locking wrapper around an
//               arbitrary ostream pointer.  A thread may use this
//               class to perform an atomic seek/write operation.
////////////////////////////////////////////////////////////////////

2435 11 PandaSystem 43009 11 PandaSystem 11 PandaSystem 0 0 0 0 0 0 23 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 0 0 0 0 0 435
////////////////////////////////////////////////////////////////////
//       Class : PandaSystem
// Description : This class is used as a namespace to group several
//               global properties of Panda.  Application developers
//               can use this class to query the runtime version or
//               capabilities of the current Panda environment.
////////////////////////////////////////////////////////////////////

2436 8 PTAFloat 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 1779 1794 0 14 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 0 0 1 0 2399 0 0 0 0 0

2437 6 PTAInt 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 1795 1810 0 14 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 0 0 1 0 2404 0 0 0 0 0

2438 8 PTAUchar 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 1811 1826 0 14 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 0 0 1 0 2407 0 0 0 0 0

2439 12 StreamReader 26625 12 StreamReader 12 StreamReader 0 0 0 1 1827 1829 0 28 1828 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 0 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : StreamReader
// Description : A class to read sequential binary data directly from
//               an istream.  Its interface is similar to
//               DatagramIterator by design; see also StreamWriter.
////////////////////////////////////////////////////////////////////

2440 13 StreamWrapper 26625 13 StreamWrapper 13 StreamWrapper 0 0 0 1 1861 1862 0 1 1863 0 0 2 3 2426 1857 1858 3 2434 1859 1860 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : StreamWrapper
// Description : This class provides a locking wrapper around a
//               combination ostream/istream pointer.
////////////////////////////////////////////////////////////////////

2441 12 StreamWriter 26625 12 StreamWriter 12 StreamWriter 0 0 0 1 1864 1866 0 29 1865 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 0 0 0 0 0 550
////////////////////////////////////////////////////////////////////
//       Class : StreamWriter
// Description : A StreamWriter object is used to write sequential
//               binary data directly to an ostream.  Its interface is
//               very similar to Datagram by design; it's primarily
//               intended as a convenience to eliminate the overhead
//               of writing bytes to a Datagram and then writing the
//               Datagram to a stream.
////////////////////////////////////////////////////////////////////

2442 10 TypeHandle 141313 10 TypeHandle 10 TypeHandle 0 0 0 1 1895 1919 0 23 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 0 0 0 0 1 2443 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2443 11 MemoryClass 794624 23 TypeHandle::MemoryClass 23 TypeHandle::MemoryClass 2442 0 0 0 0 0 0 0 0 0 5 12 MC_singleton 24 TypeHandle::MC_singleton 0 8 MC_array 20 TypeHandle::MC_array 1 23 MC_deleted_chain_active 35 TypeHandle::MC_deleted_chain_active 2 25 MC_deleted_chain_inactive 37 TypeHandle::MC_deleted_chain_inactive 3 8 MC_limit 20 TypeHandle::MC_limit 4 0 0

2444 12 TypeRegistry 141313 12 TypeRegistry 12 TypeRegistry 0 0 0 0 1936 0 16 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 0 0 1 0 2402 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : TypeRegistry
// Description : The TypeRegistry class maintains all the assigned
//               TypeHandles in a given system.  There should be only
//               one TypeRegistry class during the lifetime of the
//               application.  It will be created on the local heap
//               initially, and it should be migrated to shared memory
//               as soon as shared memory becomes available.
////////////////////////////////////////////////////////////////////

2445 11 TypedObject 26625 11 TypedObject 11 TypedObject 0 0 0 0 1939 0 5 1940 1941 1942 1943 1944 0 0 1 3 2402 1937 1938 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

2446 7 fstream 141313 7 fstream 7 fstream 0 0 0 1 1945 1947 0 1 1946 0 0 1 0 2414 0 0 0 0 0

2447 8 ifstream 141313 8 ifstream 8 ifstream 0 0 0 1 1948 1950 0 1 1949 0 0 1 0 2415 0 0 0 0 0

2448 8 ofstream 141313 8 ofstream 8 ofstream 0 0 0 1 1951 1953 0 1 1952 0 0 1 0 2420 0 0 0 0 0

2449 11 MemoryUsage 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 0 1974 0 20 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 0 0 1 0 2450 0 0 0 0 539
////////////////////////////////////////////////////////////////////
//       Class : MemoryUsage
// Description : This class is used strictly for debugging purposes,
//               specifically for tracking memory leaks of
//               reference-counted objects: it keeps a record of every
//               such object currently allocated.
//
//               When compiled with NDEBUG set, this entire class does
//               nothing and compiles to nothing.
////////////////////////////////////////////////////////////////////

2450 10 MemoryHook 2049 10 MemoryHook 10 MemoryHook 0 0 0 0 0 0 0 0 0 0 0 0 993
////////////////////////////////////////////////////////////////////
//       Class : MemoryHook
// Description : This class provides a wrapper around the various
//               possible malloc schemes Panda might employ.  It also
//               exists to allow the MemoryUsage class in Panda to
//               insert callback hooks to track the size of allocated
//               pointers.
//
//               The PANDA_MALLOC_* and PANDA_FREE_* macros are
//               defined to vector through through this class (except
//               in production builds) to facilitate that.  Every
//               memory allocation call in Panda should therefore use
//               these macros instead of direct calls to malloc or
//               free.  (C++ new and delete operators may be employed
//               for classes which inherit from MemoryBase; otherwise,
//               use the PANDA_MALLOC macros.)
////////////////////////////////////////////////////////////////////

2451 14 ReferenceCount 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 1978 0 6 1979 1980 1981 1982 1983 1984 0 0 1 3 2402 1976 1977 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

2452 6 Buffer 75777 6 Buffer 6 Buffer 0 0 0 0 1978 0 1 1985 0 0 1 0 2451 0 0 0 0 178
////////////////////////////////////////////////////////////////////
//       Class : Buffer
// Description :
////////////////////////////////////////////////////////////////////

2453 25 PStatCollectorForwardBase 75777 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 0 1978 0 1 1993 0 0 1 0 2451 0 0 0 0 542
////////////////////////////////////////////////////////////////////
//       Class : PStatCollectorForwardBase
// Description : This class serves as a cheap forward reference to a
//               PStatCollector, which is defined in the pstatclient
//               module (and is not directly accessible here in the
//               express module).
//
//               This is subclassed as PStatCollectorForward, which
//               defines the actual functionality.
////////////////////////////////////////////////////////////////////

2454 18 NodeReferenceCount 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 5 1994 1995 1996 1997 1998 0 0 1 0 2451 0 0 0 0 983
////////////////////////////////////////////////////////////////////
//       Class : NodeReferenceCount
// Description : This class specializes ReferenceCount to add an
//               additional counter, called node_ref_count, for the
//               purposes of counting the number of times the object
//               is referenced by a "node", whatever that may mean in
//               context.
//
//               The new methods node_ref() and node_unref()
//               automatically increment and decrement the primary
//               reference count as well.  There also exists a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
//
//               See also CachedTypedWritableReferenceCount, which is
//               similar in principle, as well as
//               NodeCachedReferenceCount, which combines both of
//               these.
////////////////////////////////////////////////////////////////////

2455 8 Datagram 75777 8 Datagram 8 Datagram 0 0 0 1 1999 1939 0 43 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 0 0 1 0 2445 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

2456 17 DatagramGenerator 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 2043 0 5 2044 2045 2046 2047 2048 0 0 0 0 0 334
////////////////////////////////////////////////////////////////////
//       Class : DatagramGenerator
// Description : This class defines the abstract interace to any
//               source of datagrams, whether it be from a file or
//               from the net
////////////////////////////////////////////////////////////////////

2457 16 DatagramIterator 26625 16 DatagramIterator 16 DatagramIterator 0 0 0 1 2049 2051 0 33 2050 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

2458 12 DatagramSink 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 2084 0 3 2085 2086 2087 0 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramSink
// Description : This class defines the abstract interface to sending
//               datagrams to any target, whether it be into a file
//               or across the net
////////////////////////////////////////////////////////////////////

2459 13 ErrorUtilCode 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 7 6 EU_eof 6 EU_eof 6 18 EU_network_no_data 18 EU_network_no_data 5 12 EU_write_ram 12 EU_write_ram 4 8 EU_write 8 EU_write 3 5 EU_ok 5 EU_ok 2 10 EU_success 10 EU_success 1 14 EU_error_abort 14 EU_error_abort -1 19 EU_error_file_empty 19 EU_error_file_empty -2 21 EU_error_file_invalid 21 EU_error_file_invalid -3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum -4 21 EU_error_network_dead 21 EU_error_network_dead -30 28 EU_error_network_unreachable 28 EU_error_network_unreachable -31 29 EU_error_network_disconnected 29 EU_error_network_disconnected -32 24 EU_error_network_timeout 24 EU_error_network_timeout -33 24 EU_error_network_no_data 24 EU_error_network_no_data -34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally -40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow -41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded -42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected -50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down -51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable -52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found -53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response -54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files -60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory -61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation -62 24 EU_error_write_disk_full 24 EU_error_write_disk_full -63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found -64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found -65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault -66 26 EU_error_write_file_rename 26 EU_error_write_file_rename -67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout -70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout -71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable -72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication -73 13 EU_error_zlib 13 EU_error_zlib -80 0 0

2460 11 TextEncoder 141313 11 TextEncoder 11 TextEncoder 0 0 0 1 2098 2136 0 37 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 0 0 0 0 1 2461 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

2461 8 Encoding 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 2460 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0 6 E_utf8 19 TextEncoder::E_utf8 1 9 E_unicode 22 TextEncoder::E_unicode 2 0 0

2462 19 TypedReferenceCount 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 2142 0 1 2141 0 0 2 3 2445 2137 2138 3 2451 2139 2140 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2463 11 VirtualFile 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 2160 0 17 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 0 0 1 0 2462 0 0 0 0 278
////////////////////////////////////////////////////////////////////
//       Class : VirtualFile
// Description : The abstract base class for a file or directory
//               within the VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2464 20 VirtualFileComposite 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 2162 0 1 2161 0 0 1 0 2463 0 0 0 0 450
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileComposite
// Description : A composite directory within the VirtualFileSystem:
//               this maps to more than one directory on different
//               mount points.  The resulting directory appears to be
//               the union of all the individual simple directories.
////////////////////////////////////////////////////////////////////

2465 16 VirtualFileMount 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 2142 0 6 2163 2164 2165 2166 2167 2168 0 0 1 0 2462 0 0 0 0 365
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMount
// Description : The abstract base class for a mount definition used
//               within a VirtualFileSystem.  Normally users don't
//               need to monkey with this class directly.
////////////////////////////////////////////////////////////////////

2466 10 ISubStream 141313 10 ISubStream 10 ISubStream 0 0 0 1 2169 2172 0 2 2170 2171 0 0 1 0 2415 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : ISubStream
// Description : An istream object that presents a subwindow into
//               another istream.  The first character read from this
//               stream will be the "start" character from the source
//               istream; just before the file pointer reaches the
//               "end" character, eof is returned.
//
//               The source stream must be one that we can randomly
//               seek within.  The resulting ISubStream will also
//               support arbitrary seeks.
////////////////////////////////////////////////////////////////////

2467 9 Multifile 75777 9 Multifile 9 Multifile 0 0 0 1 2173 1978 0 60 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 1 2726 0 1 0 2451 0 0 0 1 2468 218
////////////////////////////////////////////////////////////////////
//       Class : Multifile
// Description : A file that contains a set of files.
////////////////////////////////////////////////////////////////////

2468 10 CertRecord 288769 21 Multifile::CertRecord 21 Multifile::CertRecord 2467 0 0 0 2200 0 0 0 0 0 0 0 0

2469 25 VirtualFileMountMultifile 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 2235 2142 0 2 2236 2237 0 0 1 0 2465 0 0 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountMultifile
// Description : Maps a Multifile's contents into the
//               VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2470 22 VirtualFileMountSystem 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 2238 2241 0 2 2239 2240 0 0 1 0 2465 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountSystem
// Description : Maps an actual OS directory into the
//               VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2471 17 VirtualFileSimple 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 2245 0 3 2242 2243 2244 0 0 1 0 2463 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileSimple
// Description : A simple file or directory within the
//               VirtualFileSystem: this maps to exactly one file on
//               one mount point.  Most directories, and all regular
//               files, are of this kind.
////////////////////////////////////////////////////////////////////

2472 7 Namable 141313 7 Namable 7 Namable 0 0 0 1 2246 2254 0 7 2247 2248 2249 2250 2251 2252 2253 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

2473 17 IDecompressStream 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 2255 2258 0 2 2256 2257 0 0 1 0 2415 0 0 0 0 589
////////////////////////////////////////////////////////////////////
//       Class : IDecompressStream
// Description : An input stream object that uses zlib to decompress
//               (inflate) the input from another source stream
//               on-the-fly.
//
//               Attach an IDecompressStream to an existing istream that
//               provides compressed data, and read the corresponding
//               uncompressed data from the IDecompressStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2474 15 OCompressStream 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 2259 2262 0 2 2260 2261 0 0 1 0 2420 0 0 0 0 575
////////////////////////////////////////////////////////////////////
//       Class : OCompressStream
// Description : An input stream object that uses zlib to compress
//               (deflate) data to another destination stream
//               on-the-fly.
//
//               Attach an OCompressStream to an existing ostream that will
//               accept compressed data, and write your uncompressed
//               source data to the OCompressStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2475 15 VirtualFileList 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 0 1978 0 6 2263 2264 2265 2266 2267 2268 1 2727 0 1 0 2451 0 0 0 0 275
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileList
// Description : A list of VirtualFiles, as returned by 
//               VirtualFile::scan_directory().
////////////////////////////////////////////////////////////////////

2476 17 VirtualFileSystem 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 2269 2270 0 25 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 1 2728 0 0 0 1 2477 621
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileSystem
// Description : A hierarchy of directories and files that appears to
//               be one continuous file system, even though the files
//               may originate from several different sources that may
//               not be related to the actual OS's file system.
//
//               For instance, a VirtualFileSystem can transparently
//               mount one or more Multifiles as their own
//               subdirectory hierarchies.
////////////////////////////////////////////////////////////////////

2477 10 MountFlags 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 2476 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 2 0 0

2478 7 Ramfile 141313 7 Ramfile 7 Ramfile 0 0 0 1 2296 2304 0 7 2297 2298 2299 2300 2301 2302 2303 0 0 0 0 0 271
////////////////////////////////////////////////////////////////////
//       Class : Ramfile
// Description : An in-memory buffer specifically designed for
//               downloading files to memory.
////////////////////////////////////////////////////////////////////

2479 7 HashVal 141313 7 HashVal 7 HashVal 0 0 0 1 2305 2334 0 28 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

2480 19 MemoryUsagePointers 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 2335 2336 0 9 2337 2338 2339 2340 2341 2342 2343 2344 2345 2 2729 2730 0 0 0 0 1205
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//       Class : MemoryUsagePointers
// Description : This is a list of pointers returned by a MemoryUsage
//               object in response to some query.
//
//               Warning: once pointers are stored in a
//               MemoryUsagePointers object, they are
//               reference-counted, and will not be freed until the
//               MemoryUsagePointers object is freed (or clear() is
//               called on the object).  However, they may not even be
//               freed then; pointers may leak once they have been
//               added to this structure.  This is because we don't
//               store enough information in this structure to
//               correctly free the pointers that have been added.
//               Since this is intended primarily as a debugging tool,
//               this is not a major issue.
//
//               This class is just a user interface to talk about
//               pointers stored in a MemoryUsage object.  It doesn't
//               even exist when compiled with NDEBUG.
////////////////////////////////////////////////////////////////////

2481 9 TrueClock 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 0 6 2346 2347 2348 2349 2350 2351 0 0 0 0 0 773
////////////////////////////////////////////////////////////////////
//       Class : TrueClock
// Description : An interface to whatever real-time clock we might
//               have available in the current environment.  There is
//               only one TrueClock in existence, and it constructs
//               itself.
//
//               The TrueClock returns elapsed real time in seconds
//               since some undefined epoch.  Since it is not defined
//               at what time precisely the clock indicates zero, this
//               value can only be meaningfully used to measure
//               elapsed time, by sampling it at two different times
//               and subtracting.
////////////////////////////////////////////////////////////////////

2482 9 Patchfile 26625 9 Patchfile 9 Patchfile 0 0 0 1 2352 2353 0 14 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 0 0 0 0 0 181
////////////////////////////////////////////////////////////////////
//       Class : Patchfile
// Description :
////////////////////////////////////////////////////////////////////

2483 12 ProfileTimer 26625 12 ProfileTimer 12 ProfileTimer 0 0 0 1 2369 2370 0 9 2371 2372 2373 2374 2375 2376 2377 2378 2379 0 0 0 0 0 713
/*
    ProfileTimer

    HowTo:
      Create a ProfileTimer and hold onto it.
      Call init() whenever you like (the timer doesn't
        start yet).
      Call on() to start the timer.
      While the timer is on, call mark() at each point of interest,
        in the code you are timing.
      You can turn the timer off() and on() to skip things you
        don't want to time.
      When your timing is finished, call printTo() to see the
        results (e.g. myTimer.printTo(cerr)).

    Notes:
      You should be able to time things down to the millisecond
      well enough, but if you call on() and off() within micro-
      seconds of each other, I don't think you'll get very good
      results.
*/

2484 17 WeakPointerToVoid 43009 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 0 0 2 2380 2381 0 0 1 0 2401 0 0 0 0 362
////////////////////////////////////////////////////////////////////
//       Class : WeakPointerToVoid
// Description : This is the specialization of PointerToVoid for weak
//               pointers.  It needs an additional flag to indicate
//               that the pointer has been deleted.
////////////////////////////////////////////////////////////////////

2485 12 ConfigPage * 8576 12 ConfigPage * 12 ConfigPage * 0 0 2385 0 0 0 0 0 0 0 0 0 0

2486 18 ConfigPage const * 8576 18 ConfigPage const * 18 ConfigPage const * 0 0 2487 0 0 0 0 0 0 0 0 0 0

2487 16 ConfigPage const 8832 16 ConfigPage const 16 ConfigPage const 0 0 2385 0 0 0 0 0 0 0 0 0 0

2488 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2489 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2490 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2491 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2492 9 istream * 8576 9 istream * 9 istream * 0 0 2415 0 0 0 0 0 0 0 0 0 0

2493 20 ConfigVariableCore * 8576 20 ConfigVariableCore * 20 ConfigVariableCore * 0 0 2494 0 0 0 0 0 0 0 0 0 0

2494 18 ConfigVariableCore 2048 18 ConfigVariableCore 18 ConfigVariableCore 0 0 0 0 0 0 0 0 0 0 0 0 615
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableCore
// Description : The internal definition of a ConfigVariable.  This
//               object is shared between all instances of a
//               ConfigVariable that use the same variable name.
//
//               You cannot create a ConfigVariableCore instance
//               directly; instead, use the make() method, which may
//               return a shared instance.  Once created, these
//               objects are never destructed.
////////////////////////////////////////////////////////////////////

2495 19 ConfigDeclaration * 8576 19 ConfigDeclaration * 19 ConfigDeclaration * 0 0 2496 0 0 0 0 0 0 0 0 0 0

2496 17 ConfigDeclaration 2048 17 ConfigDeclaration 17 ConfigDeclaration 0 0 0 0 0 0 0 0 0 0 0 0 0

2497 25 ConfigDeclaration const * 8576 25 ConfigDeclaration const * 25 ConfigDeclaration const * 0 0 2498 0 0 0 0 0 0 0 0 0 0

2498 23 ConfigDeclaration const 8832 23 ConfigDeclaration const 23 ConfigDeclaration const 0 0 2496 0 0 0 0 0 0 0 0 0 0

2499 9 ostream * 8576 9 ostream * 9 ostream * 0 0 2420 0 0 0 0 0 0 0 0 0 0

2500 25 ConfigPageManager const * 8576 25 ConfigPageManager const * 25 ConfigPageManager const * 0 0 2501 0 0 0 0 0 0 0 0 0 0

2501 23 ConfigPageManager const 8832 23 ConfigPageManager const 23 ConfigPageManager const 0 0 2386 0 0 0 0 0 0 0 0 0 0

2502 19 ConfigPageManager * 8576 19 ConfigPageManager * 19 ConfigPageManager * 0 0 2386 0 0 0 0 0 0 0 0 0 0

2503 13 DSearchPath * 8576 13 DSearchPath * 13 DSearchPath * 0 0 2410 0 0 0 0 0 0 0 0 0 0

2504 16 ConfigVariable * 8576 16 ConfigVariable * 16 ConfigVariable * 0 0 2387 0 0 0 0 0 0 0 0 0 0

2505 22 ConfigVariable const * 8576 22 ConfigVariable const * 22 ConfigVariable const * 0 0 2506 0 0 0 0 0 0 0 0 0 0

2506 20 ConfigVariable const 8832 20 ConfigVariable const 20 ConfigVariable const 0 0 2387 0 0 0 0 0 0 0 0 0 0

2507 13 long long int 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2508 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2509 26 ConfigVariableBase const * 8576 26 ConfigVariableBase const * 26 ConfigVariableBase const * 0 0 2510 0 0 0 0 0 0 0 0 0 0

2510 24 ConfigVariableBase const 8832 24 ConfigVariableBase const 24 ConfigVariableBase const 0 0 2388 0 0 0 0 0 0 0 0 0 0

2511 20 ConfigVariableBase * 8576 20 ConfigVariableBase * 20 ConfigVariableBase * 0 0 2388 0 0 0 0 0 0 0 0 0 0

2512 20 ConfigVariableBool * 8576 20 ConfigVariableBool * 20 ConfigVariableBool * 0 0 2389 0 0 0 0 0 0 0 0 0 0

2513 26 ConfigVariableBool const * 8576 26 ConfigVariableBool const * 26 ConfigVariableBool const * 0 0 2514 0 0 0 0 0 0 0 0 0 0

2514 24 ConfigVariableBool const 8832 24 ConfigVariableBool const 24 ConfigVariableBool const 0 0 2389 0 0 0 0 0 0 0 0 0 0

2515 22 ConfigVariableDouble * 8576 22 ConfigVariableDouble * 22 ConfigVariableDouble * 0 0 2390 0 0 0 0 0 0 0 0 0 0

2516 28 ConfigVariableDouble const * 8576 28 ConfigVariableDouble const * 28 ConfigVariableDouble const * 0 0 2517 0 0 0 0 0 0 0 0 0 0

2517 26 ConfigVariableDouble const 8832 26 ConfigVariableDouble const 26 ConfigVariableDouble const 0 0 2390 0 0 0 0 0 0 0 0 0 0

2518 24 ConfigVariableFilename * 8576 24 ConfigVariableFilename * 24 ConfigVariableFilename * 0 0 2391 0 0 0 0 0 0 0 0 0 0

2519 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 2520 0 0 0 0 0 0 0 0 0 0

2520 14 Filename const 8832 14 Filename const 14 Filename const 0 0 2421 0 0 0 0 0 0 0 0 0 0

2521 30 ConfigVariableFilename const * 8576 30 ConfigVariableFilename const * 30 ConfigVariableFilename const * 0 0 2522 0 0 0 0 0 0 0 0 0 0

2522 28 ConfigVariableFilename const 8832 28 ConfigVariableFilename const 28 ConfigVariableFilename const 0 0 2391 0 0 0 0 0 0 0 0 0 0

2523 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2524 4 char 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

2525 10 Filename * 8576 10 Filename * 10 Filename * 0 0 2421 0 0 0 0 0 0 0 0 0 0

2526 19 ConfigVariableInt * 8576 19 ConfigVariableInt * 19 ConfigVariableInt * 0 0 2392 0 0 0 0 0 0 0 0 0 0

2527 25 ConfigVariableInt const * 8576 25 ConfigVariableInt const * 25 ConfigVariableInt const * 0 0 2528 0 0 0 0 0 0 0 0 0 0

2528 23 ConfigVariableInt const 8832 23 ConfigVariableInt const 23 ConfigVariableInt const 0 0 2392 0 0 0 0 0 0 0 0 0 0

2529 21 ConfigVariableInt64 * 8576 21 ConfigVariableInt64 * 21 ConfigVariableInt64 * 0 0 2393 0 0 0 0 0 0 0 0 0 0

2530 27 ConfigVariableInt64 const * 8576 27 ConfigVariableInt64 const * 27 ConfigVariableInt64 const * 0 0 2531 0 0 0 0 0 0 0 0 0 0

2531 25 ConfigVariableInt64 const 8832 25 ConfigVariableInt64 const 25 ConfigVariableInt64 const 0 0 2393 0 0 0 0 0 0 0 0 0 0

2532 20 ConfigVariableList * 8576 20 ConfigVariableList * 20 ConfigVariableList * 0 0 2394 0 0 0 0 0 0 0 0 0 0

2533 26 ConfigVariableList const * 8576 26 ConfigVariableList const * 26 ConfigVariableList const * 0 0 2534 0 0 0 0 0 0 0 0 0 0

2534 24 ConfigVariableList const 8832 24 ConfigVariableList const 24 ConfigVariableList const 0 0 2394 0 0 0 0 0 0 0 0 0 0

2535 23 ConfigVariableManager * 8576 23 ConfigVariableManager * 23 ConfigVariableManager * 0 0 2395 0 0 0 0 0 0 0 0 0 0

2536 29 ConfigVariableManager const * 8576 29 ConfigVariableManager const * 29 ConfigVariableManager const * 0 0 2537 0 0 0 0 0 0 0 0 0 0

2537 27 ConfigVariableManager const 8832 27 ConfigVariableManager const 27 ConfigVariableManager const 0 0 2395 0 0 0 0 0 0 0 0 0 0

2538 19 DSearchPath const * 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2539 0 0 0 0 0 0 0 0 0 0

2539 17 DSearchPath const 8832 17 DSearchPath const 17 DSearchPath const 0 0 2410 0 0 0 0 0 0 0 0 0 0

2540 26 ConfigVariableSearchPath * 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2396 0 0 0 0 0 0 0 0 0 0

2541 32 ConfigVariableSearchPath const * 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 2542 0 0 0 0 0 0 0 0 0 0

2542 30 ConfigVariableSearchPath const 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 2396 0 0 0 0 0 0 0 0 0 0

2543 9 Results * 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 2411 0 0 0 0 0 0 0 0 0 0

2544 22 ConfigVariableString * 8576 22 ConfigVariableString * 22 ConfigVariableString * 0 0 2397 0 0 0 0 0 0 0 0 0 0

2545 28 ConfigVariableString const * 8576 28 ConfigVariableString const * 28 ConfigVariableString const * 0 0 2546 0 0 0 0 0 0 0 0 0 0

2546 26 ConfigVariableString const 8832 26 ConfigVariableString const 26 ConfigVariableString const 0 0 2397 0 0 0 0 0 0 0 0 0 0

2547 36 ConstPointerToArray< float > const * 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 2548 0 0 0 0 0 0 0 0 0 0

2548 34 ConstPointerToArray< float > const 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 2398 0 0 0 0 0 0 0 0 0 0

2549 30 ConstPointerToArray< float > * 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 2398 0 0 0 0 0 0 0 0 0 0

2550 31 PointerToArray< float > const * 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 2551 0 0 0 0 0 0 0 0 0 0

2551 29 PointerToArray< float > const 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 2436 0 0 0 0 0 0 0 0 0 0

2552 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2553 50 PointerToBase< ReferenceCountedVector< float > > * 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 2400 0 0 0 0 0 0 0 0 0 0

2554 56 PointerToBase< ReferenceCountedVector< float > > const * 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 2555 0 0 0 0 0 0 0 0 0 0

2555 54 PointerToBase< ReferenceCountedVector< float > > const 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 2400 0 0 0 0 0 0 0 0 0 0

2556 21 PointerToVoid const * 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 2557 0 0 0 0 0 0 0 0 0 0

2557 19 PointerToVoid const 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 2401 0 0 0 0 0 0 0 0 0 0

2558 34 ConstPointerToArray< int > const * 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 2559 0 0 0 0 0 0 0 0 0 0

2559 32 ConstPointerToArray< int > const 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 2403 0 0 0 0 0 0 0 0 0 0

2560 28 ConstPointerToArray< int > * 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 2403 0 0 0 0 0 0 0 0 0 0

2561 29 PointerToArray< int > const * 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 2562 0 0 0 0 0 0 0 0 0 0

2562 27 PointerToArray< int > const 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 2437 0 0 0 0 0 0 0 0 0 0

2563 48 PointerToBase< ReferenceCountedVector< int > > * 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 2405 0 0 0 0 0 0 0 0 0 0

2564 54 PointerToBase< ReferenceCountedVector< int > > const * 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 2565 0 0 0 0 0 0 0 0 0 0

2565 52 PointerToBase< ReferenceCountedVector< int > > const 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 2405 0 0 0 0 0 0 0 0 0 0

2566 44 ConstPointerToArray< unsigned char > const * 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 2567 0 0 0 0 0 0 0 0 0 0

2567 42 ConstPointerToArray< unsigned char > const 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 2406 0 0 0 0 0 0 0 0 0 0

2568 38 ConstPointerToArray< unsigned char > * 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 2406 0 0 0 0 0 0 0 0 0 0

2569 39 PointerToArray< unsigned char > const * 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 2570 0 0 0 0 0 0 0 0 0 0

2570 37 PointerToArray< unsigned char > const 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 2438 0 0 0 0 0 0 0 0 0 0

2571 13 unsigned char 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

2572 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 2408 0 0 0 0 0 0 0 0 0 0

2573 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 2574 0 0 0 0 0 0 0 0 0 0

2574 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 2408 0 0 0 0 0 0 0 0 0 0

2575 15 Results const * 8576 28 DSearchPath::Results const * 28 DSearchPath::Results const * 0 0 2576 0 0 0 0 0 0 0 0 0 0

2576 13 Results const 8832 26 DSearchPath::Results const 26 DSearchPath::Results const 0 0 2411 0 0 0 0 0 0 0 0 0 0

2577 12 FileStream * 8576 12 FileStream * 12 FileStream * 0 0 2413 0 0 0 0 0 0 0 0 0 0

2578 10 iostream * 8576 10 iostream * 10 iostream * 0 0 2414 0 0 0 0 0 0 0 0 0 0

2579 17 unsigned long int 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2580 8 long int 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2581 5 ios * 8576 5 ios * 5 ios * 0 0 2416 0 0 0 0 0 0 0 0 0 0

2582 11 ios const * 8576 11 ios const * 11 ios const * 0 0 2583 0 0 0 0 0 0 0 0 0 0

2583 9 ios const 8832 9 ios const 9 ios const 0 0 2416 0 0 0 0 0 0 0 0 0 0

2584 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 2585 0 0 0 0 0 0 0 0 0 0

2585 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

2586 32 vector< basic_string< char > > * 8576 32 vector< basic_string< char > > * 32 vector< basic_string< char > > * 0 0 2587 0 0 0 0 0 0 0 0 0 0

2587 30 vector< basic_string< char > > 2048 30 vector< basic_string< char > > 30 vector< basic_string< char > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2588 13 IFileStream * 8576 13 IFileStream * 13 IFileStream * 0 0 2425 0 0 0 0 0 0 0 0 0 0

2589 10 ifstream * 8576 10 ifstream * 10 ifstream * 0 0 2447 0 0 0 0 0 0 0 0 0 0

2590 13 OFileStream * 8576 13 OFileStream * 13 OFileStream * 0 0 2433 0 0 0 0 0 0 0 0 0 0

2591 10 ofstream * 8576 10 ofstream * 10 ofstream * 0 0 2448 0 0 0 0 0 0 0 0 0 0

2592 9 fstream * 8576 9 fstream * 9 fstream * 0 0 2446 0 0 0 0 0 0 0 0 0 0

2593 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 2442 0 0 0 0 0 0 0 0 0 0

2594 19 GlobPattern const * 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2595 0 0 0 0 0 0 0 0 0 0

2595 17 GlobPattern const 8832 17 GlobPattern const 17 GlobPattern const 0 0 2423 0 0 0 0 0 0 0 0 0 0

2596 13 GlobPattern * 8576 13 GlobPattern * 13 GlobPattern * 0 0 2423 0 0 0 0 0 0 0 0 0 0

2597 16 IDecryptStream * 8576 16 IDecryptStream * 16 IDecryptStream * 0 0 2424 0 0 0 0 0 0 0 0 0 0

2598 22 IDecryptStream const * 8576 22 IDecryptStream const * 22 IDecryptStream const * 0 0 2599 0 0 0 0 0 0 0 0 0 0

2599 20 IDecryptStream const 8832 20 IDecryptStream const 20 IDecryptStream const 0 0 2424 0 0 0 0 0 0 0 0 0 0

2600 16 IStreamWrapper * 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 2426 0 0 0 0 0 0 0 0 0 0

2601 22 IStreamWrapper const * 8576 22 IStreamWrapper const * 22 IStreamWrapper const * 0 0 2602 0 0 0 0 0 0 0 0 0 0

2602 20 IStreamWrapper const 8832 20 IStreamWrapper const 20 IStreamWrapper const 0 0 2426 0 0 0 0 0 0 0 0 0 0

2603 19 StreamWrapperBase * 8576 19 StreamWrapperBase * 19 StreamWrapperBase * 0 0 2427 0 0 0 0 0 0 0 0 0 0

2604 8 Notify * 8576 8 Notify * 8 Notify * 0 0 2429 0 0 0 0 0 0 0 0 0 0

2605 14 Notify const * 8576 14 Notify const * 14 Notify const * 0 0 2606 0 0 0 0 0 0 0 0 0 0

2606 12 Notify const 8832 12 Notify const 12 Notify const 0 0 2429 0 0 0 0 0 0 0 0 0 0

2607 16 NotifyCategory * 8576 16 NotifyCategory * 16 NotifyCategory * 0 0 2430 0 0 0 0 0 0 0 0 0 0

2608 22 NotifyCategory const * 8576 22 NotifyCategory const * 22 NotifyCategory const * 0 0 2609 0 0 0 0 0 0 0 0 0 0

2609 20 NotifyCategory const 8832 20 NotifyCategory const 20 NotifyCategory const 0 0 2430 0 0 0 0 0 0 0 0 0 0

2610 12 MemoryBase * 8576 12 MemoryBase * 12 MemoryBase * 0 0 2402 0 0 0 0 0 0 0 0 0 0

2611 13 ConfigFlags * 8576 13 ConfigFlags * 13 ConfigFlags * 0 0 2382 0 0 0 0 0 0 0 0 0 0

2612 16 OEncryptStream * 8576 16 OEncryptStream * 16 OEncryptStream * 0 0 2432 0 0 0 0 0 0 0 0 0 0

2613 16 OStreamWrapper * 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 2434 0 0 0 0 0 0 0 0 0 0

2614 22 OStreamWrapper const * 8576 22 OStreamWrapper const * 22 OStreamWrapper const * 0 0 2615 0 0 0 0 0 0 0 0 0 0

2615 20 OStreamWrapper const 8832 20 OStreamWrapper const 20 OStreamWrapper const 0 0 2434 0 0 0 0 0 0 0 0 0 0

2616 19 PandaSystem const * 8576 19 PandaSystem const * 19 PandaSystem const * 0 0 2617 0 0 0 0 0 0 0 0 0 0

2617 17 PandaSystem const 8832 17 PandaSystem const 17 PandaSystem const 0 0 2435 0 0 0 0 0 0 0 0 0 0

2618 13 PandaSystem * 8576 13 PandaSystem * 13 PandaSystem * 0 0 2435 0 0 0 0 0 0 0 0 0 0

2619 25 PointerToArray< float > * 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 2436 0 0 0 0 0 0 0 0 0 0

2620 23 PointerToArray< int > * 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 2437 0 0 0 0 0 0 0 0 0 0

2621 33 PointerToArray< unsigned char > * 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 2438 0 0 0 0 0 0 0 0 0 0

2622 20 StreamReader const * 8576 20 StreamReader const * 20 StreamReader const * 0 0 2623 0 0 0 0 0 0 0 0 0 0

2623 18 StreamReader const 8832 18 StreamReader const 18 StreamReader const 0 0 2439 0 0 0 0 0 0 0 0 0 0

2624 14 StreamReader * 8576 14 StreamReader * 14 StreamReader * 0 0 2439 0 0 0 0 0 0 0 0 0 0

2625 11 signed char 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

2626 9 short int 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2627 18 unsigned short int 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2628 22 unsigned long long int 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2629 15 StreamWrapper * 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 2440 0 0 0 0 0 0 0 0 0 0

2630 21 StreamWrapper const * 8576 21 StreamWrapper const * 21 StreamWrapper const * 0 0 2631 0 0 0 0 0 0 0 0 0 0

2631 19 StreamWrapper const 8832 19 StreamWrapper const 19 StreamWrapper const 0 0 2440 0 0 0 0 0 0 0 0 0 0

2632 20 StreamWriter const * 8576 20 StreamWriter const * 20 StreamWriter const * 0 0 2633 0 0 0 0 0 0 0 0 0 0

2633 18 StreamWriter const 8832 18 StreamWriter const 18 StreamWriter const 0 0 2441 0 0 0 0 0 0 0 0 0 0

2634 14 StreamWriter * 8576 14 StreamWriter * 14 StreamWriter * 0 0 2441 0 0 0 0 0 0 0 0 0 0

2635 18 TypeHandle const * 8576 18 TypeHandle const * 18 TypeHandle const * 0 0 2636 0 0 0 0 0 0 0 0 0 0

2636 16 TypeHandle const 8832 16 TypeHandle const 16 TypeHandle const 0 0 2442 0 0 0 0 0 0 0 0 0 0

2637 13 TypedObject * 8576 13 TypedObject * 13 TypedObject * 0 0 2445 0 0 0 0 0 0 0 0 0 0

2638 18 set< int > const * 8576 18 set< int > const * 18 set< int > const * 0 0 2639 0 0 0 0 0 0 0 0 0 0

2639 16 set< int > const 8832 16 set< int > const 16 set< int > const 0 0 2640 0 0 0 0 0 0 0 0 0 0

2640 10 set< int > 2048 10 set< int > 10 set< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

2641 20 TypeRegistry const * 8576 20 TypeRegistry const * 20 TypeRegistry const * 0 0 2642 0 0 0 0 0 0 0 0 0 0

2642 18 TypeRegistry const 8832 18 TypeRegistry const 18 TypeRegistry const 0 0 2444 0 0 0 0 0 0 0 0 0 0

2643 14 TypeRegistry * 8576 14 TypeRegistry * 14 TypeRegistry * 0 0 2444 0 0 0 0 0 0 0 0 0 0

2644 19 TypedObject const * 8576 19 TypedObject const * 19 TypedObject const * 0 0 2645 0 0 0 0 0 0 0 0 0 0

2645 17 TypedObject const 8832 17 TypedObject const 17 TypedObject const 0 0 2445 0 0 0 0 0 0 0 0 0 0

2646 21 MemoryUsagePointers * 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 2480 0 0 0 0 0 0 0 0 0 0

2647 22 ReferenceCount const * 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 2648 0 0 0 0 0 0 0 0 0 0

2648 20 ReferenceCount const 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 2451 0 0 0 0 0 0 0 0 0 0

2649 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 2451 0 0 0 0 0 0 0 0 0 0

2650 14 Buffer const * 8576 14 Buffer const * 14 Buffer const * 0 0 2651 0 0 0 0 0 0 0 0 0 0

2651 12 Buffer const 8832 12 Buffer const 12 Buffer const 0 0 2452 0 0 0 0 0 0 0 0 0 0

2652 27 PStatCollectorForwardBase * 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 2453 0 0 0 0 0 0 0 0 0 0

2653 26 NodeReferenceCount const * 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 2654 0 0 0 0 0 0 0 0 0 0

2654 24 NodeReferenceCount const 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 2454 0 0 0 0 0 0 0 0 0 0

2655 10 Datagram * 8576 10 Datagram * 10 Datagram * 0 0 2455 0 0 0 0 0 0 0 0 0 0

2656 16 Datagram const * 8576 16 Datagram const * 16 Datagram const * 0 0 2657 0 0 0 0 0 0 0 0 0 0

2657 14 Datagram const 8832 14 Datagram const 14 Datagram const 0 0 2455 0 0 0 0 0 0 0 0 0 0

2658 19 DatagramGenerator * 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 2456 0 0 0 0 0 0 0 0 0 0

2659 13 VirtualFile * 8576 13 VirtualFile * 13 VirtualFile * 0 0 2463 0 0 0 0 0 0 0 0 0 0

2660 18 DatagramIterator * 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2457 0 0 0 0 0 0 0 0 0 0

2661 24 DatagramIterator const * 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 2662 0 0 0 0 0 0 0 0 0 0

2662 22 DatagramIterator const 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 2457 0 0 0 0 0 0 0 0 0 0

2663 14 DatagramSink * 8576 14 DatagramSink * 14 DatagramSink * 0 0 2458 0 0 0 0 0 0 0 0 0 0

2664 13 TextEncoder * 8576 13 TextEncoder * 13 TextEncoder * 0 0 2460 0 0 0 0 0 0 0 0 0 0

2665 19 TextEncoder const * 8576 19 TextEncoder const * 19 TextEncoder const * 0 0 2666 0 0 0 0 0 0 0 0 0 0

2666 17 TextEncoder const 8832 17 TextEncoder const 17 TextEncoder const 0 0 2460 0 0 0 0 0 0 0 0 0 0

2667 7 wchar_t 8194 7 wchar_t 7 wchar_t 0 1 0 0 0 0 0 0 0 0 0 0 0

2668 21 TypedReferenceCount * 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 2462 0 0 0 0 0 0 0 0 0 0

2669 19 VirtualFile const * 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 2670 0 0 0 0 0 0 0 0 0 0

2670 17 VirtualFile const 8832 17 VirtualFile const 17 VirtualFile const 0 0 2463 0 0 0 0 0 0 0 0 0 0

2671 19 VirtualFileSystem * 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 2476 0 0 0 0 0 0 0 0 0 0

2672 17 VirtualFileList * 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 2475 0 0 0 0 0 0 0 0 0 0

2673 24 VirtualFileMount const * 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 2674 0 0 0 0 0 0 0 0 0 0

2674 22 VirtualFileMount const 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 2465 0 0 0 0 0 0 0 0 0 0

2675 12 ISubStream * 8576 12 ISubStream * 12 ISubStream * 0 0 2466 0 0 0 0 0 0 0 0 0 0

2676 11 Multifile * 8576 11 Multifile * 11 Multifile * 0 0 2467 0 0 0 0 0 0 0 0 0 0

2677 17 Multifile const * 8576 17 Multifile const * 17 Multifile const * 0 0 2678 0 0 0 0 0 0 0 0 0 0

2678 15 Multifile const 8832 15 Multifile const 15 Multifile const 0 0 2467 0 0 0 0 0 0 0 0 0 0

2679 28 vector< CertRecord > const * 8576 39 vector< Multifile::CertRecord > const * 39 vector< Multifile::CertRecord > const * 0 0 2680 0 0 0 0 0 0 0 0 0 0

2680 26 vector< CertRecord > const 8832 37 vector< Multifile::CertRecord > const 37 vector< Multifile::CertRecord > const 0 0 2681 0 0 0 0 0 0 0 0 0 0

2681 20 vector< CertRecord > 2048 31 vector< Multifile::CertRecord > 31 vector< Multifile::CertRecord > 0 0 0 0 0 0 0 0 0 0 0 0 0

2682 10 EVP_PKEY * 8576 10 EVP_PKEY * 10 EVP_PKEY * 0 0 2683 0 0 0 0 0 0 0 0 0 0

2683 8 EVP_PKEY 1024 8 EVP_PKEY 8 EVP_PKEY 0 0 0 0 0 0 0 0 0 0 0 0 0

2684 27 VirtualFileMountMultifile * 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 2469 0 0 0 0 0 0 0 0 0 0

2685 33 VirtualFileMountMultifile const * 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 2686 0 0 0 0 0 0 0 0 0 0

2686 31 VirtualFileMountMultifile const 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 2469 0 0 0 0 0 0 0 0 0 0

2687 24 VirtualFileMountSystem * 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 2470 0 0 0 0 0 0 0 0 0 0

2688 30 VirtualFileMountSystem const * 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 2689 0 0 0 0 0 0 0 0 0 0

2689 28 VirtualFileMountSystem const 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 2470 0 0 0 0 0 0 0 0 0 0

2690 25 VirtualFileSimple const * 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 2691 0 0 0 0 0 0 0 0 0 0

2691 23 VirtualFileSimple const 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 2471 0 0 0 0 0 0 0 0 0 0

2692 18 VirtualFileMount * 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 2465 0 0 0 0 0 0 0 0 0 0

2693 15 Namable const * 8576 15 Namable const * 15 Namable const * 0 0 2694 0 0 0 0 0 0 0 0 0 0

2694 13 Namable const 8832 13 Namable const 13 Namable const 0 0 2472 0 0 0 0 0 0 0 0 0 0

2695 9 Namable * 8576 9 Namable * 9 Namable * 0 0 2472 0 0 0 0 0 0 0 0 0 0

2696 19 IDecompressStream * 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 2473 0 0 0 0 0 0 0 0 0 0

2697 17 OCompressStream * 8576 17 OCompressStream * 17 OCompressStream * 0 0 2474 0 0 0 0 0 0 0 0 0 0

2698 23 VirtualFileList const * 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 2699 0 0 0 0 0 0 0 0 0 0

2699 21 VirtualFileList const 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 2475 0 0 0 0 0 0 0 0 0 0

2700 25 VirtualFileSystem const * 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 2701 0 0 0 0 0 0 0 0 0 0

2701 23 VirtualFileSystem const 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 2476 0 0 0 0 0 0 0 0 0 0

2702 9 Ramfile * 8576 9 Ramfile * 9 Ramfile * 0 0 2478 0 0 0 0 0 0 0 0 0 0

2703 15 Ramfile const * 8576 15 Ramfile const * 15 Ramfile const * 0 0 2704 0 0 0 0 0 0 0 0 0 0

2704 13 Ramfile const 8832 13 Ramfile const 13 Ramfile const 0 0 2478 0 0 0 0 0 0 0 0 0 0

2705 9 HashVal * 8576 9 HashVal * 9 HashVal * 0 0 2479 0 0 0 0 0 0 0 0 0 0

2706 15 HashVal const * 8576 15 HashVal const * 15 HashVal const * 0 0 2707 0 0 0 0 0 0 0 0 0 0

2707 13 HashVal const 8832 13 HashVal const 13 HashVal const 0 0 2479 0 0 0 0 0 0 0 0 0 0

2708 27 MemoryUsagePointers const * 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 2709 0 0 0 0 0 0 0 0 0 0

2709 25 MemoryUsagePointers const 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 2480 0 0 0 0 0 0 0 0 0 0

2710 11 TrueClock * 8576 11 TrueClock * 11 TrueClock * 0 0 2481 0 0 0 0 0 0 0 0 0 0

2711 17 TrueClock const * 8576 17 TrueClock const * 17 TrueClock const * 0 0 2712 0 0 0 0 0 0 0 0 0 0

2712 15 TrueClock const 8832 15 TrueClock const 15 TrueClock const 0 0 2481 0 0 0 0 0 0 0 0 0 0

2713 11 Patchfile * 8576 11 Patchfile * 11 Patchfile * 0 0 2482 0 0 0 0 0 0 0 0 0 0

2714 8 Buffer * 8576 8 Buffer * 8 Buffer * 0 0 2452 0 0 0 0 0 0 0 0 0 0

2715 17 Patchfile const * 8576 17 Patchfile const * 17 Patchfile const * 0 0 2716 0 0 0 0 0 0 0 0 0 0

2716 15 Patchfile const 8832 15 Patchfile const 15 Patchfile const 0 0 2482 0 0 0 0 0 0 0 0 0 0

2717 20 ProfileTimer const * 8576 20 ProfileTimer const * 20 ProfileTimer const * 0 0 2718 0 0 0 0 0 0 0 0 0 0

2718 18 ProfileTimer const 8832 18 ProfileTimer const 18 ProfileTimer const 0 0 2483 0 0 0 0 0 0 0 0 0 0

2719 14 ProfileTimer * 8576 14 ProfileTimer * 14 ProfileTimer * 0 0 2483 0 0 0 0 0 0 0 0 0 0

2720 25 WeakPointerToVoid const * 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 2721 0 0 0 0 0 0 0 0 0 0

2721 23 WeakPointerToVoid const 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 2484 0 0 0 0 0 0 0 0 0 0

2722 9 DConfig * 8576 9 DConfig * 9 DConfig * 0 0 2409 0 0 0 0 0 0 0 0 0 0

2723 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
7
2724 0 180 15 get_directories 19 get_num_directories 13 get_directory 
2725 0 272 15 get_directories 19 get_num_directories 13 get_directory 
2726 0 1001 17 get_subfile_names 16 get_num_subfiles 16 get_subfile_name 
2727 0 1099 9 get_files 13 get_num_files 8 get_file 
2728 0 1106 10 get_mounts 14 get_num_mounts 9 get_mount 
2729 0 1176 12 get_pointers 16 get_num_pointers 11 get_pointer 
2730 0 1176 18 get_typed_pointers 16 get_num_pointers 17 get_typed_pointer 
