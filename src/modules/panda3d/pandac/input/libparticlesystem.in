1304332394
2 2
17 libparticlesystem 4 KBUA 12 pandaphysics 
324
407 9 make_copy 4 731 30 BaseParticleEmitter::make_copy 0 1 1 0
70
virtual BaseParticleEmitter *BaseParticleEmitter::make_copy(void) = 0;

408 8 generate 4 731 29 BaseParticleEmitter::generate 0 1 2 231
////////////////////////////////////////////////////////////////////
//    Function : generate
//      Access : Public
// Description : parent generation function
////////////////////////////////////////////////////////////////////
66
void BaseParticleEmitter::generate(LPoint3f &pos, LVector3f &vel);

409 17 set_emission_type 4 731 38 BaseParticleEmitter::set_emission_type 0 1 3 735
// Filename: baseParticleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_emission_type
//      Access : Public
// Description : emission type assignment
////////////////////////////////////////////////////////////////////
89
inline void BaseParticleEmitter::set_emission_type(BaseParticleEmitter::emissionType et);

410 13 set_amplitude 4 731 34 BaseParticleEmitter::set_amplitude 0 1 4 230
////////////////////////////////////////////////////////////////////
//    Function : set_amplitude
//      Access : Public
// Description : amplitude assignment
////////////////////////////////////////////////////////////////////
56
inline void BaseParticleEmitter::set_amplitude(float a);

411 20 set_amplitude_spread 4 731 41 BaseParticleEmitter::set_amplitude_spread 0 1 5 244
////////////////////////////////////////////////////////////////////
//    Function : set_amplitude_spread
//      Access : Public
// Description : amplitude spread assignment
////////////////////////////////////////////////////////////////////
64
inline void BaseParticleEmitter::set_amplitude_spread(float as);

412 16 set_offset_force 4 731 37 BaseParticleEmitter::set_offset_force 0 1 6 231
////////////////////////////////////////////////////////////////////
//    Function : set_offset_force
//      Access : Public
// Description : user-defined force
////////////////////////////////////////////////////////////////////
71
inline void BaseParticleEmitter::set_offset_force(LVector3f const &of);

413 26 set_explicit_launch_vector 4 731 47 BaseParticleEmitter::set_explicit_launch_vector 0 1 7 322
// this is a constant force applied to all particles

////////////////////////////////////////////////////////////////////
//    Function : set_explicit_launch_vector
//      Access : Public
// Description : assignment of explicit emission launch vector
////////////////////////////////////////////////////////////////////
82
inline void BaseParticleEmitter::set_explicit_launch_vector(LVector3f const &elv);

414 18 set_radiate_origin 4 731 39 BaseParticleEmitter::set_radiate_origin 0 1 8 312
// this is a constant force applied to all particles

////////////////////////////////////////////////////////////////////
//    Function : set_radiate_origin
//      Access : Public
// Description : assignment of radiate emission origin point
////////////////////////////////////////////////////////////////////
72
inline void BaseParticleEmitter::set_radiate_origin(LPoint3f const &ro);

415 17 get_emission_type 4 731 38 BaseParticleEmitter::get_emission_type 0 1 9 233
////////////////////////////////////////////////////////////////////
//    Function : get_emission_type
//      Access : Public
// Description : emission type query
////////////////////////////////////////////////////////////////////
92
inline BaseParticleEmitter::emissionType BaseParticleEmitter::get_emission_type(void) const;

416 13 get_amplitude 4 731 34 BaseParticleEmitter::get_amplitude 0 1 10 225
////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
// Description : amplitude query
////////////////////////////////////////////////////////////////////
60
inline float BaseParticleEmitter::get_amplitude(void) const;

417 20 get_amplitude_spread 4 731 41 BaseParticleEmitter::get_amplitude_spread 0 1 11 239
////////////////////////////////////////////////////////////////////
//    Function : get_amplitude_spread
//      Access : Public
// Description : amplitude spread query
////////////////////////////////////////////////////////////////////
67
inline float BaseParticleEmitter::get_amplitude_spread(void) const;

418 16 get_offset_force 4 731 37 BaseParticleEmitter::get_offset_force 0 1 12 231
////////////////////////////////////////////////////////////////////
//    Function : get_offset_force
//      Access : Public
// Description : user-defined force
////////////////////////////////////////////////////////////////////
67
inline LVector3f BaseParticleEmitter::get_offset_force(void) const;

419 26 get_explicit_launch_vector 4 731 47 BaseParticleEmitter::get_explicit_launch_vector 0 1 13 264
////////////////////////////////////////////////////////////////////
//    Function : get_explicit_launch_vector
//      Access : Public
// Description : query for explicit emission launch vector
////////////////////////////////////////////////////////////////////
77
inline LVector3f BaseParticleEmitter::get_explicit_launch_vector(void) const;

420 18 get_radiate_origin 4 731 39 BaseParticleEmitter::get_radiate_origin 0 1 14 256
////////////////////////////////////////////////////////////////////
//    Function : get_radiate_origin
//      Access : Public
// Description : query for explicit emission launch vector
////////////////////////////////////////////////////////////////////
68
inline LPoint3f BaseParticleEmitter::get_radiate_origin(void) const;

421 6 output 4 731 27 BaseParticleEmitter::output 0 1 15 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
61
virtual void BaseParticleEmitter::output(ostream &out) const;

422 5 write 4 731 26 BaseParticleEmitter::write 0 2 16 17 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
78
virtual void BaseParticleEmitter::write(ostream &out, int indent = (0)) const;

423 11 RingEmitter 4 734 24 RingEmitter::RingEmitter 0 2 18 19 445
////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
82
RingEmitter::RingEmitter(void);
RingEmitter::RingEmitter(RingEmitter const &copy);

424 10 set_radius 4 734 23 RingEmitter::set_radius 0 1 20 706
// Filename: ringEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
////////////////////////////////////////////////////////////////////
45
inline void RingEmitter::set_radius(float r);

425 9 set_angle 4 734 22 RingEmitter::set_angle 0 1 21 228
////////////////////////////////////////////////////////////////////
//    Function : set_angle
//      Access : public
// Description : angle of elevation set
////////////////////////////////////////////////////////////////////
48
inline void RingEmitter::set_angle(float angle);

426 17 set_radius_spread 4 734 30 RingEmitter::set_radius_spread 0 1 22 231
////////////////////////////////////////////////////////////////////
//    Function : set_radius_spread
//      Access : public
// Description : radius_spread set
////////////////////////////////////////////////////////////////////
57
inline void RingEmitter::set_radius_spread(float spread);

427 20 set_uniform_emission 4 734 33 RingEmitter::set_uniform_emission 0 1 23 252
////////////////////////////////////////////////////////////////////
//    Function : set_uniform_emission
//      Access : public
// Description : uniform_emission set               
////////////////////////////////////////////////////////////////////
68
inline void RingEmitter::set_uniform_emission(int uniform_emission);

428 10 get_radius 4 734 23 RingEmitter::get_radius 0 1 24 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
49
inline float RingEmitter::get_radius(void) const;

429 9 get_angle 4 734 22 RingEmitter::get_angle 0 1 25 228
////////////////////////////////////////////////////////////////////
//    Function : get_angle
//      Access : public
// Description : angle of elevation get
////////////////////////////////////////////////////////////////////
48
inline float RingEmitter::get_angle(void) const;

430 17 get_radius_spread 4 734 30 RingEmitter::get_radius_spread 0 1 26 231
////////////////////////////////////////////////////////////////////
//    Function : get_radius_spread
//      Access : public
// Description : radius_spread get
////////////////////////////////////////////////////////////////////
56
inline float RingEmitter::get_radius_spread(void) const;

431 20 get_uniform_emission 4 734 33 RingEmitter::get_uniform_emission 0 1 27 252
////////////////////////////////////////////////////////////////////
//    Function : get_uniform_emission
//      Access : public
// Description : uniform_emission get               
////////////////////////////////////////////////////////////////////
57
inline int RingEmitter::get_uniform_emission(void) const;

432 10 ArcEmitter 4 735 22 ArcEmitter::ArcEmitter 0 2 28 29 443
////////////////////////////////////////////////////////////////////
//    Function : ArcEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ArcEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
77
ArcEmitter::ArcEmitter(void);
ArcEmitter::ArcEmitter(ArcEmitter const &copy);

433 15 set_start_angle 4 735 27 ArcEmitter::set_start_angle 0 1 30 715
// Filename: arcEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_start_angle
//      Access : public
// Description : start angle set
////////////////////////////////////////////////////////////////////
53
inline void ArcEmitter::set_start_angle(float angle);

434 13 set_end_angle 4 735 25 ArcEmitter::set_end_angle 0 1 31 223
////////////////////////////////////////////////////////////////////
//    Function : set_end_angle
//      Access : public
// Description : end angle set
////////////////////////////////////////////////////////////////////
51
inline void ArcEmitter::set_end_angle(float angle);

435 7 set_arc 4 735 19 ArcEmitter::set_arc 0 1 32 217
////////////////////////////////////////////////////////////////////
//    Function : set_arc
//      Access : public
// Description : arc sweep set
////////////////////////////////////////////////////////////////////
66
inline void ArcEmitter::set_arc(float startAngle, float endAngle);

436 15 get_start_angle 4 735 27 ArcEmitter::get_start_angle 0 1 33 227
////////////////////////////////////////////////////////////////////
//    Function : get_start_angle
//      Access : public
// Description : get start angle
////////////////////////////////////////////////////////////////////
47
inline float ArcEmitter::get_start_angle(void);

437 13 get_end_angle 4 735 25 ArcEmitter::get_end_angle 0 1 34 223
////////////////////////////////////////////////////////////////////
//    Function : get_end_angle
//      Access : public
// Description : get end angle
////////////////////////////////////////////////////////////////////
45
inline float ArcEmitter::get_end_angle(void);

438 17 set_lifespan_base 4 736 38 BaseParticleFactory::set_lifespan_base 0 1 35 693
// Filename: baseParticleFactory.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_base
// Description : public
////////////////////////////////////////////////////////////////////
61
inline void BaseParticleFactory::set_lifespan_base(float lb);

439 19 set_lifespan_spread 4 736 40 BaseParticleFactory::set_lifespan_spread 0 1 36 198
////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_spread
// Description : public
////////////////////////////////////////////////////////////////////
63
inline void BaseParticleFactory::set_lifespan_spread(float ls);

440 13 set_mass_base 4 736 34 BaseParticleFactory::set_mass_base 0 1 37 192
////////////////////////////////////////////////////////////////////
//    Function : set_mass_base
// Description : public
////////////////////////////////////////////////////////////////////
57
inline void BaseParticleFactory::set_mass_base(float mb);

441 15 set_mass_spread 4 736 36 BaseParticleFactory::set_mass_spread 0 1 38 194
////////////////////////////////////////////////////////////////////
//    Function : set_mass_spread
// Description : public
////////////////////////////////////////////////////////////////////
59
inline void BaseParticleFactory::set_mass_spread(float ms);

442 26 set_terminal_velocity_base 4 736 47 BaseParticleFactory::set_terminal_velocity_base 0 1 39 205
////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_base
// Description : public
////////////////////////////////////////////////////////////////////
71
inline void BaseParticleFactory::set_terminal_velocity_base(float tvb);

443 28 set_terminal_velocity_spread 4 736 49 BaseParticleFactory::set_terminal_velocity_spread 0 1 40 207
////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_spread
// Description : public
////////////////////////////////////////////////////////////////////
73
inline void BaseParticleFactory::set_terminal_velocity_spread(float tvs);

444 17 get_lifespan_base 4 736 38 BaseParticleFactory::get_lifespan_base 0 1 41 196
////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_base
// Description : public
////////////////////////////////////////////////////////////////////
64
inline float BaseParticleFactory::get_lifespan_base(void) const;

445 19 get_lifespan_spread 4 736 40 BaseParticleFactory::get_lifespan_spread 0 1 42 198
////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_spread
// Description : public
////////////////////////////////////////////////////////////////////
66
inline float BaseParticleFactory::get_lifespan_spread(void) const;

446 13 get_mass_base 4 736 34 BaseParticleFactory::get_mass_base 0 1 43 192
////////////////////////////////////////////////////////////////////
//    Function : get_mass_base
// Description : public
////////////////////////////////////////////////////////////////////
60
inline float BaseParticleFactory::get_mass_base(void) const;

447 15 get_mass_spread 4 736 36 BaseParticleFactory::get_mass_spread 0 1 44 194
////////////////////////////////////////////////////////////////////
//    Function : get_mass_spread
// Description : public
////////////////////////////////////////////////////////////////////
62
inline float BaseParticleFactory::get_mass_spread(void) const;

448 26 get_terminal_velocity_base 4 736 47 BaseParticleFactory::get_terminal_velocity_base 0 1 45 205
////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_base
// Description : public
////////////////////////////////////////////////////////////////////
73
inline float BaseParticleFactory::get_terminal_velocity_base(void) const;

449 28 get_terminal_velocity_spread 4 736 49 BaseParticleFactory::get_terminal_velocity_spread 0 1 46 207
////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_spread
// Description : public
////////////////////////////////////////////////////////////////////
75
inline float BaseParticleFactory::get_terminal_velocity_spread(void) const;

450 14 alloc_particle 4 736 35 BaseParticleFactory::alloc_particle 0 1 47 0
74
virtual BaseParticle *BaseParticleFactory::alloc_particle(void) const = 0;

451 17 populate_particle 4 736 38 BaseParticleFactory::populate_particle 0 1 48 192
////////////////////////////////////////////////////////////////////
//    Function : make_particle
// Description : public
////////////////////////////////////////////////////////////////////
62
void BaseParticleFactory::populate_particle(BaseParticle *bp);

452 6 output 4 736 27 BaseParticleFactory::output 0 1 49 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
61
virtual void BaseParticleFactory::output(ostream &out) const;

453 5 write 4 736 26 BaseParticleFactory::write 0 2 50 51 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
78
virtual void BaseParticleFactory::write(ostream &out, int indent = (0)) const;

454 15 get_render_node 4 737 37 BaseParticleRenderer::get_render_node 0 1 52 759
// Filename: baseParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node
//       Class : Published
// Description : Query the geomnode pointer
////////////////////////////////////////////////////////////////////
67
inline GeomNode *BaseParticleRenderer::get_render_node(void) const;

455 20 get_render_node_path 4 737 42 BaseParticleRenderer::get_render_node_path 0 1 53 266
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node_path
//       Class : Published
// Description : Query the geomnode pointer
////////////////////////////////////////////////////////////////////
71
inline NodePath BaseParticleRenderer::get_render_node_path(void) const;

456 14 set_alpha_mode 4 737 36 BaseParticleRenderer::set_alpha_mode 0 1 54 216
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_alpha_mode
//      Access : Published
////////////////////////////////////////////////////////////////////
101
inline void BaseParticleRenderer::set_alpha_mode(BaseParticleRenderer::ParticleRendererAlphaMode am);

457 14 get_alpha_mode 4 737 36 BaseParticleRenderer::get_alpha_mode 0 1 55 216
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_alpha_mode
//      Access : Published
////////////////////////////////////////////////////////////////////
104
inline BaseParticleRenderer::ParticleRendererAlphaMode BaseParticleRenderer::get_alpha_mode(void) const;

458 14 set_user_alpha 4 737 36 BaseParticleRenderer::set_user_alpha 0 1 56 266
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_user_alpha
//      Access : Published
// Description : sets alpha for "user" alpha mode
////////////////////////////////////////////////////////////////////
59
inline void BaseParticleRenderer::set_user_alpha(float ua);

459 14 get_user_alpha 4 737 36 BaseParticleRenderer::get_user_alpha 0 1 57 266
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_user_alpha
//      Access : Published
// Description : gets alpha for "user" alpha mode
////////////////////////////////////////////////////////////////////
62
inline float BaseParticleRenderer::get_user_alpha(void) const;

460 20 set_color_blend_mode 4 737 42 BaseParticleRenderer::set_color_blend_mode 0 3 58 59 60 285
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
////////////////////////////////////////////////////////////////////
164
inline void BaseParticleRenderer::set_color_blend_mode(ColorBlendAttrib::Mode bm, ColorBlendAttrib::Operand oa = (O_zero), ColorBlendAttrib::Operand ob = (O_zero));

461 16 set_ignore_scale 4 737 38 BaseParticleRenderer::set_ignore_scale 0 1 61 740
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_ignore_scale
//      Access : Published
// Description : Sets the "ignore scale" flag.  When this is true,
//               particles will be drawn as if they had no scale,
//               regardless of whatever scale might be inherited from
//               above the render node in the scene graph.
//
//               This flag is mainly useful to support legacy code
//               that was written for a very early version of Panda,
//               whose sprite particle renderer had a bug that
//               incorrectly ignored the inherited scale.
////////////////////////////////////////////////////////////////////
63
void BaseParticleRenderer::set_ignore_scale(bool ignore_scale);

462 16 get_ignore_scale 4 737 38 BaseParticleRenderer::get_ignore_scale 0 1 62 310
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_ignore_scale
//      Access : Published
// Description : Returns the "ignore scale" flag.  See
//               set_ignore_scale().
////////////////////////////////////////////////////////////////////
63
inline bool BaseParticleRenderer::get_ignore_scale(void) const;

463 6 output 4 737 28 BaseParticleRenderer::output 0 1 63 303
////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
62
virtual void BaseParticleRenderer::output(ostream &out) const;

464 5 write 4 737 27 BaseParticleRenderer::write 0 2 64 65 302
////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::write
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
79
virtual void BaseParticleRenderer::write(ostream &out, int indent = (0)) const;

465 10 BoxEmitter 4 740 22 BoxEmitter::BoxEmitter 0 2 66 67 443
////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
77
BoxEmitter::BoxEmitter(void);
BoxEmitter::BoxEmitter(BoxEmitter const &copy);

466 13 set_min_bound 4 740 25 BoxEmitter::set_min_bound 0 1 68 717
// Filename: boxEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : Public
// Description : boundary assignment
////////////////////////////////////////////////////////////////////
60
inline void BoxEmitter::set_min_bound(LPoint3f const &vmin);

467 13 set_max_bound 4 740 25 BoxEmitter::set_max_bound 0 1 69 229
////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : Public
// Description : boundary assignment
////////////////////////////////////////////////////////////////////
60
inline void BoxEmitter::set_max_bound(LPoint3f const &vmax);

468 13 get_min_bound 4 740 25 BoxEmitter::get_min_bound 0 1 70 227
////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : Public
// Description : boundary accessor
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoxEmitter::get_min_bound(void) const;

469 13 get_max_bound 4 740 25 BoxEmitter::get_max_bound 0 1 71 227
////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : Public
// Description : boundary accessor
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoxEmitter::get_max_bound(void) const;

470 11 get_color_a 4 741 47 ColorInterpolationFunctionConstant::get_color_a 0 1 72 861
// Filename: colorInterpolationManager.I
// Created by:  joswilso (02Jun05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::get_color_a
//      Access : public
// Description : Returns the primary color of the function.
////////////////////////////////////////////////////////////////////
78
inline LVecBase4f ColorInterpolationFunctionConstant::get_color_a(void) const;

471 11 set_color_a 4 741 47 ColorInterpolationFunctionConstant::set_color_a 0 1 73 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::set_color_a
//      Access : public
// Description : Sets the primary color of the function.
////////////////////////////////////////////////////////////////////
80
inline void ColorInterpolationFunctionConstant::set_color_a(LVecBase4f const c);

472 14 get_class_type 4 741 50 ColorInterpolationFunctionConstant::get_class_type 0 1 74 0
75
static TypeHandle ColorInterpolationFunctionConstant::get_class_type(void);

473 35 ~ColorInterpolationFunctionConstant 4 741 71 ColorInterpolationFunctionConstant::~ColorInterpolationFunctionConstant 0 0 0
78
ColorInterpolationFunctionConstant::~ColorInterpolationFunctionConstant(void);

474 11 get_color_b 4 743 45 ColorInterpolationFunctionLinear::get_color_b 0 1 75 286
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::get_color_b
//      Access : public
// Description : Returns the secondary color of the function.
////////////////////////////////////////////////////////////////////
76
inline LVecBase4f ColorInterpolationFunctionLinear::get_color_b(void) const;

475 11 set_color_b 4 743 45 ColorInterpolationFunctionLinear::set_color_b 0 1 76 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::set_color_b
//      Access : public
// Description : Sets the secondary color of the function.
////////////////////////////////////////////////////////////////////
78
inline void ColorInterpolationFunctionLinear::set_color_b(LVecBase4f const c);

476 14 get_class_type 4 743 48 ColorInterpolationFunctionLinear::get_class_type 0 1 77 0
73
static TypeHandle ColorInterpolationFunctionLinear::get_class_type(void);

477 33 ~ColorInterpolationFunctionLinear 4 743 67 ColorInterpolationFunctionLinear::~ColorInterpolationFunctionLinear 0 0 0
74
ColorInterpolationFunctionLinear::~ColorInterpolationFunctionLinear(void);

478 11 get_width_a 4 744 47 ColorInterpolationFunctionStepwave::get_width_a 0 1 78 286
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_a
//      Access : public
// Description : Returns the primary width of the function.
////////////////////////////////////////////////////////////////////
73
inline float ColorInterpolationFunctionStepwave::get_width_a(void) const;

479 11 get_width_b 4 744 47 ColorInterpolationFunctionStepwave::get_width_b 0 1 79 288
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_b
//      Access : public
// Description : Returns the secondary width of the function.
////////////////////////////////////////////////////////////////////
73
inline float ColorInterpolationFunctionStepwave::get_width_b(void) const;

480 11 set_width_a 4 744 47 ColorInterpolationFunctionStepwave::set_width_a 0 1 80 283
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_a
//      Access : public
// Description : Sets the primary width of the function.
////////////////////////////////////////////////////////////////////
75
inline void ColorInterpolationFunctionStepwave::set_width_a(float const w);

481 11 set_width_b 4 744 47 ColorInterpolationFunctionStepwave::set_width_b 0 1 81 285
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_b
//      Access : public
// Description : Sets the secondary width of the function.
////////////////////////////////////////////////////////////////////
75
inline void ColorInterpolationFunctionStepwave::set_width_b(float const w);

482 14 get_class_type 4 744 50 ColorInterpolationFunctionStepwave::get_class_type 0 1 82 0
75
static TypeHandle ColorInterpolationFunctionStepwave::get_class_type(void);

483 35 ~ColorInterpolationFunctionStepwave 4 744 71 ColorInterpolationFunctionStepwave::~ColorInterpolationFunctionStepwave 0 0 0
78
ColorInterpolationFunctionStepwave::~ColorInterpolationFunctionStepwave(void);

484 10 get_period 4 745 46 ColorInterpolationFunctionSinusoid::get_period 0 1 83 324
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::get_period
//      Access : public
// Description : Returns the time to transition from A to B then back
//               to A again.
////////////////////////////////////////////////////////////////////
72
inline float ColorInterpolationFunctionSinusoid::get_period(void) const;

485 10 set_period 4 745 46 ColorInterpolationFunctionSinusoid::set_period 0 1 84 321
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::set_period
//      Access : public
// Description : Sets the time to transition from A to B then back
//               to A again.
////////////////////////////////////////////////////////////////////
74
inline void ColorInterpolationFunctionSinusoid::set_period(float const p);

486 14 get_class_type 4 745 50 ColorInterpolationFunctionSinusoid::get_class_type 0 1 85 0
75
static TypeHandle ColorInterpolationFunctionSinusoid::get_class_type(void);

487 35 ~ColorInterpolationFunctionSinusoid 4 745 71 ColorInterpolationFunctionSinusoid::~ColorInterpolationFunctionSinusoid 0 0 0
78
ColorInterpolationFunctionSinusoid::~ColorInterpolationFunctionSinusoid(void);

488 25 ColorInterpolationSegment 4 746 52 ColorInterpolationSegment::ColorInterpolationSegment 0 2 86 87 527
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
268
ColorInterpolationSegment::ColorInterpolationSegment(ColorInterpolationFunction *function, float const &time_begin, float const &time_end, bool const is_modulated, int const id);
ColorInterpolationSegment::ColorInterpolationSegment(ColorInterpolationSegment const &s);

489 12 get_function 4 746 39 ColorInterpolationSegment::get_function 0 1 88 389
//  INLINE ColorInterpolationFunction* get_function() const;

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_function
//      Access : public
// Description : Returns a reference to the function object 
//               corresponding to this segment.
////////////////////////////////////////////////////////////////////
80
inline TypedReferenceCount *ColorInterpolationSegment::get_function(void) const;

490 14 get_time_begin 4 746 41 ColorInterpolationSegment::get_time_begin 0 1 89 468
//  INLINE ColorInterpolationFunction* get_function() const;

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_begin
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
67
inline float ColorInterpolationSegment::get_time_begin(void) const;

491 12 get_time_end 4 746 39 ColorInterpolationSegment::get_time_end 0 1 90 401
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_end
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment's effect stops.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
65
inline float ColorInterpolationSegment::get_time_end(void) const;

492 12 is_modulated 4 746 39 ColorInterpolationSegment::is_modulated 0 1 91 290
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_modulated
//      Access : public
// Description : Returns whether the function is additive or modulated.
////////////////////////////////////////////////////////////////////
64
inline bool ColorInterpolationSegment::is_modulated(void) const;

493 6 get_id 4 746 33 ColorInterpolationSegment::get_id 0 1 92 318
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_id
//      Access : public
// Description : Returns the id assigned to this segment by the
//               manager that created it.
////////////////////////////////////////////////////////////////////
57
inline int ColorInterpolationSegment::get_id(void) const;

494 10 is_enabled 4 746 37 ColorInterpolationSegment::is_enabled 0 1 93 291
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_enabled()
//      Access : public
// Description : Returns whether the segments effects are being applied.
////////////////////////////////////////////////////////////////////
62
inline bool ColorInterpolationSegment::is_enabled(void) const;

495 12 set_function 4 746 39 ColorInterpolationSegment::set_function 0 1 94 333
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_function
//      Access : public
// Description : Sets the function that the segment will use for 
//               its interpolation calculations.
////////////////////////////////////////////////////////////////////
90
inline void ColorInterpolationSegment::set_function(ColorInterpolationFunction *function);

496 14 set_time_begin 4 746 41 ColorInterpolationSegment::set_time_begin 0 1 95 403
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_begin
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
72
inline void ColorInterpolationSegment::set_time_begin(float const time);

497 12 set_time_end 4 746 39 ColorInterpolationSegment::set_time_end 0 1 96 397
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_end
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment's effect ends.  It is an interpolated
//               value in the range [0,1].
////////////////////////////////////////////////////////////////////
70
inline void ColorInterpolationSegment::set_time_end(float const time);

498 16 set_is_modulated 4 746 43 ColorInterpolationSegment::set_is_modulated 0 1 97 414
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_is_modulated
//      Access : public
// Description : Sets how the function is applied to the final color.
//               If true, the value is multiplied. If false, the value
//               is simply added. Default is true.
////////////////////////////////////////////////////////////////////
73
inline void ColorInterpolationSegment::set_is_modulated(bool const flag);

499 11 set_enabled 4 746 38 ColorInterpolationSegment::set_enabled 0 1 98 289
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_enabled()
//      Access : public
// Description : Sets whether the segments effects should be applied.
////////////////////////////////////////////////////////////////////
71
inline void ColorInterpolationSegment::set_enabled(bool const enabled);

500 25 ColorInterpolationManager 4 747 52 ColorInterpolationManager::ColorInterpolationManager 0 3 99 100 101 797
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
227
ColorInterpolationManager::ColorInterpolationManager(void);
ColorInterpolationManager::ColorInterpolationManager(LVecBase4f const &c);
ColorInterpolationManager::ColorInterpolationManager(ColorInterpolationManager const &copy);

501 12 add_constant 4 747 39 ColorInterpolationManager::add_constant 0 5 102 103 104 105 106 385
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
////////////////////////////////////////////////////////////////////
182
int ColorInterpolationManager::add_constant(float const time_begin = (0), float const time_end = (1), LVecBase4f const color = ((Colorf(1, 1, 1, 1))), bool const is_modulated = (1));

502 10 add_linear 4 747 37 ColorInterpolationManager::add_linear 0 6 107 108 109 110 111 112 361
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
////////////////////////////////////////////////////////////////////
233
int ColorInterpolationManager::add_linear(float const time_begin = (0), float const time_end = (1), LVecBase4f const color_a = ((Colorf(1, 0, 0, 1))), LVecBase4f const color_b = ((Colorf(0, 1, 0, 1))), bool const is_modulated = (1));

503 12 add_stepwave 4 747 39 ColorInterpolationManager::add_stepwave 0 8 113 114 115 116 117 118 119 120 360
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
////////////////////////////////////////////////////////////////////
293
int ColorInterpolationManager::add_stepwave(float const time_begin = (0), float const time_end = (1), LVecBase4f const color_a = ((Colorf(1, 0, 0, 1))), LVecBase4f const color_b = ((Colorf(0, 1, 0, 1))), float const width_a = (0.5), float const width_b = (0.5), bool const is_modulated = (1));

504 12 add_sinusoid 4 747 39 ColorInterpolationManager::add_sinusoid 0 7 121 122 123 124 125 126 127 400
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
////////////////////////////////////////////////////////////////////
261
int ColorInterpolationManager::add_sinusoid(float const time_begin = (0), float const time_end = (1), LVecBase4f const color_a = ((Colorf(1, 0, 0, 1))), LVecBase4f const color_b = ((Colorf(0, 1, 0, 1))), float const period = (1), bool const is_modulated = (1));

505 17 set_default_color 4 747 44 ColorInterpolationManager::set_default_color 0 1 128 290
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::set_default_color
//      Access : public
// Description : Sets the color to used if no segments are present
////////////////////////////////////////////////////////////////////
78
inline void ColorInterpolationManager::set_default_color(LVecBase4f const &c);

506 11 get_segment 4 747 38 ColorInterpolationManager::get_segment 0 1 129 284
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment
//      Access : public
// Description : Returns the segment that corresponds to 'seg_id'.
////////////////////////////////////////////////////////////////////
91
inline ColorInterpolationSegment *ColorInterpolationManager::get_segment(int const seg_id);

507 19 get_segment_id_list 4 747 46 ColorInterpolationManager::get_segment_id_list 0 1 130 336
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment_id_list
//      Access : public
// Description : Returns a space delimited list of all of the ids
//               in the manager at the time.
////////////////////////////////////////////////////////////////////
81
inline basic_string< char > ColorInterpolationManager::get_segment_id_list(void);

508 13 clear_segment 4 747 40 ColorInterpolationManager::clear_segment 0 1 131 282
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_segment
//      Access : public
// Description : Removes the segment of 'id' from the manager.
////////////////////////////////////////////////////////////////////
64
void ColorInterpolationManager::clear_segment(int const seg_id);

509 16 clear_to_initial 4 747 43 ColorInterpolationManager::clear_to_initial 0 1 132 278
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_to_initial
//      Access : public
// Description : Removes all segments from the manager.
////////////////////////////////////////////////////////////////////
55
void ColorInterpolationManager::clear_to_initial(void);

510 11 DiscEmitter 4 748 24 DiscEmitter::DiscEmitter 0 2 133 134 471
////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
82
DiscEmitter::DiscEmitter(void);
DiscEmitter::DiscEmitter(DiscEmitter const &copy);

511 10 set_radius 4 748 23 DiscEmitter::set_radius 0 1 135 713
// Filename: discEmitter.I
// Created by:  charles (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : radius assignment
////////////////////////////////////////////////////////////////////
45
inline void DiscEmitter::set_radius(float r);

512 15 set_outer_angle 4 748 28 DiscEmitter::set_outer_angle 0 1 136 227
////////////////////////////////////////////////////////////////////
//    Function : set_outer_angle
//      Access : Public
// Description : aoe assignement
////////////////////////////////////////////////////////////////////
56
inline void DiscEmitter::set_outer_angle(float o_angle);

513 15 set_inner_angle 4 748 28 DiscEmitter::set_inner_angle 0 1 137 226
////////////////////////////////////////////////////////////////////
//    Function : set_inner_angle
//      Access : Public
// Description : aoe assignment
////////////////////////////////////////////////////////////////////
56
inline void DiscEmitter::set_inner_angle(float i_angle);

514 19 set_outer_magnitude 4 748 32 DiscEmitter::set_outer_magnitude 0 1 138 230
////////////////////////////////////////////////////////////////////
//    Function : set_outer_magnitude
//      Access : public
// Description : mag assignment
////////////////////////////////////////////////////////////////////
58
inline void DiscEmitter::set_outer_magnitude(float o_mag);

515 19 set_inner_magnitude 4 748 32 DiscEmitter::set_inner_magnitude 0 1 139 230
////////////////////////////////////////////////////////////////////
//    Function : set_inner_magnitude
//      Access : public
// Description : mag assignment
////////////////////////////////////////////////////////////////////
58
inline void DiscEmitter::set_inner_magnitude(float i_mag);

516 17 set_cubic_lerping 4 748 30 DiscEmitter::set_cubic_lerping 0 1 140 224
////////////////////////////////////////////////////////////////////
//    Function : set_cubic_lerping
//      Access : public
// Description : clerp flag
////////////////////////////////////////////////////////////////////
55
inline void DiscEmitter::set_cubic_lerping(bool clerp);

517 10 get_radius 4 748 23 DiscEmitter::get_radius 0 1 141 222
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : Public
// Description : radius accessor
////////////////////////////////////////////////////////////////////
49
inline float DiscEmitter::get_radius(void) const;

518 15 get_outer_angle 4 748 28 DiscEmitter::get_outer_angle 0 1 142 224
////////////////////////////////////////////////////////////////////
//    Function : get_outer_angle
//      Access : Public
// Description : aoe accessor
////////////////////////////////////////////////////////////////////
54
inline float DiscEmitter::get_outer_angle(void) const;

519 15 get_inner_angle 4 748 28 DiscEmitter::get_inner_angle 0 1 143 224
////////////////////////////////////////////////////////////////////
//    Function : get_inner_angle
//      Access : Public
// Description : aoe accessor
////////////////////////////////////////////////////////////////////
54
inline float DiscEmitter::get_inner_angle(void) const;

520 19 get_outer_magnitude 4 748 32 DiscEmitter::get_outer_magnitude 0 1 144 228
////////////////////////////////////////////////////////////////////
//    Function : get_outer_magnitude
//      Access : public
// Description : mag accessor
////////////////////////////////////////////////////////////////////
58
inline float DiscEmitter::get_outer_magnitude(void) const;

521 19 get_inner_magnitude 4 748 32 DiscEmitter::get_inner_magnitude 0 1 145 228
////////////////////////////////////////////////////////////////////
//    Function : get_inner_magnitude
//      Access : public
// Description : mag accessor
////////////////////////////////////////////////////////////////////
58
inline float DiscEmitter::get_inner_magnitude(void) const;

522 17 get_cubic_lerping 4 748 30 DiscEmitter::get_cubic_lerping 0 1 146 233
////////////////////////////////////////////////////////////////////
//    Function : get_cubic_lerping
//      Access : public
// Description : clerp flag accessor
////////////////////////////////////////////////////////////////////
55
inline bool DiscEmitter::get_cubic_lerping(void) const;

523 20 GeomParticleRenderer 4 749 42 GeomParticleRenderer::GeomParticleRenderer 0 4 147 148 149 150 463
////////////////////////////////////////////////////////////////////
//    Function : GeomParticleRenderer
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : GeomParticleRenderer
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
244
GeomParticleRenderer::GeomParticleRenderer(BaseParticleRenderer::ParticleRendererAlphaMode am = (PR_ALPHA_NONE), PandaNode *geom_node = ((PandaNode *)((void *)(0))));
GeomParticleRenderer::GeomParticleRenderer(GeomParticleRenderer const &copy);

524 13 set_geom_node 4 749 35 GeomParticleRenderer::set_geom_node 0 1 151 893
// Filename: geomParticleRenderer.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_geom_node
//    Access : public
////////////////////////////////////////////////////////////////////
// we're forcing a pool resize to remove every node in the vector.
// this is because nodes are reference-counted, and we have to
// explicitly remove them from the node they were previously parented
// to.
65
inline void GeomParticleRenderer::set_geom_node(PandaNode *node);

525 13 get_geom_node 4 749 35 GeomParticleRenderer::get_geom_node 0 1 152 188
////////////////////////////////////////////////////////////////////
//  Function : get_geom_node
//    Access : public
////////////////////////////////////////////////////////////////////
60
inline PandaNode *GeomParticleRenderer::get_geom_node(void);

526 31 get_color_interpolation_manager 4 749 53 GeomParticleRenderer::get_color_interpolation_manager 0 1 153 206
////////////////////////////////////////////////////////////////////
//  Function : get_color_interpolation_manager
//    Access : public
////////////////////////////////////////////////////////////////////
100
inline ColorInterpolationManager *GeomParticleRenderer::get_color_interpolation_manager(void) const;

527 16 set_x_scale_flag 4 749 38 GeomParticleRenderer::set_x_scale_flag 0 1 154 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_x_scale_flag(bool animate_x_ratio);

528 16 set_y_scale_flag 4 749 38 GeomParticleRenderer::set_y_scale_flag 0 1 155 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_y_scale_flag(bool animate_y_ratio);

529 16 set_z_scale_flag 4 749 38 GeomParticleRenderer::set_z_scale_flag 0 1 156 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_z_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_z_scale_flag(bool animate_z_ratio);

530 19 set_initial_x_scale 4 749 41 GeomParticleRenderer::set_initial_x_scale 0 1 157 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void GeomParticleRenderer::set_initial_x_scale(float initial_x_scale);

531 17 set_final_x_scale 4 749 39 GeomParticleRenderer::set_final_x_scale 0 1 158 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_final_x_scale(float final_x_scale);

532 19 set_initial_y_scale 4 749 41 GeomParticleRenderer::set_initial_y_scale 0 1 159 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void GeomParticleRenderer::set_initial_y_scale(float initial_y_scale);

533 17 set_final_y_scale 4 749 39 GeomParticleRenderer::set_final_y_scale 0 1 160 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_final_y_scale(float final_y_scale);

534 19 set_initial_z_scale 4 749 41 GeomParticleRenderer::set_initial_z_scale 0 1 161 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_z_scale
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void GeomParticleRenderer::set_initial_z_scale(float initial_z_scale);

535 17 set_final_z_scale 4 749 39 GeomParticleRenderer::set_final_z_scale 0 1 162 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_z_scale
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void GeomParticleRenderer::set_final_z_scale(float final_z_scale);

536 16 get_x_scale_flag 4 749 38 GeomParticleRenderer::get_x_scale_flag 0 1 163 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline bool GeomParticleRenderer::get_x_scale_flag(void) const;

537 16 get_y_scale_flag 4 749 38 GeomParticleRenderer::get_y_scale_flag 0 1 164 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline bool GeomParticleRenderer::get_y_scale_flag(void) const;

538 16 get_z_scale_flag 4 749 38 GeomParticleRenderer::get_z_scale_flag 0 1 165 211
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_z_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline bool GeomParticleRenderer::get_z_scale_flag(void) const;

539 19 get_initial_x_scale 4 749 41 GeomParticleRenderer::get_initial_x_scale 0 1 166 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float GeomParticleRenderer::get_initial_x_scale(void) const;

540 17 get_final_x_scale 4 749 39 GeomParticleRenderer::get_final_x_scale 0 1 167 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float GeomParticleRenderer::get_final_x_scale(void) const;

541 19 get_initial_y_scale 4 749 41 GeomParticleRenderer::get_initial_y_scale 0 1 168 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float GeomParticleRenderer::get_initial_y_scale(void) const;

542 17 get_final_y_scale 4 749 39 GeomParticleRenderer::get_final_y_scale 0 1 169 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float GeomParticleRenderer::get_final_y_scale(void) const;

543 19 get_initial_z_scale 4 749 41 GeomParticleRenderer::get_initial_z_scale 0 1 170 214
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_z_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float GeomParticleRenderer::get_initial_z_scale(void) const;

544 17 get_final_z_scale 4 749 39 GeomParticleRenderer::get_final_z_scale 0 1 171 212
////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_z_scale
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float GeomParticleRenderer::get_final_z_scale(void) const;

545 11 LineEmitter 4 750 24 LineEmitter::LineEmitter 0 2 172 173 440
////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////
82
LineEmitter::LineEmitter(void);
LineEmitter::LineEmitter(LineEmitter const &copy);

546 13 set_endpoint1 4 750 26 LineEmitter::set_endpoint1 0 1 174 718
// Filename: lineEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_endpoint1
//      Access : Public
// Description : endpoint assignment
////////////////////////////////////////////////////////////////////
62
inline void LineEmitter::set_endpoint1(LPoint3f const &point);

547 13 set_endpoint2 4 750 26 LineEmitter::set_endpoint2 0 1 175 229
////////////////////////////////////////////////////////////////////
//    Function : set_endpoint2
//      Access : Public
// Description : endpoint assignment
////////////////////////////////////////////////////////////////////
62
inline void LineEmitter::set_endpoint2(LPoint3f const &point);

548 13 get_endpoint1 4 750 26 LineEmitter::get_endpoint1 0 1 176 227
////////////////////////////////////////////////////////////////////
//    Function : get_endpoint1
//      Access : Public
// Description : endpoint accessor
////////////////////////////////////////////////////////////////////
55
inline LPoint3f LineEmitter::get_endpoint1(void) const;

549 13 get_endpoint2 4 750 26 LineEmitter::get_endpoint2 0 1 177 227
////////////////////////////////////////////////////////////////////
//    Function : get_endpoint2
//      Access : Public
// Description : endpoint accessor
////////////////////////////////////////////////////////////////////
55
inline LPoint3f LineEmitter::get_endpoint2(void) const;

550 20 LineParticleRenderer 4 751 42 LineParticleRenderer::LineParticleRenderer 0 3 178 179 180 701
////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Default Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Copy Constructor
////////////////////////////////////////////////////////////////////
279
LineParticleRenderer::LineParticleRenderer(void);
LineParticleRenderer::LineParticleRenderer(LineParticleRenderer const &copy);
LineParticleRenderer::LineParticleRenderer(LVecBase4f const &head, LVecBase4f const &tail, BaseParticleRenderer::ParticleRendererAlphaMode alpha_mode);

551 14 set_head_color 4 751 36 LineParticleRenderer::set_head_color 0 1 181 690
// Filename: lineParticleRenderer.I
// Created by:  darren (06Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_head_color
//      Access : public
////////////////////////////////////////////////////////////////////
70
inline void LineParticleRenderer::set_head_color(LVecBase4f const &c);

552 14 set_tail_color 4 751 36 LineParticleRenderer::set_tail_color 0 1 182 193
////////////////////////////////////////////////////////////////////
//    Function : set_tail_color
//      Access : public
////////////////////////////////////////////////////////////////////
70
inline void LineParticleRenderer::set_tail_color(LVecBase4f const &c);

553 14 get_head_color 4 751 36 LineParticleRenderer::get_head_color 0 1 183 193
////////////////////////////////////////////////////////////////////
//    Function : get_head_color
//      Access : public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &LineParticleRenderer::get_head_color(void) const;

554 14 get_tail_color 4 751 36 LineParticleRenderer::get_tail_color 0 1 184 193
////////////////////////////////////////////////////////////////////
//    Function : get_tail_color
//      Access : public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &LineParticleRenderer::get_tail_color(void) const;

555 21 set_line_scale_factor 4 751 43 LineParticleRenderer::set_line_scale_factor 0 1 185 202
////////////////////////////////////////////////////////////////////
//    Function : set_line_scale_factor
// Description : accessor
////////////////////////////////////////////////////////////////////
66
inline void LineParticleRenderer::set_line_scale_factor(float sf);

556 21 get_line_scale_factor 4 751 43 LineParticleRenderer::get_line_scale_factor 0 1 186 202
////////////////////////////////////////////////////////////////////
//    Function : get_line_scale_factor
// Description : accessor
////////////////////////////////////////////////////////////////////
69
inline float LineParticleRenderer::get_line_scale_factor(void) const;

557 14 ParticleSystem 4 752 30 ParticleSystem::ParticleSystem 0 3 187 188 189 488
// constructor/destructor

////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Default Constructor.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Copy Constructor.
////////////////////////////////////////////////////////////////////
112
ParticleSystem::ParticleSystem(int pool_size = (0));
ParticleSystem::ParticleSystem(ParticleSystem const &copy);

558 13 set_pool_size 4 752 29 ParticleSystem::set_pool_size 0 1 190 430
// access/queries

////             ///////////////////////////////////////////////////////
//// SET METHODS ///////////////////////////////////////////////////////
////             ///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_pool_size
//      Access : Public
////////////////////////////////////////////////////////////////////
52
inline void ParticleSystem::set_pool_size(int size);

559 14 set_birth_rate 4 752 30 ParticleSystem::set_birth_rate 0 1 191 212
// access/queries

////////////////////////////////////////////////////////////////////
//    Function : set_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
57
inline void ParticleSystem::set_birth_rate(float new_br);

560 19 set_soft_birth_rate 4 752 35 ParticleSystem::set_soft_birth_rate 0 1 192 198
////////////////////////////////////////////////////////////////////
//    Function : set_soft_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
62
inline void ParticleSystem::set_soft_birth_rate(float new_br);

561 15 set_litter_size 4 752 31 ParticleSystem::set_litter_size 0 1 193 194
////////////////////////////////////////////////////////////////////
//    Function : set_litter_size
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline void ParticleSystem::set_litter_size(int new_ls);

562 17 set_litter_spread 4 752 33 ParticleSystem::set_litter_spread 0 1 194 196
////////////////////////////////////////////////////////////////////
//    Function : set_litter_spread
//      Access : Public
////////////////////////////////////////////////////////////////////
58
inline void ParticleSystem::set_litter_spread(int new_ls);

563 23 set_local_velocity_flag 4 752 39 ParticleSystem::set_local_velocity_flag 0 1 195 202
////////////////////////////////////////////////////////////////////
//    Function : set_local_velocity_flag
//      Access : public
////////////////////////////////////////////////////////////////////
61
inline void ParticleSystem::set_local_velocity_flag(bool lv);

564 27 set_system_grows_older_flag 4 752 43 ParticleSystem::set_system_grows_older_flag 0 1 196 206
////////////////////////////////////////////////////////////////////
//    Function : set_system_grows_older_flag
//      Access : public
////////////////////////////////////////////////////////////////////
66
inline void ParticleSystem::set_system_grows_older_flag(bool sgo);

565 19 set_system_lifespan 4 752 35 ParticleSystem::set_system_lifespan 0 1 197 198
////////////////////////////////////////////////////////////////////
//    Function : set_system_lifespan
//      Access : public
////////////////////////////////////////////////////////////////////
58
inline void ParticleSystem::set_system_lifespan(float sl);

566 14 set_system_age 4 752 30 ParticleSystem::set_system_age 0 1 198 193
////////////////////////////////////////////////////////////////////
//    Function : set_system_age
//      Access : public
////////////////////////////////////////////////////////////////////
54
inline void ParticleSystem::set_system_age(float age);

567 22 set_active_system_flag 4 752 38 ParticleSystem::set_active_system_flag 0 1 199 195
////////////////////////////////////////////////////////////////////
//    Function : set_active_state
//      Access : public
////////////////////////////////////////////////////////////////////
59
inline void ParticleSystem::set_active_system_flag(bool a);

568 23 set_spawn_on_death_flag 4 752 39 ParticleSystem::set_spawn_on_death_flag 0 1 200 202
////////////////////////////////////////////////////////////////////
//    Function : set_spawn_on_death_flag
//      Access : public
////////////////////////////////////////////////////////////////////
62
inline void ParticleSystem::set_spawn_on_death_flag(bool sod);

569 21 set_spawn_render_node 4 752 37 ParticleSystem::set_spawn_render_node 0 1 201 200
////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline void ParticleSystem::set_spawn_render_node(PandaNode *node);

570 26 set_spawn_render_node_path 4 752 42 ParticleSystem::set_spawn_render_node_path 0 1 202 205
////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node_path
//      Access : public
////////////////////////////////////////////////////////////////////
77
inline void ParticleSystem::set_spawn_render_node_path(NodePath const &node);

571 24 set_template_system_flag 4 752 40 ParticleSystem::set_template_system_flag 0 1 203 203
////////////////////////////////////////////////////////////////////
//    Function : set_template_system_flag
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline void ParticleSystem::set_template_system_flag(bool tsf);

572 17 set_render_parent 4 752 33 ParticleSystem::set_render_parent 0 2 204 205 394
////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
////////////////////////////////////////////////////////////////////
132
inline void ParticleSystem::set_render_parent(PandaNode *node);
inline void ParticleSystem::set_render_parent(NodePath const &node);

573 12 set_renderer 4 752 28 ParticleSystem::set_renderer 0 1 206 191
////////////////////////////////////////////////////////////////////
//    Function : set_renderer
//      Access : Public
////////////////////////////////////////////////////////////////////
66
inline void ParticleSystem::set_renderer(BaseParticleRenderer *r);

574 11 set_emitter 4 752 27 ParticleSystem::set_emitter 0 1 207 190
////////////////////////////////////////////////////////////////////
//    Function : set_emitter
//      Access : Public
////////////////////////////////////////////////////////////////////
64
inline void ParticleSystem::set_emitter(BaseParticleEmitter *e);

575 11 set_factory 4 752 27 ParticleSystem::set_factory 0 1 208 190
////////////////////////////////////////////////////////////////////
//    Function : set_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
64
inline void ParticleSystem::set_factory(BaseParticleFactory *f);

576 11 set_floor_z 4 752 27 ParticleSystem::set_floor_z 0 1 209 190
////////////////////////////////////////////////////////////////////
//    Function : set_floor_z
//      Access : Public
////////////////////////////////////////////////////////////////////
49
inline void ParticleSystem::set_floor_z(float z);

577 13 clear_floor_z 4 752 29 ParticleSystem::clear_floor_z 0 1 210 192
////////////////////////////////////////////////////////////////////
//    Function : clear_floor_z
//      Access : Public
////////////////////////////////////////////////////////////////////
48
inline void ParticleSystem::clear_floor_z(void);

578 13 get_pool_size 4 752 29 ParticleSystem::get_pool_size 0 1 211 405
////             /////////////////////////////////////////////////////
//// GET METHODS /////////////////////////////////////////////////////
////             /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_pool_size
//      Access : Public
////////////////////////////////////////////////////////////////////
53
inline int ParticleSystem::get_pool_size(void) const;

579 14 get_birth_rate 4 752 30 ParticleSystem::get_birth_rate 0 1 212 193
////////////////////////////////////////////////////////////////////
//    Function : get_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline float ParticleSystem::get_birth_rate(void) const;

580 19 get_soft_birth_rate 4 752 35 ParticleSystem::get_soft_birth_rate 0 1 213 198
////////////////////////////////////////////////////////////////////
//    Function : get_soft_birth_rate
//      Access : Public
////////////////////////////////////////////////////////////////////
61
inline float ParticleSystem::get_soft_birth_rate(void) const;

581 15 get_litter_size 4 752 31 ParticleSystem::get_litter_size 0 1 214 194
////////////////////////////////////////////////////////////////////
//    Function : get_litter_size
//      Access : Public
////////////////////////////////////////////////////////////////////
55
inline int ParticleSystem::get_litter_size(void) const;

582 17 get_litter_spread 4 752 33 ParticleSystem::get_litter_spread 0 1 215 196
////////////////////////////////////////////////////////////////////
//    Function : get_litter_spread
//      Access : Public
////////////////////////////////////////////////////////////////////
57
inline int ParticleSystem::get_litter_spread(void) const;

583 23 get_local_velocity_flag 4 752 39 ParticleSystem::get_local_velocity_flag 0 1 216 202
////////////////////////////////////////////////////////////////////
//    Function : get_local_velocity_flag
//      Access : public
////////////////////////////////////////////////////////////////////
64
inline bool ParticleSystem::get_local_velocity_flag(void) const;

584 27 get_system_grows_older_flag 4 752 43 ParticleSystem::get_system_grows_older_flag 0 1 217 206
////////////////////////////////////////////////////////////////////
//    Function : get_system_grows_older_flag
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline bool ParticleSystem::get_system_grows_older_flag(void) const;

585 19 get_system_lifespan 4 752 35 ParticleSystem::get_system_lifespan 0 1 218 198
////////////////////////////////////////////////////////////////////
//    Function : get_system_lifespan
//      Access : public
////////////////////////////////////////////////////////////////////
61
inline float ParticleSystem::get_system_lifespan(void) const;

586 14 get_system_age 4 752 30 ParticleSystem::get_system_age 0 1 219 193
////////////////////////////////////////////////////////////////////
//    Function : get_system_age
//      Access : public
////////////////////////////////////////////////////////////////////
56
inline float ParticleSystem::get_system_age(void) const;

587 22 get_active_system_flag 4 752 38 ParticleSystem::get_active_system_flag 0 1 220 195
////////////////////////////////////////////////////////////////////
//    Function : get_active_state
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline bool ParticleSystem::get_active_system_flag(void) const;

588 23 get_spawn_on_death_flag 4 752 39 ParticleSystem::get_spawn_on_death_flag 0 1 221 202
////////////////////////////////////////////////////////////////////
//    Function : get_spawn_on_death_flag
//      Access : public
////////////////////////////////////////////////////////////////////
64
inline bool ParticleSystem::get_spawn_on_death_flag(void) const;

589 21 get_spawn_render_node 4 752 37 ParticleSystem::get_spawn_render_node 0 1 222 200
////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline PandaNode *ParticleSystem::get_spawn_render_node(void) const;

590 26 get_spawn_render_node_path 4 752 42 ParticleSystem::get_spawn_render_node_path 0 1 223 205
////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node_path
//      Access : public
////////////////////////////////////////////////////////////////////
71
inline NodePath ParticleSystem::get_spawn_render_node_path(void) const;

591 22 get_i_was_spawned_flag 4 752 38 ParticleSystem::get_i_was_spawned_flag 0 1 224 201
////////////////////////////////////////////////////////////////////
//    Function : get_i_was_spawned_flag
//      Access : public
////////////////////////////////////////////////////////////////////
63
inline bool ParticleSystem::get_i_was_spawned_flag(void) const;

592 20 get_living_particles 4 752 36 ParticleSystem::get_living_particles 0 1 225 199
////////////////////////////////////////////////////////////////////
//    Function : get_living_particles
//      Access : Public
////////////////////////////////////////////////////////////////////
60
inline int ParticleSystem::get_living_particles(void) const;

593 17 get_render_parent 4 752 33 ParticleSystem::get_render_parent 0 1 226 196
////////////////////////////////////////////////////////////////////
//    Function : get_render_parent
//      Access : public
////////////////////////////////////////////////////////////////////
62
inline NodePath ParticleSystem::get_render_parent(void) const;

594 12 get_renderer 4 752 28 ParticleSystem::get_renderer 0 1 227 191
////////////////////////////////////////////////////////////////////
//    Function : get_renderer
//      Access : Public
////////////////////////////////////////////////////////////////////
70
inline BaseParticleRenderer *ParticleSystem::get_renderer(void) const;

595 11 get_emitter 4 752 27 ParticleSystem::get_emitter 0 1 228 190
////////////////////////////////////////////////////////////////////
//    Function : get_emitter
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline BaseParticleEmitter *ParticleSystem::get_emitter(void) const;

596 11 get_factory 4 752 27 ParticleSystem::get_factory 0 1 229 190
////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline BaseParticleFactory *ParticleSystem::get_factory(void) const;

597 11 get_floor_z 4 752 27 ParticleSystem::get_floor_z 0 1 230 190
////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
////////////////////////////////////////////////////////////////////
53
inline float ParticleSystem::get_floor_z(void) const;

598 18 add_spawn_template 4 752 34 ParticleSystem::add_spawn_template 0 1 231 226
// particle template vector

////////////////////////////////////////////////////////////////////
//    Function : add_spawn_template
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline void ParticleSystem::add_spawn_template(ParticleSystem *ps);

599 21 clear_spawn_templates 4 752 37 ParticleSystem::clear_spawn_templates 0 1 232 200
////////////////////////////////////////////////////////////////////
//    Function : clear_spawn_templates
//      Access : public
////////////////////////////////////////////////////////////////////
56
inline void ParticleSystem::clear_spawn_templates(void);

600 6 render 4 752 22 ParticleSystem::render 0 1 233 861
// methods

// Filename: particleSystem.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : render
//      Access : Public
// Description : Populates an attached GeomNode structure with the
//               particle geometry for rendering.  This is a
//               wrapper for accessability.
////////////////////////////////////////////////////////////////////
41
inline void ParticleSystem::render(void);

601 12 induce_labor 4 752 28 ParticleSystem::induce_labor 0 1 234 305
////////////////////////////////////////////////////////////////////
//    Function : induce_labor
//      Access : Public
// Description : Forces the birth of a particle litter this frame
//               by resetting _tics_since_birth
////////////////////////////////////////////////////////////////////
47
inline void ParticleSystem::induce_labor(void);

602 16 clear_to_initial 4 752 32 ParticleSystem::clear_to_initial 0 1 235 320
////////////////////////////////////////////////////////////////////
//    Function : clear_to_initial
//      Access : Public
// Description : Resets the system to its start state by resizing to 0,
//               then resizing back to current size.
////////////////////////////////////////////////////////////////////
51
inline void ParticleSystem::clear_to_initial(void);

603 9 soft_stop 4 752 25 ParticleSystem::soft_stop 0 2 236 237 284
////////////////////////////////////////////////////////////////////
//    Function : soft_stop
//      Access : Public
// Description : Causes system to use birth rate set by 
//               set_soft_birth_rate()
////////////////////////////////////////////////////////////////////
54
inline void ParticleSystem::soft_stop(float br = (0));

604 10 soft_start 4 752 26 ParticleSystem::soft_start 0 2 238 239 262
////////////////////////////////////////////////////////////////////
//    Function : soft_start
//      Access : Public
// Description : Causes system to use birth rate set by set_birth_rate()
////////////////////////////////////////////////////////////////////
55
inline void ParticleSystem::soft_start(float br = (0));

605 6 update 4 752 22 ParticleSystem::update 0 1 240 0
38
void ParticleSystem::update(float dt);

606 24 write_free_particle_fifo 4 752 40 ParticleSystem::write_free_particle_fifo 0 2 241 242 298
////////////////////////////////////////////////////////////////////
//     Function : write_free_particle_fifo
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
92
virtual void ParticleSystem::write_free_particle_fifo(ostream &out, int indent = (0)) const;

607 21 write_spawn_templates 4 752 37 ParticleSystem::write_spawn_templates 0 2 243 244 295
////////////////////////////////////////////////////////////////////
//     Function : write_spawn_templates
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
89
virtual void ParticleSystem::write_spawn_templates(ostream &out, int indent = (0)) const;

608 5 write 4 752 21 ParticleSystem::write 0 2 245 246 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
73
virtual void ParticleSystem::write(ostream &out, int indent = (0)) const;

609 14 get_class_type 4 752 30 ParticleSystem::get_class_type 0 1 247 0
55
static TypeHandle ParticleSystem::get_class_type(void);

610 21 ParticleSystemManager 4 754 44 ParticleSystemManager::ParticleSystemManager 0 2 248 249 237
////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////
72
ParticleSystemManager::ParticleSystemManager(int every_nth_frame = (1));

611 22 ~ParticleSystemManager 4 754 45 ParticleSystemManager::~ParticleSystemManager 0 0 237
////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : Public, Virtual
// Description : Destructor
////////////////////////////////////////////////////////////////////
60
virtual ParticleSystemManager::~ParticleSystemManager(void);

612 18 set_frame_stepping 4 754 41 ParticleSystemManager::set_frame_stepping 0 1 250 690
// Filename: particleSystemManager.I
// Created by:  charles (28Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_frame_stepping
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void ParticleSystemManager::set_frame_stepping(int every_nth_frame);

613 18 get_frame_stepping 4 754 41 ParticleSystemManager::get_frame_stepping 0 1 251 191
////////////////////////////////////////////////////////////////////
// Function : get_frame_stepping
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline int ParticleSystemManager::get_frame_stepping(void) const;

614 21 attach_particlesystem 4 754 44 ParticleSystemManager::attach_particlesystem 0 1 252 194
////////////////////////////////////////////////////////////////////
// Function : attach_particlesystem
//   Access : public
////////////////////////////////////////////////////////////////////
77
inline void ParticleSystemManager::attach_particlesystem(ParticleSystem *ps);

615 21 remove_particlesystem 4 754 44 ParticleSystemManager::remove_particlesystem 0 1 253 256
////////////////////////////////////////////////////////////////////
//    Function : remove_particlesystem
//      Access : public
// Description : removes a ps from the maintenance list
////////////////////////////////////////////////////////////////////
70
void ParticleSystemManager::remove_particlesystem(ParticleSystem *ps);

616 5 clear 4 754 28 ParticleSystemManager::clear 0 1 254 178
////////////////////////////////////////////////////////////////////
// Function : clear
//   Access : public
////////////////////////////////////////////////////////////////////
47
inline void ParticleSystemManager::clear(void);

617 12 do_particles 4 754 35 ParticleSystemManager::do_particles 0 3 255 256 257 931
////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and render for each ps in the list.
//               this is probably the one you want to use.  Rendering
//               is the expensive operation, and particles REALLY
//               should at least be updated every frame, so nth_frame
//               stepping applies only to rendering.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and an optional render for a specific
//               ps.  Since rendering is the expensive operation, multiple
//               updates could be applied before calling the final render.
////////////////////////////////////////////////////////////////////
145
void ParticleSystemManager::do_particles(float dt);
void ParticleSystemManager::do_particles(float dt, ParticleSystem *ps, bool do_render = (1));

618 6 output 4 754 29 ParticleSystemManager::output 0 1 258 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
63
virtual void ParticleSystemManager::output(ostream &out) const;

619 13 write_ps_list 4 754 36 ParticleSystemManager::write_ps_list 0 2 259 260 287
////////////////////////////////////////////////////////////////////
//     Function : write_ps_list
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
88
virtual void ParticleSystemManager::write_ps_list(ostream &out, int indent = (0)) const;

620 5 write 4 754 28 ParticleSystemManager::write 0 2 261 262 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
80
virtual void ParticleSystemManager::write(ostream &out, int indent = (0)) const;

621 12 PointEmitter 4 755 26 PointEmitter::PointEmitter 0 2 263 264 225
////////////////////////////////////////////////////////////////////
//    Function : PointEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
87
PointEmitter::PointEmitter(void);
PointEmitter::PointEmitter(PointEmitter const &copy);

622 12 set_location 4 755 26 PointEmitter::set_location 0 1 265 709
// Filename: pointEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point
//      Access : public
// Description : point setting
////////////////////////////////////////////////////////////////////
58
inline void PointEmitter::set_location(LPoint3f const &p);

623 12 get_location 4 755 26 PointEmitter::get_location 0 1 266 0
55
inline LPoint3f PointEmitter::get_location(void) const;

624 20 PointParticleFactory 4 756 42 PointParticleFactory::PointParticleFactory 0 2 267 268 471
////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
127
PointParticleFactory::PointParticleFactory(void);
PointParticleFactory::PointParticleFactory(PointParticleFactory const &copy);

625 21 PointParticleRenderer 4 757 44 PointParticleRenderer::PointParticleRenderer 0 8 269 270 271 272 273 274 275 276 473
////////////////////////////////////////////////////////////////////
//    Function : PointParticleRenderer
//      Access : Public
// Description : special constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : PointParticleRenderer
//      Access : Public
// Description : Copy constructor
////////////////////////////////////////////////////////////////////
451
PointParticleRenderer::PointParticleRenderer(PointParticleRenderer const &copy);
PointParticleRenderer::PointParticleRenderer(BaseParticleRenderer::ParticleRendererAlphaMode ad = (PR_ALPHA_NONE), float point_size = (1), PointParticleRenderer::PointParticleBlendType bt = (PP_ONE_COLOR), BaseParticleRenderer::ParticleRendererBlendMethod bm = (PP_NO_BLEND), LVecBase4f const &sc = ((Colorf(1, 1, 1, 1))), LVecBase4f const &ec = ((Colorf(1, 1, 1, 1))));

626 14 set_point_size 4 757 37 PointParticleRenderer::set_point_size 0 1 277 692
// Filename: pointParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point_size
//      Access : Public
////////////////////////////////////////////////////////////////////
68
inline void PointParticleRenderer::set_point_size(float point_size);

627 15 set_start_color 4 757 38 PointParticleRenderer::set_start_color 0 1 278 194
////////////////////////////////////////////////////////////////////
//    Function : set_start_color
//      Access : Public
////////////////////////////////////////////////////////////////////
73
inline void PointParticleRenderer::set_start_color(LVecBase4f const &sc);

628 13 set_end_color 4 757 36 PointParticleRenderer::set_end_color 0 1 279 192
////////////////////////////////////////////////////////////////////
//    Function : set_end_color
//      Access : Public
////////////////////////////////////////////////////////////////////
71
inline void PointParticleRenderer::set_end_color(LVecBase4f const &ec);

629 14 set_blend_type 4 757 37 PointParticleRenderer::set_blend_type 0 1 280 193
////////////////////////////////////////////////////////////////////
//    Function : set_blend_type
//      Access : Public
////////////////////////////////////////////////////////////////////
100
inline void PointParticleRenderer::set_blend_type(PointParticleRenderer::PointParticleBlendType bt);

630 16 set_blend_method 4 757 39 PointParticleRenderer::set_blend_method 0 1 281 195
////////////////////////////////////////////////////////////////////
//    Function : set_blend_method
//      Access : Public
////////////////////////////////////////////////////////////////////
106
inline void PointParticleRenderer::set_blend_method(BaseParticleRenderer::ParticleRendererBlendMethod bm);

631 14 get_point_size 4 757 37 PointParticleRenderer::get_point_size 0 1 282 193
////////////////////////////////////////////////////////////////////
//    Function : get_point_size
//      Access : Public
////////////////////////////////////////////////////////////////////
63
inline float PointParticleRenderer::get_point_size(void) const;

632 15 get_start_color 4 757 38 PointParticleRenderer::get_start_color 0 1 283 194
////////////////////////////////////////////////////////////////////
//    Function : get_start_color
//      Access : Public
////////////////////////////////////////////////////////////////////
76
inline LVecBase4f const &PointParticleRenderer::get_start_color(void) const;

633 13 get_end_color 4 757 36 PointParticleRenderer::get_end_color 0 1 284 192
////////////////////////////////////////////////////////////////////
//    Function : get_end_color
//      Access : Public
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &PointParticleRenderer::get_end_color(void) const;

634 14 get_blend_type 4 757 37 PointParticleRenderer::get_blend_type 0 1 285 193
////////////////////////////////////////////////////////////////////
//    Function : get_blend_type
//      Access : Public
////////////////////////////////////////////////////////////////////
103
inline PointParticleRenderer::PointParticleBlendType PointParticleRenderer::get_blend_type(void) const;

635 16 get_blend_method 4 757 39 PointParticleRenderer::get_blend_method 0 1 286 195
////////////////////////////////////////////////////////////////////
//    Function : get_blend_method
//      Access : Public
////////////////////////////////////////////////////////////////////
109
inline BaseParticleRenderer::ParticleRendererBlendMethod PointParticleRenderer::get_blend_method(void) const;

636 16 RectangleEmitter 4 759 34 RectangleEmitter::RectangleEmitter 0 2 287 288 229
////////////////////////////////////////////////////////////////////
//    Function : RectangleEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
107
RectangleEmitter::RectangleEmitter(void);
RectangleEmitter::RectangleEmitter(RectangleEmitter const &copy);

637 13 set_min_bound 4 759 31 RectangleEmitter::set_min_bound 0 1 289 716
// Filename: rectangleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : public
// Description : boundary set
////////////////////////////////////////////////////////////////////
66
inline void RectangleEmitter::set_min_bound(LPoint2f const &vmin);

638 13 set_max_bound 4 759 31 RectangleEmitter::set_max_bound 0 1 290 222
////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : public
// Description : boundary set
////////////////////////////////////////////////////////////////////
66
inline void RectangleEmitter::set_max_bound(LPoint2f const &vmax);

639 13 get_min_bound 4 759 31 RectangleEmitter::get_min_bound 0 1 291 222
////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : public
// Description : boundary get
////////////////////////////////////////////////////////////////////
60
inline LPoint2f RectangleEmitter::get_min_bound(void) const;

640 13 get_max_bound 4 759 31 RectangleEmitter::get_max_bound 0 1 292 222
////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : public
// Description : boundary get
////////////////////////////////////////////////////////////////////
60
inline LPoint2f RectangleEmitter::get_max_bound(void) const;

641 23 SparkleParticleRenderer 4 760 48 SparkleParticleRenderer::SparkleParticleRenderer 0 3 293 294 295 710
////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Default Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Copy Constructor
////////////////////////////////////////////////////////////////////
404
SparkleParticleRenderer::SparkleParticleRenderer(void);
SparkleParticleRenderer::SparkleParticleRenderer(SparkleParticleRenderer const &copy);
SparkleParticleRenderer::SparkleParticleRenderer(LVecBase4f const &center, LVecBase4f const &edge, float birth_radius, float death_radius, SparkleParticleRenderer::SparkleParticleLifeScale life_scale, BaseParticleRenderer::ParticleRendererAlphaMode alpha_mode);

642 16 set_center_color 4 760 41 SparkleParticleRenderer::set_center_color 0 1 296 696
// Filename: sparkleParticleRenderer.I
// Created by:  charles (27Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_center_color
//      Access : public
////////////////////////////////////////////////////////////////////
75
inline void SparkleParticleRenderer::set_center_color(LVecBase4f const &c);

643 14 set_edge_color 4 760 39 SparkleParticleRenderer::set_edge_color 0 1 297 193
////////////////////////////////////////////////////////////////////
//    Function : set_edge_color
//      Access : public
////////////////////////////////////////////////////////////////////
73
inline void SparkleParticleRenderer::set_edge_color(LVecBase4f const &c);

644 16 set_birth_radius 4 760 41 SparkleParticleRenderer::set_birth_radius 0 1 298 195
////////////////////////////////////////////////////////////////////
//    Function : set_birth_radius
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline void SparkleParticleRenderer::set_birth_radius(float radius);

645 16 set_death_radius 4 760 41 SparkleParticleRenderer::set_death_radius 0 1 299 195
////////////////////////////////////////////////////////////////////
//    Function : set_death_radius
//      Access : public
////////////////////////////////////////////////////////////////////
68
inline void SparkleParticleRenderer::set_death_radius(float radius);

646 14 set_life_scale 4 760 39 SparkleParticleRenderer::set_life_scale 0 1 300 193
////////////////////////////////////////////////////////////////////
//    Function : set_life_scale
//      Access : public
////////////////////////////////////////////////////////////////////
104
inline void SparkleParticleRenderer::set_life_scale(SparkleParticleRenderer::SparkleParticleLifeScale );

647 16 get_center_color 4 760 41 SparkleParticleRenderer::get_center_color 0 1 301 195
////////////////////////////////////////////////////////////////////
//    Function : get_center_color
//      Access : public
////////////////////////////////////////////////////////////////////
79
inline LVecBase4f const &SparkleParticleRenderer::get_center_color(void) const;

648 14 get_edge_color 4 760 39 SparkleParticleRenderer::get_edge_color 0 1 302 193
////////////////////////////////////////////////////////////////////
//    Function : get_edge_color
//      Access : public
////////////////////////////////////////////////////////////////////
77
inline LVecBase4f const &SparkleParticleRenderer::get_edge_color(void) const;

649 16 get_birth_radius 4 760 41 SparkleParticleRenderer::get_birth_radius 0 1 303 195
////////////////////////////////////////////////////////////////////
//    Function : get_birth_radius
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline float SparkleParticleRenderer::get_birth_radius(void) const;

650 16 get_death_radius 4 760 41 SparkleParticleRenderer::get_death_radius 0 1 304 195
////////////////////////////////////////////////////////////////////
//    Function : get_death_radius
//      Access : public
////////////////////////////////////////////////////////////////////
67
inline float SparkleParticleRenderer::get_death_radius(void) const;

651 14 get_life_scale 4 760 39 SparkleParticleRenderer::get_life_scale 0 1 305 193
////////////////////////////////////////////////////////////////////
//    Function : get_life_scale
//      Access : public
////////////////////////////////////////////////////////////////////
109
inline SparkleParticleRenderer::SparkleParticleLifeScale SparkleParticleRenderer::get_life_scale(void) const;

652 20 SphereSurfaceEmitter 4 762 42 SphereSurfaceEmitter::SphereSurfaceEmitter 0 2 306 307 233
////////////////////////////////////////////////////////////////////
//    Function : SphereSurfaceEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
127
SphereSurfaceEmitter::SphereSurfaceEmitter(void);
SphereSurfaceEmitter::SphereSurfaceEmitter(SphereSurfaceEmitter const &copy);

653 10 set_radius 4 762 32 SphereSurfaceEmitter::set_radius 0 1 308 217
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
////////////////////////////////////////////////////////////////////
54
inline void SphereSurfaceEmitter::set_radius(float r);

654 10 get_radius 4 762 32 SphereSurfaceEmitter::get_radius 0 1 309 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
58
inline float SphereSurfaceEmitter::get_radius(void) const;

655 19 SphereVolumeEmitter 4 763 40 SphereVolumeEmitter::SphereVolumeEmitter 0 2 310 311 232
////////////////////////////////////////////////////////////////////
//    Function : SphereVolumeEmitter
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
122
SphereVolumeEmitter::SphereVolumeEmitter(void);
SphereVolumeEmitter::SphereVolumeEmitter(SphereVolumeEmitter const &copy);

656 10 set_radius 4 763 31 SphereVolumeEmitter::set_radius 0 1 312 217
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
////////////////////////////////////////////////////////////////////
53
inline void SphereVolumeEmitter::set_radius(float r);

657 10 get_radius 4 763 31 SphereVolumeEmitter::get_radius 0 1 313 217
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
////////////////////////////////////////////////////////////////////
57
inline float SphereVolumeEmitter::get_radius(void) const;

658 15 set_source_info 4 764 27 SpriteAnim::set_source_info 0 2 314 315 0
169
void SpriteAnim::set_source_info(basic_string< char > const &tex);
void SpriteAnim::set_source_info(basic_string< char > const &model, basic_string< char > const &node);

659 15 get_source_type 4 764 27 SpriteAnim::get_source_type 0 1 316 0
63
SpriteAnim::SourceType SpriteAnim::get_source_type(void) const;

660 14 get_tex_source 4 764 26 SpriteAnim::get_tex_source 0 1 317 0
60
basic_string< char > SpriteAnim::get_tex_source(void) const;

661 16 get_model_source 4 764 28 SpriteAnim::get_model_source 0 1 318 0
62
basic_string< char > SpriteAnim::get_model_source(void) const;

662 15 get_node_source 4 764 27 SpriteAnim::get_node_source 0 1 319 0
61
basic_string< char > SpriteAnim::get_node_source(void) const;

663 14 get_num_frames 4 764 26 SpriteAnim::get_num_frames 0 1 320 0
43
int SpriteAnim::get_num_frames(void) const;

664 11 ~SpriteAnim 4 764 23 SpriteAnim::~SpriteAnim 0 0 0
30
SpriteAnim::~SpriteAnim(void);

665 22 SpriteParticleRenderer 4 766 46 SpriteParticleRenderer::SpriteParticleRenderer 0 3 321 322 323 515
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
174
SpriteParticleRenderer::SpriteParticleRenderer(Texture *tex = ((Texture *)((void *)(0))));
SpriteParticleRenderer::SpriteParticleRenderer(SpriteParticleRenderer const &copy);

666 13 set_from_node 4 766 37 SpriteParticleRenderer::set_from_node 0 4 324 325 326 327 2222
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               This will remove all previously add textures and 
//               resize the renderer to match the new geometry.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : Sets the properties on this renderer from the geometry
//               referenced by the indicated NodePath.  This should be
//               a reference to a GeomNode or a SequenceNode; it
//               extracts out the texture and UV range from the node.
//
//               This will remove all previously added textures and
//               animations.  It will also resize the renderer to match
//               this new geometry.
//
//               If node_path refers to a GeomNode(or has one beneath it)
//               the texture, its size, and UV data will be extracted
//               from that.
//
//               If node_path references a SequenceNode(or has one 
//               beneath it) with multiple GeomNodes beneath it, 
//               the size data will correspond only to the first 
//               GeomNode found with a valid texture, while the texture
//               and UV information will be stored for each individual
//               node.
//
//               If size_from_texels is true, the particle size is
//               based on the number of texels in the source image;
//               otherwise, it is based on the size of the first 
//               polygon found in the node.
//
//               model and node are the two items used to construct
//               node_path.  If the source type is important, use
//               set_from_node(NodePath,string,string,bool) instead.
////////////////////////////////////////////////////////////////////
268
void SpriteParticleRenderer::set_from_node(NodePath const &node_path, bool size_from_texels = (0));
void SpriteParticleRenderer::set_from_node(NodePath const &node_path, basic_string< char > const &model, basic_string< char > const &node, bool size_from_texels = (0));

667 13 add_from_node 4 766 37 SpriteParticleRenderer::add_from_node 0 6 328 329 330 331 332 333 1450
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
////////////////////////////////////////////////////////////////////
306
void SpriteParticleRenderer::add_from_node(NodePath const &node_path, bool size_from_texels = (0), bool resize = (0));
void SpriteParticleRenderer::add_from_node(NodePath const &node_path, basic_string< char > const &model, basic_string< char > const &node, bool size_from_texels = (0), bool resize = (0));

668 11 set_texture 4 766 35 SpriteParticleRenderer::set_texture 0 2 334 335 1089
// Filename: spriteParticleRenderer.I
// Created by:  charles (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_texture
//      Access : Published
// Description : Sets the renderer up to render the entire texture
//               image.  The scale of each particle is based on the
//               size of the texture in each dimension, modified by
//               texels_per_unit.
//
//               Used to set the size of the particles.  Will clear
//               all previously loaded textures and animations.
////////////////////////////////////////////////////////////////////
91
inline void SpriteParticleRenderer::set_texture(Texture *tex, float texels_per_unit = (1));

669 11 add_texture 4 766 35 SpriteParticleRenderer::add_texture 0 3 336 337 338 469
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
////////////////////////////////////////////////////////////////////
110
inline void SpriteParticleRenderer::add_texture(Texture *tex, float texels_per_unit = (1), bool resize = (0));

670 16 remove_animation 4 766 40 SpriteParticleRenderer::remove_animation 0 1 339 291
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::remove_animation
//      Access : Published
// Description : Removes an animation texture set from the renderer.
////////////////////////////////////////////////////////////////////
66
inline void SpriteParticleRenderer::remove_animation(int const n);

671 9 set_ll_uv 4 766 33 SpriteParticleRenderer::set_ll_uv 0 2 340 341 956
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////
172
inline void SpriteParticleRenderer::set_ll_uv(LPoint2f const &ll_uv);
inline void SpriteParticleRenderer::set_ll_uv(LPoint2f const &ll_uv, int const anim, int const frame);

672 9 set_ur_uv 4 766 33 SpriteParticleRenderer::set_ur_uv 0 2 342 343 958
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
////////////////////////////////////////////////////////////////////
172
inline void SpriteParticleRenderer::set_ur_uv(LPoint2f const &ur_uv);
inline void SpriteParticleRenderer::set_ur_uv(LPoint2f const &ur_uv, int const anim, int const frame);

673 8 set_size 4 766 32 SpriteParticleRenderer::set_size 0 1 344 275
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_size
//      Access : public
// Description : Sets the size of each particle in world units.
////////////////////////////////////////////////////////////////////
72
inline void SpriteParticleRenderer::set_size(float width, float height);

674 9 set_color 4 766 33 SpriteParticleRenderer::set_color 0 1 345 206
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_color
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_color(LVecBase4f const &color);

675 16 set_x_scale_flag 4 766 40 SpriteParticleRenderer::set_x_scale_flag 0 1 346 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_x_scale_flag(bool animate_x_ratio);

676 16 set_y_scale_flag 4 766 40 SpriteParticleRenderer::set_y_scale_flag 0 1 347 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_y_scale_flag(bool animate_y_ratio);

677 19 set_anim_angle_flag 4 766 43 SpriteParticleRenderer::set_anim_angle_flag 0 1 348 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_anim_angle_flag
//   Access : public
////////////////////////////////////////////////////////////////////
76
inline void SpriteParticleRenderer::set_anim_angle_flag(bool animate_theta);

678 19 set_initial_x_scale 4 766 43 SpriteParticleRenderer::set_initial_x_scale 0 1 349 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
79
inline void SpriteParticleRenderer::set_initial_x_scale(float initial_x_scale);

679 17 set_final_x_scale 4 766 41 SpriteParticleRenderer::set_final_x_scale 0 1 350 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_final_x_scale(float final_x_scale);

680 19 set_initial_y_scale 4 766 43 SpriteParticleRenderer::set_initial_y_scale 0 1 351 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
79
inline void SpriteParticleRenderer::set_initial_y_scale(float initial_y_scale);

681 17 set_final_y_scale 4 766 41 SpriteParticleRenderer::set_final_y_scale 0 1 352 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
75
inline void SpriteParticleRenderer::set_final_y_scale(float final_y_scale);

682 21 set_nonanimated_theta 4 766 45 SpriteParticleRenderer::set_nonanimated_theta 0 1 353 218
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_nonanimated_theta
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_nonanimated_theta(float theta);

683 22 set_alpha_blend_method 4 766 46 SpriteParticleRenderer::set_alpha_blend_method 0 1 354 219
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_blend_method
//   Access : public
////////////////////////////////////////////////////////////////////
113
inline void SpriteParticleRenderer::set_alpha_blend_method(BaseParticleRenderer::ParticleRendererBlendMethod bm);

684 17 set_alpha_disable 4 766 41 SpriteParticleRenderer::set_alpha_disable 0 1 355 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_disable
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline void SpriteParticleRenderer::set_alpha_disable(bool ad);

685 25 set_animate_frames_enable 4 766 49 SpriteParticleRenderer::set_animate_frames_enable 0 1 356 222
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_enable
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void SpriteParticleRenderer::set_animate_frames_enable(bool an);

686 23 set_animate_frames_rate 4 766 47 SpriteParticleRenderer::set_animate_frames_rate 0 1 357 220
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_rate
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline void SpriteParticleRenderer::set_animate_frames_rate(float r);

687 24 set_animate_frames_index 4 766 48 SpriteParticleRenderer::set_animate_frames_index 0 1 358 289
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_index
//   Access : public
//  Purpose : Sets the frame to be used when animation is disabled.
////////////////////////////////////////////////////////////////////
68
inline void SpriteParticleRenderer::set_animate_frames_index(int i);

688 11 get_texture 4 766 35 SpriteParticleRenderer::get_texture 0 2 359 360 418
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
////////////////////////////////////////////////////////////////////
156
inline Texture *SpriteParticleRenderer::get_texture(void) const;
inline Texture *SpriteParticleRenderer::get_texture(int const anim, int const frame) const;

689 13 get_num_anims 4 766 37 SpriteParticleRenderer::get_num_anims 0 1 361 0
61
inline int SpriteParticleRenderer::get_num_anims(void) const;

690 8 get_anim 4 766 32 SpriteParticleRenderer::get_anim 0 1 362 0
71
inline SpriteAnim *SpriteParticleRenderer::get_anim(int const n) const;

691 13 get_last_anim 4 766 37 SpriteParticleRenderer::get_last_anim 0 1 363 0
69
inline SpriteAnim *SpriteParticleRenderer::get_last_anim(void) const;

692 31 get_color_interpolation_manager 4 766 55 SpriteParticleRenderer::get_color_interpolation_manager 0 1 364 228
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color_interpolation_manager
//   Access : public
////////////////////////////////////////////////////////////////////
102
inline ColorInterpolationManager *SpriteParticleRenderer::get_color_interpolation_manager(void) const;

693 9 get_ll_uv 4 766 33 SpriteParticleRenderer::get_ll_uv 0 2 365 366 632
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
////////////////////////////////////////////////////////////////////
152
inline LPoint2f SpriteParticleRenderer::get_ll_uv(void) const;
inline LPoint2f SpriteParticleRenderer::get_ll_uv(int const anim, int const frame) const;

694 9 get_ur_uv 4 766 33 SpriteParticleRenderer::get_ur_uv 0 2 367 368 633
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ur_uv().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the upper-right corner;
//               see set_ur_uv().
////////////////////////////////////////////////////////////////////
152
inline LPoint2f SpriteParticleRenderer::get_ur_uv(void) const;
inline LPoint2f SpriteParticleRenderer::get_ur_uv(int const anim, int const frame) const;

695 9 get_width 4 766 33 SpriteParticleRenderer::get_width 0 1 369 280
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_width
//      Access : public
// Description : Returns the width of each particle in world units.
////////////////////////////////////////////////////////////////////
59
inline float SpriteParticleRenderer::get_width(void) const;

696 10 get_height 4 766 34 SpriteParticleRenderer::get_height 0 1 370 282
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_height
//      Access : public
// Description : Returns the height of each particle in world units.
////////////////////////////////////////////////////////////////////
60
inline float SpriteParticleRenderer::get_height(void) const;

697 9 get_color 4 766 33 SpriteParticleRenderer::get_color 0 1 371 206
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color
//   Access : public
////////////////////////////////////////////////////////////////////
64
inline LVecBase4f SpriteParticleRenderer::get_color(void) const;

698 16 get_x_scale_flag 4 766 40 SpriteParticleRenderer::get_x_scale_flag 0 1 372 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_x_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline bool SpriteParticleRenderer::get_x_scale_flag(void) const;

699 16 get_y_scale_flag 4 766 40 SpriteParticleRenderer::get_y_scale_flag 0 1 373 213
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_y_scale_flag
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline bool SpriteParticleRenderer::get_y_scale_flag(void) const;

700 19 get_anim_angle_flag 4 766 43 SpriteParticleRenderer::get_anim_angle_flag 0 1 374 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_anim_angle_flag
//   Access : public
////////////////////////////////////////////////////////////////////
68
inline bool SpriteParticleRenderer::get_anim_angle_flag(void) const;

701 19 get_initial_x_scale 4 766 43 SpriteParticleRenderer::get_initial_x_scale 0 1 375 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline float SpriteParticleRenderer::get_initial_x_scale(void) const;

702 17 get_final_x_scale 4 766 41 SpriteParticleRenderer::get_final_x_scale 0 1 376 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_x_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float SpriteParticleRenderer::get_final_x_scale(void) const;

703 19 get_initial_y_scale 4 766 43 SpriteParticleRenderer::get_initial_y_scale 0 1 377 216
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
69
inline float SpriteParticleRenderer::get_initial_y_scale(void) const;

704 17 get_final_y_scale 4 766 41 SpriteParticleRenderer::get_final_y_scale 0 1 378 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_y_scale
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline float SpriteParticleRenderer::get_final_y_scale(void) const;

705 21 get_nonanimated_theta 4 766 45 SpriteParticleRenderer::get_nonanimated_theta 0 1 379 218
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_nonanimated_theta
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline float SpriteParticleRenderer::get_nonanimated_theta(void) const;

706 22 get_alpha_blend_method 4 766 46 SpriteParticleRenderer::get_alpha_blend_method 0 1 380 219
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_blend_method
//   Access : public
////////////////////////////////////////////////////////////////////
116
inline BaseParticleRenderer::ParticleRendererBlendMethod SpriteParticleRenderer::get_alpha_blend_method(void) const;

707 17 get_alpha_disable 4 766 41 SpriteParticleRenderer::get_alpha_disable 0 1 381 214
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_disable
//   Access : public
////////////////////////////////////////////////////////////////////
66
inline bool SpriteParticleRenderer::get_alpha_disable(void) const;

708 25 get_animate_frames_enable 4 766 49 SpriteParticleRenderer::get_animate_frames_enable 0 1 382 222
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_enable
//   Access : public
////////////////////////////////////////////////////////////////////
74
inline bool SpriteParticleRenderer::get_animate_frames_enable(void) const;

709 23 get_animate_frames_rate 4 766 47 SpriteParticleRenderer::get_animate_frames_rate 0 1 383 220
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_rate
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline float SpriteParticleRenderer::get_animate_frames_rate(void) const;

710 24 get_animate_frames_index 4 766 48 SpriteParticleRenderer::get_animate_frames_index 0 1 384 289
////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_index
//   Access : public
//  Purpose : Gets the frame to be used when animation is disabled.
////////////////////////////////////////////////////////////////////
72
inline int SpriteParticleRenderer::get_animate_frames_index(void) const;

711 18 TangentRingEmitter 4 767 38 TangentRingEmitter::TangentRingEmitter 0 2 385 386 234
////////////////////////////////////////////////////////////////////
//     Function : tangentRingEmitter
//       Access : public
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
117
TangentRingEmitter::TangentRingEmitter(void);
TangentRingEmitter::TangentRingEmitter(TangentRingEmitter const &copy);

712 10 set_radius 4 767 30 TangentRingEmitter::set_radius 0 1 387 681
// Filename: tangentRingEmitter.I
// Created by:  charles (25Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_radius
//    Access : public
////////////////////////////////////////////////////////////////////
52
inline void TangentRingEmitter::set_radius(float r);

713 17 set_radius_spread 4 767 37 TangentRingEmitter::set_radius_spread 0 1 388 192
////////////////////////////////////////////////////////////////////
//  Function : set_radius_spread
//    Access : public
////////////////////////////////////////////////////////////////////
64
inline void TangentRingEmitter::set_radius_spread(float spread);

714 10 get_radius 4 767 30 TangentRingEmitter::get_radius 0 1 389 185
////////////////////////////////////////////////////////////////////
//  Function : get_radius
//    Access : public
////////////////////////////////////////////////////////////////////
56
inline float TangentRingEmitter::get_radius(void) const;

715 17 get_radius_spread 4 767 37 TangentRingEmitter::get_radius_spread 0 1 390 192
////////////////////////////////////////////////////////////////////
//  Function : get_radius_spread
//    Access : public
////////////////////////////////////////////////////////////////////
63
inline float TangentRingEmitter::get_radius_spread(void) const;

716 20 ZSpinParticleFactory 4 768 42 ZSpinParticleFactory::ZSpinParticleFactory 0 2 391 392 463
////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
127
ZSpinParticleFactory::ZSpinParticleFactory(void);
ZSpinParticleFactory::ZSpinParticleFactory(ZSpinParticleFactory const &copy);

717 17 set_initial_angle 4 768 39 ZSpinParticleFactory::set_initial_angle 0 1 393 688
// Filename: zSpinParticleFactory.I
// Created by:  charles (16Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_initial_angle
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline void ZSpinParticleFactory::set_initial_angle(float angle);

718 15 set_final_angle 4 768 37 ZSpinParticleFactory::set_final_angle 0 1 394 188
////////////////////////////////////////////////////////////////////
// Function : set_final_angle
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline void ZSpinParticleFactory::set_final_angle(float angle);

719 24 set_initial_angle_spread 4 768 46 ZSpinParticleFactory::set_initial_angle_spread 0 1 395 197
////////////////////////////////////////////////////////////////////
// Function : set_initial_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
73
inline void ZSpinParticleFactory::set_initial_angle_spread(float spread);

720 22 set_final_angle_spread 4 768 44 ZSpinParticleFactory::set_final_angle_spread 0 1 396 195
////////////////////////////////////////////////////////////////////
// Function : set_final_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
71
inline void ZSpinParticleFactory::set_final_angle_spread(float spread);

721 17 get_initial_angle 4 768 39 ZSpinParticleFactory::get_initial_angle 0 1 397 190
////////////////////////////////////////////////////////////////////
// Function : get_initial_angle
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline float ZSpinParticleFactory::get_initial_angle(void) const;

722 15 get_final_angle 4 768 37 ZSpinParticleFactory::get_final_angle 0 1 398 188
////////////////////////////////////////////////////////////////////
// Function : get_final_angle
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline float ZSpinParticleFactory::get_final_angle(void) const;

723 24 get_initial_angle_spread 4 768 46 ZSpinParticleFactory::get_initial_angle_spread 0 1 399 197
////////////////////////////////////////////////////////////////////
// Function : get_initial_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
72
inline float ZSpinParticleFactory::get_initial_angle_spread(void) const;

724 22 get_final_angle_spread 4 768 44 ZSpinParticleFactory::get_final_angle_spread 0 1 400 195
////////////////////////////////////////////////////////////////////
// Function : get_final_angle_spread
//   Access : public
////////////////////////////////////////////////////////////////////
70
inline float ZSpinParticleFactory::get_final_angle_spread(void) const;

725 20 set_angular_velocity 4 768 42 ZSpinParticleFactory::set_angular_velocity 0 1 401 0
64
inline void ZSpinParticleFactory::set_angular_velocity(float v);

726 20 get_angular_velocity 4 768 42 ZSpinParticleFactory::get_angular_velocity 0 1 402 193
////////////////////////////////////////////////////////////////////
// Function : get_angular_velocity
//   Access : public
////////////////////////////////////////////////////////////////////
68
inline float ZSpinParticleFactory::get_angular_velocity(void) const;

727 27 set_angular_velocity_spread 4 768 49 ZSpinParticleFactory::set_angular_velocity_spread 0 1 403 0
76
inline void ZSpinParticleFactory::set_angular_velocity_spread(float spread);

728 27 get_angular_velocity_spread 4 768 49 ZSpinParticleFactory::get_angular_velocity_spread 0 1 404 0
75
inline float ZSpinParticleFactory::get_angular_velocity_spread(void) const;

729 23 enable_angular_velocity 4 768 45 ZSpinParticleFactory::enable_angular_velocity 0 1 405 0
73
inline void ZSpinParticleFactory::enable_angular_velocity(bool bEnabled);

730 28 get_angular_velocity_enabled 4 768 50 ZSpinParticleFactory::get_angular_velocity_enabled 0 1 406 0
75
inline bool ZSpinParticleFactory::get_angular_velocity_enabled(void) const;

406
1 14 Dtool_KBUAq9K2 7 4 769 0 14 Dtool_KBUAq9K2 0 1 4 this 3 769  
2 14 Dtool_KBUAQvUs 4 5 774 0 14 Dtool_KBUAQvUs 231 ////////////////////////////////////////////////////////////////////
//    Function : generate
//      Access : Public
// Description : parent generation function
//////////////////////////////////////////////////////////////////// 3 4 this 3 769  3 pos 1 770  3 vel 1 772  
3 14 Dtool_KBUAvAPb 4 6 774 0 14 Dtool_KBUAvAPb 735 // Filename: baseParticleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_emission_type
//      Access : Public
// Description : emission type assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  2 et 1 733  
4 14 Dtool_KBUA014P 4 7 774 0 14 Dtool_KBUA014P 230 ////////////////////////////////////////////////////////////////////
//    Function : set_amplitude
//      Access : Public
// Description : amplitude assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  1 a 1 775  
5 14 Dtool_KBUAGfat 4 8 774 0 14 Dtool_KBUAGfat 244 ////////////////////////////////////////////////////////////////////
//    Function : set_amplitude_spread
//      Access : Public
// Description : amplitude spread assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  2 as 1 775  
6 14 Dtool_KBUAJolc 4 9 774 0 14 Dtool_KBUAJolc 231 ////////////////////////////////////////////////////////////////////
//    Function : set_offset_force
//      Access : Public
// Description : user-defined force
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  2 of 1 776  
7 14 Dtool_KBUA4_f_ 4 10 774 0 14 Dtool_KBUA4_f_ 268 ////////////////////////////////////////////////////////////////////
//    Function : set_explicit_launch_vector
//      Access : Public
// Description : assignment of explicit emission launch vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  3 elv 1 776  
8 14 Dtool_KBUAegGF 4 11 774 0 14 Dtool_KBUAegGF 258 ////////////////////////////////////////////////////////////////////
//    Function : set_radiate_origin
//      Access : Public
// Description : assignment of radiate emission origin point
//////////////////////////////////////////////////////////////////// 2 4 this 3 769  2 ro 1 778  
9 14 Dtool_KBUA_Hj6 6 12 733 0 14 Dtool_KBUA_Hj6 233 ////////////////////////////////////////////////////////////////////
//    Function : get_emission_type
//      Access : Public
// Description : emission type query
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
10 14 Dtool_KBUAyJT9 6 13 775 0 14 Dtool_KBUAyJT9 225 ////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
// Description : amplitude query
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
11 14 Dtool_KBUA_DLN 6 14 775 0 14 Dtool_KBUA_DLN 239 ////////////////////////////////////////////////////////////////////
//    Function : get_amplitude_spread
//      Access : Public
// Description : amplitude spread query
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
12 14 Dtool_KBUAgc7B 7 15 772 0 14 Dtool_KBUAgc7B 231 ////////////////////////////////////////////////////////////////////
//    Function : get_offset_force
//      Access : Public
// Description : user-defined force
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
13 14 Dtool_KBUASHW0 7 16 772 0 14 Dtool_KBUASHW0 264 ////////////////////////////////////////////////////////////////////
//    Function : get_explicit_launch_vector
//      Access : Public
// Description : query for explicit emission launch vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
14 14 Dtool_KBUAvPd8 7 17 770 0 14 Dtool_KBUAvPd8 256 ////////////////////////////////////////////////////////////////////
//    Function : get_radiate_origin
//      Access : Public
// Description : query for explicit emission launch vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
15 14 Dtool_KBUAKdyZ 4 18 774 0 14 Dtool_KBUAKdyZ 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 780  3 out 1 782  
16 14 Dtool_KBUAkUM2 4 19 774 0 14 Dtool_KBUAkUM2 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 780  3 out 1 782  6 indent 1 784  
17 14 Dtool_KBUAWxub 4 19 774 0 14 Dtool_KBUAWxub 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 780  3 out 1 782  
18 14 Dtool_KBUA__j2 7 21 785 0 14 Dtool_KBUA__j2 219 ////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
19 14 Dtool_KBUAhrbu 7 21 785 0 14 Dtool_KBUAhrbu 224 ////////////////////////////////////////////////////////////////////
//    Function : RingEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 786  
20 14 Dtool_KBUAHjXu 4 22 774 0 14 Dtool_KBUAHjXu 706 // Filename: ringEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
//////////////////////////////////////////////////////////////////// 2 4 this 3 785  1 r 1 775  
21 14 Dtool_KBUA23Hl 4 23 774 0 14 Dtool_KBUA23Hl 228 ////////////////////////////////////////////////////////////////////
//    Function : set_angle
//      Access : public
// Description : angle of elevation set
//////////////////////////////////////////////////////////////////// 2 4 this 3 785  5 angle 1 775  
22 14 Dtool_KBUAGOEK 4 24 774 0 14 Dtool_KBUAGOEK 231 ////////////////////////////////////////////////////////////////////
//    Function : set_radius_spread
//      Access : public
// Description : radius_spread set
//////////////////////////////////////////////////////////////////// 2 4 this 3 785  6 spread 1 775  
23 14 Dtool_KBUA6UCL 4 25 774 0 14 Dtool_KBUA6UCL 252 ////////////////////////////////////////////////////////////////////
//    Function : set_uniform_emission
//      Access : public
// Description : uniform_emission set               
//////////////////////////////////////////////////////////////////// 2 4 this 3 785  16 uniform_emission 1 784  
24 14 Dtool_KBUA32I_ 6 26 775 0 14 Dtool_KBUA32I_ 217 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
//////////////////////////////////////////////////////////////////// 1 4 this 3 786  
25 14 Dtool_KBUARZ9k 6 27 775 0 14 Dtool_KBUARZ9k 228 ////////////////////////////////////////////////////////////////////
//    Function : get_angle
//      Access : public
// Description : angle of elevation get
//////////////////////////////////////////////////////////////////// 1 4 this 3 786  
26 14 Dtool_KBUAAgOJ 6 28 775 0 14 Dtool_KBUAAgOJ 231 ////////////////////////////////////////////////////////////////////
//    Function : get_radius_spread
//      Access : public
// Description : radius_spread get
//////////////////////////////////////////////////////////////////// 1 4 this 3 786  
27 14 Dtool_KBUAoIQL 6 29 784 0 14 Dtool_KBUAoIQL 252 ////////////////////////////////////////////////////////////////////
//    Function : get_uniform_emission
//      Access : public
// Description : uniform_emission get               
//////////////////////////////////////////////////////////////////// 1 4 this 3 786  
28 14 Dtool_KBUALfIe 7 31 788 0 14 Dtool_KBUALfIe 218 ////////////////////////////////////////////////////////////////////
//    Function : ArcEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
29 14 Dtool_KBUANiv1 7 31 788 0 14 Dtool_KBUANiv1 223 ////////////////////////////////////////////////////////////////////
//    Function : ArcEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 789  
30 14 Dtool_KBUAvrI1 4 32 774 0 14 Dtool_KBUAvrI1 715 // Filename: arcEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_start_angle
//      Access : public
// Description : start angle set
//////////////////////////////////////////////////////////////////// 2 4 this 3 788  5 angle 1 775  
31 14 Dtool_KBUAkNlY 4 33 774 0 14 Dtool_KBUAkNlY 223 ////////////////////////////////////////////////////////////////////
//    Function : set_end_angle
//      Access : public
// Description : end angle set
//////////////////////////////////////////////////////////////////// 2 4 this 3 788  5 angle 1 775  
32 14 Dtool_KBUAAhqa 4 34 774 0 14 Dtool_KBUAAhqa 217 ////////////////////////////////////////////////////////////////////
//    Function : set_arc
//      Access : public
// Description : arc sweep set
//////////////////////////////////////////////////////////////////// 3 4 this 3 788  10 startAngle 1 775  8 endAngle 1 775  
33 14 Dtool_KBUAQ4vE 6 35 775 0 14 Dtool_KBUAQ4vE 227 ////////////////////////////////////////////////////////////////////
//    Function : get_start_angle
//      Access : public
// Description : get start angle
//////////////////////////////////////////////////////////////////// 1 4 this 3 788  
34 14 Dtool_KBUARD_y 6 36 775 0 14 Dtool_KBUARD_y 223 ////////////////////////////////////////////////////////////////////
//    Function : get_end_angle
//      Access : public
// Description : get end angle
//////////////////////////////////////////////////////////////////// 1 4 this 3 788  
35 14 Dtool_KBUAiQuU 4 38 774 0 14 Dtool_KBUAiQuU 693 // Filename: baseParticleFactory.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_base
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 lb 1 775  
36 14 Dtool_KBUAdQHH 4 39 774 0 14 Dtool_KBUAdQHH 198 ////////////////////////////////////////////////////////////////////
//    Function : set_lifespan_spread
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 ls 1 775  
37 14 Dtool_KBUAbu3l 4 40 774 0 14 Dtool_KBUAbu3l 192 ////////////////////////////////////////////////////////////////////
//    Function : set_mass_base
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 mb 1 775  
38 14 Dtool_KBUANeQM 4 41 774 0 14 Dtool_KBUANeQM 194 ////////////////////////////////////////////////////////////////////
//    Function : set_mass_spread
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 ms 1 775  
39 14 Dtool_KBUAWNEZ 4 42 774 0 14 Dtool_KBUAWNEZ 205 ////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_base
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  3 tvb 1 775  
40 14 Dtool_KBUAANWX 4 43 774 0 14 Dtool_KBUAANWX 207 ////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity_spread
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  3 tvs 1 775  
41 14 Dtool_KBUAtgu1 6 44 775 0 14 Dtool_KBUAtgu1 196 ////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_base
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
42 14 Dtool_KBUA99k2 6 45 775 0 14 Dtool_KBUA99k2 198 ////////////////////////////////////////////////////////////////////
//    Function : get_lifespan_spread
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
43 14 Dtool_KBUA2EQT 6 46 775 0 14 Dtool_KBUA2EQT 192 ////////////////////////////////////////////////////////////////////
//    Function : get_mass_base
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
44 14 Dtool_KBUA_lih 6 47 775 0 14 Dtool_KBUA_lih 194 ////////////////////////////////////////////////////////////////////
//    Function : get_mass_spread
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
45 14 Dtool_KBUACoqe 6 48 775 0 14 Dtool_KBUACoqe 205 ////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_base
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
46 14 Dtool_KBUAm_x2 6 49 775 0 14 Dtool_KBUAm_x2 207 ////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity_spread
// Description : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 792  
47 14 Dtool_KBUAsnkF 6 50 794 0 14 Dtool_KBUAsnkF 0 1 4 this 3 792  
48 14 Dtool_KBUAwNK_ 4 51 774 0 14 Dtool_KBUAwNK_ 192 ////////////////////////////////////////////////////////////////////
//    Function : make_particle
// Description : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 791  2 bp 1 794  
49 14 Dtool_KBUAOcSl 4 52 774 0 14 Dtool_KBUAOcSl 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  3 out 1 782  
50 14 Dtool_KBUAtDsB 4 53 774 0 14 Dtool_KBUAtDsB 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 792  3 out 1 782  6 indent 1 784  
51 14 Dtool_KBUAFUOn 4 53 774 0 14 Dtool_KBUAFUOn 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 792  3 out 1 782  
52 14 Dtool_KBUAnoTT 7 57 799 0 14 Dtool_KBUAnoTT 759 // Filename: baseParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node
//       Class : Published
// Description : Query the geomnode pointer
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
53 14 Dtool_KBUAwSZD 7 58 801 0 14 Dtool_KBUAwSZD 266 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_render_node_path
//       Class : Published
// Description : Query the geomnode pointer
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
54 14 Dtool_KBUA0p5w 4 59 774 0 14 Dtool_KBUA0p5w 216 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_alpha_mode
//      Access : Published
//////////////////////////////////////////////////////////////////// 2 4 this 3 802  2 am 1 738  
55 14 Dtool_KBUAcz17 6 60 738 0 14 Dtool_KBUAcz17 216 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_alpha_mode
//      Access : Published
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
56 14 Dtool_KBUAmPHY 4 61 774 0 14 Dtool_KBUAmPHY 266 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_user_alpha
//      Access : Published
// Description : sets alpha for "user" alpha mode
//////////////////////////////////////////////////////////////////// 2 4 this 3 802  2 ua 1 775  
57 14 Dtool_KBUAk2V9 6 62 775 0 14 Dtool_KBUAk2V9 266 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_user_alpha
//      Access : Published
// Description : gets alpha for "user" alpha mode
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
58 14 Dtool_KBUAZxa6 4 63 774 0 14 Dtool_KBUAZxa6 285 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
//////////////////////////////////////////////////////////////////// 4 4 this 3 802  2 bm 1 803  2 oa 1 805  2 ob 1 805  
59 14 Dtool_KBUApO_p 4 63 774 0 14 Dtool_KBUApO_p 285 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
//////////////////////////////////////////////////////////////////// 3 4 this 3 802  2 bm 1 803  2 oa 1 805  
60 14 Dtool_KBUAtvuc 4 63 774 0 14 Dtool_KBUAtvuc 285 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_color_blend_mode
//      Access : Published
// Description : sets the ColorBlendAttrib on the _render_node
//////////////////////////////////////////////////////////////////// 2 4 this 3 802  2 bm 1 803  
61 14 Dtool_KBUAvavp 4 64 774 0 14 Dtool_KBUAvavp 740 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::set_ignore_scale
//      Access : Published
// Description : Sets the "ignore scale" flag.  When this is true,
//               particles will be drawn as if they had no scale,
//               regardless of whatever scale might be inherited from
//               above the render node in the scene graph.
//
//               This flag is mainly useful to support legacy code
//               that was written for a very early version of Panda,
//               whose sprite particle renderer had a bug that
//               incorrectly ignored the inherited scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 802  12 ignore_scale 1 806  
62 14 Dtool_KBUAA22s 6 65 806 0 14 Dtool_KBUAA22s 310 ////////////////////////////////////////////////////////////////////
//    Function : BaseParticleRender::get_ignore_scale
//      Access : Published
// Description : Returns the "ignore scale" flag.  See
//               set_ignore_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 797  
63 14 Dtool_KBUAjYBa 4 66 774 0 14 Dtool_KBUAjYBa 303 ////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::output
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 797  3 out 1 782  
64 14 Dtool_KBUAGvEn 4 67 774 0 14 Dtool_KBUAGvEn 302 ////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::write
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 797  3 out 1 782  6 indent 1 784  
65 14 Dtool_KBUALLsX 4 67 774 0 14 Dtool_KBUALLsX 302 ////////////////////////////////////////////////////////////////////
//     Function : BaseParticleRender::write
//       Access : Published
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 797  3 out 1 782  
66 14 Dtool_KBUAkwIq 7 69 807 0 14 Dtool_KBUAkwIq 218 ////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
67 14 Dtool_KBUA42fc 7 69 807 0 14 Dtool_KBUA42fc 223 ////////////////////////////////////////////////////////////////////
//    Function : BoxEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 808  
68 14 Dtool_KBUAfUdv 4 70 774 0 14 Dtool_KBUAfUdv 717 // Filename: boxEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : Public
// Description : boundary assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 807  4 vmin 1 778  
69 14 Dtool_KBUAhptT 4 71 774 0 14 Dtool_KBUAhptT 229 ////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : Public
// Description : boundary assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 807  4 vmax 1 778  
70 14 Dtool_KBUAtfR4 7 72 770 0 14 Dtool_KBUAtfR4 227 ////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : Public
// Description : boundary accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 808  
71 14 Dtool_KBUAgZgc 7 73 770 0 14 Dtool_KBUAgZgc 227 ////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : Public
// Description : boundary accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 808  
72 14 Dtool_KBUATq1Y 7 76 813 0 14 Dtool_KBUATq1Y 861 // Filename: colorInterpolationManager.I
// Created by:  joswilso (02Jun05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::get_color_a
//      Access : public
// Description : Returns the primary color of the function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 811  
73 14 Dtool_KBUA7Bw_ 4 77 774 0 14 Dtool_KBUA7Bw_ 283 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionConstant::set_color_a
//      Access : public
// Description : Sets the primary color of the function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 814  1 c 1 815  
74 14 Dtool_KBUAQV5J 7 78 818 0 14 Dtool_KBUAQV5J 0 0 
75 14 Dtool_KBUA5qpK 7 81 813 0 14 Dtool_KBUA5qpK 286 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::get_color_b
//      Access : public
// Description : Returns the secondary color of the function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 819  
76 14 Dtool_KBUAcygt 4 82 774 0 14 Dtool_KBUAcygt 283 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionLinear::set_color_b
//      Access : public
// Description : Sets the secondary color of the function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 821  1 c 1 815  
77 14 Dtool_KBUAdiNh 7 83 818 0 14 Dtool_KBUAdiNh 0 0 
78 14 Dtool_KBUAk4fw 6 86 775 0 14 Dtool_KBUAk4fw 286 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_a
//      Access : public
// Description : Returns the primary width of the function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 822  
79 14 Dtool_KBUAh47o 6 87 775 0 14 Dtool_KBUAh47o 288 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::get_width_b
//      Access : public
// Description : Returns the secondary width of the function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 822  
80 14 Dtool_KBUAMbSc 4 88 774 0 14 Dtool_KBUAMbSc 283 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_a
//      Access : public
// Description : Sets the primary width of the function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 824  1 w 1 775  
81 14 Dtool_KBUAJbuU 4 89 774 0 14 Dtool_KBUAJbuU 285 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionStepwave::set_width_b
//      Access : public
// Description : Sets the secondary width of the function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 824  1 w 1 775  
82 14 Dtool_KBUAfIOE 7 90 818 0 14 Dtool_KBUAfIOE 0 0 
83 14 Dtool_KBUA6TsB 6 93 775 0 14 Dtool_KBUA6TsB 324 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::get_period
//      Access : public
// Description : Returns the time to transition from A to B then back
//               to A again.
//////////////////////////////////////////////////////////////////// 1 4 this 3 825  
84 14 Dtool_KBUA_SEl 4 94 774 0 14 Dtool_KBUA_SEl 321 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationFunctionSinusoid::set_period
//      Access : public
// Description : Sets the time to transition from A to B then back
//               to A again.
//////////////////////////////////////////////////////////////////// 2 4 this 3 827  1 p 1 775  
85 14 Dtool_KBUAvz7V 7 95 818 0 14 Dtool_KBUAvz7V 0 0 
86 14 Dtool_KBUA_JTb 7 98 829 0 14 Dtool_KBUA_JTb 260 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 5 8 function 1 828  10 time_begin 1 775  8 time_end 1 775  12 is_modulated 1 806  2 id 1 784  
87 14 Dtool_KBUAwp_m 7 98 829 0 14 Dtool_KBUAwp_m 265 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::ColorInterpolationSegment
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 1 s 1 830  
88 14 Dtool_KBUA4E2r 7 99 833 0 14 Dtool_KBUA4E2r 327 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_function
//      Access : public
// Description : Returns a reference to the function object 
//               corresponding to this segment.
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
89 14 Dtool_KBUAB4sN 6 100 775 0 14 Dtool_KBUAB4sN 406 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_begin
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
90 14 Dtool_KBUAOviy 6 101 775 0 14 Dtool_KBUAOviy 401 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_time_end
//      Access : public
// Description : Returns the point in the particle's lifetime at which
//               this segment's effect stops.  It is an interpolated
//               value in the range [0,1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
91 14 Dtool_KBUAJqJ6 6 102 806 0 14 Dtool_KBUAJqJ6 290 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_modulated
//      Access : public
// Description : Returns whether the function is additive or modulated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
92 14 Dtool_KBUA6RXy 6 103 784 0 14 Dtool_KBUA6RXy 318 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::get_id
//      Access : public
// Description : Returns the id assigned to this segment by the
//               manager that created it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
93 14 Dtool_KBUAPDxm 6 104 806 0 14 Dtool_KBUAPDxm 291 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::is_enabled()
//      Access : public
// Description : Returns whether the segments effects are being applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
94 14 Dtool_KBUAUTU7 4 105 774 0 14 Dtool_KBUAUTU7 333 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_function
//      Access : public
// Description : Sets the function that the segment will use for 
//               its interpolation calculations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  8 function 1 828  
95 14 Dtool_KBUAtTOV 4 106 774 0 14 Dtool_KBUAtTOV 403 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_begin
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment begins its effect.  It is an interpolated
//               value in the range [0,1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  4 time 1 775  
96 14 Dtool_KBUAmmt6 4 107 774 0 14 Dtool_KBUAmmt6 397 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_time_end
//      Access : public
// Description : Sets the point in the particle's lifetime at which
//               this segment's effect ends.  It is an interpolated
//               value in the range [0,1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  4 time 1 775  
97 14 Dtool_KBUAADzd 4 108 774 0 14 Dtool_KBUAADzd 414 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_is_modulated
//      Access : public
// Description : Sets how the function is applied to the final color.
//               If true, the value is multiplied. If false, the value
//               is simply added. Default is true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  4 flag 1 806  
98 14 Dtool_KBUAZRhS 4 109 774 0 14 Dtool_KBUAZRhS 289 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationSegment::set_enabled()
//      Access : public
// Description : Sets whether the segments effects should be applied.
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  7 enabled 1 806  
99 14 Dtool_KBUAJ6Vn 7 111 834 0 14 Dtool_KBUAJ6Vn 268 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : default constructor
//////////////////////////////////////////////////////////////////// 0 
100 14 Dtool_KBUAupdd 7 111 834 0 14 Dtool_KBUAupdd 265 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 835  
101 14 Dtool_KBUAsQcF 7 111 834 0 14 Dtool_KBUAsQcF 260 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::ColorInterpolationManager
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 1 c 1 815  
102 14 Dtool_KBUABfGb 6 112 784 0 14 Dtool_KBUABfGb 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 5 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  5 color 1 815  12 is_modulated 1 806  
103 14 Dtool_KBUAnUAX 6 112 784 0 14 Dtool_KBUAnUAX 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 4 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  5 color 1 815  
104 14 Dtool_KBUAm4ub 6 112 784 0 14 Dtool_KBUAm4ub 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  
105 14 Dtool_KBUA17pq 6 112 784 0 14 Dtool_KBUA17pq 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  10 time_begin 1 775  
106 14 Dtool_KBUAFtx4 6 112 784 0 14 Dtool_KBUAFtx4 385 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_constant
//      Access : public
// Description : Adds a constant segment of the specified color to the
//               manager and returns the segment's id as known
//               by the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
107 14 Dtool_KBUAUO7Z 6 113 784 0 14 Dtool_KBUAUO7Z 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 6 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  12 is_modulated 1 806  
108 14 Dtool_KBUAF0qz 6 113 784 0 14 Dtool_KBUAF0qz 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 5 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  
109 14 Dtool_KBUANg4k 6 113 784 0 14 Dtool_KBUANg4k 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 4 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  
110 14 Dtool_KBUAyeIx 6 113 784 0 14 Dtool_KBUAyeIx 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  
111 14 Dtool_KBUAjEI2 6 113 784 0 14 Dtool_KBUAjEI2 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  10 time_begin 1 775  
112 14 Dtool_KBUAdNk6 6 113 784 0 14 Dtool_KBUAdNk6 361 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_linear
//      Access : public
// Description : Adds a linear segment between two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
113 14 Dtool_KBUAS5w6 6 114 784 0 14 Dtool_KBUAS5w6 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 8 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  7 width_a 1 775  7 width_b 1 775  12 is_modulated 1 806  
114 14 Dtool_KBUAhcb4 6 114 784 0 14 Dtool_KBUAhcb4 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 7 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  7 width_a 1 775  7 width_b 1 775  
115 14 Dtool_KBUAXHNs 6 114 784 0 14 Dtool_KBUAXHNs 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 6 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  7 width_a 1 775  
116 14 Dtool_KBUAxifI 6 114 784 0 14 Dtool_KBUAxifI 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 5 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  
117 14 Dtool_KBUAxdnL 6 114 784 0 14 Dtool_KBUAxdnL 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 4 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  
118 14 Dtool_KBUA_AWQ 6 114 784 0 14 Dtool_KBUA_AWQ 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  
119 14 Dtool_KBUAbNRf 6 114 784 0 14 Dtool_KBUAbNRf 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  10 time_begin 1 775  
120 14 Dtool_KBUAHbZt 6 114 784 0 14 Dtool_KBUAHbZt 360 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_stepwave
//      Access : public
// Description : Adds a stepwave segment of two colors to the manager 
//               and returns the segment's id as known by the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
121 14 Dtool_KBUAmWDC 6 115 784 0 14 Dtool_KBUAmWDC 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 7 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  6 period 1 775  12 is_modulated 1 806  
122 14 Dtool_KBUAEcmP 6 115 784 0 14 Dtool_KBUAEcmP 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 6 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  6 period 1 775  
123 14 Dtool_KBUANl6r 6 115 784 0 14 Dtool_KBUANl6r 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 5 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  7 color_b 1 815  
124 14 Dtool_KBUAV6Cv 6 115 784 0 14 Dtool_KBUAV6Cv 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 4 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  7 color_a 1 815  
125 14 Dtool_KBUAkKwz 6 115 784 0 14 Dtool_KBUAkKwz 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 3 4 this 3 834  10 time_begin 1 775  8 time_end 1 775  
126 14 Dtool_KBUAyJsC 6 115 784 0 14 Dtool_KBUAyJsC 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  10 time_begin 1 775  
127 14 Dtool_KBUAG00Q 6 115 784 0 14 Dtool_KBUAG00Q 400 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::add_sinusoid
//      Access : public
// Description : Adds a stepwave segment of two colors and a specified
//               period to the manager and returns the segment's 
//               id as known by the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
128 14 Dtool_KBUAG__q 4 116 774 0 14 Dtool_KBUAG__q 290 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::set_default_color
//      Access : public
// Description : Sets the color to used if no segments are present
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  1 c 1 815  
129 14 Dtool_KBUAxZFl 7 117 829 0 14 Dtool_KBUAxZFl 284 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment
//      Access : public
// Description : Returns the segment that corresponds to 'seg_id'.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  6 seg_id 1 784  
130 14 Dtool_KBUAuRLg 6 118 837 0 14 Dtool_KBUAuRLg 336 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::get_segment_id_list
//      Access : public
// Description : Returns a space delimited list of all of the ids
//               in the manager at the time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
131 14 Dtool_KBUAW5Nf 4 119 774 0 14 Dtool_KBUAW5Nf 282 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_segment
//      Access : public
// Description : Removes the segment of 'id' from the manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 834  6 seg_id 1 784  
132 14 Dtool_KBUARYQe 4 120 774 0 14 Dtool_KBUARYQe 278 ////////////////////////////////////////////////////////////////////
//    Function : ColorInterpolationManager::clear_to_initial
//      Access : public
// Description : Removes all segments from the manager.
//////////////////////////////////////////////////////////////////// 1 4 this 3 834  
133 14 Dtool_KBUAMaqQ 7 122 838 0 14 Dtool_KBUAMaqQ 232 ////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
134 14 Dtool_KBUAZaXE 7 122 838 0 14 Dtool_KBUAZaXE 237 ////////////////////////////////////////////////////////////////////
//    Function : DiscEmitter::DiscEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 839  
135 14 Dtool_KBUA8VPM 4 123 774 0 14 Dtool_KBUA8VPM 713 // Filename: discEmitter.I
// Created by:  charles (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : radius assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  1 r 1 775  
136 14 Dtool_KBUAwAyy 4 124 774 0 14 Dtool_KBUAwAyy 227 ////////////////////////////////////////////////////////////////////
//    Function : set_outer_angle
//      Access : Public
// Description : aoe assignement
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  7 o_angle 1 775  
137 14 Dtool_KBUA0naY 4 125 774 0 14 Dtool_KBUA0naY 226 ////////////////////////////////////////////////////////////////////
//    Function : set_inner_angle
//      Access : Public
// Description : aoe assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  7 i_angle 1 775  
138 14 Dtool_KBUAT8hk 4 126 774 0 14 Dtool_KBUAT8hk 230 ////////////////////////////////////////////////////////////////////
//    Function : set_outer_magnitude
//      Access : public
// Description : mag assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  5 o_mag 1 775  
139 14 Dtool_KBUAx2JK 4 127 774 0 14 Dtool_KBUAx2JK 230 ////////////////////////////////////////////////////////////////////
//    Function : set_inner_magnitude
//      Access : public
// Description : mag assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  5 i_mag 1 775  
140 14 Dtool_KBUAD6_D 4 128 774 0 14 Dtool_KBUAD6_D 224 ////////////////////////////////////////////////////////////////////
//    Function : set_cubic_lerping
//      Access : public
// Description : clerp flag
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  5 clerp 1 806  
141 14 Dtool_KBUAwO_c 6 129 775 0 14 Dtool_KBUAwO_c 222 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : Public
// Description : radius accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
142 14 Dtool_KBUAfHU_ 6 130 775 0 14 Dtool_KBUAfHU_ 224 ////////////////////////////////////////////////////////////////////
//    Function : get_outer_angle
//      Access : Public
// Description : aoe accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
143 14 Dtool_KBUAVl9j 6 131 775 0 14 Dtool_KBUAVl9j 224 ////////////////////////////////////////////////////////////////////
//    Function : get_inner_angle
//      Access : Public
// Description : aoe accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
144 14 Dtool_KBUAR43h 6 132 775 0 14 Dtool_KBUAR43h 228 ////////////////////////////////////////////////////////////////////
//    Function : get_outer_magnitude
//      Access : public
// Description : mag accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
145 14 Dtool_KBUArrfH 6 133 775 0 14 Dtool_KBUArrfH 228 ////////////////////////////////////////////////////////////////////
//    Function : get_inner_magnitude
//      Access : public
// Description : mag accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
146 14 Dtool_KBUAX_1y 6 134 806 0 14 Dtool_KBUAX_1y 233 ////////////////////////////////////////////////////////////////////
//    Function : get_cubic_lerping
//      Access : public
// Description : clerp flag accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
147 14 Dtool_KBUAfwJz 7 136 843 0 14 Dtool_KBUAfwJz 0 2 2 am 1 738  9 geom_node 1 841  
148 14 Dtool_KBUAQt3X 7 136 843 0 14 Dtool_KBUAQt3X 0 1 2 am 1 738  
149 14 Dtool_KBUAqpfG 7 136 843 0 14 Dtool_KBUAqpfG 0 0 
150 14 Dtool_KBUAf5c7 7 136 843 0 14 Dtool_KBUAf5c7 233 ////////////////////////////////////////////////////////////////////
//    Function : GeomParticleRenderer
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 844  
151 14 Dtool_KBUA2Hy2 4 137 774 0 14 Dtool_KBUA2Hy2 893 // Filename: geomParticleRenderer.I
// Created by:  charles (05Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_geom_node
//    Access : public
////////////////////////////////////////////////////////////////////
// we're forcing a pool resize to remove every node in the vector.
// this is because nodes are reference-counted, and we have to
// explicitly remove them from the node they were previously parented
// to. 2 4 this 3 843  4 node 1 841  
152 14 Dtool_KBUAWLyT 7 138 841 0 14 Dtool_KBUAWLyT 188 ////////////////////////////////////////////////////////////////////
//  Function : get_geom_node
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 843  
153 14 Dtool_KBUAeO8V 7 139 834 0 14 Dtool_KBUAeO8V 206 ////////////////////////////////////////////////////////////////////
//  Function : get_color_interpolation_manager
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
154 14 Dtool_KBUAL_k8 4 140 774 0 14 Dtool_KBUAL_k8 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_x_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 animate_x_ratio 1 806  
155 14 Dtool_KBUAKuGQ 4 141 774 0 14 Dtool_KBUAKuGQ 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_y_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 animate_y_ratio 1 806  
156 14 Dtool_KBUAKeoj 4 142 774 0 14 Dtool_KBUAKeoj 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_z_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 animate_z_ratio 1 806  
157 14 Dtool_KBUAExQB 4 143 774 0 14 Dtool_KBUAExQB 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 initial_x_scale 1 775  
158 14 Dtool_KBUAVoU5 4 144 774 0 14 Dtool_KBUAVoU5 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  13 final_x_scale 1 775  
159 14 Dtool_KBUAo2VB 4 145 774 0 14 Dtool_KBUAo2VB 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 initial_y_scale 1 775  
160 14 Dtool_KBUA5pEb 4 146 774 0 14 Dtool_KBUA5pEb 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  13 final_y_scale 1 775  
161 14 Dtool_KBUAM_aB 4 147 774 0 14 Dtool_KBUAM_aB 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_initial_z_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  15 initial_z_scale 1 775  
162 14 Dtool_KBUAqp08 4 148 774 0 14 Dtool_KBUAqp08 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::set_final_z_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 843  13 final_z_scale 1 775  
163 14 Dtool_KBUATAs_ 6 149 806 0 14 Dtool_KBUATAs_ 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_x_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
164 14 Dtool_KBUAUwOT 6 150 806 0 14 Dtool_KBUAUwOT 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_y_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
165 14 Dtool_KBUAUgwm 6 151 806 0 14 Dtool_KBUAUgwm 211 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_z_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
166 14 Dtool_KBUAJ87w 6 152 775 0 14 Dtool_KBUAJ87w 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
167 14 Dtool_KBUAZAPZ 6 153 775 0 14 Dtool_KBUAZAPZ 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
168 14 Dtool_KBUA1E_w 6 154 775 0 14 Dtool_KBUA1E_w 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
169 14 Dtool_KBUAsA_6 6 155 775 0 14 Dtool_KBUAsA_6 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
170 14 Dtool_KBUARPEx 6 156 775 0 14 Dtool_KBUARPEx 214 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_initial_z_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
171 14 Dtool_KBUAwAvc 6 157 775 0 14 Dtool_KBUAwAvc 212 ////////////////////////////////////////////////////////////////////
// Function : GeomParticleRenderer::get_final_z_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 844  
172 14 Dtool_KBUAmO71 7 159 846 0 14 Dtool_KBUAmO71 219 ////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
173 14 Dtool_KBUAvJIy 7 159 846 0 14 Dtool_KBUAvJIy 219 ////////////////////////////////////////////////////////////////////
//    Function : LineEmitter
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 847  
174 14 Dtool_KBUAkFGJ 4 160 774 0 14 Dtool_KBUAkFGJ 718 // Filename: lineEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_endpoint1
//      Access : Public
// Description : endpoint assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 846  5 point 1 778  
175 14 Dtool_KBUAEBtJ 4 161 774 0 14 Dtool_KBUAEBtJ 229 ////////////////////////////////////////////////////////////////////
//    Function : set_endpoint2
//      Access : Public
// Description : endpoint assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 846  5 point 1 778  
176 14 Dtool_KBUA6l0h 7 162 770 0 14 Dtool_KBUA6l0h 227 ////////////////////////////////////////////////////////////////////
//    Function : get_endpoint1
//      Access : Public
// Description : endpoint accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 847  
177 14 Dtool_KBUAaobi 7 163 770 0 14 Dtool_KBUAaobi 227 ////////////////////////////////////////////////////////////////////
//    Function : get_endpoint2
//      Access : Public
// Description : endpoint accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 847  
178 14 Dtool_KBUAEZz7 7 165 849 0 14 Dtool_KBUAEZz7 236 ////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Default Constructor
//////////////////////////////////////////////////////////////////// 0 
179 14 Dtool_KBUAsY3q 7 165 849 0 14 Dtool_KBUAsY3q 228 ////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 3 4 head 1 815  4 tail 1 815  10 alpha_mode 1 738  
180 14 Dtool_KBUAWkxE 7 165 849 0 14 Dtool_KBUAWkxE 233 ////////////////////////////////////////////////////////////////////
//    Function : LineParticleRenderer
//      Access : Public
// Description : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 850  
181 14 Dtool_KBUA_Gxm 4 166 774 0 14 Dtool_KBUA_Gxm 690 // Filename: lineParticleRenderer.I
// Created by:  darren (06Oct00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_head_color
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 849  1 c 1 815  
182 14 Dtool_KBUAHL4t 4 167 774 0 14 Dtool_KBUAHL4t 193 ////////////////////////////////////////////////////////////////////
//    Function : set_tail_color
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 849  1 c 1 815  
183 14 Dtool_KBUAS8gD 6 168 815 0 14 Dtool_KBUAS8gD 193 ////////////////////////////////////////////////////////////////////
//    Function : get_head_color
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 850  
184 14 Dtool_KBUApyoK 6 169 815 0 14 Dtool_KBUApyoK 193 ////////////////////////////////////////////////////////////////////
//    Function : get_tail_color
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 850  
185 14 Dtool_KBUA3NfU 4 170 774 0 14 Dtool_KBUA3NfU 202 ////////////////////////////////////////////////////////////////////
//    Function : set_line_scale_factor
// Description : accessor
//////////////////////////////////////////////////////////////////// 2 4 this 3 849  2 sf 1 775  
186 14 Dtool_KBUAybib 6 171 775 0 14 Dtool_KBUAybib 202 ////////////////////////////////////////////////////////////////////
//    Function : get_line_scale_factor
// Description : accessor
//////////////////////////////////////////////////////////////////// 1 4 this 3 850  
187 14 Dtool_KBUA07Eu 7 174 854 0 14 Dtool_KBUA07Eu 228 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Copy Constructor.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 852  
188 14 Dtool_KBUA_wz4 7 174 854 0 14 Dtool_KBUA_wz4 231 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Default Constructor.
//////////////////////////////////////////////////////////////////// 1 9 pool_size 1 784  
189 14 Dtool_KBUAlHaR 7 174 854 0 14 Dtool_KBUAlHaR 231 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystem
//      Access : Public
// Description : Default Constructor.
//////////////////////////////////////////////////////////////////// 0 
190 14 Dtool_KBUApvqS 4 175 774 0 14 Dtool_KBUApvqS 411 ////             ///////////////////////////////////////////////////////
//// SET METHODS ///////////////////////////////////////////////////////
////             ///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_pool_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 size 1 784  
191 14 Dtool_KBUABtuQ 4 176 774 0 14 Dtool_KBUABtuQ 193 ////////////////////////////////////////////////////////////////////
//    Function : set_birth_rate
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 new_br 1 775  
192 14 Dtool_KBUAx6vw 4 177 774 0 14 Dtool_KBUAx6vw 198 ////////////////////////////////////////////////////////////////////
//    Function : set_soft_birth_rate
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 new_br 1 775  
193 14 Dtool_KBUAURZZ 4 178 774 0 14 Dtool_KBUAURZZ 194 ////////////////////////////////////////////////////////////////////
//    Function : set_litter_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 new_ls 1 784  
194 14 Dtool_KBUAHkGy 4 179 774 0 14 Dtool_KBUAHkGy 196 ////////////////////////////////////////////////////////////////////
//    Function : set_litter_spread
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  6 new_ls 1 784  
195 14 Dtool_KBUASAZN 4 180 774 0 14 Dtool_KBUASAZN 202 ////////////////////////////////////////////////////////////////////
//    Function : set_local_velocity_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 lv 1 806  
196 14 Dtool_KBUABOU3 4 181 774 0 14 Dtool_KBUABOU3 206 ////////////////////////////////////////////////////////////////////
//    Function : set_system_grows_older_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 sgo 1 806  
197 14 Dtool_KBUA_Iib 4 182 774 0 14 Dtool_KBUA_Iib 198 ////////////////////////////////////////////////////////////////////
//    Function : set_system_lifespan
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 sl 1 775  
198 14 Dtool_KBUA4GAU 4 183 774 0 14 Dtool_KBUA4GAU 193 ////////////////////////////////////////////////////////////////////
//    Function : set_system_age
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 age 1 775  
199 14 Dtool_KBUAlTf6 4 184 774 0 14 Dtool_KBUAlTf6 195 ////////////////////////////////////////////////////////////////////
//    Function : set_active_state
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 a 1 806  
200 14 Dtool_KBUA3lKx 4 185 774 0 14 Dtool_KBUA3lKx 202 ////////////////////////////////////////////////////////////////////
//    Function : set_spawn_on_death_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 sod 1 806  
201 14 Dtool_KBUATlYr 4 186 774 0 14 Dtool_KBUATlYr 200 ////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 node 1 841  
202 14 Dtool_KBUAICv8 4 187 774 0 14 Dtool_KBUAICv8 205 ////////////////////////////////////////////////////////////////////
//    Function : set_spawn_render_node_path
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 node 1 855  
203 14 Dtool_KBUADbaK 4 188 774 0 14 Dtool_KBUADbaK 203 ////////////////////////////////////////////////////////////////////
//    Function : set_template_system_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  3 tsf 1 806  
204 14 Dtool_KBUAhkLH 4 189 774 0 14 Dtool_KBUAhkLH 196 ////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 node 1 855  
205 14 Dtool_KBUAoYFU 4 189 774 0 14 Dtool_KBUAoYFU 196 ////////////////////////////////////////////////////////////////////
//    Function : set_render_parent
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 node 1 841  
206 14 Dtool_KBUA_bAc 4 190 774 0 14 Dtool_KBUA_bAc 191 ////////////////////////////////////////////////////////////////////
//    Function : set_renderer
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 r 1 802  
207 14 Dtool_KBUAP6z6 4 191 774 0 14 Dtool_KBUAP6z6 190 ////////////////////////////////////////////////////////////////////
//    Function : set_emitter
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 e 1 769  
208 14 Dtool_KBUAa_iU 4 192 774 0 14 Dtool_KBUAa_iU 190 ////////////////////////////////////////////////////////////////////
//    Function : set_factory
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 f 1 791  
209 14 Dtool_KBUA7S5e 4 193 774 0 14 Dtool_KBUA7S5e 190 ////////////////////////////////////////////////////////////////////
//    Function : set_floor_z
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  1 z 1 775  
210 14 Dtool_KBUA1_VC 4 194 774 0 14 Dtool_KBUA1_VC 192 ////////////////////////////////////////////////////////////////////
//    Function : clear_floor_z
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
211 14 Dtool_KBUAXT57 6 195 784 0 14 Dtool_KBUAXT57 405 ////             /////////////////////////////////////////////////////
//// GET METHODS /////////////////////////////////////////////////////
////             /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_pool_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
212 14 Dtool_KBUAq_T_ 6 196 775 0 14 Dtool_KBUAq_T_ 193 ////////////////////////////////////////////////////////////////////
//    Function : get_birth_rate
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
213 14 Dtool_KBUAkXfI 6 197 775 0 14 Dtool_KBUAkXfI 198 ////////////////////////////////////////////////////////////////////
//    Function : get_soft_birth_rate
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
214 14 Dtool_KBUAY2Tr 6 198 784 0 14 Dtool_KBUAY2Tr 194 ////////////////////////////////////////////////////////////////////
//    Function : get_litter_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
215 14 Dtool_KBUA31vh 6 199 784 0 14 Dtool_KBUA31vh 196 ////////////////////////////////////////////////////////////////////
//    Function : get_litter_spread
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
216 14 Dtool_KBUAvd6d 6 200 806 0 14 Dtool_KBUAvd6d 202 ////////////////////////////////////////////////////////////////////
//    Function : get_local_velocity_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
217 14 Dtool_KBUAmbbN 6 201 806 0 14 Dtool_KBUAmbbN 206 ////////////////////////////////////////////////////////////////////
//    Function : get_system_grows_older_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
218 14 Dtool_KBUAPFTz 6 202 775 0 14 Dtool_KBUAPFTz 198 ////////////////////////////////////////////////////////////////////
//    Function : get_system_lifespan
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
219 14 Dtool_KBUASLlC 6 203 775 0 14 Dtool_KBUASLlC 193 ////////////////////////////////////////////////////////////////////
//    Function : get_system_age
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
220 14 Dtool_KBUA7pRo 6 204 806 0 14 Dtool_KBUA7pRo 195 ////////////////////////////////////////////////////////////////////
//    Function : get_active_state
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
221 14 Dtool_KBUAysrB 6 205 806 0 14 Dtool_KBUAysrB 202 ////////////////////////////////////////////////////////////////////
//    Function : get_spawn_on_death_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
222 14 Dtool_KBUA3D5l 7 206 841 0 14 Dtool_KBUA3D5l 200 ////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
223 14 Dtool_KBUAt18V 7 207 801 0 14 Dtool_KBUAt18V 205 ////////////////////////////////////////////////////////////////////
//    Function : get_spawn_render_node_path
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
224 14 Dtool_KBUA4RPW 6 208 806 0 14 Dtool_KBUA4RPW 201 ////////////////////////////////////////////////////////////////////
//    Function : get_i_was_spawned_flag
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
225 14 Dtool_KBUAAtRp 6 209 784 0 14 Dtool_KBUAAtRp 199 ////////////////////////////////////////////////////////////////////
//    Function : get_living_particles
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
226 14 Dtool_KBUAQX9q 7 210 801 0 14 Dtool_KBUAQX9q 196 ////////////////////////////////////////////////////////////////////
//    Function : get_render_parent
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
227 14 Dtool_KBUAWWmZ 7 211 802 0 14 Dtool_KBUAWWmZ 191 ////////////////////////////////////////////////////////////////////
//    Function : get_renderer
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
228 14 Dtool_KBUAgwSc 7 212 769 0 14 Dtool_KBUAgwSc 190 ////////////////////////////////////////////////////////////////////
//    Function : get_emitter
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
229 14 Dtool_KBUAW2Vl 7 213 791 0 14 Dtool_KBUAW2Vl 190 ////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
230 14 Dtool_KBUAw7_3 6 214 775 0 14 Dtool_KBUAw7_3 190 ////////////////////////////////////////////////////////////////////
//    Function : get_factory
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
231 14 Dtool_KBUAL_37 4 215 774 0 14 Dtool_KBUAL_37 197 ////////////////////////////////////////////////////////////////////
//    Function : add_spawn_template
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 ps 1 854  
232 14 Dtool_KBUAf6XZ 4 216 774 0 14 Dtool_KBUAf6XZ 200 ////////////////////////////////////////////////////////////////////
//    Function : clear_spawn_templates
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
233 14 Dtool_KBUAzbqe 4 217 774 0 14 Dtool_KBUAzbqe 849 // Filename: particleSystem.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : render
//      Access : Public
// Description : Populates an attached GeomNode structure with the
//               particle geometry for rendering.  This is a
//               wrapper for accessability.
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
234 14 Dtool_KBUA3z9v 4 218 774 0 14 Dtool_KBUA3z9v 305 ////////////////////////////////////////////////////////////////////
//    Function : induce_labor
//      Access : Public
// Description : Forces the birth of a particle litter this frame
//               by resetting _tics_since_birth
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
235 14 Dtool_KBUAp19v 4 219 774 0 14 Dtool_KBUAp19v 320 ////////////////////////////////////////////////////////////////////
//    Function : clear_to_initial
//      Access : Public
// Description : Resets the system to its start state by resizing to 0,
//               then resizing back to current size.
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
236 14 Dtool_KBUAnhka 4 220 774 0 14 Dtool_KBUAnhka 284 ////////////////////////////////////////////////////////////////////
//    Function : soft_stop
//      Access : Public
// Description : Causes system to use birth rate set by 
//               set_soft_birth_rate()
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 br 1 775  
237 14 Dtool_KBUAImQe 4 220 774 0 14 Dtool_KBUAImQe 284 ////////////////////////////////////////////////////////////////////
//    Function : soft_stop
//      Access : Public
// Description : Causes system to use birth rate set by 
//               set_soft_birth_rate()
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
238 14 Dtool_KBUAh7PT 4 221 774 0 14 Dtool_KBUAh7PT 262 ////////////////////////////////////////////////////////////////////
//    Function : soft_start
//      Access : Public
// Description : Causes system to use birth rate set by set_birth_rate()
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  2 br 1 775  
239 14 Dtool_KBUAAwCJ 4 221 774 0 14 Dtool_KBUAAwCJ 262 ////////////////////////////////////////////////////////////////////
//    Function : soft_start
//      Access : Public
// Description : Causes system to use birth rate set by set_birth_rate()
//////////////////////////////////////////////////////////////////// 1 4 this 3 854  
240 14 Dtool_KBUA2i2m 4 222 774 0 14 Dtool_KBUA2i2m 0 2 4 this 3 854  2 dt 1 775  
241 14 Dtool_KBUA_rSe 4 223 774 0 14 Dtool_KBUA_rSe 298 ////////////////////////////////////////////////////////////////////
//     Function : write_free_particle_fifo
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 852  3 out 1 782  6 indent 1 784  
242 14 Dtool_KBUA0ytn 4 223 774 0 14 Dtool_KBUA0ytn 298 ////////////////////////////////////////////////////////////////////
//     Function : write_free_particle_fifo
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 852  3 out 1 782  
243 14 Dtool_KBUAgE38 4 224 774 0 14 Dtool_KBUAgE38 295 ////////////////////////////////////////////////////////////////////
//     Function : write_spawn_templates
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 852  3 out 1 782  6 indent 1 784  
244 14 Dtool_KBUApNQ_ 4 224 774 0 14 Dtool_KBUApNQ_ 295 ////////////////////////////////////////////////////////////////////
//     Function : write_spawn_templates
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 852  3 out 1 782  
245 14 Dtool_KBUALxhQ 4 225 774 0 14 Dtool_KBUALxhQ 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 852  3 out 1 782  6 indent 1 784  
246 14 Dtool_KBUAY_Tj 4 225 774 0 14 Dtool_KBUAY_Tj 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 852  3 out 1 782  
247 14 Dtool_KBUAzk95 7 226 818 0 14 Dtool_KBUAzk95 0 0 
248 14 Dtool_KBUAuOfO 7 228 857 611 14 Dtool_KBUAuOfO 237 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : public
// Description : default constructor
//////////////////////////////////////////////////////////////////// 1 15 every_nth_frame 1 784  
249 14 Dtool_KBUAKxoE 7 228 857 611 14 Dtool_KBUAKxoE 237 ////////////////////////////////////////////////////////////////////
//    Function : ParticleSystemManager
//      Access : public
// Description : default constructor
//////////////////////////////////////////////////////////////////// 0 
250 14 Dtool_KBUAhIpF 4 230 774 0 14 Dtool_KBUAhIpF 690 // Filename: particleSystemManager.I
// Created by:  charles (28Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_frame_stepping
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 857  15 every_nth_frame 1 784  
251 14 Dtool_KBUA3diP 6 231 784 0 14 Dtool_KBUA3diP 191 ////////////////////////////////////////////////////////////////////
// Function : get_frame_stepping
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 858  
252 14 Dtool_KBUAmDR9 4 232 774 0 14 Dtool_KBUAmDR9 194 ////////////////////////////////////////////////////////////////////
// Function : attach_particlesystem
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 857  2 ps 1 854  
253 14 Dtool_KBUAstvE 4 233 774 0 14 Dtool_KBUAstvE 256 ////////////////////////////////////////////////////////////////////
//    Function : remove_particlesystem
//      Access : public
// Description : removes a ps from the maintenance list
//////////////////////////////////////////////////////////////////// 2 4 this 3 857  2 ps 1 854  
254 14 Dtool_KBUATEnv 4 234 774 0 14 Dtool_KBUATEnv 178 ////////////////////////////////////////////////////////////////////
// Function : clear
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 857  
255 14 Dtool_KBUAnA7I 4 235 774 0 14 Dtool_KBUAnA7I 518 ////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and render for each ps in the list.
//               this is probably the one you want to use.  Rendering
//               is the expensive operation, and particles REALLY
//               should at least be updated every frame, so nth_frame
//               stepping applies only to rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 857  2 dt 1 775  
256 14 Dtool_KBUAUysq 4 235 774 0 14 Dtool_KBUAUysq 411 ////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and an optional render for a specific
//               ps.  Since rendering is the expensive operation, multiple
//               updates could be applied before calling the final render.
//////////////////////////////////////////////////////////////////// 4 4 this 3 857  2 dt 1 775  2 ps 1 854  9 do_render 1 806  
257 14 Dtool_KBUAz5OT 4 235 774 0 14 Dtool_KBUAz5OT 411 ////////////////////////////////////////////////////////////////////
//    Function : do_particles
//      Access : public
// Description : does an update and an optional render for a specific
//               ps.  Since rendering is the expensive operation, multiple
//               updates could be applied before calling the final render.
//////////////////////////////////////////////////////////////////// 3 4 this 3 857  2 dt 1 775  2 ps 1 854  
258 14 Dtool_KBUAWHBj 4 236 774 0 14 Dtool_KBUAWHBj 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 858  3 out 1 782  
259 14 Dtool_KBUAaVHd 4 237 774 0 14 Dtool_KBUAaVHd 287 ////////////////////////////////////////////////////////////////////
//     Function : write_ps_list
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 858  3 out 1 782  6 indent 1 784  
260 14 Dtool_KBUA2VNz 4 237 774 0 14 Dtool_KBUA2VNz 287 ////////////////////////////////////////////////////////////////////
//     Function : write_ps_list
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 858  3 out 1 782  
261 14 Dtool_KBUAhS_E 4 238 774 0 14 Dtool_KBUAhS_E 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 858  3 out 1 782  6 indent 1 784  
262 14 Dtool_KBUA85AY 4 238 774 0 14 Dtool_KBUA85AY 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 858  3 out 1 782  
263 14 Dtool_KBUAsVW_ 7 240 860 0 14 Dtool_KBUAsVW_ 0 0 
264 14 Dtool_KBUAhKUT 7 240 860 0 14 Dtool_KBUAhKUT 225 ////////////////////////////////////////////////////////////////////
//    Function : PointEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 861  
265 14 Dtool_KBUALDeR 4 241 774 0 14 Dtool_KBUALDeR 709 // Filename: pointEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point
//      Access : public
// Description : point setting
//////////////////////////////////////////////////////////////////// 2 4 this 3 860  1 p 1 778  
266 14 Dtool_KBUAHUJU 7 242 770 0 14 Dtool_KBUAHUJU 0 1 4 this 3 861  
267 14 Dtool_KBUAzdmT 7 244 863 0 14 Dtool_KBUAzdmT 236 ////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : default constructor
//////////////////////////////////////////////////////////////////// 0 
268 14 Dtool_KBUAxQLp 7 244 863 0 14 Dtool_KBUAxQLp 233 ////////////////////////////////////////////////////////////////////
//    Function : PointParticleFactory
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 864  
269 14 Dtool_KBUAJ8x3 7 247 866 0 14 Dtool_KBUAJ8x3 0 6 2 ad 1 738  10 point_size 1 775  2 bt 1 758  2 bm 1 739  2 sc 1 815  2 ec 1 815  
270 14 Dtool_KBUAOmML 7 247 866 0 14 Dtool_KBUAOmML 0 5 2 ad 1 738  10 point_size 1 775  2 bt 1 758  2 bm 1 739  2 sc 1 815  
271 14 Dtool_KBUA0kEa 7 247 866 0 14 Dtool_KBUA0kEa 0 4 2 ad 1 738  10 point_size 1 775  2 bt 1 758  2 bm 1 739  
272 14 Dtool_KBUAW_vy 7 247 866 0 14 Dtool_KBUAW_vy 0 3 2 ad 1 738  10 point_size 1 775  2 bt 1 758  
273 14 Dtool_KBUALWut 7 247 866 0 14 Dtool_KBUALWut 0 2 2 ad 1 738  10 point_size 1 775  
274 14 Dtool_KBUAg3Ul 7 247 866 0 14 Dtool_KBUAg3Ul 0 1 2 ad 1 738  
275 14 Dtool_KBUAIwvl 7 247 866 0 14 Dtool_KBUAIwvl 0 0 
276 14 Dtool_KBUAC0H3 7 247 866 0 14 Dtool_KBUAC0H3 234 ////////////////////////////////////////////////////////////////////
//    Function : PointParticleRenderer
//      Access : Public
// Description : Copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 867  
277 14 Dtool_KBUAn3gj 4 248 774 0 14 Dtool_KBUAn3gj 692 // Filename: pointParticleRenderer.I
// Created by:  charles (20Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_point_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  10 point_size 1 775  
278 14 Dtool_KBUAdFkn 4 249 774 0 14 Dtool_KBUAdFkn 194 ////////////////////////////////////////////////////////////////////
//    Function : set_start_color
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  2 sc 1 815  
279 14 Dtool_KBUAEzEQ 4 250 774 0 14 Dtool_KBUAEzEQ 192 ////////////////////////////////////////////////////////////////////
//    Function : set_end_color
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  2 ec 1 815  
280 14 Dtool_KBUAsUyU 4 251 774 0 14 Dtool_KBUAsUyU 193 ////////////////////////////////////////////////////////////////////
//    Function : set_blend_type
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  2 bt 1 758  
281 14 Dtool_KBUAHTEJ 4 252 774 0 14 Dtool_KBUAHTEJ 195 ////////////////////////////////////////////////////////////////////
//    Function : set_blend_method
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 866  2 bm 1 739  
282 14 Dtool_KBUAd9NK 6 253 775 0 14 Dtool_KBUAd9NK 193 ////////////////////////////////////////////////////////////////////
//    Function : get_point_size
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
283 14 Dtool_KBUABJrm 6 254 815 0 14 Dtool_KBUABJrm 194 ////////////////////////////////////////////////////////////////////
//    Function : get_start_color
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
284 14 Dtool_KBUAaeEq 6 255 815 0 14 Dtool_KBUAaeEq 192 ////////////////////////////////////////////////////////////////////
//    Function : get_end_color
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
285 14 Dtool_KBUAR8v5 6 256 758 0 14 Dtool_KBUAR8v5 193 ////////////////////////////////////////////////////////////////////
//    Function : get_blend_type
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
286 14 Dtool_KBUANfkE 6 257 739 0 14 Dtool_KBUANfkE 195 ////////////////////////////////////////////////////////////////////
//    Function : get_blend_method
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
287 14 Dtool_KBUAqyrE 7 259 869 0 14 Dtool_KBUAqyrE 0 0 
288 14 Dtool_KBUAjSSt 7 259 869 0 14 Dtool_KBUAjSSt 229 ////////////////////////////////////////////////////////////////////
//    Function : RectangleEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 870  
289 14 Dtool_KBUA__w9 4 260 774 0 14 Dtool_KBUA__w9 716 // Filename: rectangleEmitter.I
// Created by:  charles (26Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_min_bound
//      Access : public
// Description : boundary set
//////////////////////////////////////////////////////////////////// 2 4 this 3 869  4 vmin 1 872  
290 14 Dtool_KBUAE18N 4 261 774 0 14 Dtool_KBUAE18N 222 ////////////////////////////////////////////////////////////////////
//    Function : set_max_bound
//      Access : public
// Description : boundary set
//////////////////////////////////////////////////////////////////// 2 4 this 3 869  4 vmax 1 872  
291 14 Dtool_KBUANaOf 7 262 875 0 14 Dtool_KBUANaOf 222 ////////////////////////////////////////////////////////////////////
//    Function : get_min_bound
//      Access : public
// Description : boundary get
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
292 14 Dtool_KBUAVbav 7 263 875 0 14 Dtool_KBUAVbav 222 ////////////////////////////////////////////////////////////////////
//    Function : get_max_bound
//      Access : public
// Description : boundary get
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
293 14 Dtool_KBUA_QFL 7 266 876 0 14 Dtool_KBUA_QFL 239 ////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Default Constructor
//////////////////////////////////////////////////////////////////// 0 
294 14 Dtool_KBUAHOzb 7 266 876 0 14 Dtool_KBUAHOzb 231 ////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 6 6 center 1 815  4 edge 1 815  12 birth_radius 1 775  12 death_radius 1 775  10 life_scale 1 761  10 alpha_mode 1 738  
295 14 Dtool_KBUAOidn 7 266 876 0 14 Dtool_KBUAOidn 236 ////////////////////////////////////////////////////////////////////
//    Function : SparkleParticleRenderer
//      Access : Public
// Description : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 877  
296 14 Dtool_KBUANoZ9 4 267 774 0 14 Dtool_KBUANoZ9 696 // Filename: sparkleParticleRenderer.I
// Created by:  charles (27Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_center_color
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 876  1 c 1 815  
297 14 Dtool_KBUAf_5c 4 268 774 0 14 Dtool_KBUAf_5c 193 ////////////////////////////////////////////////////////////////////
//    Function : set_edge_color
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 876  1 c 1 815  
298 14 Dtool_KBUAgpfV 4 269 774 0 14 Dtool_KBUAgpfV 195 ////////////////////////////////////////////////////////////////////
//    Function : set_birth_radius
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 876  6 radius 1 775  
299 14 Dtool_KBUAJkw4 4 270 774 0 14 Dtool_KBUAJkw4 195 ////////////////////////////////////////////////////////////////////
//    Function : set_death_radius
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 876  6 radius 1 775  
300 14 Dtool_KBUA_A96 4 271 774 0 14 Dtool_KBUA_A96 193 ////////////////////////////////////////////////////////////////////
//    Function : set_life_scale
//      Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 876  6 param0 0 761  
301 14 Dtool_KBUAGLA6 6 272 815 0 14 Dtool_KBUAGLA6 195 ////////////////////////////////////////////////////////////////////
//    Function : get_center_color
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 877  
302 14 Dtool_KBUASRs4 6 273 815 0 14 Dtool_KBUASRs4 193 ////////////////////////////////////////////////////////////////////
//    Function : get_edge_color
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 877  
303 14 Dtool_KBUAgIEj 6 274 775 0 14 Dtool_KBUAgIEj 195 ////////////////////////////////////////////////////////////////////
//    Function : get_birth_radius
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 877  
304 14 Dtool_KBUAeMVG 6 275 775 0 14 Dtool_KBUAeMVG 195 ////////////////////////////////////////////////////////////////////
//    Function : get_death_radius
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 877  
305 14 Dtool_KBUAgMLm 6 276 761 0 14 Dtool_KBUAgMLm 193 ////////////////////////////////////////////////////////////////////
//    Function : get_life_scale
//      Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 877  
306 14 Dtool_KBUAZ_XN 7 278 879 0 14 Dtool_KBUAZ_XN 0 0 
307 14 Dtool_KBUAa66a 7 278 879 0 14 Dtool_KBUAa66a 233 ////////////////////////////////////////////////////////////////////
//    Function : SphereSurfaceEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 880  
308 14 Dtool_KBUAD2aF 4 279 774 0 14 Dtool_KBUAD2aF 217 ////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
//////////////////////////////////////////////////////////////////// 2 4 this 3 879  1 r 1 775  
309 14 Dtool_KBUAjRgH 6 280 775 0 14 Dtool_KBUAjRgH 217 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
//////////////////////////////////////////////////////////////////// 1 4 this 3 880  
310 14 Dtool_KBUAwu67 7 282 882 0 14 Dtool_KBUAwu67 0 0 
311 14 Dtool_KBUA4FjC 7 282 882 0 14 Dtool_KBUA4FjC 232 ////////////////////////////////////////////////////////////////////
//    Function : SphereVolumeEmitter
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 883  
312 14 Dtool_KBUAkvji 4 283 774 0 14 Dtool_KBUAkvji 217 ////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : public
// Description : radius set
//////////////////////////////////////////////////////////////////// 2 4 this 3 882  1 r 1 775  
313 14 Dtool_KBUACKpS 6 284 775 0 14 Dtool_KBUACKpS 217 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius get
//////////////////////////////////////////////////////////////////// 1 4 this 3 883  
314 14 Dtool_KBUAYa22 4 287 774 0 14 Dtool_KBUAYa22 0 2 4 this 3 885  3 tex 1 837  
315 14 Dtool_KBUAQDkb 4 287 774 0 14 Dtool_KBUAQDkb 0 3 4 this 3 885  5 model 1 837  4 node 1 837  
316 14 Dtool_KBUASnfH 6 288 765 0 14 Dtool_KBUASnfH 0 1 4 this 3 886  
317 14 Dtool_KBUAzuxT 6 289 837 0 14 Dtool_KBUAzuxT 0 1 4 this 3 886  
318 14 Dtool_KBUAL_Lg 6 290 837 0 14 Dtool_KBUAL_Lg 0 1 4 this 3 886  
319 14 Dtool_KBUAX3Xs 6 291 837 0 14 Dtool_KBUAX3Xs 0 1 4 this 3 886  
320 14 Dtool_KBUA2oIg 6 292 784 0 14 Dtool_KBUA2oIg 0 1 4 this 3 886  
321 14 Dtool_KBUATL04 7 295 890 0 14 Dtool_KBUATL04 259 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 888  
322 14 Dtool_KBUAd0Mb 7 295 890 0 14 Dtool_KBUAd0Mb 254 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 3 tex 1 891  
323 14 Dtool_KBUACqZT 7 295 890 0 14 Dtool_KBUACqZT 254 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::SpriteParticleRenderer
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
324 14 Dtool_KBUALV8z 4 296 774 0 14 Dtool_KBUALV8z 549 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               This will remove all previously add textures and 
//               resize the renderer to match the new geometry.
//////////////////////////////////////////////////////////////////// 5 4 this 3 890  9 node_path 1 855  5 model 1 837  4 node 1 837  16 size_from_texels 1 806  
325 14 Dtool_KBUA47kj 4 296 774 0 14 Dtool_KBUA47kj 549 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               This will remove all previously add textures and 
//               resize the renderer to match the new geometry.
//////////////////////////////////////////////////////////////////// 4 4 this 3 890  9 node_path 1 855  5 model 1 837  4 node 1 837  
326 14 Dtool_KBUAXPBQ 4 296 774 0 14 Dtool_KBUAXPBQ 1671 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : Sets the properties on this renderer from the geometry
//               referenced by the indicated NodePath.  This should be
//               a reference to a GeomNode or a SequenceNode; it
//               extracts out the texture and UV range from the node.
//
//               This will remove all previously added textures and
//               animations.  It will also resize the renderer to match
//               this new geometry.
//
//               If node_path refers to a GeomNode(or has one beneath it)
//               the texture, its size, and UV data will be extracted
//               from that.
//
//               If node_path references a SequenceNode(or has one 
//               beneath it) with multiple GeomNodes beneath it, 
//               the size data will correspond only to the first 
//               GeomNode found with a valid texture, while the texture
//               and UV information will be stored for each individual
//               node.
//
//               If size_from_texels is true, the particle size is
//               based on the number of texels in the source image;
//               otherwise, it is based on the size of the first 
//               polygon found in the node.
//
//               model and node are the two items used to construct
//               node_path.  If the source type is important, use
//               set_from_node(NodePath,string,string,bool) instead.
//////////////////////////////////////////////////////////////////// 3 4 this 3 890  9 node_path 1 855  16 size_from_texels 1 806  
327 14 Dtool_KBUA_bAP 4 296 774 0 14 Dtool_KBUA_bAP 1671 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_from_node
//      Access : public
// Description : Sets the properties on this renderer from the geometry
//               referenced by the indicated NodePath.  This should be
//               a reference to a GeomNode or a SequenceNode; it
//               extracts out the texture and UV range from the node.
//
//               This will remove all previously added textures and
//               animations.  It will also resize the renderer to match
//               this new geometry.
//
//               If node_path refers to a GeomNode(or has one beneath it)
//               the texture, its size, and UV data will be extracted
//               from that.
//
//               If node_path references a SequenceNode(or has one 
//               beneath it) with multiple GeomNodes beneath it, 
//               the size data will correspond only to the first 
//               GeomNode found with a valid texture, while the texture
//               and UV information will be stored for each individual
//               node.
//
//               If size_from_texels is true, the particle size is
//               based on the number of texels in the source image;
//               otherwise, it is based on the size of the first 
//               polygon found in the node.
//
//               model and node are the two items used to construct
//               node_path.  If the source type is important, use
//               set_from_node(NodePath,string,string,bool) instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  9 node_path 1 855  
328 14 Dtool_KBUAi1NT 4 297 774 0 14 Dtool_KBUAi1NT 825 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 6 4 this 3 890  9 node_path 1 855  5 model 1 837  4 node 1 837  16 size_from_texels 1 806  6 resize 1 806  
329 14 Dtool_KBUAmXj6 4 297 774 0 14 Dtool_KBUAmXj6 825 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 5 4 this 3 890  9 node_path 1 855  5 model 1 837  4 node 1 837  16 size_from_texels 1 806  
330 14 Dtool_KBUAfFKq 4 297 774 0 14 Dtool_KBUAfFKq 825 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If the source type is important, use this one.
//
//               model and node should lead to node_path like this:
//               node_path = loader.loadModel(model).find(node)
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 4 4 this 3 890  9 node_path 1 855  5 model 1 837  4 node 1 837  
331 14 Dtool_KBUA8PJY 4 297 774 0 14 Dtool_KBUA8PJY 623 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 4 4 this 3 890  9 node_path 1 855  16 size_from_texels 1 806  6 resize 1 806  
332 14 Dtool_KBUA4QoW 4 297 774 0 14 Dtool_KBUA4QoW 623 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 3 4 this 3 890  9 node_path 1 855  16 size_from_texels 1 806  
333 14 Dtool_KBUAaZnV 4 297 774 0 14 Dtool_KBUAaZnV 623 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_from_node
//      Access : public
// Description : This will allow the renderer to randomly choose
//               from more than one texture or sequence at particle
//               birth.
//
//               If resize is true, or if there are no textures 
//               currently on the renderer, it will force the 
//               renderer to use the size information from this 
//               node from now on. (Default is false)
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  9 node_path 1 855  
334 14 Dtool_KBUAtzOm 4 298 774 0 14 Dtool_KBUAtzOm 1089 // Filename: spriteParticleRenderer.I
// Created by:  charles (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_texture
//      Access : Published
// Description : Sets the renderer up to render the entire texture
//               image.  The scale of each particle is based on the
//               size of the texture in each dimension, modified by
//               texels_per_unit.
//
//               Used to set the size of the particles.  Will clear
//               all previously loaded textures and animations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 890  3 tex 1 891  15 texels_per_unit 1 775  
335 14 Dtool_KBUAsbbZ 4 298 774 0 14 Dtool_KBUAsbbZ 1089 // Filename: spriteParticleRenderer.I
// Created by:  charles (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_texture
//      Access : Published
// Description : Sets the renderer up to render the entire texture
//               image.  The scale of each particle is based on the
//               size of the texture in each dimension, modified by
//               texels_per_unit.
//
//               Used to set the size of the particles.  Will clear
//               all previously loaded textures and animations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  3 tex 1 891  
336 14 Dtool_KBUAYIZu 4 299 774 0 14 Dtool_KBUAYIZu 469 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
//////////////////////////////////////////////////////////////////// 4 4 this 3 890  3 tex 1 891  15 texels_per_unit 1 775  6 resize 1 806  
337 14 Dtool_KBUAEs3s 4 299 774 0 14 Dtool_KBUAEs3s 469 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
//////////////////////////////////////////////////////////////////// 3 4 this 3 890  3 tex 1 891  15 texels_per_unit 1 775  
338 14 Dtool_KBUAtaAg 4 299 774 0 14 Dtool_KBUAtaAg 469 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::add_texture
//      Access : Published
// Description : Adds texture to image pool, effectively creating a 
//               single frame animation that can be selected at 
//               particle birth.  This should only be called after
//               a previous call to set_texture().
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  3 tex 1 891  
339 14 Dtool_KBUA9ji9 4 300 774 0 14 Dtool_KBUA9ji9 291 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::remove_animation
//      Access : Published
// Description : Removes an animation texture set from the renderer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  1 n 1 784  
340 14 Dtool_KBUAg2Qj 4 301 774 0 14 Dtool_KBUAg2Qj 477 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  5 ll_uv 1 872  
341 14 Dtool_KBUA3fm3 4 301 774 0 14 Dtool_KBUA3fm3 477 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ll_uv
//      Access : public
// Description : Sets the UV coordinate of the lower-left corner of
//               all the sprites generated by this renderer.  Normally
//               this is (0, 0), but it might be set to something else
//               to use only a portion of the texture.
//////////////////////////////////////////////////////////////////// 4 4 this 3 890  5 ll_uv 1 872  4 anim 1 784  5 frame 1 784  
342 14 Dtool_KBUAKsff 4 302 774 0 14 Dtool_KBUAKsff 478 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  5 ur_uv 1 872  
343 14 Dtool_KBUAHq3z 4 302 774 0 14 Dtool_KBUAHq3z 478 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_ur_uv
//      Access : public
// Description : Sets the UV coordinate of the upper-right corner of
//               all the sprites generated by this renderer.  Normally
//               this is (1, 1), but it might be set to something else
//               to use only a portion of the texture.
//////////////////////////////////////////////////////////////////// 4 4 this 3 890  5 ur_uv 1 872  4 anim 1 784  5 frame 1 784  
344 14 Dtool_KBUAMuoG 4 303 774 0 14 Dtool_KBUAMuoG 275 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::set_size
//      Access : public
// Description : Sets the size of each particle in world units.
//////////////////////////////////////////////////////////////////// 3 4 this 3 890  5 width 1 775  6 height 1 775  
345 14 Dtool_KBUAQJ7q 4 304 774 0 14 Dtool_KBUAQJ7q 206 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_color
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  5 color 1 815  
346 14 Dtool_KBUA0uOC 4 305 774 0 14 Dtool_KBUA0uOC 213 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_x_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  15 animate_x_ratio 1 806  
347 14 Dtool_KBUAMpOe 4 306 774 0 14 Dtool_KBUAMpOe 213 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_y_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  15 animate_y_ratio 1 806  
348 14 Dtool_KBUADpse 4 307 774 0 14 Dtool_KBUADpse 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_anim_angle_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  13 animate_theta 1 806  
349 14 Dtool_KBUAFv64 4 308 774 0 14 Dtool_KBUAFv64 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  15 initial_x_scale 1 775  
350 14 Dtool_KBUA6PRG 4 309 774 0 14 Dtool_KBUA6PRG 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  13 final_x_scale 1 775  
351 14 Dtool_KBUALvDH 4 310 774 0 14 Dtool_KBUALvDH 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_initial_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  15 initial_y_scale 1 775  
352 14 Dtool_KBUAe3VG 4 311 774 0 14 Dtool_KBUAe3VG 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_final_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  13 final_y_scale 1 775  
353 14 Dtool_KBUARm_e 4 312 774 0 14 Dtool_KBUARm_e 218 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_nonanimated_theta
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  5 theta 1 775  
354 14 Dtool_KBUAvlsQ 4 313 774 0 14 Dtool_KBUAvlsQ 219 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_blend_method
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  2 bm 1 739  
355 14 Dtool_KBUA4EbD 4 314 774 0 14 Dtool_KBUA4EbD 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_alpha_disable
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  2 ad 1 806  
356 14 Dtool_KBUAogMu 4 315 774 0 14 Dtool_KBUAogMu 222 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_enable
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  2 an 1 806  
357 14 Dtool_KBUAfktH 4 316 774 0 14 Dtool_KBUAfktH 220 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_rate
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  1 r 1 775  
358 14 Dtool_KBUAtvzD 4 317 774 0 14 Dtool_KBUAtvzD 289 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::set_animate_frames_index
//   Access : public
//  Purpose : Sets the frame to be used when animation is disabled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 890  1 i 1 784  
359 14 Dtool_KBUAcWud 7 318 891 0 14 Dtool_KBUAcWud 208 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
360 14 Dtool_KBUAhmHw 7 318 891 0 14 Dtool_KBUAhmHw 208 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_texture
//   Access : public
//////////////////////////////////////////////////////////////////// 3 4 this 3 888  4 anim 1 784  5 frame 1 784  
361 14 Dtool_KBUAnaIS 6 319 784 0 14 Dtool_KBUAnaIS 0 1 4 this 3 888  
362 14 Dtool_KBUA7Ce7 7 320 885 664 14 Dtool_KBUA7Ce7 0 2 4 this 3 888  1 n 1 784  
363 14 Dtool_KBUA0HRb 7 321 885 664 14 Dtool_KBUA0HRb 0 1 4 this 3 888  
364 14 Dtool_KBUA8qOw 7 322 834 0 14 Dtool_KBUA8qOw 228 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color_interpolation_manager
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
365 14 Dtool_KBUAnEn7 7 323 875 0 14 Dtool_KBUAnEn7 315 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
366 14 Dtool_KBUAQndl 7 323 875 0 14 Dtool_KBUAQndl 315 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ll_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ll_uv().
//////////////////////////////////////////////////////////////////// 3 4 this 3 888  4 anim 1 784  5 frame 1 784  
367 14 Dtool_KBUAcR23 7 324 875 0 14 Dtool_KBUAcR23 315 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the lower-left corner;
//               see set_ur_uv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
368 14 Dtool_KBUA_Jsh 7 324 875 0 14 Dtool_KBUA_Jsh 316 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_ur_uv
//      Access : public
// Description : Returns the UV coordinate of the upper-right corner;
//               see set_ur_uv().
//////////////////////////////////////////////////////////////////// 3 4 this 3 888  4 anim 1 784  5 frame 1 784  
369 14 Dtool_KBUA_2E2 6 325 775 0 14 Dtool_KBUA_2E2 280 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_width
//      Access : public
// Description : Returns the width of each particle in world units.
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
370 14 Dtool_KBUAvZvq 6 326 775 0 14 Dtool_KBUAvZvq 282 ////////////////////////////////////////////////////////////////////
//    Function : SpriteParticleRenderer::get_height
//      Access : public
// Description : Returns the height of each particle in world units.
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
371 14 Dtool_KBUATSQe 7 327 813 0 14 Dtool_KBUATSQe 206 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_color
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
372 14 Dtool_KBUAFsYl 6 328 806 0 14 Dtool_KBUAFsYl 213 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_x_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
373 14 Dtool_KBUAChYB 6 329 806 0 14 Dtool_KBUAChYB 213 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_y_scale_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
374 14 Dtool_KBUAS3Kv 6 330 806 0 14 Dtool_KBUAS3Kv 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_anim_angle_flag
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
375 14 Dtool_KBUA9dBl 6 331 775 0 14 Dtool_KBUA9dBl 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
376 14 Dtool_KBUAyH8a 6 332 775 0 14 Dtool_KBUAyH8a 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_x_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
377 14 Dtool_KBUA_dIz 6 333 775 0 14 Dtool_KBUA_dIz 216 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_initial_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
378 14 Dtool_KBUAePBb 6 334 775 0 14 Dtool_KBUAePBb 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_final_y_scale
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
379 14 Dtool_KBUAqpFo 6 335 775 0 14 Dtool_KBUAqpFo 218 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_nonanimated_theta
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
380 14 Dtool_KBUApCjT 6 336 739 0 14 Dtool_KBUApCjT 219 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_blend_method
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
381 14 Dtool_KBUAb0hv 6 337 806 0 14 Dtool_KBUAb0hv 214 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_alpha_disable
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
382 14 Dtool_KBUAQSZa 6 338 806 0 14 Dtool_KBUAQSZa 222 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_enable
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
383 14 Dtool_KBUAZ9OC 6 339 775 0 14 Dtool_KBUAZ9OC 220 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_rate
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
384 14 Dtool_KBUAy_fV 6 340 784 0 14 Dtool_KBUAy_fV 289 ////////////////////////////////////////////////////////////////////
// Function : SpriteParticleRenderer::get_animate_frames_index
//   Access : public
//  Purpose : Gets the frame to be used when animation is disabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 888  
385 14 Dtool_KBUAH572 7 342 893 0 14 Dtool_KBUAH572 0 0 
386 14 Dtool_KBUAgJHT 7 342 893 0 14 Dtool_KBUAgJHT 234 ////////////////////////////////////////////////////////////////////
//     Function : tangentRingEmitter
//       Access : public
//  Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 894  
387 14 Dtool_KBUAT__C 4 343 774 0 14 Dtool_KBUAT__C 681 // Filename: tangentRingEmitter.I
// Created by:  charles (25Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : set_radius
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 893  1 r 1 775  
388 14 Dtool_KBUAoxqb 4 344 774 0 14 Dtool_KBUAoxqb 192 ////////////////////////////////////////////////////////////////////
//  Function : set_radius_spread
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 893  6 spread 1 775  
389 14 Dtool_KBUA72eo 6 345 775 0 14 Dtool_KBUA72eo 185 ////////////////////////////////////////////////////////////////////
//  Function : get_radius
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 894  
390 14 Dtool_KBUAg_tm 6 346 775 0 14 Dtool_KBUAg_tm 192 ////////////////////////////////////////////////////////////////////
//  Function : get_radius_spread
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 894  
391 14 Dtool_KBUACYSj 7 348 896 0 14 Dtool_KBUACYSj 228 ////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
392 14 Dtool_KBUA_nkG 7 348 896 0 14 Dtool_KBUA_nkG 233 ////////////////////////////////////////////////////////////////////
//    Function : ZSpinParticleFactory
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 897  
393 14 Dtool_KBUAJQKd 4 349 774 0 14 Dtool_KBUAJQKd 688 // Filename: zSpinParticleFactory.I
// Created by:  charles (16Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_initial_angle
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 896  5 angle 1 775  
394 14 Dtool_KBUA_A2T 4 350 774 0 14 Dtool_KBUA_A2T 188 ////////////////////////////////////////////////////////////////////
// Function : set_final_angle
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 896  5 angle 1 775  
395 14 Dtool_KBUAZoPY 4 351 774 0 14 Dtool_KBUAZoPY 197 ////////////////////////////////////////////////////////////////////
// Function : set_initial_angle_spread
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 896  6 spread 1 775  
396 14 Dtool_KBUAAxxa 4 352 774 0 14 Dtool_KBUAAxxa 195 ////////////////////////////////////////////////////////////////////
// Function : set_final_angle_spread
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 896  6 spread 1 775  
397 14 Dtool_KBUAZ6E9 6 353 775 0 14 Dtool_KBUAZ6E9 190 ////////////////////////////////////////////////////////////////////
// Function : get_initial_angle
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 897  
398 14 Dtool_KBUAUZT9 6 354 775 0 14 Dtool_KBUAUZT9 188 ////////////////////////////////////////////////////////////////////
// Function : get_final_angle
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 897  
399 14 Dtool_KBUAjK1c 6 355 775 0 14 Dtool_KBUAjK1c 197 ////////////////////////////////////////////////////////////////////
// Function : get_initial_angle_spread
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 897  
400 14 Dtool_KBUAuV0_ 6 356 775 0 14 Dtool_KBUAuV0_ 195 ////////////////////////////////////////////////////////////////////
// Function : get_final_angle_spread
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 897  
401 14 Dtool_KBUALOQE 4 357 774 0 14 Dtool_KBUALOQE 0 2 4 this 3 896  1 v 1 775  
402 14 Dtool_KBUAS1Y8 6 358 775 0 14 Dtool_KBUAS1Y8 193 ////////////////////////////////////////////////////////////////////
// Function : get_angular_velocity
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 897  
403 14 Dtool_KBUAsUGS 4 359 774 0 14 Dtool_KBUAsUGS 0 2 4 this 3 896  6 spread 1 775  
404 14 Dtool_KBUALycB 6 360 775 0 14 Dtool_KBUALycB 0 1 4 this 3 897  
405 14 Dtool_KBUAmOcc 4 361 774 0 14 Dtool_KBUAmOcc 0 2 4 this 3 896  8 bEnabled 1 806  
406 14 Dtool_KBUA2hT8 6 362 806 0 14 Dtool_KBUA2hT8 0 1 4 this 3 897  
169
731 19 BaseParticleEmitter 75777 19 BaseParticleEmitter 19 BaseParticleEmitter 0 0 0 0 0 0 16 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 0 0 1 0 732 0 0 0 1 733 289
////////////////////////////////////////////////////////////// //////
//       Class : BaseParticleEmitter
// Description : Describes a physical region in space in which
//               particles are randomly generated.
////////////////////////////////////////////////////////////////////

732 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

733 12 emissionType 794624 33 BaseParticleEmitter::emissionType 33 BaseParticleEmitter::emissionType 731 0 0 0 0 0 0 0 0 0 3 11 ET_EXPLICIT 32 BaseParticleEmitter::ET_EXPLICIT 0 10 ET_RADIATE 31 BaseParticleEmitter::ET_RADIATE 1 9 ET_CUSTOM 30 BaseParticleEmitter::ET_CUSTOM 2 0 0

734 11 RingEmitter 75777 11 RingEmitter 11 RingEmitter 0 0 0 1 423 0 0 8 424 425 426 427 428 429 430 431 0 0 1 0 731 0 0 0 0 0

735 10 ArcEmitter 75777 10 ArcEmitter 10 ArcEmitter 0 0 0 1 432 0 0 5 433 434 435 436 437 0 0 1 0 734 0 0 0 0 0

736 19 BaseParticleFactory 75777 19 BaseParticleFactory 19 BaseParticleFactory 0 0 0 0 0 0 16 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 0 0 1 0 732 0 0 0 0 238
////////////////////////////////////////////////////////////////////
//       Class : BaseParticleFactory
// Description : Pure Virtual base class for creating particles
////////////////////////////////////////////////////////////////////

737 20 BaseParticleRenderer 75777 20 BaseParticleRenderer 20 BaseParticleRenderer 0 0 0 0 0 0 11 454 455 456 457 458 459 460 461 462 463 464 0 0 1 0 732 0 0 0 2 738 739 234
////////////////////////////////////////////////////////////////////
//       Class : BaseParticleRenderer
// Description : Pure virtual particle renderer base class
////////////////////////////////////////////////////////////////////

738 25 ParticleRendererAlphaMode 794624 47 BaseParticleRenderer::ParticleRendererAlphaMode 47 BaseParticleRenderer::ParticleRendererAlphaMode 737 0 0 0 0 0 0 0 0 0 6 13 PR_ALPHA_NONE 35 BaseParticleRenderer::PR_ALPHA_NONE 0 12 PR_ALPHA_OUT 34 BaseParticleRenderer::PR_ALPHA_OUT 1 11 PR_ALPHA_IN 33 BaseParticleRenderer::PR_ALPHA_IN 2 15 PR_ALPHA_IN_OUT 37 BaseParticleRenderer::PR_ALPHA_IN_OUT 3 13 PR_ALPHA_USER 35 BaseParticleRenderer::PR_ALPHA_USER 4 22 PR_NOT_INITIALIZED_YET 44 BaseParticleRenderer::PR_NOT_INITIALIZED_YET 5 0 0

739 27 ParticleRendererBlendMethod 794624 49 BaseParticleRenderer::ParticleRendererBlendMethod 49 BaseParticleRenderer::ParticleRendererBlendMethod 737 0 0 0 0 0 0 0 0 0 3 11 PP_NO_BLEND 33 BaseParticleRenderer::PP_NO_BLEND 0 15 PP_BLEND_LINEAR 37 BaseParticleRenderer::PP_BLEND_LINEAR 1 14 PP_BLEND_CUBIC 36 BaseParticleRenderer::PP_BLEND_CUBIC 2 0 0

740 10 BoxEmitter 75777 10 BoxEmitter 10 BoxEmitter 0 0 0 1 465 0 0 4 466 467 468 469 0 0 1 0 731 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : BoxEmitter
// Description : Describes a voluminous box region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

741 34 ColorInterpolationFunctionConstant 141313 34 ColorInterpolationFunctionConstant 34 ColorInterpolationFunctionConstant 0 0 0 0 473 0 3 470 471 472 0 0 1 0 742 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionConstant
// Description : Defines a constant color over the lifetime of
//               the segment.
////////////////////////////////////////////////////////////////////

742 26 ColorInterpolationFunction 1050625 26 ColorInterpolationFunction 26 ColorInterpolationFunction 0 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunction
// Description : Abstract class from which all other functions 
//               should inherit. Defines the virtual interpolate()
//               function.
////////////////////////////////////////////////////////////////////

743 32 ColorInterpolationFunctionLinear 141313 32 ColorInterpolationFunctionLinear 32 ColorInterpolationFunctionLinear 0 0 0 0 477 0 3 474 475 476 0 0 1 0 741 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionLinear
// Description : Defines a linear interpolation over the lifetime of
//               the segment.
////////////////////////////////////////////////////////////////////

744 34 ColorInterpolationFunctionStepwave 141313 34 ColorInterpolationFunctionStepwave 34 ColorInterpolationFunctionStepwave 0 0 0 0 483 0 5 478 479 480 481 482 0 0 1 0 743 0 0 0 0 523
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionStepwave
// Description : Defines a discrete cyclical transition between two colors.
//               The widths describe a portion of the segment's lifetime
//               for which the corresponding color should be selected. If
//               their sum is less than 1, the function repeats until
//               the end of the segment.
////////////////////////////////////////////////////////////////////

745 34 ColorInterpolationFunctionSinusoid 141313 34 ColorInterpolationFunctionSinusoid 34 ColorInterpolationFunctionSinusoid 0 0 0 0 487 0 3 484 485 486 0 0 1 0 743 0 0 0 0 545
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationFunctionSinusoid
// Description : Defines a sinusoidal blending between two colors.
//               A period of "1" corresponds to a single transition 
//               from color_a to color_b and then back to color_a 
//               over the course of the segment's lifetime. A 
//               shorter period will result in a higher frequency
//               cycle.
////////////////////////////////////////////////////////////////////

746 25 ColorInterpolationSegment 75777 25 ColorInterpolationSegment 25 ColorInterpolationSegment 0 0 0 1 488 0 0 11 489 490 491 492 493 494 495 496 497 498 499 0 0 1 0 732 0 0 0 0 440
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationSegment
// Description : A single unit of interpolation. The begin and end
//               times are interpolated over the lifetime of the 
//               particle, thus have the range of [0,1]. Each segment
//               also has a function associated with it.
////////////////////////////////////////////////////////////////////

747 25 ColorInterpolationManager 75777 25 ColorInterpolationManager 25 ColorInterpolationManager 0 0 0 1 500 0 0 9 501 502 503 504 505 506 507 508 509 0 0 1 0 732 0 0 0 0 478
////////////////////////////////////////////////////////////////////
//       Class : ColorInterpolationManager
// Description : High level class for color interpolation.  Segments
//               must be added to the manager in order to achieve
//               results using the "add_*****()" functions.  Access
//               to these segments is provided but not necessary
//               general use.
////////////////////////////////////////////////////////////////////

748 11 DiscEmitter 75777 11 DiscEmitter 11 DiscEmitter 0 0 0 1 510 0 0 12 511 512 513 514 515 516 517 518 519 520 521 522 0 0 1 0 731 0 0 0 0 266
////////////////////////////////////////////////////////////////////
//       Class : DiscEmitter
// Description : Describes a planar disc region from which particles
//               are generated
////////////////////////////////////////////////////////////////////

749 20 GeomParticleRenderer 75777 20 GeomParticleRenderer 20 GeomParticleRenderer 0 0 0 1 523 0 0 21 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 0 0 1 0 737 0 0 0 0 0

750 11 LineEmitter 75777 11 LineEmitter 11 LineEmitter 0 0 0 1 545 0 0 4 546 547 548 549 0 0 1 0 731 0 0 0 0 260
////////////////////////////////////////////////////////////////////
//       Class : LineEmitter
// Description : Describes a linear region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

751 20 LineParticleRenderer 75777 20 LineParticleRenderer 20 LineParticleRenderer 0 0 0 1 550 0 0 6 551 552 553 554 555 556 0 0 1 0 737 0 0 0 0 294
////////////////////////////////////////////////////////////////////
//       Class : LineParticleRenderer
// Description : renders a line from last position to current
//               position -- good for rain, sparks, etc.
////////////////////////////////////////////////////////////////////

752 14 ParticleSystem 75777 14 ParticleSystem 14 ParticleSystem 0 0 0 1 557 0 0 52 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 0 0 1 0 753 0 0 0 0 226
////////////////////////////////////////////////////////////////////
//       Class : ParticleSystem
// Description : Contains and manages a particle system.
////////////////////////////////////////////////////////////////////

753 8 Physical 2049 8 Physical 8 Physical 0 0 0 0 0 0 0 2 900 901 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : Physical
// Description : Defines a set of physically modeled attributes.
//               If you want physics applied to your class, derive
//               it from this.
////////////////////////////////////////////////////////////////////

754 21 ParticleSystemManager 26625 21 ParticleSystemManager 21 ParticleSystemManager 0 0 0 1 610 611 0 9 612 613 614 615 616 617 618 619 620 0 0 0 0 0 402
////////////////////////////////////////////////////////////////////
//       Class : ParticleSystemManager
// Description : Manages a set of individual ParticleSystem objects,
//               so that each individual one doesn't have to be
//               updated and rendered every frame
//    See Also : particleSystemManager.cxx
////////////////////////////////////////////////////////////////////

755 12 PointEmitter 75777 12 PointEmitter 12 PointEmitter 0 0 0 1 621 0 0 2 622 623 0 0 1 0 731 0 0 0 0 266
////////////////////////////////////////////////////////////////////
//       Class : PointEmitter
// Description : Describes a planar ring region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

756 20 PointParticleFactory 75777 20 PointParticleFactory 20 PointParticleFactory 0 0 0 1 624 0 0 0 0 0 1 0 736 0 0 0 0 230
////////////////////////////////////////////////////////////////////
//       Class : PointParticleFactory
// Description : Creates point particles to user specs
////////////////////////////////////////////////////////////////////

757 21 PointParticleRenderer 75777 21 PointParticleRenderer 21 PointParticleRenderer 0 0 0 1 625 0 0 10 626 627 628 629 630 631 632 633 634 635 0 0 1 0 737 0 0 0 1 758 334
////////////////////////////////////////////////////////////////////
//       Class : PointParticleRenderer
// Description : Simple point/point particle renderer.  Does NOT
//               handle billboards- use BillboardParticleRenderer
//               for that.
////////////////////////////////////////////////////////////////////

758 22 PointParticleBlendType 794624 45 PointParticleRenderer::PointParticleBlendType 45 PointParticleRenderer::PointParticleBlendType 757 0 0 0 0 0 0 0 0 0 3 12 PP_ONE_COLOR 35 PointParticleRenderer::PP_ONE_COLOR 0 13 PP_BLEND_LIFE 36 PointParticleRenderer::PP_BLEND_LIFE 1 12 PP_BLEND_VEL 35 PointParticleRenderer::PP_BLEND_VEL 2 0 0

759 16 RectangleEmitter 75777 16 RectangleEmitter 16 RectangleEmitter 0 0 0 1 636 0 0 4 637 638 639 640 0 0 1 0 731 0 0 0 0 272
////////////////////////////////////////////////////////////////////
//       Class : RectangleEmitter
// Description : Describes a planar square region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

760 23 SparkleParticleRenderer 75777 23 SparkleParticleRenderer 23 SparkleParticleRenderer 0 0 0 1 641 0 0 10 642 643 644 645 646 647 648 649 650 651 0 0 1 0 737 0 0 0 1 761 218
////////////////////////////////////////////////////////////////////
//       Class : SparkleParticleRenderer
// Description : pretty sparkly things.
////////////////////////////////////////////////////////////////////

761 24 SparkleParticleLifeScale 794624 49 SparkleParticleRenderer::SparkleParticleLifeScale 49 SparkleParticleRenderer::SparkleParticleLifeScale 760 0 0 0 0 0 0 0 0 0 2 11 SP_NO_SCALE 36 SparkleParticleRenderer::SP_NO_SCALE 0 8 SP_SCALE 33 SparkleParticleRenderer::SP_SCALE 1 0 0

762 20 SphereSurfaceEmitter 75777 20 SphereSurfaceEmitter 20 SphereSurfaceEmitter 0 0 0 1 652 0 0 2 653 654 0 0 1 0 731 0 0 0 0 268
////////////////////////////////////////////////////////////////////
//       Class : SphereSurfaceEmitter
// Description : Describes a curved space in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

763 19 SphereVolumeEmitter 75777 19 SphereVolumeEmitter 19 SphereVolumeEmitter 0 0 0 1 655 0 0 2 656 657 0 0 1 0 731 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : SphereVolumeEmitter
// Description : Describes a voluminous spherical region in which
//               particles are generated.
////////////////////////////////////////////////////////////////////

764 10 SpriteAnim 141313 10 SpriteAnim 10 SpriteAnim 0 0 0 0 664 0 6 658 659 660 661 662 663 0 0 1 0 732 0 0 0 1 765 335
////////////////////////////////////////////////////////////////////
//       Class : SpriteAnim
// Description : Helper class used by SpriteParticleRenderer to
//               keep track of its textures and their respective UVs
//               and source types.  
////////////////////////////////////////////////////////////////////

765 10 SourceType 794624 22 SpriteAnim::SourceType 22 SpriteAnim::SourceType 764 0 0 0 0 0 0 0 0 0 2 10 ST_texture 22 SpriteAnim::ST_texture 0 12 ST_from_node 24 SpriteAnim::ST_from_node 1 0 0

766 22 SpriteParticleRenderer 75777 22 SpriteParticleRenderer 22 SpriteParticleRenderer 0 0 0 1 665 0 0 45 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 1 902 0 1 0 737 0 0 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : SpriteParticleRenderer
// Description : Renders a particle system with high-speed nasty
//               trick sprites.
////////////////////////////////////////////////////////////////////

767 18 TangentRingEmitter 75777 18 TangentRingEmitter 18 TangentRingEmitter 0 0 0 1 711 0 0 4 712 713 714 715 0 0 1 0 731 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : TangentRingEmitter
// Description : Describes a planar ring region in which
//               tangent particles are generated, and particles
//               fly off tangential to the ring.
////////////////////////////////////////////////////////////////////

768 20 ZSpinParticleFactory 75777 20 ZSpinParticleFactory 20 ZSpinParticleFactory 0 0 0 1 716 0 0 14 717 718 719 720 721 722 723 724 725 726 727 728 729 730 0 0 1 0 736 0 0 0 0 192
////////////////////////////////////////////////////////////////////
//       Class : ZSpinParticleFactory
// Description :
////////////////////////////////////////////////////////////////////

769 21 BaseParticleEmitter * 8576 21 BaseParticleEmitter * 21 BaseParticleEmitter * 0 0 731 0 0 0 0 0 0 0 0 0 0

770 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 771 0 0 0 0 0 0 0 0 0 0

771 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

772 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 773 0 0 0 0 0 0 0 0 0 0

773 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

774 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

775 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

776 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 777 0 0 0 0 0 0 0 0 0 0

777 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 773 0 0 0 0 0 0 0 0 0 0

778 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 779 0 0 0 0 0 0 0 0 0 0

779 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 771 0 0 0 0 0 0 0 0 0 0

780 27 BaseParticleEmitter const * 8576 27 BaseParticleEmitter const * 27 BaseParticleEmitter const * 0 0 781 0 0 0 0 0 0 0 0 0 0

781 25 BaseParticleEmitter const 8832 25 BaseParticleEmitter const 25 BaseParticleEmitter const 0 0 731 0 0 0 0 0 0 0 0 0 0

782 9 ostream * 8576 9 ostream * 9 ostream * 0 0 783 0 0 0 0 0 0 0 0 0 0

783 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

784 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

785 13 RingEmitter * 8576 13 RingEmitter * 13 RingEmitter * 0 0 734 0 0 0 0 0 0 0 0 0 0

786 19 RingEmitter const * 8576 19 RingEmitter const * 19 RingEmitter const * 0 0 787 0 0 0 0 0 0 0 0 0 0

787 17 RingEmitter const 8832 17 RingEmitter const 17 RingEmitter const 0 0 734 0 0 0 0 0 0 0 0 0 0

788 12 ArcEmitter * 8576 12 ArcEmitter * 12 ArcEmitter * 0 0 735 0 0 0 0 0 0 0 0 0 0

789 18 ArcEmitter const * 8576 18 ArcEmitter const * 18 ArcEmitter const * 0 0 790 0 0 0 0 0 0 0 0 0 0

790 16 ArcEmitter const 8832 16 ArcEmitter const 16 ArcEmitter const 0 0 735 0 0 0 0 0 0 0 0 0 0

791 21 BaseParticleFactory * 8576 21 BaseParticleFactory * 21 BaseParticleFactory * 0 0 736 0 0 0 0 0 0 0 0 0 0

792 27 BaseParticleFactory const * 8576 27 BaseParticleFactory const * 27 BaseParticleFactory const * 0 0 793 0 0 0 0 0 0 0 0 0 0

793 25 BaseParticleFactory const 8832 25 BaseParticleFactory const 25 BaseParticleFactory const 0 0 736 0 0 0 0 0 0 0 0 0 0

794 14 BaseParticle * 8576 14 BaseParticle * 14 BaseParticle * 0 0 795 0 0 0 0 0 0 0 0 0 0

795 12 BaseParticle 1050624 12 BaseParticle 12 BaseParticle 0 0 0 0 0 0 0 0 0 0 0 0 0

796 8 GeomNode 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 2 903 904 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

797 28 BaseParticleRenderer const * 8576 28 BaseParticleRenderer const * 28 BaseParticleRenderer const * 0 0 798 0 0 0 0 0 0 0 0 0 0

798 26 BaseParticleRenderer const 8832 26 BaseParticleRenderer const 26 BaseParticleRenderer const 0 0 737 0 0 0 0 0 0 0 0 0 0

799 10 GeomNode * 8576 10 GeomNode * 10 GeomNode * 0 0 796 0 0 0 0 0 0 0 0 0 0

800 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 905 906 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

801 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 800 0 0 0 0 0 0 0 0 0 0

802 22 BaseParticleRenderer * 8576 22 BaseParticleRenderer * 22 BaseParticleRenderer * 0 0 737 0 0 0 0 0 0 0 0 0 0

803 4 Mode 794624 22 ColorBlendAttrib::Mode 22 ColorBlendAttrib::Mode 804 0 0 0 0 0 0 0 0 0 6 6 M_none 24 ColorBlendAttrib::M_none 0 5 M_add 23 ColorBlendAttrib::M_add 1 10 M_subtract 28 ColorBlendAttrib::M_subtract 2 14 M_inv_subtract 32 ColorBlendAttrib::M_inv_subtract 3 5 M_min 23 ColorBlendAttrib::M_min 4 5 M_max 23 ColorBlendAttrib::M_max 5 0 0

804 16 ColorBlendAttrib 2048 16 ColorBlendAttrib 16 ColorBlendAttrib 0 0 0 0 0 0 0 0 0 0 0 0 368
////////////////////////////////////////////////////////////////////
//       Class : ColorBlendAttrib
// Description : This specifies how colors are blended into the frame
//               buffer, for special effects.  This overrides
//               transparency if transparency is also specified.
////////////////////////////////////////////////////////////////////

805 7 Operand 794624 25 ColorBlendAttrib::Operand 25 ColorBlendAttrib::Operand 804 0 0 0 0 0 0 0 0 0 19 6 O_zero 24 ColorBlendAttrib::O_zero 0 5 O_one 23 ColorBlendAttrib::O_one 1 16 O_incoming_color 34 ColorBlendAttrib::O_incoming_color 2 26 O_one_minus_incoming_color 44 ColorBlendAttrib::O_one_minus_incoming_color 3 15 O_fbuffer_color 33 ColorBlendAttrib::O_fbuffer_color 4 25 O_one_minus_fbuffer_color 43 ColorBlendAttrib::O_one_minus_fbuffer_color 5 16 O_incoming_alpha 34 ColorBlendAttrib::O_incoming_alpha 6 26 O_one_minus_incoming_alpha 44 ColorBlendAttrib::O_one_minus_incoming_alpha 7 15 O_fbuffer_alpha 33 ColorBlendAttrib::O_fbuffer_alpha 8 25 O_one_minus_fbuffer_alpha 43 ColorBlendAttrib::O_one_minus_fbuffer_alpha 9 16 O_constant_color 34 ColorBlendAttrib::O_constant_color 10 26 O_one_minus_constant_color 44 ColorBlendAttrib::O_one_minus_constant_color 11 16 O_constant_alpha 34 ColorBlendAttrib::O_constant_alpha 12 26 O_one_minus_constant_alpha 44 ColorBlendAttrib::O_one_minus_constant_alpha 13 25 O_incoming_color_saturate 43 ColorBlendAttrib::O_incoming_color_saturate 14 13 O_color_scale 31 ColorBlendAttrib::O_color_scale 15 23 O_one_minus_color_scale 41 ColorBlendAttrib::O_one_minus_color_scale 16 13 O_alpha_scale 31 ColorBlendAttrib::O_alpha_scale 17 23 O_one_minus_alpha_scale 41 ColorBlendAttrib::O_one_minus_alpha_scale 18 0 0

806 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

807 12 BoxEmitter * 8576 12 BoxEmitter * 12 BoxEmitter * 0 0 740 0 0 0 0 0 0 0 0 0 0

808 18 BoxEmitter const * 8576 18 BoxEmitter const * 18 BoxEmitter const * 0 0 809 0 0 0 0 0 0 0 0 0 0

809 16 BoxEmitter const 8832 16 BoxEmitter const 16 BoxEmitter const 0 0 740 0 0 0 0 0 0 0 0 0 0

810 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

811 42 ColorInterpolationFunctionConstant const * 8576 42 ColorInterpolationFunctionConstant const * 42 ColorInterpolationFunctionConstant const * 0 0 812 0 0 0 0 0 0 0 0 0 0

812 40 ColorInterpolationFunctionConstant const 8832 40 ColorInterpolationFunctionConstant const 40 ColorInterpolationFunctionConstant const 0 0 741 0 0 0 0 0 0 0 0 0 0

813 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 810 0 0 0 0 0 0 0 0 0 0

814 36 ColorInterpolationFunctionConstant * 8576 36 ColorInterpolationFunctionConstant * 36 ColorInterpolationFunctionConstant * 0 0 741 0 0 0 0 0 0 0 0 0 0

815 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 816 0 0 0 0 0 0 0 0 0 0

816 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 810 0 0 0 0 0 0 0 0 0 0

817 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

818 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 817 0 0 0 0 0 0 0 0 0 0

819 40 ColorInterpolationFunctionLinear const * 8576 40 ColorInterpolationFunctionLinear const * 40 ColorInterpolationFunctionLinear const * 0 0 820 0 0 0 0 0 0 0 0 0 0

820 38 ColorInterpolationFunctionLinear const 8832 38 ColorInterpolationFunctionLinear const 38 ColorInterpolationFunctionLinear const 0 0 743 0 0 0 0 0 0 0 0 0 0

821 34 ColorInterpolationFunctionLinear * 8576 34 ColorInterpolationFunctionLinear * 34 ColorInterpolationFunctionLinear * 0 0 743 0 0 0 0 0 0 0 0 0 0

822 42 ColorInterpolationFunctionStepwave const * 8576 42 ColorInterpolationFunctionStepwave const * 42 ColorInterpolationFunctionStepwave const * 0 0 823 0 0 0 0 0 0 0 0 0 0

823 40 ColorInterpolationFunctionStepwave const 8832 40 ColorInterpolationFunctionStepwave const 40 ColorInterpolationFunctionStepwave const 0 0 744 0 0 0 0 0 0 0 0 0 0

824 36 ColorInterpolationFunctionStepwave * 8576 36 ColorInterpolationFunctionStepwave * 36 ColorInterpolationFunctionStepwave * 0 0 744 0 0 0 0 0 0 0 0 0 0

825 42 ColorInterpolationFunctionSinusoid const * 8576 42 ColorInterpolationFunctionSinusoid const * 42 ColorInterpolationFunctionSinusoid const * 0 0 826 0 0 0 0 0 0 0 0 0 0

826 40 ColorInterpolationFunctionSinusoid const 8832 40 ColorInterpolationFunctionSinusoid const 40 ColorInterpolationFunctionSinusoid const 0 0 745 0 0 0 0 0 0 0 0 0 0

827 36 ColorInterpolationFunctionSinusoid * 8576 36 ColorInterpolationFunctionSinusoid * 36 ColorInterpolationFunctionSinusoid * 0 0 745 0 0 0 0 0 0 0 0 0 0

828 28 ColorInterpolationFunction * 8576 28 ColorInterpolationFunction * 28 ColorInterpolationFunction * 0 0 742 0 0 0 0 0 0 0 0 0 0

829 27 ColorInterpolationSegment * 8576 27 ColorInterpolationSegment * 27 ColorInterpolationSegment * 0 0 746 0 0 0 0 0 0 0 0 0 0

830 33 ColorInterpolationSegment const * 8576 33 ColorInterpolationSegment const * 33 ColorInterpolationSegment const * 0 0 831 0 0 0 0 0 0 0 0 0 0

831 31 ColorInterpolationSegment const 8832 31 ColorInterpolationSegment const 31 ColorInterpolationSegment const 0 0 746 0 0 0 0 0 0 0 0 0 0

832 19 TypedReferenceCount 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

833 21 TypedReferenceCount * 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 832 0 0 0 0 0 0 0 0 0 0

834 27 ColorInterpolationManager * 8576 27 ColorInterpolationManager * 27 ColorInterpolationManager * 0 0 747 0 0 0 0 0 0 0 0 0 0

835 33 ColorInterpolationManager const * 8576 33 ColorInterpolationManager const * 33 ColorInterpolationManager const * 0 0 836 0 0 0 0 0 0 0 0 0 0

836 31 ColorInterpolationManager const 8832 31 ColorInterpolationManager const 31 ColorInterpolationManager const 0 0 747 0 0 0 0 0 0 0 0 0 0

837 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

838 13 DiscEmitter * 8576 13 DiscEmitter * 13 DiscEmitter * 0 0 748 0 0 0 0 0 0 0 0 0 0

839 19 DiscEmitter const * 8576 19 DiscEmitter const * 19 DiscEmitter const * 0 0 840 0 0 0 0 0 0 0 0 0 0

840 17 DiscEmitter const 8832 17 DiscEmitter const 17 DiscEmitter const 0 0 748 0 0 0 0 0 0 0 0 0 0

841 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 842 0 0 0 0 0 0 0 0 0 0

842 9 PandaNode 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

843 22 GeomParticleRenderer * 8576 22 GeomParticleRenderer * 22 GeomParticleRenderer * 0 0 749 0 0 0 0 0 0 0 0 0 0

844 28 GeomParticleRenderer const * 8576 28 GeomParticleRenderer const * 28 GeomParticleRenderer const * 0 0 845 0 0 0 0 0 0 0 0 0 0

845 26 GeomParticleRenderer const 8832 26 GeomParticleRenderer const 26 GeomParticleRenderer const 0 0 749 0 0 0 0 0 0 0 0 0 0

846 13 LineEmitter * 8576 13 LineEmitter * 13 LineEmitter * 0 0 750 0 0 0 0 0 0 0 0 0 0

847 19 LineEmitter const * 8576 19 LineEmitter const * 19 LineEmitter const * 0 0 848 0 0 0 0 0 0 0 0 0 0

848 17 LineEmitter const 8832 17 LineEmitter const 17 LineEmitter const 0 0 750 0 0 0 0 0 0 0 0 0 0

849 22 LineParticleRenderer * 8576 22 LineParticleRenderer * 22 LineParticleRenderer * 0 0 751 0 0 0 0 0 0 0 0 0 0

850 28 LineParticleRenderer const * 8576 28 LineParticleRenderer const * 28 LineParticleRenderer const * 0 0 851 0 0 0 0 0 0 0 0 0 0

851 26 LineParticleRenderer const 8832 26 LineParticleRenderer const 26 LineParticleRenderer const 0 0 751 0 0 0 0 0 0 0 0 0 0

852 22 ParticleSystem const * 8576 22 ParticleSystem const * 22 ParticleSystem const * 0 0 853 0 0 0 0 0 0 0 0 0 0

853 20 ParticleSystem const 8832 20 ParticleSystem const 20 ParticleSystem const 0 0 752 0 0 0 0 0 0 0 0 0 0

854 16 ParticleSystem * 8576 16 ParticleSystem * 16 ParticleSystem * 0 0 752 0 0 0 0 0 0 0 0 0 0

855 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 856 0 0 0 0 0 0 0 0 0 0

856 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 800 0 0 0 0 0 0 0 0 0 0

857 23 ParticleSystemManager * 8576 23 ParticleSystemManager * 23 ParticleSystemManager * 0 0 754 0 0 0 0 0 0 0 0 0 0

858 29 ParticleSystemManager const * 8576 29 ParticleSystemManager const * 29 ParticleSystemManager const * 0 0 859 0 0 0 0 0 0 0 0 0 0

859 27 ParticleSystemManager const 8832 27 ParticleSystemManager const 27 ParticleSystemManager const 0 0 754 0 0 0 0 0 0 0 0 0 0

860 14 PointEmitter * 8576 14 PointEmitter * 14 PointEmitter * 0 0 755 0 0 0 0 0 0 0 0 0 0

861 20 PointEmitter const * 8576 20 PointEmitter const * 20 PointEmitter const * 0 0 862 0 0 0 0 0 0 0 0 0 0

862 18 PointEmitter const 8832 18 PointEmitter const 18 PointEmitter const 0 0 755 0 0 0 0 0 0 0 0 0 0

863 22 PointParticleFactory * 8576 22 PointParticleFactory * 22 PointParticleFactory * 0 0 756 0 0 0 0 0 0 0 0 0 0

864 28 PointParticleFactory const * 8576 28 PointParticleFactory const * 28 PointParticleFactory const * 0 0 865 0 0 0 0 0 0 0 0 0 0

865 26 PointParticleFactory const 8832 26 PointParticleFactory const 26 PointParticleFactory const 0 0 756 0 0 0 0 0 0 0 0 0 0

866 23 PointParticleRenderer * 8576 23 PointParticleRenderer * 23 PointParticleRenderer * 0 0 757 0 0 0 0 0 0 0 0 0 0

867 29 PointParticleRenderer const * 8576 29 PointParticleRenderer const * 29 PointParticleRenderer const * 0 0 868 0 0 0 0 0 0 0 0 0 0

868 27 PointParticleRenderer const 8832 27 PointParticleRenderer const 27 PointParticleRenderer const 0 0 757 0 0 0 0 0 0 0 0 0 0

869 18 RectangleEmitter * 8576 18 RectangleEmitter * 18 RectangleEmitter * 0 0 759 0 0 0 0 0 0 0 0 0 0

870 24 RectangleEmitter const * 8576 24 RectangleEmitter const * 24 RectangleEmitter const * 0 0 871 0 0 0 0 0 0 0 0 0 0

871 22 RectangleEmitter const 8832 22 RectangleEmitter const 22 RectangleEmitter const 0 0 759 0 0 0 0 0 0 0 0 0 0

872 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 873 0 0 0 0 0 0 0 0 0 0

873 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 874 0 0 0 0 0 0 0 0 0 0

874 9 TexCoordf 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

875 10 LPoint2f * 8576 10 LPoint2f * 10 LPoint2f * 0 0 874 0 0 0 0 0 0 0 0 0 0

876 25 SparkleParticleRenderer * 8576 25 SparkleParticleRenderer * 25 SparkleParticleRenderer * 0 0 760 0 0 0 0 0 0 0 0 0 0

877 31 SparkleParticleRenderer const * 8576 31 SparkleParticleRenderer const * 31 SparkleParticleRenderer const * 0 0 878 0 0 0 0 0 0 0 0 0 0

878 29 SparkleParticleRenderer const 8832 29 SparkleParticleRenderer const 29 SparkleParticleRenderer const 0 0 760 0 0 0 0 0 0 0 0 0 0

879 22 SphereSurfaceEmitter * 8576 22 SphereSurfaceEmitter * 22 SphereSurfaceEmitter * 0 0 762 0 0 0 0 0 0 0 0 0 0

880 28 SphereSurfaceEmitter const * 8576 28 SphereSurfaceEmitter const * 28 SphereSurfaceEmitter const * 0 0 881 0 0 0 0 0 0 0 0 0 0

881 26 SphereSurfaceEmitter const 8832 26 SphereSurfaceEmitter const 26 SphereSurfaceEmitter const 0 0 762 0 0 0 0 0 0 0 0 0 0

882 21 SphereVolumeEmitter * 8576 21 SphereVolumeEmitter * 21 SphereVolumeEmitter * 0 0 763 0 0 0 0 0 0 0 0 0 0

883 27 SphereVolumeEmitter const * 8576 27 SphereVolumeEmitter const * 27 SphereVolumeEmitter const * 0 0 884 0 0 0 0 0 0 0 0 0 0

884 25 SphereVolumeEmitter const 8832 25 SphereVolumeEmitter const 25 SphereVolumeEmitter const 0 0 763 0 0 0 0 0 0 0 0 0 0

885 12 SpriteAnim * 8576 12 SpriteAnim * 12 SpriteAnim * 0 0 764 0 0 0 0 0 0 0 0 0 0

886 18 SpriteAnim const * 8576 18 SpriteAnim const * 18 SpriteAnim const * 0 0 887 0 0 0 0 0 0 0 0 0 0

887 16 SpriteAnim const 8832 16 SpriteAnim const 16 SpriteAnim const 0 0 764 0 0 0 0 0 0 0 0 0 0

888 30 SpriteParticleRenderer const * 8576 30 SpriteParticleRenderer const * 30 SpriteParticleRenderer const * 0 0 889 0 0 0 0 0 0 0 0 0 0

889 28 SpriteParticleRenderer const 8832 28 SpriteParticleRenderer const 28 SpriteParticleRenderer const 0 0 766 0 0 0 0 0 0 0 0 0 0

890 24 SpriteParticleRenderer * 8576 24 SpriteParticleRenderer * 24 SpriteParticleRenderer * 0 0 766 0 0 0 0 0 0 0 0 0 0

891 9 Texture * 8576 9 Texture * 9 Texture * 0 0 892 0 0 0 0 0 0 0 0 0 0

892 7 Texture 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

893 20 TangentRingEmitter * 8576 20 TangentRingEmitter * 20 TangentRingEmitter * 0 0 767 0 0 0 0 0 0 0 0 0 0

894 26 TangentRingEmitter const * 8576 26 TangentRingEmitter const * 26 TangentRingEmitter const * 0 0 895 0 0 0 0 0 0 0 0 0 0

895 24 TangentRingEmitter const 8832 24 TangentRingEmitter const 24 TangentRingEmitter const 0 0 767 0 0 0 0 0 0 0 0 0 0

896 22 ZSpinParticleFactory * 8576 22 ZSpinParticleFactory * 22 ZSpinParticleFactory * 0 0 768 0 0 0 0 0 0 0 0 0 0

897 28 ZSpinParticleFactory const * 8576 28 ZSpinParticleFactory const * 28 ZSpinParticleFactory const * 0 0 898 0 0 0 0 0 0 0 0 0 0

898 26 ZSpinParticleFactory const 8832 26 ZSpinParticleFactory const 26 ZSpinParticleFactory const 0 0 768 0 0 0 0 0 0 0 0 0 0

899 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
7
900 0 173 17 get_linear_forces 21 get_num_linear_forces 16 get_linear_force 
901 0 173 18 get_angular_forces 22 get_num_angular_forces 17 get_angular_force 
902 0 294 9 get_anims 13 get_num_anims 8 get_anim 
903 0 441 9 get_geoms 13 get_num_geoms 8 get_geom 
904 0 441 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
905 0 446 9 get_nodes 13 get_num_nodes 8 get_node 
906 0 446 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
