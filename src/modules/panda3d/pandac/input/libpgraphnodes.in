1304331752
2 2
14 libpgraphnodes 4 _MIZ 5 panda 
149
142 15 upcast_to_Light 12 291 26 LightNode::upcast_to_Light 0 1 5 30
upcast from LightNode to Light
40
Light *LightNode::upcast_to_Light(void);

143 21 downcast_to_LightNode 12 292 28 Light::downcast_to_LightNode 0 1 6 32
downcast from Light to LightNode
46
LightNode *Light::downcast_to_LightNode(void);

144 19 upcast_to_PandaNode 12 291 30 LightNode::upcast_to_PandaNode 0 1 7 34
upcast from LightNode to PandaNode
48
PandaNode *LightNode::upcast_to_PandaNode(void);

145 21 downcast_to_LightNode 12 293 32 PandaNode::downcast_to_LightNode 0 1 8 36
downcast from PandaNode to LightNode
50
LightNode *PandaNode::downcast_to_LightNode(void);

146 6 output 4 291 17 LightNode::output 0 1 1 312
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightNode::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
51
virtual void LightNode::output(ostream &out) const;

147 5 write 4 291 16 LightNode::write 0 2 2 3 311
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
74
virtual void LightNode::write(ostream &out, int indent_level = (0)) const;

148 14 get_class_type 4 291 25 LightNode::get_class_type 0 1 4 0
50
static TypeHandle LightNode::get_class_type(void);

149 10 ~LightNode 4 291 21 LightNode::~LightNode 0 0 0
28
LightNode::~LightNode(void);

150 12 AmbientLight 4 294 26 AmbientLight::AmbientLight 0 1 9 602
////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
61
AmbientLight::AmbientLight(basic_string< char > const &name);

151 14 get_class_type 4 294 28 AmbientLight::get_class_type 0 1 10 0
53
static TypeHandle AmbientLight::get_class_type(void);

152 13 ~AmbientLight 4 294 27 AmbientLight::~AmbientLight 0 0 0
34
AmbientLight::~AmbientLight(void);

153 12 CallbackNode 4 295 26 CallbackNode::CallbackNode 0 1 11 455
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
61
CallbackNode::CallbackNode(basic_string< char > const &name);

154 17 set_cull_callback 4 295 31 CallbackNode::set_cull_callback 0 1 12 2165
// Filename: callbackNode.I
// Created by:  drose (13Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the cull traversal.  This
//               callback will be made during the cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               node has been determined to be visible and it has
//               passed the bounding-volume test, so it lies within
//               the view frustum.
//
//               The callback is passed an instance of a
//               NodeCullCallbackData, which contains pointers to the
//               CullTraverser and CullTraverserData--enough data to
//               examine the current node and its place within the
//               scene graph.  The callback *replaces* the normal cull
//               behavior, so if your callback does nothing, the cull
//               traversal will not continue below this node.  If you
//               wish the cull traversal to continue to visit this
//               node and below, you must call cbdata->upcall()
//               from your callback.
////////////////////////////////////////////////////////////////////
68
inline void CallbackNode::set_cull_callback(CallbackObject *object);

155 19 clear_cull_callback 4 295 33 CallbackNode::clear_cull_callback 0 1 13 317
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
////////////////////////////////////////////////////////////////////
52
inline void CallbackNode::clear_cull_callback(void);

156 17 get_cull_callback 4 295 31 CallbackNode::get_cull_callback 0 1 14 285
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
////////////////////////////////////////////////////////////////////
67
inline CallbackObject *CallbackNode::get_cull_callback(void) const;

157 17 set_draw_callback 4 295 31 CallbackNode::set_draw_callback 0 1 15 1477
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the draw traversal.  This
//               callback will be made during the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state has been loaded with the correct
//               modelview transform and render state, and the
//               primitives (if any) in this node are ready to be
//               drawn.
//
//               The callback is passed an instance of a
//               GeomDrawCallbackData, which contains pointers to the
//               current state and transform, as well as the current
//               GSG.  There is a Geom pointer as well, but it will
//               always be NULL to this callback, since the
//               CallbackNode does not itself contain any Geoms.
////////////////////////////////////////////////////////////////////
68
inline void CallbackNode::set_draw_callback(CallbackObject *object);

158 19 clear_draw_callback 4 295 33 CallbackNode::clear_draw_callback 0 1 16 317
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
////////////////////////////////////////////////////////////////////
52
inline void CallbackNode::clear_draw_callback(void);

159 17 get_draw_callback 4 295 31 CallbackNode::get_draw_callback 0 1 17 285
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
////////////////////////////////////////////////////////////////////
67
inline CallbackObject *CallbackNode::get_draw_callback(void) const;

160 14 get_class_type 4 295 28 CallbackNode::get_class_type 0 1 18 0
53
static TypeHandle CallbackNode::get_class_type(void);

161 13 ~CallbackNode 4 295 27 CallbackNode::~CallbackNode 0 0 0
34
CallbackNode::~CallbackNode(void);

162 15 upcast_to_Light 12 297 30 LightLensNode::upcast_to_Light 0 1 27 34
upcast from LightLensNode to Light
44
Light *LightLensNode::upcast_to_Light(void);

163 25 downcast_to_LightLensNode 12 292 32 Light::downcast_to_LightLensNode 0 1 28 36
downcast from Light to LightLensNode
54
LightLensNode *Light::downcast_to_LightLensNode(void);

164 16 upcast_to_Camera 12 297 31 LightLensNode::upcast_to_Camera 0 1 29 35
upcast from LightLensNode to Camera
46
Camera *LightLensNode::upcast_to_Camera(void);

165 25 downcast_to_LightLensNode 12 298 33 Camera::downcast_to_LightLensNode 0 1 30 37
downcast from Camera to LightLensNode
55
LightLensNode *Camera::downcast_to_LightLensNode(void);

166 14 ~LightLensNode 4 297 29 LightLensNode::~LightLensNode 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual LightLensNode::~LightLensNode(void);

167 16 is_shadow_caster 4 297 31 LightLensNode::is_shadow_caster 0 1 19 801
// Filename: lightLensNode.I
// Created by:  drose (26Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::is_shadow_caster
//       Access: Published
//  Description: Returns whether this light is configured to cast
//               shadows or not.
////////////////////////////////////////////////////////////////////
50
inline bool LightLensNode::is_shadow_caster(void);

168 17 set_shadow_caster 4 297 32 LightLensNode::set_shadow_caster 0 3 20 21 22 1202
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. This is the variant without
//               buffer size, meaning that the current buffer size
//               will be kept (512x512 is the default).
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. The xsize and ysize parameters
//               specify the size of the shadow buffer that will be
//               set up, the sort parameter specifies the sort.
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
////////////////////////////////////////////////////////////////////
171
inline void LightLensNode::set_shadow_caster(bool caster);
inline void LightLensNode::set_shadow_caster(bool caster, int buffer_xsize, int buffer_ysize, int sort = (-10));

169 6 output 4 297 21 LightLensNode::output 0 1 23 316
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
55
virtual void LightLensNode::output(ostream &out) const;

170 5 write 4 297 20 LightLensNode::write 0 2 24 25 315
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
78
virtual void LightLensNode::write(ostream &out, int indent_level = (0)) const;

171 14 get_class_type 4 297 29 LightLensNode::get_class_type 0 1 26 0
54
static TypeHandle LightLensNode::get_class_type(void);

172 16 DirectionalLight 4 299 34 DirectionalLight::DirectionalLight 0 1 31 610
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
69
DirectionalLight::DirectionalLight(basic_string< char > const &name);

173 18 get_specular_color 4 299 36 DirectionalLight::get_specular_color 0 1 32 314
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
74
inline LVecBase4f const &DirectionalLight::get_specular_color(void) const;

174 18 set_specular_color 4 299 36 DirectionalLight::set_specular_color 0 1 33 311
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
74
inline void DirectionalLight::set_specular_color(LVecBase4f const &color);

175 9 get_point 4 299 27 DirectionalLight::get_point 0 1 34 652
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//
//               This actually has no bearing on the visual effect of
//               the light, since the light is rendered as if it were
//               infinitely far away.  This is only used to create a
//               visible representation of the light.
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &DirectionalLight::get_point(void) const;

176 9 set_point 4 299 27 DirectionalLight::set_point 0 1 35 278
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
////////////////////////////////////////////////////////////////////
63
inline void DirectionalLight::set_point(LPoint3f const &point);

177 13 get_direction 4 299 31 DirectionalLight::get_direction 0 1 36 382
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_direction
//       Access: Public
//  Description: Returns the direction in which the light is aimed.
//               This is local to the coordinate space in which the
//               light is assigned.
////////////////////////////////////////////////////////////////////
68
inline LVector3f const &DirectionalLight::get_direction(void) const;

178 13 set_direction 4 299 31 DirectionalLight::set_direction 0 1 37 275
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_direction
//       Access: Public
//  Description: Sets the direction in which the light is aimed.
////////////////////////////////////////////////////////////////////
72
inline void DirectionalLight::set_direction(LVector3f const &direction);

179 14 get_class_type 4 299 32 DirectionalLight::get_class_type 0 1 38 0
57
static TypeHandle DirectionalLight::get_class_type(void);

180 17 ~DirectionalLight 4 299 35 DirectionalLight::~DirectionalLight 0 0 0
42
DirectionalLight::~DirectionalLight(void);

181 7 LODNode 4 300 16 LODNode::LODNode 0 1 39 928
// Filename: lodNode.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LODNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LODNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LODNode::LODNode(basic_string< char > const &name);

182 16 make_default_lod 4 300 25 LODNode::make_default_lod 0 1 40 334
////////////////////////////////////////////////////////////////////
//     Function: LODNode::make_default_lod
//       Access: Published, Static
//  Description: Creates a new LODNode of the type specified by the
//               default-lod-type config variable.
////////////////////////////////////////////////////////////////////
88
static PointerTo< LODNode > LODNode::make_default_lod(basic_string< char > const &name);

183 10 add_switch 4 300 19 LODNode::add_switch 0 1 41 896
// The sense of in vs. out distances is as if the object were coming
// towards you from far away: it switches "in" at the far distance,
// and switches "out" at the close distance.  Thus, "in" should be
// larger than "out".

////////////////////////////////////////////////////////////////////
//     Function: LODNode::add_switch
//       Access: Published
//  Description: Adds a switch range to the LODNode.  This implies
//               that the corresponding child node has been parented
//               to the node.
//
//               The sense of in vs. out distances is as if the object
//               were coming towards you from far away: it switches
//               "in" at the far distance, and switches "out" at the
//               close distance.  Thus, "in" should be larger than
//               "out".
////////////////////////////////////////////////////////////////////
53
inline void LODNode::add_switch(float in, float out);

184 10 set_switch 4 300 19 LODNode::set_switch 0 1 42 320
////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_switch
//       Access: Published
//  Description: Changes the switching range of a particular child of
//               the LODNode.  See add_switch().
////////////////////////////////////////////////////////////////////
64
inline bool LODNode::set_switch(int index, float in, float out);

185 14 clear_switches 4 300 23 LODNode::clear_switches 0 1 43 389
////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_switches
//       Access: Published
//  Description: Removes the set of switching ranges for the LODNode,
//               presumably in conjunction with removing all of its
//               children.  See add_switch().
////////////////////////////////////////////////////////////////////
42
inline void LODNode::clear_switches(void);

186 16 get_num_switches 4 300 25 LODNode::get_num_switches 0 1 44 443
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_num_switches
//       Access: Published
//  Description: Returns the number of switch ranges added to the
//               LODNode.  This should correspond to the number of
//               children of the node in order for the LODNode to
//               function correctly.
////////////////////////////////////////////////////////////////////
49
inline int LODNode::get_num_switches(void) const;

187 6 get_in 4 300 15 LODNode::get_in 0 1 45 371
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_in
//       Access: Published
//  Description: Returns the "in" distance of the indicated switch
//               range.  This should be larger than the "out" distance
//               of the same range.
////////////////////////////////////////////////////////////////////
46
inline float LODNode::get_in(int index) const;

188 7 get_out 4 300 16 LODNode::get_out 0 1 46 373
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_out
//       Access: Published
//  Description: Returns the "out" distance of the indicated switch
//               range.  This should be smaller than the "in" distance
//               of the same range.
////////////////////////////////////////////////////////////////////
47
inline float LODNode::get_out(int index) const;

189 17 get_lowest_switch 4 300 26 LODNode::get_lowest_switch 0 1 47 480
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lowest_switch
//       Access: Published
//  Description: Returns the index number of the child with the lowest
//               level of detail; that is, the one that is designed to
//               be seen from the farthest away.  This is usually the
//               first child, but it is not necessarily so.
////////////////////////////////////////////////////////////////////
50
inline int LODNode::get_lowest_switch(void) const;

190 18 get_highest_switch 4 300 27 LODNode::get_highest_switch 0 1 48 489
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_highest_switch
//       Access: Published
//  Description: Returns the index number of the child with the highest
//               level of detail; that is, the one that is designed to
//               be seen from the closest to the camera.  This is
//               usually the last child, but it is not necessarily so.
////////////////////////////////////////////////////////////////////
51
inline int LODNode::get_highest_switch(void) const;

191 12 force_switch 4 300 21 LODNode::force_switch 0 1 49 390
////////////////////////////////////////////////////////////////////
//     Function: LODNode::force_switch
//       Access: Published
//  Description: Forces the LODNode to show the indicated level
//               instead of the level that would normally be shown
//               based on the distance from the camera.
////////////////////////////////////////////////////////////////////
45
inline void LODNode::force_switch(int index);

192 18 clear_force_switch 4 300 27 LODNode::clear_force_switch 0 1 50 380
////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_force_switch
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               force_switch() and releases the LODNode to once again
//               display the normal level.
////////////////////////////////////////////////////////////////////
46
inline void LODNode::clear_force_switch(void);

193 13 set_lod_scale 4 300 22 LODNode::set_lod_scale 0 1 51 445
//for performance tuning, increasing this value should improve performance
//at the cost of model quality

////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_lod_scale
//       Access: Published
//  Description: Sets the multiplier for lod distances. A higher 
//               value means you'll see farther switchs than normal
////////////////////////////////////////////////////////////////////
48
inline void LODNode::set_lod_scale(float value);

194 13 get_lod_scale 4 300 22 LODNode::get_lod_scale 0 1 52 369
//for performance tuning, increasing this value should improve performance
//at the cost of model quality

////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lod_scale
//       Access: Published
//  Description: Returns the multiplier for lod distances
////////////////////////////////////////////////////////////////////
48
inline float LODNode::get_lod_scale(void) const;

195 10 set_center 4 300 19 LODNode::set_center 0 1 53 408
////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_center
//       Access: Published
//  Description: Specifies the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
////////////////////////////////////////////////////////////////////
56
inline void LODNode::set_center(LPoint3f const &center);

196 10 get_center 4 300 19 LODNode::get_center 0 1 54 406
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_center
//       Access: Published
//  Description: Returns the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
////////////////////////////////////////////////////////////////////
55
inline LPoint3f const &LODNode::get_center(void) const;

197 11 show_switch 4 300 20 LODNode::show_switch 0 2 55 56 1818
////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
////////////////////////////////////////////////////////////////////
100
void LODNode::show_switch(int index);
void LODNode::show_switch(int index, LVecBase4f const &color);

198 11 hide_switch 4 300 20 LODNode::hide_switch 0 1 57 262
////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_switch
//       Access: Published
//  Description: Disables a previous call to show_switch().
////////////////////////////////////////////////////////////////////
37
void LODNode::hide_switch(int index);

199 17 show_all_switches 4 300 26 LODNode::show_all_switches 0 1 58 267
////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_all_switches
//       Access: Published
//  Description: Shows all levels in their default colors.
////////////////////////////////////////////////////////////////////
38
void LODNode::show_all_switches(void);

200 17 hide_all_switches 4 300 26 LODNode::hide_all_switches 0 1 59 303
////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_all_switches
//       Access: Published
//  Description: Hides all levels, restoring the LODNode to normal
//               operation.
////////////////////////////////////////////////////////////////////
38
void LODNode::hide_all_switches(void);

201 12 is_any_shown 4 300 21 LODNode::is_any_shown 0 1 60 400
////////////////////////////////////////////////////////////////////
//     Function: LODNode::is_any_shown
//       Access: Published
//  Description: Returns true if any switch has been shown with
//               show_switch(), indicating the LODNode is in debug
//               show mode; or false if it is in the normal mode.
////////////////////////////////////////////////////////////////////
46
inline bool LODNode::is_any_shown(void) const;

202 19 verify_child_bounds 4 300 28 LODNode::verify_child_bounds 0 1 61 549
////////////////////////////////////////////////////////////////////
//     Function: LODNode::verify_child_bounds
//       Access: Published
//  Description: Returns true if the bounding volumes for the geometry
//               of each fhild node entirely fits within the
//               switch_in radius for that child, or false otherwise.
//               It is almost always a mistake for the geometry of an
//               LOD level to be larger than its switch_in radius.
////////////////////////////////////////////////////////////////////
46
bool LODNode::verify_child_bounds(void) const;

203 14 get_class_type 4 300 23 LODNode::get_class_type 0 1 62 0
48
static TypeHandle LODNode::get_class_type(void);

204 8 ~LODNode 4 300 17 LODNode::~LODNode 0 0 0
24
LODNode::~LODNode(void);

205 11 FadeLODNode 4 301 24 FadeLODNode::FadeLODNode 0 1 63 453
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
59
FadeLODNode::FadeLODNode(basic_string< char > const &name);

206 13 set_fade_time 4 301 26 FadeLODNode::set_fade_time 0 1 64 760
// Filename: fadelodNode.I
// Created by:  sshodhan (14Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_time
//       Access: Published
//  Description: set the time taken to complete an LOD switch
////////////////////////////////////////////////////////////////////
48
inline void FadeLODNode::set_fade_time(float t);

207 13 get_fade_time 4 301 26 FadeLODNode::get_fade_time 0 1 65 270
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_time
//       Access: Published
//  Description: get the time taken to complete an LOD switch
////////////////////////////////////////////////////////////////////
52
inline float FadeLODNode::get_fade_time(void) const;

208 12 set_fade_bin 4 301 25 FadeLODNode::set_fade_bin 0 1 66 369
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_bin
//       Access: Published
//  Description: Specifies the cull bin and draw order that is
//               assigned to the fading part of the geometry during a
//               transition.
////////////////////////////////////////////////////////////////////
81
void FadeLODNode::set_fade_bin(basic_string< char > const &name, int draw_order);

209 17 get_fade_bin_name 4 301 30 FadeLODNode::get_fade_bin_name 0 1 67 340
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_name
//       Access: Published
//  Description: Returns the cull bin that is assigned to the fading
//               part of the geometry during a transition.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > const &FadeLODNode::get_fade_bin_name(void) const;

210 23 get_fade_bin_draw_order 4 301 36 FadeLODNode::get_fade_bin_draw_order 0 1 68 391
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_draw_order
//       Access: Published
//  Description: Returns the draw order that is assigned (along with
//               the bin name) to the fading part of the geometry
//               during a transition.
////////////////////////////////////////////////////////////////////
60
inline int FadeLODNode::get_fade_bin_draw_order(void) const;

211 23 set_fade_state_override 4 301 36 FadeLODNode::set_fade_state_override 0 1 69 460
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_state_override
//       Access: Published
//  Description: Specifies the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
////////////////////////////////////////////////////////////////////
56
void FadeLODNode::set_fade_state_override(int override);

212 23 get_fade_state_override 4 301 36 FadeLODNode::get_fade_state_override 0 1 70 458
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_state_override
//       Access: Published
//  Description: Returns the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
////////////////////////////////////////////////////////////////////
60
inline int FadeLODNode::get_fade_state_override(void) const;

213 14 get_class_type 4 301 27 FadeLODNode::get_class_type 0 1 71 0
52
static TypeHandle FadeLODNode::get_class_type(void);

214 12 ~FadeLODNode 4 301 25 FadeLODNode::~FadeLODNode 0 0 0
32
FadeLODNode::~FadeLODNode(void);

215 8 get_trav 4 302 30 NodeCullCallbackData::get_trav 0 1 72 457
////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_trav
//       Access: Published
//  Description: Returns the CullTraverser in use at the time of the
//               callback.  This object contains data that does not
//               change during the traversal, such as the
//               DisplayRegion and Camera in use.
////////////////////////////////////////////////////////////////////
65
inline CullTraverser *NodeCullCallbackData::get_trav(void) const;

216 8 get_data 4 302 30 NodeCullCallbackData::get_data 0 1 73 486
////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_data
//       Access: Published
//  Description: Returns the CullTraverserData in use at the time of the
//               callback.  This object contains data that changes at
//               each node of the traversal, such as the current node
//               and the current net transform to that node.
////////////////////////////////////////////////////////////////////
69
inline CullTraverserData &NodeCullCallbackData::get_data(void) const;

217 14 get_class_type 4 302 36 NodeCullCallbackData::get_class_type 0 1 74 0
61
static TypeHandle NodeCullCallbackData::get_class_type(void);

218 21 ~NodeCullCallbackData 4 302 43 NodeCullCallbackData::~NodeCullCallbackData 0 0 0
50
NodeCullCallbackData::~NodeCullCallbackData(void);

219 10 PointLight 4 304 22 PointLight::PointLight 0 1 75 598
////////////////////////////////////////////////////////////////////
//     Function: PointLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PointLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
57
PointLight::PointLight(basic_string< char > const &name);

220 18 get_specular_color 4 304 30 PointLight::get_specular_color 0 1 76 308
////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f const &PointLight::get_specular_color(void) const;

221 18 set_specular_color 4 304 30 PointLight::set_specular_color 0 1 77 305
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
68
inline void PointLight::set_specular_color(LVecBase4f const &color);

222 15 get_attenuation 4 304 27 PointLight::get_attenuation 0 1 78 451
////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_attenuation
//       Access: Public
//  Description: Returns the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
65
inline LVecBase3f const &PointLight::get_attenuation(void) const;

223 15 set_attenuation 4 304 27 PointLight::set_attenuation 0 1 79 448
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
71
inline void PointLight::set_attenuation(LVecBase3f const &attenuation);

224 9 get_point 4 304 21 PointLight::get_point 0 1 80 380
////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
////////////////////////////////////////////////////////////////////
57
inline LPoint3f const &PointLight::get_point(void) const;

225 9 set_point 4 304 21 PointLight::set_point 0 1 81 272
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
////////////////////////////////////////////////////////////////////
57
inline void PointLight::set_point(LPoint3f const &point);

226 14 get_class_type 4 304 26 PointLight::get_class_type 0 1 82 0
51
static TypeHandle PointLight::get_class_type(void);

227 11 ~PointLight 4 304 23 PointLight::~PointLight 0 0 0
30
PointLight::~PointLight(void);

228 18 SelectiveChildNode 4 305 38 SelectiveChildNode::SelectiveChildNode 0 1 83 958
// Filename: selectiveChildNode.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
80
inline SelectiveChildNode::SelectiveChildNode(basic_string< char > const &name);

229 14 get_class_type 4 305 34 SelectiveChildNode::get_class_type 0 1 84 0
59
static TypeHandle SelectiveChildNode::get_class_type(void);

230 19 ~SelectiveChildNode 4 305 39 SelectiveChildNode::~SelectiveChildNode 0 0 0
46
SelectiveChildNode::~SelectiveChildNode(void);

231 28 upcast_to_SelectiveChildNode 12 306 42 SequenceNode::upcast_to_SelectiveChildNode 0 1 89 46
upcast from SequenceNode to SelectiveChildNode
69
SelectiveChildNode *SequenceNode::upcast_to_SelectiveChildNode(void);

232 24 downcast_to_SequenceNode 12 305 44 SelectiveChildNode::downcast_to_SequenceNode 0 1 90 48
downcast from SelectiveChildNode to SequenceNode
65
SequenceNode *SelectiveChildNode::downcast_to_SequenceNode(void);

233 23 upcast_to_AnimInterface 12 306 37 SequenceNode::upcast_to_AnimInterface 0 1 91 41
upcast from SequenceNode to AnimInterface
59
AnimInterface *SequenceNode::upcast_to_AnimInterface(void);

234 24 downcast_to_SequenceNode 12 307 39 AnimInterface::downcast_to_SequenceNode 0 1 92 43
downcast from AnimInterface to SequenceNode
60
SequenceNode *AnimInterface::downcast_to_SequenceNode(void);

235 12 SequenceNode 4 306 26 SequenceNode::SequenceNode 0 1 85 943
// Filename: sequenceNode.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
68
inline SequenceNode::SequenceNode(basic_string< char > const &name);

236 14 get_num_frames 4 306 28 SequenceNode::get_num_frames 0 1 86 580
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
////////////////////////////////////////////////////////////////////
53
virtual int SequenceNode::get_num_frames(void) const;

237 14 set_frame_rate 4 306 28 SequenceNode::set_frame_rate 0 1 87 435
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::set_frame_rate
//       Access: Published
//  Description: Changes the advertised frame rate of the
//               SequenceNode.  This can be used in conjunction with
//               get_play_rate() to change the effective frame rate of
//               the node.
////////////////////////////////////////////////////////////////////
60
inline void SequenceNode::set_frame_rate(double frame_rate);

238 14 get_class_type 4 306 28 SequenceNode::get_class_type 0 1 88 0
53
static TypeHandle SequenceNode::get_class_type(void);

239 13 ~SequenceNode 4 306 27 SequenceNode::~SequenceNode 0 0 0
34
SequenceNode::~SequenceNode(void);

240 15 ShaderGenerator 4 308 32 ShaderGenerator::ShaderGenerator 0 1 93 450
////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::Constructor
//       Access: Published
//  Description: Create a ShaderGenerator.  This has no state,
//               except possibly to cache certain results.
//               The parameter that must be passed is the GSG to
//               which the shader generator belongs.
////////////////////////////////////////////////////////////////////
115
ShaderGenerator::ShaderGenerator(PointerTo< GraphicsStateGuardianBase > gsg, PointerTo< GraphicsOutputBase > host);

241 17 synthesize_shader 4 308 34 ShaderGenerator::synthesize_shader 0 1 94 1388
////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::synthesize_shader
//       Access: Published, Virtual
//  Description: This is the routine that implements the next-gen
//               fixed function pipeline by synthesizing a shader.
//               It also takes care of setting up any buffers
//               needed to produce the requested effects.
//
//               Currently supports:
//               - flat colors
//               - vertex colors
//               - lighting
//               - normal maps, but not multiple
//               - gloss maps, but not multiple
//               - glow maps, but not multiple
//               - materials, but not updates to materials
//               - 2D textures
//               - all texture stage modes, including combine modes
//               - color scale attrib
//               - light ramps (for cartoon shading)
//               - shadow mapping
//               - most texgen modes
//               - texmatrix
//               - 1D/2D/3D textures, cube textures
//
//               Not yet supported:
//               - dot3_rgb and dot3_rgba combine modes
//               - fog
//
//               Potential optimizations
//               - omit attenuation calculations if attenuation off
//
////////////////////////////////////////////////////////////////////
97
virtual ConstPointerTo< RenderAttrib > ShaderGenerator::synthesize_shader(RenderState const *rs);

242 14 get_class_type 4 308 31 ShaderGenerator::get_class_type 0 1 95 0
56
static TypeHandle ShaderGenerator::get_class_type(void);

243 9 Spotlight 4 310 20 Spotlight::Spotlight 0 1 96 596
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
55
Spotlight::Spotlight(basic_string< char > const &name);

244 12 get_exponent 4 310 23 Spotlight::get_exponent 0 1 97 371
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_exponent
//       Access: Public
//  Description: Returns the exponent that controls the amount of
//               light falloff from the center of the spotlight.  See
//               set_exponent().
////////////////////////////////////////////////////////////////////
49
inline float Spotlight::get_exponent(void) const;

245 12 set_exponent 4 310 23 Spotlight::set_exponent 0 1 98 693
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_exponent
//       Access: Public
//  Description: Sets the exponent that controls the amount of light
//               falloff from the center of the spotlight.  The light
//               is attenuated by the cosine of the angle between the
//               direction of the light and the direction of the point
//               being lighted, raised to the power of this exponent.
//               Thus, higher exponents result in a more focused light
//               source, regardless of the field-of-view of the lens.
////////////////////////////////////////////////////////////////////
52
inline void Spotlight::set_exponent(float exponent);

246 18 get_specular_color 4 310 29 Spotlight::get_specular_color 0 1 99 307
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
67
inline LVecBase4f const &Spotlight::get_specular_color(void) const;

247 18 set_specular_color 4 310 29 Spotlight::set_specular_color 0 1 100 304
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
67
inline void Spotlight::set_specular_color(LVecBase4f const &color);

248 15 get_attenuation 4 310 26 Spotlight::get_attenuation 0 1 101 450
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_attenuation
//       Access: Public
//  Description: Returns the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
64
inline LVecBase3f const &Spotlight::get_attenuation(void) const;

249 15 set_attenuation 4 310 26 Spotlight::set_attenuation 0 1 102 447
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
70
inline void Spotlight::set_attenuation(LVecBase3f const &attenuation);

250 9 make_spot 4 310 20 Spotlight::make_spot 0 1 103 1015
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::make_spot
//       Access: Published, Static
//  Description: Returns a newly-generated Texture that renders a
//               circular spot image as might be cast from the
//               spotlight.  This may be projected onto target
//               geometry (for instance, via
//               NodePath::project_texture()) instead of actually
//               enabling the light itself, as a cheesy way to make a
//               high-resolution spot appear on the geometry.
//
//               pixel_width specifies the height and width of the new
//               texture in pixels, full_radius is a value in the
//               range 0..1 that indicates the relative size of the
//               fully bright center spot, and fg and bg are the
//               colors of the interior and exterior of the spot,
//               respectively.
////////////////////////////////////////////////////////////////////
117
static PointerTo< Texture > Spotlight::make_spot(int pixel_width, float full_radius, LVecBase4f &fg, LVecBase4f &bg);

251 14 get_class_type 4 310 25 Spotlight::get_class_type 0 1 104 0
50
static TypeHandle Spotlight::get_class_type(void);

252 10 ~Spotlight 4 310 21 Spotlight::~Spotlight 0 0 0
28
Spotlight::~Spotlight(void);

253 10 SwitchNode 4 311 22 SwitchNode::SwitchNode 0 1 105 451
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
64
inline SwitchNode::SwitchNode(basic_string< char > const &name);

254 17 set_visible_child 4 311 29 SwitchNode::set_visible_child 0 1 106 322
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::set_visible_child
//       Access: Published
//  Description: Specifies the particular child of this node, by
//               index, that will be visible.
////////////////////////////////////////////////////////////////////
53
inline void SwitchNode::set_visible_child(int index);

255 17 get_visible_child 4 311 29 SwitchNode::get_visible_child 0 1 107 292
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::get_visible_child
//       Access: Published, Virtual
//  Description: Returns the index of the child that should be visible.
////////////////////////////////////////////////////////////////////
54
virtual int SwitchNode::get_visible_child(void) const;

256 14 get_class_type 4 311 26 SwitchNode::get_class_type 0 1 108 0
51
static TypeHandle SwitchNode::get_class_type(void);

257 11 ~SwitchNode 4 311 23 SwitchNode::~SwitchNode 0 0 0
30
SwitchNode::~SwitchNode(void);

258 18 SceneGraphAnalyzer 4 312 38 SceneGraphAnalyzer::SceneGraphAnalyzer 0 1 109 230
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
SceneGraphAnalyzer::SceneGraphAnalyzer(void);

259 19 ~SceneGraphAnalyzer 4 312 39 SceneGraphAnalyzer::~SceneGraphAnalyzer 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
SceneGraphAnalyzer::~SceneGraphAnalyzer(void);

260 12 set_lod_mode 4 312 32 SceneGraphAnalyzer::set_lod_mode 0 1 110 776
// Filename: sceneGraphAnalyzer.I
// Created by:  drose (15Oct06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::set_lod_mode
//       Access: Published
//  Description: Specifies the mode in which LODNodes are analyzed.
////////////////////////////////////////////////////////////////////
83
inline void SceneGraphAnalyzer::set_lod_mode(SceneGraphAnalyzer::LodMode lod_mode);

261 12 get_lod_mode 4 312 32 SceneGraphAnalyzer::get_lod_mode 0 1 111 280
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_lod_mode
//       Access: Published
//  Description: Returns the mode in which LODNodes are analyzed.
////////////////////////////////////////////////////////////////////
112
inline SceneGraphAnalyzer::LodMode SceneGraphAnalyzer::get_lod_mode(SceneGraphAnalyzer::LodMode lod_mode) const;

262 5 clear 4 312 25 SceneGraphAnalyzer::clear 0 1 112 310
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::clear
//       Access: Published
//  Description: Resets all of the data in the analyzer in preparation
//               for a new run.
////////////////////////////////////////////////////////////////////
37
void SceneGraphAnalyzer::clear(void);

263 8 add_node 4 312 28 SceneGraphAnalyzer::add_node 0 1 113 522
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::add_node
//       Access: Published
//  Description: Adds a new node to the set of data for analysis.
//               Normally, this would only be called once, and passed
//               the top of the scene graph, but it's possible to
//               repeatedly pass in subgraphs to get an analysis of
//               all the graphs together.
////////////////////////////////////////////////////////////////////
51
void SceneGraphAnalyzer::add_node(PandaNode *node);

264 5 write 4 312 25 SceneGraphAnalyzer::write 0 2 114 115 258
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::write
//       Access: Published
//  Description: Describes all the data collected.
////////////////////////////////////////////////////////////////////
75
void SceneGraphAnalyzer::write(ostream &out, int indent_level = (0)) const;

265 13 get_num_nodes 4 312 33 SceneGraphAnalyzer::get_num_nodes 0 1 116 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_nodes(void) const;

266 17 get_num_instances 4 312 37 SceneGraphAnalyzer::get_num_instances 0 1 117 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_instances
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_instances(void) const;

267 18 get_num_transforms 4 312 38 SceneGraphAnalyzer::get_num_transforms 0 1 118 238
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_transforms
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline int SceneGraphAnalyzer::get_num_transforms(void) const;

268 26 get_num_nodes_with_attribs 4 312 46 SceneGraphAnalyzer::get_num_nodes_with_attribs 0 1 119 246
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes_with_attribs
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline int SceneGraphAnalyzer::get_num_nodes_with_attribs(void) const;

269 17 get_num_lod_nodes 4 312 37 SceneGraphAnalyzer::get_num_lod_nodes 0 1 120 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lod_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_lod_nodes(void) const;

270 18 get_num_geom_nodes 4 312 38 SceneGraphAnalyzer::get_num_geom_nodes 0 1 121 238
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline int SceneGraphAnalyzer::get_num_geom_nodes(void) const;

271 13 get_num_geoms 4 312 33 SceneGraphAnalyzer::get_num_geoms 0 1 122 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geoms
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_geoms(void) const;

272 25 get_num_geom_vertex_datas 4 312 45 SceneGraphAnalyzer::get_num_geom_vertex_datas 0 1 123 245
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_datas
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline int SceneGraphAnalyzer::get_num_geom_vertex_datas(void) const;

273 27 get_num_geom_vertex_formats 4 312 47 SceneGraphAnalyzer::get_num_geom_vertex_formats 0 1 124 247
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_formats
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline int SceneGraphAnalyzer::get_num_geom_vertex_formats(void) const;

274 20 get_vertex_data_size 4 312 40 SceneGraphAnalyzer::get_vertex_data_size 0 1 125 240
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_vertex_data_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline int SceneGraphAnalyzer::get_vertex_data_size(void) const;

275 16 get_num_vertices 4 312 36 SceneGraphAnalyzer::get_num_vertices 0 1 126 236
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int SceneGraphAnalyzer::get_num_vertices(void) const;

276 15 get_num_normals 4 312 35 SceneGraphAnalyzer::get_num_normals 0 1 127 235
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int SceneGraphAnalyzer::get_num_normals(void) const;

277 14 get_num_colors 4 312 34 SceneGraphAnalyzer::get_num_colors 0 1 128 234
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_colors
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline int SceneGraphAnalyzer::get_num_colors(void) const;

278 17 get_num_texcoords 4 312 37 SceneGraphAnalyzer::get_num_texcoords 0 1 129 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_texcoords
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_texcoords(void) const;

279 12 get_num_tris 4 312 32 SceneGraphAnalyzer::get_num_tris 0 1 130 232
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tris
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline int SceneGraphAnalyzer::get_num_tris(void) const;

280 13 get_num_lines 4 312 33 SceneGraphAnalyzer::get_num_lines 0 1 131 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lines
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_lines(void) const;

281 14 get_num_points 4 312 34 SceneGraphAnalyzer::get_num_points 0 1 132 234
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_points
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline int SceneGraphAnalyzer::get_num_points(void) const;

282 23 get_num_individual_tris 4 312 43 SceneGraphAnalyzer::get_num_individual_tris 0 1 133 243
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_individual_tris
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline int SceneGraphAnalyzer::get_num_individual_tris(void) const;

283 17 get_num_tristrips 4 312 37 SceneGraphAnalyzer::get_num_tristrips 0 1 134 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tristrips
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_tristrips(void) const;

284 27 get_num_triangles_in_strips 4 312 47 SceneGraphAnalyzer::get_num_triangles_in_strips 0 1 135 247
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_strips
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline int SceneGraphAnalyzer::get_num_triangles_in_strips(void) const;

285 15 get_num_trifans 4 312 35 SceneGraphAnalyzer::get_num_trifans 0 1 136 235
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_trifans
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int SceneGraphAnalyzer::get_num_trifans(void) const;

286 25 get_num_triangles_in_fans 4 312 45 SceneGraphAnalyzer::get_num_triangles_in_fans 0 1 137 245
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_fans
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline int SceneGraphAnalyzer::get_num_triangles_in_fans(void) const;

287 17 get_texture_bytes 4 312 37 SceneGraphAnalyzer::get_texture_bytes 0 1 138 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_texture_bytes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_texture_bytes(void) const;

288 20 get_num_long_normals 4 312 40 SceneGraphAnalyzer::get_num_long_normals 0 1 139 240
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_long_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline int SceneGraphAnalyzer::get_num_long_normals(void) const;

289 21 get_num_short_normals 4 312 41 SceneGraphAnalyzer::get_num_short_normals 0 1 140 241
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_short_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline int SceneGraphAnalyzer::get_num_short_normals(void) const;

290 23 get_total_normal_length 4 312 43 SceneGraphAnalyzer::get_total_normal_length 0 1 141 243
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_total_normal_length
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline float SceneGraphAnalyzer::get_total_normal_length(void) const;

141
1 14 Dtool__MIZNkgn 4 8 318 0 14 Dtool__MIZNkgn 222 ////////////////////////////////////////////////////////////////////
//     Function: LightNode::output
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 314  3 out 1 316  
2 14 Dtool__MIZzDle 4 9 318 0 14 Dtool__MIZzDle 221 ////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 314  3 out 1 316  12 indent_level 1 319  
3 14 Dtool__MIZSZ_n 4 9 318 0 14 Dtool__MIZSZ_n 221 ////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 314  3 out 1 316  
4 14 Dtool__MIZ6xST 7 10 321 0 14 Dtool__MIZ6xST 0 0 
5 14 Dtool__MIZC_aQ 7 3 323 0 14 Dtool__MIZC_aQ 0 1 4 this 3 322  
6 14 Dtool__MIZI_qA 7 4 322 149 14 Dtool__MIZI_qA 0 1 4 this 3 323  
7 14 Dtool__MIZ0Doz 7 6 324 0 14 Dtool__MIZ0Doz 0 1 4 this 3 322  
8 14 Dtool__MIZwkdW 7 7 322 149 14 Dtool__MIZwkdW 0 1 4 this 3 324  
9 14 Dtool__MIZ5oKD 7 13 326 152 14 Dtool__MIZ5oKD 224 ////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
10 14 Dtool__MIZf_nS 7 14 321 0 14 Dtool__MIZf_nS 0 0 
11 14 Dtool__MIZShC6 7 17 327 161 14 Dtool__MIZShC6 224 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
12 14 Dtool__MIZ84_S 4 18 318 0 14 Dtool__MIZ84_S 2165 // Filename: callbackNode.I
// Created by:  drose (13Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the cull traversal.  This
//               callback will be made during the cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               node has been determined to be visible and it has
//               passed the bounding-volume test, so it lies within
//               the view frustum.
//
//               The callback is passed an instance of a
//               NodeCullCallbackData, which contains pointers to the
//               CullTraverser and CullTraverserData--enough data to
//               examine the current node and its place within the
//               scene graph.  The callback *replaces* the normal cull
//               behavior, so if your callback does nothing, the cull
//               traversal will not continue below this node.  If you
//               wish the cull traversal to continue to visit this
//               node and below, you must call cbdata->upcall()
//               from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 327  6 object 1 328  
13 14 Dtool__MIZIQr7 4 19 318 0 14 Dtool__MIZIQr7 317 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 327  
14 14 Dtool__MIZDgUA 7 20 328 0 14 Dtool__MIZDgUA 285 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 330  
15 14 Dtool__MIZB8Ai 4 21 318 0 14 Dtool__MIZB8Ai 1477 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the draw traversal.  This
//               callback will be made during the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state has been loaded with the correct
//               modelview transform and render state, and the
//               primitives (if any) in this node are ready to be
//               drawn.
//
//               The callback is passed an instance of a
//               GeomDrawCallbackData, which contains pointers to the
//               current state and transform, as well as the current
//               GSG.  There is a Geom pointer as well, but it will
//               always be NULL to this callback, since the
//               CallbackNode does not itself contain any Geoms.
//////////////////////////////////////////////////////////////////// 2 4 this 3 327  6 object 1 328  
16 14 Dtool__MIZWC3L 4 22 318 0 14 Dtool__MIZWC3L 317 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 327  
17 14 Dtool__MIZnjXP 7 23 328 0 14 Dtool__MIZnjXP 285 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 330  
18 14 Dtool__MIZnPi_ 7 24 321 0 14 Dtool__MIZnPi_ 0 0 
19 14 Dtool__MIZN_SD 6 34 333 0 14 Dtool__MIZN_SD 801 // Filename: lightLensNode.I
// Created by:  drose (26Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::is_shadow_caster
//       Access: Published
//  Description: Returns whether this light is configured to cast
//               shadows or not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 332  
20 14 Dtool__MIZflfq 4 35 318 0 14 Dtool__MIZflfq 594 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. This is the variant without
//               buffer size, meaning that the current buffer size
//               will be kept (512x512 is the default).
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 332  6 caster 1 333  
21 14 Dtool__MIZZ04u 4 35 318 0 14 Dtool__MIZZ04u 606 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. The xsize and ysize parameters
//               specify the size of the shadow buffer that will be
//               set up, the sort parameter specifies the sort.
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
//////////////////////////////////////////////////////////////////// 5 4 this 3 332  6 caster 1 333  12 buffer_xsize 1 319  12 buffer_ysize 1 319  4 sort 1 319  
22 14 Dtool__MIZCMp_ 4 35 318 0 14 Dtool__MIZCMp_ 606 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. The xsize and ysize parameters
//               specify the size of the shadow buffer that will be
//               set up, the sort parameter specifies the sort.
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
//////////////////////////////////////////////////////////////////// 4 4 this 3 332  6 caster 1 333  12 buffer_xsize 1 319  12 buffer_ysize 1 319  
23 14 Dtool__MIZ1lQT 4 36 318 0 14 Dtool__MIZ1lQT 226 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::output
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 334  3 out 1 316  
24 14 Dtool__MIZJusW 4 37 318 0 14 Dtool__MIZJusW 225 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 334  3 out 1 316  12 indent_level 1 319  
25 14 Dtool__MIZa_Tf 4 37 318 0 14 Dtool__MIZa_Tf 225 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 334  3 out 1 316  
26 14 Dtool__MIZkoD_ 7 38 321 0 14 Dtool__MIZkoD_ 0 0 
27 14 Dtool__MIZ682h 7 28 323 0 14 Dtool__MIZ682h 0 1 4 this 3 332  
28 14 Dtool__MIZn_a1 7 29 332 166 14 Dtool__MIZn_a1 0 1 4 this 3 323  
29 14 Dtool__MIZ1akX 7 31 336 0 14 Dtool__MIZ1akX 0 1 4 this 3 332  
30 14 Dtool__MIZ1FLC 7 32 332 166 14 Dtool__MIZ1FLC 0 1 4 this 3 336  
31 14 Dtool__MIZFmND 7 40 337 180 14 Dtool__MIZFmND 228 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
32 14 Dtool__MIZetKC 6 41 340 0 14 Dtool__MIZetKC 314 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 338  
33 14 Dtool__MIZCHLU 4 42 318 0 14 Dtool__MIZCHLU 311 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 337  5 color 1 340  
34 14 Dtool__MIZpsIS 6 43 343 0 14 Dtool__MIZpsIS 652 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//
//               This actually has no bearing on the visual effect of
//               the light, since the light is rendered as if it were
//               infinitely far away.  This is only used to create a
//               visible representation of the light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 338  
35 14 Dtool__MIZE91O 4 44 318 0 14 Dtool__MIZE91O 278 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
//////////////////////////////////////////////////////////////////// 2 4 this 3 337  5 point 1 343  
36 14 Dtool__MIZFGi1 6 45 346 0 14 Dtool__MIZFGi1 382 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_direction
//       Access: Public
//  Description: Returns the direction in which the light is aimed.
//               This is local to the coordinate space in which the
//               light is assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 338  
37 14 Dtool__MIZFGF_ 4 46 318 0 14 Dtool__MIZFGF_ 275 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_direction
//       Access: Public
//  Description: Sets the direction in which the light is aimed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 337  9 direction 1 346  
38 14 Dtool__MIZv7PH 7 47 321 0 14 Dtool__MIZv7PH 0 0 
39 14 Dtool__MIZnKZh 7 50 349 204 14 Dtool__MIZnKZh 702 // Filename: lodNode.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LODNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
40 14 Dtool__MIZpCyg 7 51 349 204 14 Dtool__MIZpCyg 334 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::make_default_lod
//       Access: Published, Static
//  Description: Creates a new LODNode of the type specified by the
//               default-lod-type config variable.
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
41 14 Dtool__MIZRFoz 4 52 318 0 14 Dtool__MIZRFoz 669 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::add_switch
//       Access: Published
//  Description: Adds a switch range to the LODNode.  This implies
//               that the corresponding child node has been parented
//               to the node.
//
//               The sense of in vs. out distances is as if the object
//               were coming towards you from far away: it switches
//               "in" at the far distance, and switches "out" at the
//               close distance.  Thus, "in" should be larger than
//               "out".
//////////////////////////////////////////////////////////////////// 3 4 this 3 349  2 in 1 350  3 out 1 350  
42 14 Dtool__MIZhpdI 6 53 333 0 14 Dtool__MIZhpdI 320 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_switch
//       Access: Published
//  Description: Changes the switching range of a particular child of
//               the LODNode.  See add_switch().
//////////////////////////////////////////////////////////////////// 4 4 this 3 349  5 index 1 319  2 in 1 350  3 out 1 350  
43 14 Dtool__MIZ25DC 4 54 318 0 14 Dtool__MIZ25DC 389 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_switches
//       Access: Published
//  Description: Removes the set of switching ranges for the LODNode,
//               presumably in conjunction with removing all of its
//               children.  See add_switch().
//////////////////////////////////////////////////////////////////// 1 4 this 3 349  
44 14 Dtool__MIZb65Z 6 55 319 0 14 Dtool__MIZb65Z 443 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_num_switches
//       Access: Published
//  Description: Returns the number of switch ranges added to the
//               LODNode.  This should correspond to the number of
//               children of the node in order for the LODNode to
//               function correctly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 351  
45 14 Dtool__MIZSHPo 6 56 350 0 14 Dtool__MIZSHPo 371 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_in
//       Access: Published
//  Description: Returns the "in" distance of the indicated switch
//               range.  This should be larger than the "out" distance
//               of the same range.
//////////////////////////////////////////////////////////////////// 2 4 this 3 351  5 index 1 319  
46 14 Dtool__MIZWO_6 6 57 350 0 14 Dtool__MIZWO_6 373 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_out
//       Access: Published
//  Description: Returns the "out" distance of the indicated switch
//               range.  This should be smaller than the "in" distance
//               of the same range.
//////////////////////////////////////////////////////////////////// 2 4 this 3 351  5 index 1 319  
47 14 Dtool__MIZXVB9 6 58 319 0 14 Dtool__MIZXVB9 480 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lowest_switch
//       Access: Published
//  Description: Returns the index number of the child with the lowest
//               level of detail; that is, the one that is designed to
//               be seen from the farthest away.  This is usually the
//               first child, but it is not necessarily so.
//////////////////////////////////////////////////////////////////// 1 4 this 3 351  
48 14 Dtool__MIZ0Jag 6 59 319 0 14 Dtool__MIZ0Jag 489 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_highest_switch
//       Access: Published
//  Description: Returns the index number of the child with the highest
//               level of detail; that is, the one that is designed to
//               be seen from the closest to the camera.  This is
//               usually the last child, but it is not necessarily so.
//////////////////////////////////////////////////////////////////// 1 4 this 3 351  
49 14 Dtool__MIZs5Rf 4 60 318 0 14 Dtool__MIZs5Rf 390 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::force_switch
//       Access: Published
//  Description: Forces the LODNode to show the indicated level
//               instead of the level that would normally be shown
//               based on the distance from the camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 349  5 index 1 319  
50 14 Dtool__MIZkueh 4 61 318 0 14 Dtool__MIZkueh 380 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_force_switch
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               force_switch() and releases the LODNode to once again
//               display the normal level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 349  
51 14 Dtool__MIZjQ5J 4 62 318 0 14 Dtool__MIZjQ5J 338 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_lod_scale
//       Access: Published
//  Description: Sets the multiplier for lod distances. A higher 
//               value means you'll see farther switchs than normal
//////////////////////////////////////////////////////////////////// 2 4 this 3 349  5 value 1 350  
52 14 Dtool__MIZhjtT 6 63 350 0 14 Dtool__MIZhjtT 262 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lod_scale
//       Access: Published
//  Description: Returns the multiplier for lod distances
//////////////////////////////////////////////////////////////////// 1 4 this 3 351  
53 14 Dtool__MIZPHp_ 4 64 318 0 14 Dtool__MIZPHp_ 408 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_center
//       Access: Published
//  Description: Specifies the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 349  6 center 1 343  
54 14 Dtool__MIZ8mat 6 65 343 0 14 Dtool__MIZ8mat 406 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_center
//       Access: Published
//  Description: Returns the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 351  
55 14 Dtool__MIZFRTL 4 66 318 0 14 Dtool__MIZFRTL 908 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 349  5 index 1 319  
56 14 Dtool__MIZe83D 4 66 318 0 14 Dtool__MIZe83D 908 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
//////////////////////////////////////////////////////////////////// 3 4 this 3 349  5 index 1 319  5 color 1 340  
57 14 Dtool__MIZFDjK 4 67 318 0 14 Dtool__MIZFDjK 262 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_switch
//       Access: Published
//  Description: Disables a previous call to show_switch().
//////////////////////////////////////////////////////////////////// 2 4 this 3 349  5 index 1 319  
58 14 Dtool__MIZ4bcK 4 68 318 0 14 Dtool__MIZ4bcK 267 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_all_switches
//       Access: Published
//  Description: Shows all levels in their default colors.
//////////////////////////////////////////////////////////////////// 1 4 this 3 349  
59 14 Dtool__MIZqEsJ 4 69 318 0 14 Dtool__MIZqEsJ 303 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_all_switches
//       Access: Published
//  Description: Hides all levels, restoring the LODNode to normal
//               operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 349  
60 14 Dtool__MIZPD_7 6 70 333 0 14 Dtool__MIZPD_7 400 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::is_any_shown
//       Access: Published
//  Description: Returns true if any switch has been shown with
//               show_switch(), indicating the LODNode is in debug
//               show mode; or false if it is in the normal mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 351  
61 14 Dtool__MIZD0t8 6 71 333 0 14 Dtool__MIZD0t8 549 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::verify_child_bounds
//       Access: Published
//  Description: Returns true if the bounding volumes for the geometry
//               of each fhild node entirely fits within the
//               switch_in radius for that child, or false otherwise.
//               It is almost always a mistake for the geometry of an
//               LOD level to be larger than its switch_in radius.
//////////////////////////////////////////////////////////////////// 1 4 this 3 351  
62 14 Dtool__MIZlHCR 7 72 321 0 14 Dtool__MIZlHCR 0 0 
63 14 Dtool__MIZwaxw 7 75 353 214 14 Dtool__MIZwaxw 223 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
64 14 Dtool__MIZbh3A 4 76 318 0 14 Dtool__MIZbh3A 760 // Filename: fadelodNode.I
// Created by:  sshodhan (14Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_time
//       Access: Published
//  Description: set the time taken to complete an LOD switch
//////////////////////////////////////////////////////////////////// 2 4 this 3 353  1 t 1 350  
65 14 Dtool__MIZXLep 6 77 350 0 14 Dtool__MIZXLep 270 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_time
//       Access: Published
//  Description: get the time taken to complete an LOD switch
//////////////////////////////////////////////////////////////////// 1 4 this 3 354  
66 14 Dtool__MIZAXRl 4 78 318 0 14 Dtool__MIZAXRl 369 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_bin
//       Access: Published
//  Description: Specifies the cull bin and draw order that is
//               assigned to the fading part of the geometry during a
//               transition.
//////////////////////////////////////////////////////////////////// 3 4 this 3 353  4 name 1 325  10 draw_order 1 319  
67 14 Dtool__MIZI83c 6 79 325 0 14 Dtool__MIZI83c 340 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_name
//       Access: Published
//  Description: Returns the cull bin that is assigned to the fading
//               part of the geometry during a transition.
//////////////////////////////////////////////////////////////////// 1 4 this 3 354  
68 14 Dtool__MIZ7nOV 6 80 319 0 14 Dtool__MIZ7nOV 391 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_draw_order
//       Access: Published
//  Description: Returns the draw order that is assigned (along with
//               the bin name) to the fading part of the geometry
//               during a transition.
//////////////////////////////////////////////////////////////////// 1 4 this 3 354  
69 14 Dtool__MIZxO17 4 81 318 0 14 Dtool__MIZxO17 460 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_state_override
//       Access: Published
//  Description: Specifies the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 353  8 override 1 319  
70 14 Dtool__MIZLBzq 6 82 319 0 14 Dtool__MIZLBzq 458 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_state_override
//       Access: Published
//  Description: Returns the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 354  
71 14 Dtool__MIZrHme 7 83 321 0 14 Dtool__MIZrHme 0 0 
72 14 Dtool__MIZT4tX 7 87 359 0 14 Dtool__MIZT4tX 457 ////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_trav
//       Access: Published
//  Description: Returns the CullTraverser in use at the time of the
//               callback.  This object contains data that does not
//               change during the traversal, such as the
//               DisplayRegion and Camera in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 357  
73 14 Dtool__MIZ0Kmz 6 88 360 0 14 Dtool__MIZ0Kmz 486 ////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_data
//       Access: Published
//  Description: Returns the CullTraverserData in use at the time of the
//               callback.  This object contains data that changes at
//               each node of the traversal, such as the current node
//               and the current net transform to that node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 357  
74 14 Dtool__MIZ8yUj 7 89 321 0 14 Dtool__MIZ8yUj 0 0 
75 14 Dtool__MIZdSGa 7 92 362 227 14 Dtool__MIZdSGa 222 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
76 14 Dtool__MIZVj3W 6 93 340 0 14 Dtool__MIZVj3W 308 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 363  
77 14 Dtool__MIZ_PIn 4 94 318 0 14 Dtool__MIZ_PIn 305 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 362  5 color 1 340  
78 14 Dtool__MIZc4ld 6 95 365 0 14 Dtool__MIZc4ld 451 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_attenuation
//       Access: Public
//  Description: Returns the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 363  
79 14 Dtool__MIZeO9o 4 96 318 0 14 Dtool__MIZeO9o 448 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 362  11 attenuation 1 365  
80 14 Dtool__MIZAjL5 6 97 343 0 14 Dtool__MIZAjL5 380 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 363  
81 14 Dtool__MIZFPGB 4 98 318 0 14 Dtool__MIZFPGB 272 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
//////////////////////////////////////////////////////////////////// 2 4 this 3 362  5 point 1 343  
82 14 Dtool__MIZcV_e 7 99 321 0 14 Dtool__MIZcV_e 0 0 
83 14 Dtool__MIZH2f_ 7 102 368 230 14 Dtool__MIZH2f_ 721 // Filename: selectiveChildNode.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
84 14 Dtool__MIZzd_9 7 103 321 0 14 Dtool__MIZzd_9 0 0 
85 14 Dtool__MIZLrES 7 111 369 239 14 Dtool__MIZLrES 712 // Filename: sequenceNode.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
86 14 Dtool__MIZyMZE 6 112 319 0 14 Dtool__MIZyMZE 580 ////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
//////////////////////////////////////////////////////////////////// 1 4 this 3 370  
87 14 Dtool__MIZhecj 4 113 318 0 14 Dtool__MIZhecj 435 ////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::set_frame_rate
//       Access: Published
//  Description: Changes the advertised frame rate of the
//               SequenceNode.  This can be used in conjunction with
//               get_play_rate() to change the effective frame rate of
//               the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 369  10 frame_rate 1 372  
88 14 Dtool__MIZNJ9E 7 114 321 0 14 Dtool__MIZNJ9E 0 0 
89 14 Dtool__MIZfdIH 7 106 368 230 14 Dtool__MIZfdIH 0 1 4 this 3 369  
90 14 Dtool__MIZb1sH 7 107 369 239 14 Dtool__MIZb1sH 0 1 4 this 3 368  
91 14 Dtool__MIZO8DN 6 109 373 0 14 Dtool__MIZO8DN 0 1 4 this 3 369  
92 14 Dtool__MIZUCAc 7 110 369 239 14 Dtool__MIZUCAc 0 1 4 this 3 373  
93 14 Dtool__MIZ_aa_ 7 118 378 0 14 Dtool__MIZ_aa_ 450 ////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::Constructor
//       Access: Published
//  Description: Create a ShaderGenerator.  This has no state,
//               except possibly to cache certain results.
//               The parameter that must be passed is the GSG to
//               which the shader generator belongs.
//////////////////////////////////////////////////////////////////// 2 3 gsg 1 374  4 host 1 376  
94 14 Dtool__MIZvxvL 7 119 384 0 14 Dtool__MIZvxvL 1388 ////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::synthesize_shader
//       Access: Published, Virtual
//  Description: This is the routine that implements the next-gen
//               fixed function pipeline by synthesizing a shader.
//               It also takes care of setting up any buffers
//               needed to produce the requested effects.
//
//               Currently supports:
//               - flat colors
//               - vertex colors
//               - lighting
//               - normal maps, but not multiple
//               - gloss maps, but not multiple
//               - glow maps, but not multiple
//               - materials, but not updates to materials
//               - 2D textures
//               - all texture stage modes, including combine modes
//               - color scale attrib
//               - light ramps (for cartoon shading)
//               - shadow mapping
//               - most texgen modes
//               - texmatrix
//               - 1D/2D/3D textures, cube textures
//
//               Not yet supported:
//               - dot3_rgb and dot3_rgba combine modes
//               - fog
//
//               Potential optimizations
//               - omit attenuation calculations if attenuation off
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 378  2 rs 1 381  
95 14 Dtool__MIZMyYU 7 120 321 0 14 Dtool__MIZMyYU 0 0 
96 14 Dtool__MIZJNYH 7 122 385 252 14 Dtool__MIZJNYH 221 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
97 14 Dtool__MIZylCB 6 123 350 0 14 Dtool__MIZylCB 371 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_exponent
//       Access: Public
//  Description: Returns the exponent that controls the amount of
//               light falloff from the center of the spotlight.  See
//               set_exponent().
//////////////////////////////////////////////////////////////////// 1 4 this 3 386  
98 14 Dtool__MIZYQlj 4 124 318 0 14 Dtool__MIZYQlj 693 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_exponent
//       Access: Public
//  Description: Sets the exponent that controls the amount of light
//               falloff from the center of the spotlight.  The light
//               is attenuated by the cosine of the angle between the
//               direction of the light and the direction of the point
//               being lighted, raised to the power of this exponent.
//               Thus, higher exponents result in a more focused light
//               source, regardless of the field-of-view of the lens.
//////////////////////////////////////////////////////////////////// 2 4 this 3 385  8 exponent 1 350  
99 14 Dtool__MIZFy11 6 125 340 0 14 Dtool__MIZFy11 307 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_specular_color
//       Access: Public
//  Description: Returns the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 386  
100 14 Dtool__MIZhJVa 4 126 318 0 14 Dtool__MIZhJVa 304 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 385  5 color 1 340  
101 14 Dtool__MIZ8nFC 6 127 365 0 14 Dtool__MIZ8nFC 450 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::get_attenuation
//       Access: Public
//  Description: Returns the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 386  
102 14 Dtool__MIZFLbM 4 128 318 0 14 Dtool__MIZFLbM 447 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 385  11 attenuation 1 365  
103 14 Dtool__MIZ4Wtp 7 129 390 0 14 Dtool__MIZ4Wtp 1015 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::make_spot
//       Access: Published, Static
//  Description: Returns a newly-generated Texture that renders a
//               circular spot image as might be cast from the
//               spotlight.  This may be projected onto target
//               geometry (for instance, via
//               NodePath::project_texture()) instead of actually
//               enabling the light itself, as a cheesy way to make a
//               high-resolution spot appear on the geometry.
//
//               pixel_width specifies the height and width of the new
//               texture in pixels, full_radius is a value in the
//               range 0..1 that indicates the relative size of the
//               fully bright center spot, and fg and bg are the
//               colors of the interior and exterior of the spot,
//               respectively.
//////////////////////////////////////////////////////////////////// 4 11 pixel_width 1 319  11 full_radius 1 350  2 fg 1 389  2 bg 1 389  
104 14 Dtool__MIZjnHs 7 130 321 0 14 Dtool__MIZjnHs 0 0 
105 14 Dtool__MIZ48jr 7 133 391 257 14 Dtool__MIZ48jr 222 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 325  
106 14 Dtool__MIZKBhj 4 134 318 0 14 Dtool__MIZKBhj 322 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::set_visible_child
//       Access: Published
//  Description: Specifies the particular child of this node, by
//               index, that will be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 index 1 319  
107 14 Dtool__MIZRVBe 6 135 319 0 14 Dtool__MIZRVBe 292 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::get_visible_child
//       Access: Published, Virtual
//  Description: Returns the index of the child that should be visible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 392  
108 14 Dtool__MIZPjq2 7 136 321 0 14 Dtool__MIZPjq2 0 0 
109 14 Dtool__MIZaGME 7 139 394 259 14 Dtool__MIZaGME 230 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
110 14 Dtool__MIZD657 4 142 318 0 14 Dtool__MIZD657 776 // Filename: sceneGraphAnalyzer.I
// Created by:  drose (15Oct06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::set_lod_mode
//       Access: Published
//  Description: Specifies the mode in which LODNodes are analyzed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 394  8 lod_mode 1 313  
111 14 Dtool__MIZA_z7 6 143 313 0 14 Dtool__MIZA_z7 280 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_lod_mode
//       Access: Published
//  Description: Returns the mode in which LODNodes are analyzed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 395  8 lod_mode 1 313  
112 14 Dtool__MIZVJ9i 4 144 318 0 14 Dtool__MIZVJ9i 310 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::clear
//       Access: Published
//  Description: Resets all of the data in the analyzer in preparation
//               for a new run.
//////////////////////////////////////////////////////////////////// 1 4 this 3 394  
113 14 Dtool__MIZV3RE 4 145 318 0 14 Dtool__MIZV3RE 522 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::add_node
//       Access: Published
//  Description: Adds a new node to the set of data for analysis.
//               Normally, this would only be called once, and passed
//               the top of the scene graph, but it's possible to
//               repeatedly pass in subgraphs to get an analysis of
//               all the graphs together.
//////////////////////////////////////////////////////////////////// 2 4 this 3 394  4 node 1 324  
114 14 Dtool__MIZxGbF 4 146 318 0 14 Dtool__MIZxGbF 258 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::write
//       Access: Published
//  Description: Describes all the data collected.
//////////////////////////////////////////////////////////////////// 3 4 this 3 395  3 out 1 316  12 indent_level 1 319  
115 14 Dtool__MIZi2nW 4 146 318 0 14 Dtool__MIZi2nW 258 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::write
//       Access: Published
//  Description: Describes all the data collected.
//////////////////////////////////////////////////////////////////// 2 4 this 3 395  3 out 1 316  
116 14 Dtool__MIZbucf 6 147 319 0 14 Dtool__MIZbucf 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
117 14 Dtool__MIZz2Ep 6 148 319 0 14 Dtool__MIZz2Ep 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_instances
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
118 14 Dtool__MIZRt2Z 6 149 319 0 14 Dtool__MIZRt2Z 238 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_transforms
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
119 14 Dtool__MIZ3_OK 6 150 319 0 14 Dtool__MIZ3_OK 246 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes_with_attribs
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
120 14 Dtool__MIZ5ofl 6 151 319 0 14 Dtool__MIZ5ofl 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lod_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
121 14 Dtool__MIZDkVh 6 152 319 0 14 Dtool__MIZDkVh 238 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
122 14 Dtool__MIZGv7g 6 153 319 0 14 Dtool__MIZGv7g 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geoms
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
123 14 Dtool__MIZxju2 6 154 319 0 14 Dtool__MIZxju2 245 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_datas
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
124 14 Dtool__MIZJ968 6 155 319 0 14 Dtool__MIZJ968 247 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_formats
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
125 14 Dtool__MIZuhjT 6 156 319 0 14 Dtool__MIZuhjT 240 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_vertex_data_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
126 14 Dtool__MIZ5VUV 6 157 319 0 14 Dtool__MIZ5VUV 236 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
127 14 Dtool__MIZM6Ln 6 158 319 0 14 Dtool__MIZM6Ln 235 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
128 14 Dtool__MIZkSfw 6 159 319 0 14 Dtool__MIZkSfw 234 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_colors
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
129 14 Dtool__MIZg5Ja 6 160 319 0 14 Dtool__MIZg5Ja 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_texcoords
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
130 14 Dtool__MIZsHvH 6 161 319 0 14 Dtool__MIZsHvH 232 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tris
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
131 14 Dtool__MIZlCaz 6 162 319 0 14 Dtool__MIZlCaz 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lines
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
132 14 Dtool__MIZmNR1 6 163 319 0 14 Dtool__MIZmNR1 234 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_points
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
133 14 Dtool__MIZFvvk 6 164 319 0 14 Dtool__MIZFvvk 243 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_individual_tris
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
134 14 Dtool__MIZuIlm 6 165 319 0 14 Dtool__MIZuIlm 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tristrips
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
135 14 Dtool__MIZCNtH 6 166 319 0 14 Dtool__MIZCNtH 247 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_strips
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
136 14 Dtool__MIZML7i 6 167 319 0 14 Dtool__MIZML7i 235 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_trifans
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
137 14 Dtool__MIZWbM5 6 168 319 0 14 Dtool__MIZWbM5 245 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_fans
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
138 14 Dtool__MIZfxoO 6 169 319 0 14 Dtool__MIZfxoO 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_texture_bytes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
139 14 Dtool__MIZNxoR 6 170 319 0 14 Dtool__MIZNxoR 240 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_long_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
140 14 Dtool__MIZM7Wp 6 171 319 0 14 Dtool__MIZM7Wp 241 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_short_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
141 14 Dtool__MIZ2kAP 6 172 350 0 14 Dtool__MIZ2kAP 243 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_total_normal_length
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 395  
106
291 9 LightNode 141313 9 LightNode 9 LightNode 0 0 0 0 149 0 3 146 147 148 0 0 2 3 292 142 143 3 293 144 145 0 0 360
////////////////////////////////////////////////////////////////////
//       Class : LightNode
// Description : A derivative of Light and of PandaNode.  All kinds of
//               Light except Spotlight (which must inherit from
//               LensNode instead) inherit from this class.
////////////////////////////////////////////////////////////////////

292 5 Light 2049 5 Light 5 Light 0 0 0 0 0 0 0 0 0 0 0 0 460
////////////////////////////////////////////////////////////////////
//       Class : Light
// Description : The abstract interface to all kinds of lights.  The
//               actual light objects also inherit from PandaNode, and
//               can therefore be added to the scene graph at some
//               arbitrary point to define the coordinate system of
//               effect.
////////////////////////////////////////////////////////////////////

293 9 PandaNode 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

294 12 AmbientLight 141313 12 AmbientLight 12 AmbientLight 0 0 0 1 150 152 0 1 151 0 0 1 0 291 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : AmbientLight
// Description : A light source that seems to illuminate all points in
//               space at once.  This kind of light need not actually
//               be part of the scene graph, since it has no meaningful
//               position.
////////////////////////////////////////////////////////////////////

295 12 CallbackNode 141313 12 CallbackNode 12 CallbackNode 0 0 0 1 153 161 0 7 154 155 156 157 158 159 160 0 0 1 0 293 0 0 0 0 308
////////////////////////////////////////////////////////////////////
//       Class : CallbackNode
// Description : A special node that can issue arbitrary callbacks to
//               user code, either during the cull or draw traversals.
////////////////////////////////////////////////////////////////////

296 11 LODNodeType 532481 11 LODNodeType 11 LODNodeType 0 0 0 0 0 0 0 0 0 0 2 7 LNT_pop 7 LNT_pop 0 8 LNT_fade 8 LNT_fade 1 0 0

297 13 LightLensNode 26625 13 LightLensNode 13 LightLensNode 0 0 0 0 166 0 5 167 168 169 170 171 0 0 2 3 292 162 163 3 298 164 165 0 0 433
////////////////////////////////////////////////////////////////////
//       Class : LightLensNode
// Description : A derivative of Light and of Camera. The name might
//               be misleading: it does not directly derive from
//               LensNode, but through the Camera class. The Camera
//               serves no purpose unless shadows are enabled.
////////////////////////////////////////////////////////////////////

298 6 Camera 2049 6 Camera 6 Camera 0 0 0 0 0 0 0 1 397 0 0 0 0 320
////////////////////////////////////////////////////////////////////
//       Class : Camera
// Description : A node that can be positioned around in the scene
//               graph to represent a point of view for rendering a
//               scene.
////////////////////////////////////////////////////////////////////

299 16 DirectionalLight 141313 16 DirectionalLight 16 DirectionalLight 0 0 0 1 172 180 0 7 173 174 175 176 177 178 179 0 0 1 0 297 0 0 0 0 288
////////////////////////////////////////////////////////////////////
//       Class : DirectionalLight
// Description : A light shining from infinitely far away in a
//               particular direction, like sunlight.
////////////////////////////////////////////////////////////////////

300 7 LODNode 141313 7 LODNode 7 LODNode 0 0 0 1 181 204 0 22 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 2 398 399 0 1 0 293 0 0 0 0 404
////////////////////////////////////////////////////////////////////
//       Class : LODNode
// Description : A Level-of-Detail node.  This selects only one of its
//               children for rendering, according to the distance
//               from the camera and the table indicated in the
//               associated LOD object.
////////////////////////////////////////////////////////////////////

301 11 FadeLODNode 141313 11 FadeLODNode 11 FadeLODNode 0 0 0 1 205 214 0 8 206 207 208 209 210 211 212 213 0 0 1 0 300 0 0 0 0 234
////////////////////////////////////////////////////////////////////
//       Class : FadeLODNode
// Description : A Level-of-Detail node with alpha based switching.
////////////////////////////////////////////////////////////////////

302 20 NodeCullCallbackData 141313 20 NodeCullCallbackData 20 NodeCullCallbackData 0 0 0 0 218 0 3 215 216 217 0 0 1 0 303 0 0 0 0 327
////////////////////////////////////////////////////////////////////
//       Class : NodeCullCallbackData
// Description : This kind of CallbackData is passed to the
//               CallbackObject added to
//               CallbackNode:set_cull_callback().
////////////////////////////////////////////////////////////////////

303 12 CallbackData 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

304 10 PointLight 141313 10 PointLight 10 PointLight 0 0 0 1 219 227 0 7 220 221 222 223 224 225 226 0 0 1 0 297 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : PointLight
// Description : A light originating from a single point in space, and
//               shining in all directions.
////////////////////////////////////////////////////////////////////

305 18 SelectiveChildNode 141313 18 SelectiveChildNode 18 SelectiveChildNode 0 0 0 1 228 230 0 1 229 0 0 1 0 293 0 0 0 0 306
////////////////////////////////////////////////////////////////////
//       Class : SelectiveChildNode
// Description : A base class for nodes like LODNode and SequenceNode
//               that select only one visible child at a time.
////////////////////////////////////////////////////////////////////

306 12 SequenceNode 141313 12 SequenceNode 12 SequenceNode 0 0 0 1 235 239 0 3 236 237 238 0 0 2 3 305 231 232 3 307 233 234 0 0 306
////////////////////////////////////////////////////////////////////
//       Class : SequenceNode
// Description : A node that automatically cycles through rendering
//               each one of its children according to its frame rate.
////////////////////////////////////////////////////////////////////

307 13 AnimInterface 2049 13 AnimInterface 13 AnimInterface 0 0 0 0 0 0 0 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

308 15 ShaderGenerator 75777 15 ShaderGenerator 15 ShaderGenerator 0 0 0 1 240 0 0 2 241 242 0 0 1 0 309 0 0 0 0 1610
////////////////////////////////////////////////////////////////////
//       Class : ShaderGenerator
// Description : The ShaderGenerator is a device that effectively
//               replaces the classic fixed function pipeline with
//               a 'next-gen' fixed function pipeline.  The next-gen
//               fixed function pipeline supports features like
//               normal mapping, gloss mapping, cartoon lighting,
//               and so forth.  It works by automatically generating
//               a shader from a given RenderState.
//
//               Currently, there is one ShaderGenerator object per
//               GraphicsStateGuardian.  It is our intent that in
//               time, people will write classes that derive from
//               ShaderGenerator but which yield slightly different
//               results.
//
//               The ShaderGenerator owes its existence to the
//               'Bamboo Team' at Carnegie Mellon's Entertainment
//               Technology Center.  This is a group of students
//               who, as a semester project, decided that next-gen
//               graphics should be accessible to everyone, even if
//               they don't know shader programming.  The group
//               consisted of:
//
//               Aaron Lo, Programmer
//               Heegun Lee, Programmer
//               Erin Fernandez, Artist/Tester
//               Joe Grubb, Artist/Tester
//               Ivan Ortega, Technical Artist/Tester
//
//               Thanks to them!
//
////////////////////////////////////////////////////////////////////

309 11 TypedObject 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3666
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//               
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//               
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

310 9 Spotlight 141313 9 Spotlight 9 Spotlight 0 0 0 1 243 252 0 8 244 245 246 247 248 249 250 251 0 0 1 0 297 0 0 0 0 682
////////////////////////////////////////////////////////////////////
//       Class : Spotlight
// Description : A light originating from a single point in space, and
//               shining in a particular direction, with a cone-shaped
//               falloff.
//
//               The Spotlight frustum is defined using a Lens, so it
//               can have any of the properties that a camera lens can
//               have.
//
//               Note that the class is named Spotlight instead of
//               SpotLight, because "spotlight" is a single English
//               word, instead of two words.
////////////////////////////////////////////////////////////////////

311 10 SwitchNode 141313 10 SwitchNode 10 SwitchNode 0 0 0 1 253 257 0 3 254 255 256 0 0 1 0 305 0 0 0 0 281
////////////////////////////////////////////////////////////////////
//       Class : SwitchNode
// Description : A node that renders only one of its children,
//               according to the user's indication.
////////////////////////////////////////////////////////////////////

312 18 SceneGraphAnalyzer 26625 18 SceneGraphAnalyzer 18 SceneGraphAnalyzer 0 0 0 1 258 259 0 31 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 0 0 0 0 1 313 297
////////////////////////////////////////////////////////////////////
//       Class : SceneGraphAnalyzer
// Description : A handy class that can scrub over a scene graph and
//               collect interesting statistics on it.
////////////////////////////////////////////////////////////////////

313 7 LodMode 794624 27 SceneGraphAnalyzer::LodMode 27 SceneGraphAnalyzer::LodMode 312 0 0 0 0 0 0 0 0 0 4 9 LM_lowest 29 SceneGraphAnalyzer::LM_lowest 0 10 LM_highest 30 SceneGraphAnalyzer::LM_highest 1 6 LM_all 26 SceneGraphAnalyzer::LM_all 2 7 LM_none 27 SceneGraphAnalyzer::LM_none 3 0 0

314 17 LightNode const * 8576 17 LightNode const * 17 LightNode const * 0 0 315 0 0 0 0 0 0 0 0 0 0

315 15 LightNode const 8832 15 LightNode const 15 LightNode const 0 0 291 0 0 0 0 0 0 0 0 0 0

316 9 ostream * 8576 9 ostream * 9 ostream * 0 0 317 0 0 0 0 0 0 0 0 0 0

317 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

318 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

319 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

320 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

321 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 320 0 0 0 0 0 0 0 0 0 0

322 11 LightNode * 8576 11 LightNode * 11 LightNode * 0 0 291 0 0 0 0 0 0 0 0 0 0

323 7 Light * 8576 7 Light * 7 Light * 0 0 292 0 0 0 0 0 0 0 0 0 0

324 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 293 0 0 0 0 0 0 0 0 0 0

325 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

326 14 AmbientLight * 8576 14 AmbientLight * 14 AmbientLight * 0 0 294 0 0 0 0 0 0 0 0 0 0

327 14 CallbackNode * 8576 14 CallbackNode * 14 CallbackNode * 0 0 295 0 0 0 0 0 0 0 0 0 0

328 16 CallbackObject * 8576 16 CallbackObject * 16 CallbackObject * 0 0 329 0 0 0 0 0 0 0 0 0 0

329 14 CallbackObject 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

330 20 CallbackNode const * 8576 20 CallbackNode const * 20 CallbackNode const * 0 0 331 0 0 0 0 0 0 0 0 0 0

331 18 CallbackNode const 8832 18 CallbackNode const 18 CallbackNode const 0 0 295 0 0 0 0 0 0 0 0 0 0

332 15 LightLensNode * 8576 15 LightLensNode * 15 LightLensNode * 0 0 297 0 0 0 0 0 0 0 0 0 0

333 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

334 21 LightLensNode const * 8576 21 LightLensNode const * 21 LightLensNode const * 0 0 335 0 0 0 0 0 0 0 0 0 0

335 19 LightLensNode const 8832 19 LightLensNode const 19 LightLensNode const 0 0 297 0 0 0 0 0 0 0 0 0 0

336 8 Camera * 8576 8 Camera * 8 Camera * 0 0 298 0 0 0 0 0 0 0 0 0 0

337 18 DirectionalLight * 8576 18 DirectionalLight * 18 DirectionalLight * 0 0 299 0 0 0 0 0 0 0 0 0 0

338 24 DirectionalLight const * 8576 24 DirectionalLight const * 24 DirectionalLight const * 0 0 339 0 0 0 0 0 0 0 0 0 0

339 22 DirectionalLight const 8832 22 DirectionalLight const 22 DirectionalLight const 0 0 299 0 0 0 0 0 0 0 0 0 0

340 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 341 0 0 0 0 0 0 0 0 0 0

341 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 342 0 0 0 0 0 0 0 0 0 0

342 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

343 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 344 0 0 0 0 0 0 0 0 0 0

344 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 345 0 0 0 0 0 0 0 0 0 0

345 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

346 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 347 0 0 0 0 0 0 0 0 0 0

347 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 348 0 0 0 0 0 0 0 0 0 0

348 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

349 9 LODNode * 8576 9 LODNode * 9 LODNode * 0 0 300 0 0 0 0 0 0 0 0 0 0

350 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

351 15 LODNode const * 8576 15 LODNode const * 15 LODNode const * 0 0 352 0 0 0 0 0 0 0 0 0 0

352 13 LODNode const 8832 13 LODNode const 13 LODNode const 0 0 300 0 0 0 0 0 0 0 0 0 0

353 13 FadeLODNode * 8576 13 FadeLODNode * 13 FadeLODNode * 0 0 301 0 0 0 0 0 0 0 0 0 0

354 19 FadeLODNode const * 8576 19 FadeLODNode const * 19 FadeLODNode const * 0 0 355 0 0 0 0 0 0 0 0 0 0

355 17 FadeLODNode const 8832 17 FadeLODNode const 17 FadeLODNode const 0 0 301 0 0 0 0 0 0 0 0 0 0

356 13 CullTraverser 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

357 28 NodeCullCallbackData const * 8576 28 NodeCullCallbackData const * 28 NodeCullCallbackData const * 0 0 358 0 0 0 0 0 0 0 0 0 0

358 26 NodeCullCallbackData const 8832 26 NodeCullCallbackData const 26 NodeCullCallbackData const 0 0 302 0 0 0 0 0 0 0 0 0 0

359 15 CullTraverser * 8576 15 CullTraverser * 15 CullTraverser * 0 0 356 0 0 0 0 0 0 0 0 0 0

360 19 CullTraverserData * 8576 19 CullTraverserData * 19 CullTraverserData * 0 0 361 0 0 0 0 0 0 0 0 0 0

361 17 CullTraverserData 2048 17 CullTraverserData 17 CullTraverserData 0 0 0 0 0 0 0 0 0 0 0 0 778
////////////////////////////////////////////////////////////////////
//       Class : CullTraverserData
// Description : This collects together the pieces of data that are
//               accumulated for each node while walking the scene
//               graph during the cull traversal.
//
//               Having this as a separate object simplifies the
//               parameter list to CullTraverser::r_traverse(), as
//               well as to other functions like
//               PandaNode::cull_callback().  It also makes it easier
//               to add cull parameters, and provides a place to
//               abstract out some of the cull behavior (like
//               view-frustum culling).
////////////////////////////////////////////////////////////////////

362 12 PointLight * 8576 12 PointLight * 12 PointLight * 0 0 304 0 0 0 0 0 0 0 0 0 0

363 18 PointLight const * 8576 18 PointLight const * 18 PointLight const * 0 0 364 0 0 0 0 0 0 0 0 0 0

364 16 PointLight const 8832 16 PointLight const 16 PointLight const 0 0 304 0 0 0 0 0 0 0 0 0 0

365 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 366 0 0 0 0 0 0 0 0 0 0

366 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 367 0 0 0 0 0 0 0 0 0 0

367 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

368 20 SelectiveChildNode * 8576 20 SelectiveChildNode * 20 SelectiveChildNode * 0 0 305 0 0 0 0 0 0 0 0 0 0

369 14 SequenceNode * 8576 14 SequenceNode * 14 SequenceNode * 0 0 306 0 0 0 0 0 0 0 0 0 0

370 20 SequenceNode const * 8576 20 SequenceNode const * 20 SequenceNode const * 0 0 371 0 0 0 0 0 0 0 0 0 0

371 18 SequenceNode const 8832 18 SequenceNode const 18 SequenceNode const 0 0 306 0 0 0 0 0 0 0 0 0 0

372 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

373 15 AnimInterface * 8576 15 AnimInterface * 15 AnimInterface * 0 0 307 0 0 0 0 0 0 0 0 0 0

374 27 GraphicsStateGuardianBase * 8576 27 GraphicsStateGuardianBase * 27 GraphicsStateGuardianBase * 0 0 375 0 0 0 0 0 0 0 0 0 0

375 25 GraphicsStateGuardianBase 2048 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 400 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

376 20 GraphicsOutputBase * 8576 20 GraphicsOutputBase * 20 GraphicsOutputBase * 0 0 377 0 0 0 0 0 0 0 0 0 0

377 18 GraphicsOutputBase 2048 18 GraphicsOutputBase 18 GraphicsOutputBase 0 0 0 0 0 0 0 0 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutputBase
// Description : An abstract base class for GraphicsOutput, for all
//               the usual reasons.
////////////////////////////////////////////////////////////////////

378 17 ShaderGenerator * 8576 17 ShaderGenerator * 17 ShaderGenerator * 0 0 308 0 0 0 0 0 0 0 0 0 0

379 18 RenderAttrib const 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 380 0 0 0 0 0 0 0 0 0 0

380 12 RenderAttrib 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1564
////////////////////////////////////////////////////////////////////
//       Class : RenderAttrib
// Description : This is the base class for a number of render
//               attributes (other than transform) that may be set on
//               scene graph nodes to control the appearance of
//               geometry.  This includes TextureAttrib, ColorAttrib,
//               etc.
//
//               RenderAttrib represents render attributes that always
//               propagate down to the leaves without regard to the
//               particular node they are assigned to.  A RenderAttrib
//               will have the same effect on a leaf node whether it
//               is assigned to the graph at the leaf or several nodes
//               above.  This is different from RenderEffect, which
//               represents a particular render property that is
//               applied immediately to the node on which it is
//               encountered, like billboarding or decaling.
//
//               You should not attempt to create or modify a
//               RenderAttrib directly; instead, use the make() method
//               of the appropriate kind of attrib you want.  This
//               will allocate and return a new RenderAttrib of the
//               appropriate type, and it may share pointers if
//               possible.  Do not modify the new RenderAttrib if you
//               wish to change its properties; instead, create a new
//               one.
////////////////////////////////////////////////////////////////////

381 19 RenderState const * 8576 19 RenderState const * 19 RenderState const * 0 0 382 0 0 0 0 0 0 0 0 0 0

382 17 RenderState const 8832 17 RenderState const 17 RenderState const 0 0 383 0 0 0 0 0 0 0 0 0 0

383 11 RenderState 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 621
////////////////////////////////////////////////////////////////////
//       Class : RenderState
// Description : This represents a unique collection of RenderAttrib
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

384 20 RenderAttrib const * 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 379 0 0 0 0 0 0 0 0 0 0

385 11 Spotlight * 8576 11 Spotlight * 11 Spotlight * 0 0 310 0 0 0 0 0 0 0 0 0 0

386 17 Spotlight const * 8576 17 Spotlight const * 17 Spotlight const * 0 0 387 0 0 0 0 0 0 0 0 0 0

387 15 Spotlight const 8832 15 Spotlight const 15 Spotlight const 0 0 310 0 0 0 0 0 0 0 0 0 0

388 7 Texture 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

389 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 342 0 0 0 0 0 0 0 0 0 0

390 9 Texture * 8576 9 Texture * 9 Texture * 0 0 388 0 0 0 0 0 0 0 0 0 0

391 12 SwitchNode * 8576 12 SwitchNode * 12 SwitchNode * 0 0 311 0 0 0 0 0 0 0 0 0 0

392 18 SwitchNode const * 8576 18 SwitchNode const * 18 SwitchNode const * 0 0 393 0 0 0 0 0 0 0 0 0 0

393 16 SwitchNode const 8832 16 SwitchNode const 16 SwitchNode const 0 0 311 0 0 0 0 0 0 0 0 0 0

394 20 SceneGraphAnalyzer * 8576 20 SceneGraphAnalyzer * 20 SceneGraphAnalyzer * 0 0 312 0 0 0 0 0 0 0 0 0 0

395 26 SceneGraphAnalyzer const * 8576 26 SceneGraphAnalyzer const * 26 SceneGraphAnalyzer const * 0 0 396 0 0 0 0 0 0 0 0 0 0

396 24 SceneGraphAnalyzer const 8832 24 SceneGraphAnalyzer const 24 SceneGraphAnalyzer const 0 0 312 0 0 0 0 0 0 0 0 0 0

0
0
4
397 0 30 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
398 0 49 7 get_ins 16 get_num_switches 6 get_in 
399 0 49 8 get_outs 16 get_num_switches 7 get_out 
400 0 330 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
