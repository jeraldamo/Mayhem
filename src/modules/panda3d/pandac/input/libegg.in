1304332240
2 2
6 libegg 4 kAOM 8 pandaegg 
917
977 11 EggUserData 4 1894 24 EggUserData::EggUserData 0 2 1 2 934
// Filename: eggUserData.I
// Created by:  drose (03Jun03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline EggUserData::EggUserData(void);
inline EggUserData::EggUserData(EggUserData const &copy);

978 10 operator = 4 1894 23 EggUserData::operator = 0 1 3 233
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggUserData &EggUserData::operator =(EggUserData const &copy);

979 14 get_class_type 4 1894 27 EggUserData::get_class_type 0 1 4 0
52
static TypeHandle EggUserData::get_class_type(void);

980 9 EggObject 4 1896 20 EggObject::EggObject 0 2 5 6 449
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
EggObject::EggObject(void);
EggObject::EggObject(EggObject const &copy);

981 10 operator = 4 1896 21 EggObject::operator = 0 1 7 234
////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
EggObject &EggObject::operator =(EggObject const &copy);

982 13 set_user_data 4 1896 24 EggObject::set_user_data 0 1 8 1201
////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
////////////////////////////////////////////////////////////////////
54
void EggObject::set_user_data(EggUserData *user_data);

983 13 get_user_data 4 1896 24 EggObject::get_user_data 0 2 9 10 699
////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
////////////////////////////////////////////////////////////////////
112
EggUserData *EggObject::get_user_data(void) const;
EggUserData *EggObject::get_user_data(TypeHandle type) const;

984 13 has_user_data 4 1896 24 EggObject::has_user_data 0 2 11 12 694
////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
////////////////////////////////////////////////////////////////////
96
bool EggObject::has_user_data(void) const;
bool EggObject::has_user_data(TypeHandle type) const;

985 15 clear_user_data 4 1896 26 EggObject::clear_user_data 0 2 13 14 553
////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
////////////////////////////////////////////////////////////////////
88
void EggObject::clear_user_data(void);
void EggObject::clear_user_data(TypeHandle type);

986 14 get_class_type 4 1896 25 EggObject::get_class_type 0 1 15 0
50
static TypeHandle EggObject::get_class_type(void);

987 19 upcast_to_EggObject 12 1897 35 EggNamedObject::upcast_to_EggObject 0 1 22 39
upcast from EggNamedObject to EggObject
53
EggObject *EggNamedObject::upcast_to_EggObject(void);

988 26 downcast_to_EggNamedObject 12 1896 37 EggObject::downcast_to_EggNamedObject 0 1 23 41
downcast from EggObject to EggNamedObject
60
EggNamedObject *EggObject::downcast_to_EggNamedObject(void);

989 17 upcast_to_Namable 12 1897 33 EggNamedObject::upcast_to_Namable 0 1 24 37
upcast from EggNamedObject to Namable
49
Namable *EggNamedObject::upcast_to_Namable(void);

990 26 downcast_to_EggNamedObject 12 1898 35 Namable::downcast_to_EggNamedObject 0 1 25 39
downcast from Namable to EggNamedObject
58
EggNamedObject *Namable::downcast_to_EggNamedObject(void);

991 14 EggNamedObject 4 1897 30 EggNamedObject::EggNamedObject 0 3 16 17 18 943
// Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggNamedObject::EggNamedObject(basic_string< char > const &name = (""));
inline EggNamedObject::EggNamedObject(EggNamedObject const &copy);

992 10 operator = 4 1897 26 EggNamedObject::operator = 0 1 19 236
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggNamedObject &EggNamedObject::operator =(EggNamedObject const &copy);

993 6 output 4 1897 22 EggNamedObject::output 0 1 20 219
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
48
void EggNamedObject::output(ostream &out) const;

994 14 get_class_type 4 1897 30 EggNamedObject::get_class_type 0 1 21 0
55
static TypeHandle EggNamedObject::get_class_type(void);

995 15 ~EggNamedObject 4 1897 31 EggNamedObject::~EggNamedObject 0 0 0
38
EggNamedObject::~EggNamedObject(void);

996 10 operator = 4 1899 19 EggNode::operator = 0 1 26 229
////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggNode &EggNode::operator =(EggNode const &copy);

997 10 get_parent 4 1899 19 EggNode::get_parent 0 1 27 215
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline EggGroupNode *EggNode::get_parent(void) const;

998 9 get_depth 4 1899 18 EggNode::get_depth 0 1 28 297
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
////////////////////////////////////////////////////////////////////
42
inline int EggNode::get_depth(void) const;

999 17 is_under_instance 4 1899 26 EggNode::is_under_instance 0 1 29 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggNode::is_under_instance(void) const;

1000 18 is_under_transform 4 1899 27 EggNode::is_under_transform 0 1 30 368
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggNode::is_under_transform(void) const;

1001 14 is_local_coord 4 1899 23 EggNode::is_local_coord 0 1 31 443
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
////////////////////////////////////////////////////////////////////
48
inline bool EggNode::is_local_coord(void) const;

1002 16 get_vertex_frame 4 1899 25 EggNode::get_vertex_frame 0 1 32 1112
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
////////////////////////////////////////////////////////////////////
62
inline LMatrix4d const &EggNode::get_vertex_frame(void) const;

1003 14 get_node_frame 4 1899 23 EggNode::get_node_frame 0 1 33 372
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d const &EggNode::get_node_frame(void) const;

1004 20 get_vertex_frame_inv 4 1899 29 EggNode::get_vertex_frame_inv 0 1 34 333
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggNode::get_vertex_frame_inv(void) const;

1005 18 get_node_frame_inv 4 1899 27 EggNode::get_node_frame_inv 0 1 35 327
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_frame_inv(void) const;

1006 18 get_vertex_to_node 4 1899 27 EggNode::get_vertex_to_node 0 1 36 503
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_vertex_to_node(void) const;

1007 18 get_node_to_vertex 4 1899 27 EggNode::get_node_to_vertex 0 1 37 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const &EggNode::get_node_to_vertex(void) const;

1008 20 get_vertex_frame_ptr 4 1899 29 EggNode::get_vertex_frame_ptr 0 1 38 366
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const *EggNode::get_vertex_frame_ptr(void) const;

1009 18 get_node_frame_ptr 4 1899 27 EggNode::get_node_frame_ptr 0 1 39 362
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
////////////////////////////////////////////////////////////////////
64
inline LMatrix4d const *EggNode::get_node_frame_ptr(void) const;

1010 24 get_vertex_frame_inv_ptr 4 1899 33 EggNode::get_vertex_frame_inv_ptr 0 1 40 374
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const *EggNode::get_vertex_frame_inv_ptr(void) const;

1011 22 get_node_frame_inv_ptr 4 1899 31 EggNode::get_node_frame_inv_ptr 0 1 41 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_frame_inv_ptr(void) const;

1012 22 get_vertex_to_node_ptr 4 1899 31 EggNode::get_vertex_to_node_ptr 0 1 42 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_vertex_to_node_ptr(void) const;

1013 22 get_node_to_vertex_ptr 4 1899 31 EggNode::get_node_to_vertex_ptr 0 1 43 370
////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
////////////////////////////////////////////////////////////////////
68
inline LMatrix4d const *EggNode::get_node_to_vertex_ptr(void) const;

1014 9 transform 4 1899 18 EggNode::transform 0 1 44 308
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
////////////////////////////////////////////////////////////////////
53
inline void EggNode::transform(LMatrix4d const &mat);

1015 23 transform_vertices_only 4 1899 32 EggNode::transform_vertices_only 0 1 45 476
////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
////////////////////////////////////////////////////////////////////
67
inline void EggNode::transform_vertices_only(LMatrix4d const &mat);

1016 18 flatten_transforms 4 1899 27 EggNode::flatten_transforms 0 1 46 699
////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
46
inline void EggNode::flatten_transforms(void);

1017 13 apply_texmats 4 1899 22 EggNode::apply_texmats 0 1 47 398
////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
////////////////////////////////////////////////////////////////////
34
void EggNode::apply_texmats(void);

1018 11 rename_node 4 1899 20 EggNode::rename_node 0 1 48 254
////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
70
int EggNode::rename_node(vector< basic_string< char > > strip_prefix);

1019 8 is_joint 4 1899 17 EggNode::is_joint 0 1 49 504
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
43
virtual bool EggNode::is_joint(void) const;

1020 14 is_anim_matrix 4 1899 23 EggNode::is_anim_matrix 0 1 50 341
////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
////////////////////////////////////////////////////////////////////
49
virtual bool EggNode::is_anim_matrix(void) const;

1021 20 determine_alpha_mode 4 1899 29 EggNode::determine_alpha_mode 0 1 51 549
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_alpha_mode(void);

1022 26 determine_depth_write_mode 4 1899 35 EggNode::determine_depth_write_mode 0 1 52 561
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggNode::determine_depth_write_mode(void);

1023 25 determine_depth_test_mode 4 1899 34 EggNode::determine_depth_test_mode 0 1 53 559
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_depth_test_mode(void);

1024 25 determine_visibility_mode 4 1899 34 EggNode::determine_visibility_mode 0 1 54 558
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggNode::determine_visibility_mode(void);

1025 22 determine_depth_offset 4 1899 31 EggNode::determine_depth_offset 0 1 55 535
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_offset
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
61
virtual EggRenderMode *EggNode::determine_depth_offset(void);

1026 20 determine_draw_order 4 1899 29 EggNode::determine_draw_order 0 1 56 531
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
59
virtual EggRenderMode *EggNode::determine_draw_order(void);

1027 13 determine_bin 4 1899 22 EggNode::determine_bin 0 1 57 518
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
52
virtual EggRenderMode *EggNode::determine_bin(void);

1028 17 determine_indexed 4 1899 26 EggNode::determine_indexed 0 1 58 615
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool EggNode::determine_indexed(void);

1029 15 determine_decal 4 1899 24 EggNode::determine_decal 0 1 59 603
////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
44
virtual bool EggNode::determine_decal(void);

1030 5 write 4 1899 14 EggNode::write 0 1 60 0
70
virtual void EggNode::write(ostream &out, int indent_level) const = 0;

1031 9 parse_egg 4 1899 18 EggNode::parse_egg 0 1 61 575
////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
////////////////////////////////////////////////////////////////////
64
bool EggNode::parse_egg(basic_string< char > const &egg_syntax);

1032 20 test_under_integrity 4 1899 29 EggNode::test_under_integrity 0 1 62 380
////////////////////////////////////////////////////////////////////
//     Function: EggNode::test_under_integrity
//       Access: Public
//  Description: Recursively checks the integrity of the _under_flags,
//               _parent, and _depth members of this node and all of
//               its ancestors.
////////////////////////////////////////////////////////////////////
47
void EggNode::test_under_integrity(void) const;

1033 14 get_class_type 4 1899 23 EggNode::get_class_type 0 1 63 0
48
static TypeHandle EggNode::get_class_type(void);

1034 8 ~EggNode 4 1899 17 EggNode::~EggNode 0 0 0
24
EggNode::~EggNode(void);

1035 10 operator = 4 1900 23 EggAnimData::operator = 0 1 64 233
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggAnimData &EggAnimData::operator =(EggAnimData const &copy);

1036 7 set_fps 4 1900 20 EggAnimData::set_fps 0 1 65 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAnimData::set_fps(double type);

1037 9 clear_fps 4 1900 22 EggAnimData::clear_fps 0 1 66 218
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggAnimData::clear_fps(void);

1038 7 has_fps 4 1900 20 EggAnimData::has_fps 0 1 67 216
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggAnimData::has_fps(void) const;

1039 7 get_fps 4 1900 20 EggAnimData::get_fps 0 1 68 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggAnimData::get_fps(void) const;

1040 10 clear_data 4 1900 23 EggAnimData::clear_data 0 1 69 259
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
////////////////////////////////////////////////////////////////////
42
inline void EggAnimData::clear_data(void);

1041 8 add_data 4 1900 21 EggAnimData::add_data 0 1 70 253
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
////////////////////////////////////////////////////////////////////
48
inline void EggAnimData::add_data(double value);

1042 8 get_size 4 1900 21 EggAnimData::get_size 0 1 71 262
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
////////////////////////////////////////////////////////////////////
45
inline int EggAnimData::get_size(void) const;

1043 8 quantize 4 1900 21 EggAnimData::quantize 0 1 72 303
////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
////////////////////////////////////////////////////////////////////
43
void EggAnimData::quantize(double quantum);

1044 14 get_class_type 4 1900 27 EggAnimData::get_class_type 0 1 73 0
52
static TypeHandle EggAnimData::get_class_type(void);

1045 12 ~EggAnimData 4 1900 25 EggAnimData::~EggAnimData 0 0 0
32
EggAnimData::~EggAnimData(void);

1046 14 EggAnimPreload 4 1901 30 EggAnimPreload::EggAnimPreload 0 3 74 75 76 943
// Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggAnimPreload::EggAnimPreload(basic_string< char > const &name = (""));
inline EggAnimPreload::EggAnimPreload(EggAnimPreload const &copy);

1047 10 operator = 4 1901 26 EggAnimPreload::operator = 0 1 77 236
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggAnimPreload &EggAnimPreload::operator =(EggAnimPreload const &copy);

1048 7 set_fps 4 1901 23 EggAnimPreload::set_fps 0 1 78 219
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggAnimPreload::set_fps(double fps);

1049 9 clear_fps 4 1901 25 EggAnimPreload::clear_fps 0 1 79 221
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void EggAnimPreload::clear_fps(void);

1050 7 has_fps 4 1901 23 EggAnimPreload::has_fps 0 1 80 219
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline bool EggAnimPreload::has_fps(void) const;

1051 7 get_fps 4 1901 23 EggAnimPreload::get_fps 0 1 81 265
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
50
inline double EggAnimPreload::get_fps(void) const;

1052 14 set_num_frames 4 1901 30 EggAnimPreload::set_num_frames 0 1 82 226
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggAnimPreload::set_num_frames(int num_frames);

1053 16 clear_num_frames 4 1901 32 EggAnimPreload::clear_num_frames 0 1 83 228
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggAnimPreload::clear_num_frames(void);

1054 14 has_num_frames 4 1901 30 EggAnimPreload::has_num_frames 0 1 84 226
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_num_frames
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggAnimPreload::has_num_frames(void) const;

1055 14 get_num_frames 4 1901 30 EggAnimPreload::get_num_frames 0 1 85 279
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_num_frames
//       Access: Public
//  Description: This is only valid if has_num_frames() returns true.
////////////////////////////////////////////////////////////////////
54
inline int EggAnimPreload::get_num_frames(void) const;

1056 14 get_class_type 4 1901 30 EggAnimPreload::get_class_type 0 1 86 0
55
static TypeHandle EggAnimPreload::get_class_type(void);

1057 15 ~EggAnimPreload 4 1901 31 EggAnimPreload::~EggAnimPreload 0 0 0
38
EggAnimPreload::~EggAnimPreload(void);

1058 13 EggAttributes 4 1902 28 EggAttributes::EggAttributes 0 2 87 88 457
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
EggAttributes::EggAttributes(void);
EggAttributes::EggAttributes(EggAttributes const &copy);

1059 10 operator = 4 1902 25 EggAttributes::operator = 0 1 89 238
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
EggAttributes &EggAttributes::operator =(EggAttributes const &copy);

1060 14 ~EggAttributes 4 1902 29 EggAttributes::~EggAttributes 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual EggAttributes::~EggAttributes(void);

1061 10 has_normal 4 1902 25 EggAttributes::has_normal 0 1 90 713
// Filename: eggAttributes.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggAttributes::has_normal(void) const;

1062 10 get_normal 4 1902 25 EggAttributes::get_normal 0 1 91 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVector3d const &EggAttributes::get_normal(void) const;

1063 10 set_normal 4 1902 25 EggAttributes::set_normal 0 1 92 224
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggAttributes::set_normal(LVector3d const &normal);

1064 12 clear_normal 4 1902 27 EggAttributes::clear_normal 0 1 93 226
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggAttributes::clear_normal(void);

1065 14 matches_normal 4 1902 29 EggAttributes::matches_normal 0 1 94 345
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
76
inline bool EggAttributes::matches_normal(EggAttributes const &other) const;

1066 11 copy_normal 4 1902 26 EggAttributes::copy_normal 0 1 95 376
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
////////////////////////////////////////////////////////////////////
67
inline void EggAttributes::copy_normal(EggAttributes const &other);

1067 9 has_color 4 1902 24 EggAttributes::has_color 0 1 96 223
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggAttributes::has_color(void) const;

1068 9 get_color 4 1902 24 EggAttributes::get_color 0 1 97 333
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
////////////////////////////////////////////////////////////////////
55
inline LVecBase4f EggAttributes::get_color(void) const;

1069 9 set_color 4 1902 24 EggAttributes::set_color 0 1 98 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggAttributes::set_color(LVecBase4f const &Color);

1070 11 clear_color 4 1902 26 EggAttributes::clear_color 0 1 99 214
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggAttributes::clear_color(void);

1071 13 matches_color 4 1902 28 EggAttributes::matches_color 0 1 100 343
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
////////////////////////////////////////////////////////////////////
75
inline bool EggAttributes::matches_color(EggAttributes const &other) const;

1072 10 copy_color 4 1902 25 EggAttributes::copy_color 0 1 101 372
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
////////////////////////////////////////////////////////////////////
66
inline void EggAttributes::copy_color(EggAttributes const &other);

1073 5 write 4 1902 20 EggAttributes::write 0 1 102 304
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggAttributes::write(ostream &out, int indent_level) const;

1074 15 sorts_less_than 4 1902 30 EggAttributes::sorts_less_than 0 1 103 399
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
77
inline bool EggAttributes::sorts_less_than(EggAttributes const &other) const;

1075 10 compare_to 4 1902 25 EggAttributes::compare_to 0 1 104 394
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
64
int EggAttributes::compare_to(EggAttributes const &other) const;

1076 9 transform 4 1902 24 EggAttributes::transform 0 1 105 312
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
////////////////////////////////////////////////////////////////////
52
void EggAttributes::transform(LMatrix4d const &mat);

1077 12 get_dnormals 20 1902 27 EggAttributes::get_dnormals 0 1 107 74
getter for EggMorphList< EggMorph< LVector3d > > EggAttributes::_dnormals;
85
EggMorphList< EggMorph< LVector3d > > const &EggAttributes::get_dnormals(void) const;

1078 10 get_drgbas 20 1902 25 EggAttributes::get_drgbas 0 1 108 72
getter for EggMorphList< EggMorph< LVector4f > > EggAttributes::_drgbas;
83
EggMorphList< EggMorph< LVector4f > > const &EggAttributes::get_drgbas(void) const;

1079 14 get_class_type 4 1902 29 EggAttributes::get_class_type 0 1 106 0
54
static TypeHandle EggAttributes::get_class_type(void);

1080 11 EggVertexUV 4 1905 24 EggVertexUV::EggVertexUV 0 3 109 110 111 681
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
211
EggVertexUV::EggVertexUV(basic_string< char > const &name, LPoint2d const &uv);
EggVertexUV::EggVertexUV(basic_string< char > const &name, LPoint3d const &uvw);
EggVertexUV::EggVertexUV(EggVertexUV const &copy);

1081 10 operator = 4 1905 23 EggVertexUV::operator = 0 1 112 237
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
EggVertexUV &EggVertexUV::operator =(EggVertexUV const &copy);

1082 11 filter_name 4 1905 24 EggVertexUV::filter_name 0 1 113 998
// Filename: eggVertexUV.I
// Created by:  drose (20Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::filter_name
//       Access: Published, Static
//  Description: Returns the actual name that should be set for a
//               given name string.  Usually this is the same string
//               that is input, but for historical reasons the texture
//               coordinate name "default" is mapped to the empty
//               string.
////////////////////////////////////////////////////////////////////
94
static inline basic_string< char > EggVertexUV::filter_name(basic_string< char > const &name);

1083 8 set_name 4 1905 21 EggVertexUV::set_name 0 1 114 220
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggVertexUV::set_name(basic_string< char > const &name);

1084 18 get_num_dimensions 4 1905 31 EggVertexUV::get_num_dimensions 0 1 115 401
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
////////////////////////////////////////////////////////////////////
55
inline int EggVertexUV::get_num_dimensions(void) const;

1085 5 has_w 4 1905 18 EggVertexUV::has_w 0 1 116 369
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
////////////////////////////////////////////////////////////////////
43
inline bool EggVertexUV::has_w(void) const;

1086 6 get_uv 4 1905 19 EggVertexUV::get_uv 0 1 117 302
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertexUV::get_uv(void) const;

1087 7 get_uvw 4 1905 20 EggVertexUV::get_uvw 0 1 118 435
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
////////////////////////////////////////////////////////////////////
56
inline LPoint3d const &EggVertexUV::get_uvw(void) const;

1088 6 set_uv 4 1905 19 EggVertexUV::set_uv 0 1 119 372
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
////////////////////////////////////////////////////////////////////
58
inline void EggVertexUV::set_uv(LPoint2d const &texCoord);

1089 7 set_uvw 4 1905 20 EggVertexUV::set_uvw 0 1 120 333
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
////////////////////////////////////////////////////////////////////
59
inline void EggVertexUV::set_uvw(LPoint3d const &texCoord);

1090 11 has_tangent 4 1905 24 EggVertexUV::has_tangent 0 1 121 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggVertexUV::has_tangent(void) const;

1091 11 get_tangent 4 1905 24 EggVertexUV::get_tangent 0 1 122 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVector3d const &EggVertexUV::get_tangent(void) const;

1092 11 set_tangent 4 1905 24 EggVertexUV::set_tangent 0 1 123 223
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggVertexUV::set_tangent(LVector3d const &tangent);

1093 13 clear_tangent 4 1905 26 EggVertexUV::clear_tangent 0 1 124 225
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggVertexUV::clear_tangent(void);

1094 12 has_binormal 4 1905 25 EggVertexUV::has_binormal 0 1 125 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggVertexUV::has_binormal(void) const;

1095 12 get_binormal 4 1905 25 EggVertexUV::get_binormal 0 1 126 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVector3d const &EggVertexUV::get_binormal(void) const;

1096 12 set_binormal 4 1905 25 EggVertexUV::set_binormal 0 1 127 224
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggVertexUV::set_binormal(LVector3d const &binormal);

1097 14 clear_binormal 4 1905 27 EggVertexUV::clear_binormal 0 1 128 226
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggVertexUV::clear_binormal(void);

1098 9 transform 4 1905 22 EggVertexUV::transform 0 1 129 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
////////////////////////////////////////////////////////////////////
50
void EggVertexUV::transform(LMatrix4d const &mat);

1099 5 write 4 1905 18 EggVertexUV::write 0 1 130 215
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
62
void EggVertexUV::write(ostream &out, int indent_level) const;

1100 10 compare_to 4 1905 23 EggVertexUV::compare_to 0 1 131 389
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
60
int EggVertexUV::compare_to(EggVertexUV const &other) const;

1101 8 get_duvs 20 1905 21 EggVertexUV::get_duvs 0 1 133 68
getter for EggMorphList< EggMorph< LVector3d > > EggVertexUV::_duvs;
79
EggMorphList< EggMorph< LVector3d > > const &EggVertexUV::get_duvs(void) const;

1102 14 get_class_type 4 1905 27 EggVertexUV::get_class_type 0 1 132 0
52
static TypeHandle EggVertexUV::get_class_type(void);

1103 19 upcast_to_EggObject 12 1906 30 EggVertex::upcast_to_EggObject 0 1 180 34
upcast from EggVertex to EggObject
48
EggObject *EggVertex::upcast_to_EggObject(void);

1104 21 downcast_to_EggVertex 12 1896 32 EggObject::downcast_to_EggVertex 0 1 181 36
downcast from EggObject to EggVertex
50
EggVertex *EggObject::downcast_to_EggVertex(void);

1105 23 upcast_to_EggAttributes 12 1906 34 EggVertex::upcast_to_EggAttributes 0 1 182 38
upcast from EggVertex to EggAttributes
56
EggAttributes *EggVertex::upcast_to_EggAttributes(void);

1106 21 downcast_to_EggVertex 12 1902 36 EggAttributes::downcast_to_EggVertex 0 1 183 40
downcast from EggAttributes to EggVertex
54
EggVertex *EggAttributes::downcast_to_EggVertex(void);

1107 9 EggVertex 4 1906 20 EggVertex::EggVertex 0 2 134 135 562
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
72
EggVertex::EggVertex(void);
EggVertex::EggVertex(EggVertex const &copy);

1108 10 operator = 4 1906 21 EggVertex::operator = 0 1 136 347
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
////////////////////////////////////////////////////////////////////
56
EggVertex &EggVertex::operator =(EggVertex const &copy);

1109 10 ~EggVertex 4 1906 21 EggVertex::~EggVertex 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual EggVertex::~EggVertex(void);

1110 8 get_pool 4 1906 19 EggVertex::get_pool 0 1 137 847
// Filename: eggVertex.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
////////////////////////////////////////////////////////////////////
54
inline EggVertexPool *EggVertex::get_pool(void) const;

1111 20 is_forward_reference 4 1906 31 EggVertex::is_forward_reference 0 1 138 710
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
////////////////////////////////////////////////////////////////////
56
inline bool EggVertex::is_forward_reference(void) const;

1112 7 set_pos 4 1906 18 EggVertex::set_pos 0 4 139 140 141 142 1449
// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

// The pos might have 1, 2, 3, or 4 dimensions.  That complicates
// things a bit.

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
////////////////////////////////////////////////////////////////////
202
inline void EggVertex::set_pos(double pos);
inline void EggVertex::set_pos(LPoint2d const &pos);
inline void EggVertex::set_pos(LPoint3d const &pos);
inline void EggVertex::set_pos(LPoint4d const &pos);

1113 8 set_pos4 4 1906 19 EggVertex::set_pos4 0 1 143 600
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
////////////////////////////////////////////////////////////////////
53
inline void EggVertex::set_pos4(LPoint4d const &pos);

1114 18 get_num_dimensions 4 1906 29 EggVertex::get_num_dimensions 0 1 144 721
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_dimensions
//       Access: Published
//  Description: Returns the number of dimensions the vertex uses.
//               Usually this will be 3, but it may be 1, 2, 3, or 4.
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_num_dimensions(void) const;

1115 8 get_pos1 4 1906 19 EggVertex::get_pos1 0 1 145 703
// get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components).

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos1
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 1.
//               Returns the position as a one-dimensional value.
////////////////////////////////////////////////////////////////////
46
inline double EggVertex::get_pos1(void) const;

1116 8 get_pos2 4 1906 19 EggVertex::get_pos2 0 1 146 330
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint2d EggVertex::get_pos2(void) const;

1117 8 get_pos3 4 1906 19 EggVertex::get_pos3 0 1 147 332
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
////////////////////////////////////////////////////////////////////
48
inline LPoint3d EggVertex::get_pos3(void) const;

1118 8 get_pos4 4 1906 19 EggVertex::get_pos4 0 1 148 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
////////////////////////////////////////////////////////////////////
48
inline LPoint4d EggVertex::get_pos4(void) const;

1119 6 has_uv 4 1906 17 EggVertex::has_uv 0 2 149 150 922
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
////////////////////////////////////////////////////////////////////
106
inline bool EggVertex::has_uv(void) const;
bool EggVertex::has_uv(basic_string< char > const &name) const;

1120 6 get_uv 4 1906 17 EggVertex::get_uv 0 2 151 152 977
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               vertex.  It is an error to call this if has_uv(name)
//               returned false.
////////////////////////////////////////////////////////////////////
114
inline LPoint2d EggVertex::get_uv(void) const;
LPoint2d EggVertex::get_uv(basic_string< char > const &name) const;

1121 6 set_uv 4 1906 17 EggVertex::set_uv 0 2 153 154 965
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
////////////////////////////////////////////////////////////////////
140
inline void EggVertex::set_uv(LPoint2d const &texCoord);
void EggVertex::set_uv(basic_string< char > const &name, LPoint2d const &texCoord);

1122 8 clear_uv 4 1906 19 EggVertex::clear_uv 0 2 155 156 583
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
///////////////////////////////////////////////////////////////////
98
inline void EggVertex::clear_uv(void);
void EggVertex::clear_uv(basic_string< char > const &name);

1123 7 has_uvw 4 1906 18 EggVertex::has_uvw 0 1 157 374
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool EggVertex::has_uvw(basic_string< char > const &name) const;

1124 7 get_uvw 4 1906 18 EggVertex::get_uvw 0 1 158 375
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               vertex.  It is an error to call this if has_uvw(name)
//               returned false.
////////////////////////////////////////////////////////////////////
75
LPoint3d const &EggVertex::get_uvw(basic_string< char > const &name) const;

1125 7 set_uvw 4 1906 18 EggVertex::set_uvw 0 1 159 437
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
////////////////////////////////////////////////////////////////////
84
void EggVertex::set_uvw(basic_string< char > const &name, LPoint3d const &texCoord);

1126 10 get_uv_obj 4 1906 21 EggVertex::get_uv_obj 0 1 160 584
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
////////////////////////////////////////////////////////////////////
81
EggVertexUV const *EggVertex::get_uv_obj(basic_string< char > const &name) const;

1127 13 modify_uv_obj 4 1906 24 EggVertex::modify_uv_obj 0 1 161 462
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
////////////////////////////////////////////////////////////////////
72
EggVertexUV *EggVertex::modify_uv_obj(basic_string< char > const &name);

1128 10 set_uv_obj 4 1906 21 EggVertex::set_uv_obj 0 1 162 400
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
////////////////////////////////////////////////////////////////////
51
void EggVertex::set_uv_obj(EggVertexUV *vertex_uv);

1129 9 get_index 4 1906 20 EggVertex::get_index 0 1 163 292
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
////////////////////////////////////////////////////////////////////
44
inline int EggVertex::get_index(void) const;

1130 18 set_external_index 4 1906 29 EggVertex::set_external_index 0 1 164 822
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
////////////////////////////////////////////////////////////////////
62
inline void EggVertex::set_external_index(int external_index);

1131 18 get_external_index 4 1906 29 EggVertex::get_external_index 0 1 165 320
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
////////////////////////////////////////////////////////////////////
53
inline int EggVertex::get_external_index(void) const;

1132 5 write 4 1906 16 EggVertex::write 0 1 166 296
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
60
void EggVertex::write(ostream &out, int indent_level) const;

1133 15 sorts_less_than 4 1906 26 EggVertex::sorts_less_than 0 1 167 395
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
////////////////////////////////////////////////////////////////////
69
inline bool EggVertex::sorts_less_than(EggVertex const &other) const;

1134 10 compare_to 4 1906 21 EggVertex::compare_to 0 1 168 1165
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
////////////////////////////////////////////////////////////////////
56
int EggVertex::compare_to(EggVertex const &other) const;

1135 19 get_num_local_coord 4 1906 30 EggVertex::get_num_local_coord 0 1 169 384
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
////////////////////////////////////////////////////////////////////
47
int EggVertex::get_num_local_coord(void) const;

1136 20 get_num_global_coord 4 1906 31 EggVertex::get_num_global_coord 0 1 170 382
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
////////////////////////////////////////////////////////////////////
48
int EggVertex::get_num_global_coord(void) const;

1137 9 transform 4 1906 20 EggVertex::transform 0 1 171 304
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::transform(LMatrix4d const &mat);

1138 8 has_gref 4 1906 19 EggVertex::has_gref 0 1 172 312
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
////////////////////////////////////////////////////////////////////
54
bool EggVertex::has_gref(EggGroup const *group) const;

1139 15 copy_grefs_from 4 1906 26 EggVertex::copy_grefs_from 0 1 173 725
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
////////////////////////////////////////////////////////////////////
56
void EggVertex::copy_grefs_from(EggVertex const &other);

1140 11 clear_grefs 4 1906 22 EggVertex::clear_grefs 0 1 174 325
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
////////////////////////////////////////////////////////////////////
34
void EggVertex::clear_grefs(void);

1141 8 has_pref 4 1906 19 EggVertex::has_pref 0 1 175 338
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
////////////////////////////////////////////////////////////////////
56
int EggVertex::has_pref(EggPrimitive const *prim) const;

1142 19 test_gref_integrity 4 1906 30 EggVertex::test_gref_integrity 0 1 176 379
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::test_gref_integrity
//       Access: Published
//  Description: Verifies that the gref list is correct and that all
//               the groups included actually exist and do reference
//               the vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::test_gref_integrity(void) const;

1143 19 test_pref_integrity 4 1906 30 EggVertex::test_pref_integrity 0 1 177 383
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::test_pref_integrity
//       Access: Published
//  Description: Verifies that the pref list is correct and that all
//               the primitives included actually exist and do
//               reference the vertex.
////////////////////////////////////////////////////////////////////
48
void EggVertex::test_pref_integrity(void) const;

1144 6 output 4 1906 17 EggVertex::output 0 1 178 226
// NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void EggVertex::output(ostream &out) const;

1145 9 get_dxyzs 20 1906 20 EggVertex::get_dxyzs 0 1 184 67
getter for EggMorphList< EggMorph< LVector3d > > EggVertex::_dxyzs;
78
EggMorphList< EggMorph< LVector3d > > const &EggVertex::get_dxyzs(void) const;

1146 14 get_class_type 4 1906 25 EggVertex::get_class_type 0 1 179 0
50
static TypeHandle EggVertex::get_class_type(void);

1147 13 EggVertexPool 4 1907 28 EggVertexPool::EggVertexPool 0 2 185 186 683
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
////////////////////////////////////////////////////////////////////
120
EggVertexPool::EggVertexPool(basic_string< char > const &name);
EggVertexPool::EggVertexPool(EggVertexPool const &copy);

1148 10 has_vertex 4 1907 25 EggVertexPool::has_vertex 0 1 187 878
// Filename: eggVertexPool.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
////////////////////////////////////////////////////////////////////
55
inline bool EggVertexPool::has_vertex(int index) const;

1149 20 has_forward_vertices 4 1907 35 EggVertexPool::has_forward_vertices 0 1 188 386
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_forward_vertices(void) const;

1150 20 has_defined_vertices 4 1907 35 EggVertexPool::has_defined_vertices 0 1 189 383
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
////////////////////////////////////////////////////////////////////
53
bool EggVertexPool::has_defined_vertices(void) const;

1151 10 get_vertex 4 1907 25 EggVertexPool::get_vertex 0 1 190 411
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
54
EggVertex *EggVertexPool::get_vertex(int index) const;

1152 11 operator [] 4 1907 26 EggVertexPool::operator [] 0 1 191 418
// Returns NULL if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
////////////////////////////////////////////////////////////////////
62
inline EggVertex *EggVertexPool::operator [](int index) const;

1153 18 get_forward_vertex 4 1907 33 EggVertexPool::get_forward_vertex 0 1 192 679
// Returns a forward reference if there is no such vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
////////////////////////////////////////////////////////////////////
56
EggVertex *EggVertexPool::get_forward_vertex(int index);

1154 17 get_highest_index 4 1907 32 EggVertexPool::get_highest_index 0 1 193 425
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
////////////////////////////////////////////////////////////////////
49
int EggVertexPool::get_highest_index(void) const;

1155 17 set_highest_index 4 1907 32 EggVertexPool::set_highest_index 0 1 194 589
// Returns 0 if the pool is empty.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
////////////////////////////////////////////////////////////////////
57
void EggVertexPool::set_highest_index(int highest_index);

1156 18 get_num_dimensions 4 1907 33 EggVertexPool::get_num_dimensions 0 1 195 319
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
////////////////////////////////////////////////////////////////////
50
int EggVertexPool::get_num_dimensions(void) const;

1157 11 has_normals 4 1907 26 EggVertexPool::has_normals 0 1 196 326
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_normals
//       Access: Public
//  Description: Returns true if any vertex in the pool has a normal
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
52
virtual bool EggVertexPool::has_normals(void) const;

1158 10 has_colors 4 1907 25 EggVertexPool::has_colors 0 1 197 324
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
43
bool EggVertexPool::has_colors(void) const;

1159 19 has_nonwhite_colors 4 1907 34 EggVertexPool::has_nonwhite_colors 0 1 198 403
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
////////////////////////////////////////////////////////////////////
52
bool EggVertexPool::has_nonwhite_colors(void) const;

1160 19 check_overall_color 4 1907 34 EggVertexPool::check_overall_color 0 0 686
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::check_overall_color
//       Access: Public
//  Description: Scans the vertex pool for different colors on
//               different vertices.  If all vertices are the same
//               color, sets has_overall_color to true and fills the
//               color into overall_color.  If no vertices have any
//               color, set has_overall_color to true and fills white
//               into overall_color.  If at least two vertices have
//               different colors, sets has_overall_color to false.
////////////////////////////////////////////////////////////////////
98
void EggVertexPool::check_overall_color(bool &has_overall_color, LVecBase4f &overall_color) const;

1161 7 has_uvs 4 1907 22 EggVertexPool::has_uvs 0 1 199 318
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
////////////////////////////////////////////////////////////////////
40
bool EggVertexPool::has_uvs(void) const;

1162 12 get_uv_names 4 1907 27 EggVertexPool::get_uv_names 0 1 200 654
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
////////////////////////////////////////////////////////////////////
167
void EggVertexPool::get_uv_names(vector< basic_string< char > > &uv_names, vector< basic_string< char > > &uvw_names, vector< basic_string< char > > &tbn_names) const;

1163 4 size 4 1907 19 EggVertexPool::size 0 1 201 261
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::size()
//       Access: Public
//  Description: Returns the number of vertices in the pool.
////////////////////////////////////////////////////////////////////
45
unsigned int EggVertexPool::size(void) const;

1164 10 add_vertex 4 1907 25 EggVertexPool::add_vertex 0 2 202 203 1344
// add_vertex() adds a freshly-allocated vertex.  It is up to the
// user to allocate the vertex.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
////////////////////////////////////////////////////////////////////
74
EggVertex *EggVertexPool::add_vertex(EggVertex *vertex, int index = (-1));

1165 15 make_new_vertex 4 1907 30 EggVertexPool::make_new_vertex 0 5 204 205 206 207 208 2770
// make_new_vertex() allocates and returns a new vertex from the
// pool.

// make_new_vertex() allocates and returns a new vertex from the
// pool.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
////////////////////////////////////////////////////////////////////
330
inline EggVertex *EggVertexPool::make_new_vertex(void);
inline EggVertex *EggVertexPool::make_new_vertex(double pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint2d const &pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint3d const &pos);
inline EggVertex *EggVertexPool::make_new_vertex(LPoint4d const &pos);

1166 20 create_unique_vertex 4 1907 35 EggVertexPool::create_unique_vertex 0 1 209 616
// create_unique_vertex() creates a new vertex if there is not
// already one identical to the indicated vertex, or returns the
// existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::create_unique_vertex(EggVertex const &copy);

1167 20 find_matching_vertex 4 1907 35 EggVertexPool::find_matching_vertex 0 1 210 636
// create_unique_vertex() creates a new vertex if there is not
// already one identical to the indicated vertex, or returns the
// existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::find_matching_vertex
//       Access: Public
//  Description: If the EggVertexPool already has a vertex matching
//               the indicated vertex, returns it; otherwise, returns
//               NULL.  This is similar to create_unique_vertex()
//               except that a new vertex is never created.
////////////////////////////////////////////////////////////////////
70
EggVertex *EggVertexPool::find_matching_vertex(EggVertex const &copy);

1168 13 remove_vertex 4 1907 28 EggVertexPool::remove_vertex 0 1 211 342
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
////////////////////////////////////////////////////////////////////
53
void EggVertexPool::remove_vertex(EggVertex *vertex);

1169 22 remove_unused_vertices 4 1907 37 EggVertexPool::remove_unused_vertices 0 1 212 591
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
////////////////////////////////////////////////////////////////////
48
int EggVertexPool::remove_unused_vertices(void);

1170 9 transform 4 1907 24 EggVertexPool::transform 0 1 213 733
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
////////////////////////////////////////////////////////////////////
52
void EggVertexPool::transform(LMatrix4d const &mat);

1171 14 get_class_type 4 1907 29 EggVertexPool::get_class_type 0 1 214 0
54
static TypeHandle EggVertexPool::get_class_type(void);

1172 12 EggGroupNode 4 1908 26 EggGroupNode::EggGroupNode 0 3 215 216 217 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
122
EggGroupNode::EggGroupNode(basic_string< char > const &name = (""));
EggGroupNode::EggGroupNode(EggGroupNode const &copy);

1173 10 operator = 4 1908 24 EggGroupNode::operator = 0 1 218 237
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
EggGroupNode &EggGroupNode::operator =(EggGroupNode const &copy);

1174 5 empty 4 1908 19 EggGroupNode::empty 0 1 219 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
bool EggGroupNode::empty(void) const;

1175 4 size 4 1908 18 EggGroupNode::size 0 1 220 217
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
unsigned int EggGroupNode::size(void) const;

1176 5 clear 4 1908 19 EggGroupNode::clear 0 1 221 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
31
void EggGroupNode::clear(void);

1177 15 get_first_child 4 1908 29 EggGroupNode::get_first_child 0 1 222 914
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
////////////////////////////////////////////////////////////////////
45
EggNode *EggGroupNode::get_first_child(void);

1178 14 get_next_child 4 1908 28 EggGroupNode::get_next_child 0 1 223 1106
// This is an alternate way to traverse the list of children.  It is
// mainly provided for scripting code, which can't use the iterators
// defined above (they don't export through interrogate very well).
// These are, of course, non-thread-safe.

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
////////////////////////////////////////////////////////////////////
44
EggNode *EggGroupNode::get_next_child(void);

1179 9 add_child 4 1908 23 EggGroupNode::add_child 0 1 224 385
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
////////////////////////////////////////////////////////////////////
48
EggNode *EggGroupNode::add_child(EggNode *node);

1180 12 remove_child 4 1908 26 EggGroupNode::remove_child 0 1 225 398
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
////////////////////////////////////////////////////////////////////
63
PointerTo< EggNode > EggGroupNode::remove_child(EggNode *node);

1181 14 steal_children 4 1908 28 EggGroupNode::steal_children 0 1 226 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::steal_children(EggGroupNode &other);

1182 10 find_child 4 1908 24 EggGroupNode::find_child 0 1 227 410
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
////////////////////////////////////////////////////////////////////
74
EggNode *EggGroupNode::find_child(basic_string< char > const &name) const;

1183 22 has_absolute_pathnames 4 1908 36 EggGroupNode::has_absolute_pathnames 0 1 228 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
////////////////////////////////////////////////////////////////////
54
bool EggGroupNode::has_absolute_pathnames(void) const;

1184 17 resolve_filenames 4 1908 31 EggGroupNode::resolve_filenames 0 1 229 472
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames along the
//               specified search path; it does not automatically
//               search the model_path for missing files.
////////////////////////////////////////////////////////////////////
68
void EggGroupNode::resolve_filenames(DSearchPath const &searchpath);

1185 15 force_filenames 4 1908 29 EggGroupNode::force_filenames 0 1 230 452
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
////////////////////////////////////////////////////////////////////
62
void EggGroupNode::force_filenames(Filename const &directory);

1186 23 reverse_vertex_ordering 4 1908 37 EggGroupNode::reverse_vertex_ordering 0 1 231 393
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::reverse_vertex_ordering(void);

1187 24 recompute_vertex_normals 4 1908 38 EggGroupNode::recompute_vertex_normals 0 2 232 233 1132
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
98
void EggGroupNode::recompute_vertex_normals(double threshold, CoordinateSystem cs = (CS_default));

1188 25 recompute_polygon_normals 4 1908 39 EggGroupNode::recompute_polygon_normals 0 2 234 235 1077
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
81
void EggGroupNode::recompute_polygon_normals(CoordinateSystem cs = (CS_default));

1189 13 strip_normals 4 1908 27 EggGroupNode::strip_normals 0 1 236 606
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
39
void EggGroupNode::strip_normals(void);

1190 26 recompute_tangent_binormal 4 1908 40 EggGroupNode::recompute_tangent_binormal 0 2 237 238 1603
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate sets.
//               Returns true if anything was done.
////////////////////////////////////////////////////////////////////
166
bool EggGroupNode::recompute_tangent_binormal(GlobPattern const &uv_name);
bool EggGroupNode::recompute_tangent_binormal(vector< basic_string< char > > const &names);

1191 31 recompute_tangent_binormal_auto 4 1908 45 EggGroupNode::recompute_tangent_binormal_auto 0 1 239 421
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal_auto
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               any texture coordinate set that affects a normal map.
//               Returns true if anything was done.
////////////////////////////////////////////////////////////////////
57
bool EggGroupNode::recompute_tangent_binormal_auto(void);

1192 20 triangulate_polygons 4 1908 34 EggGroupNode::triangulate_polygons 0 1 240 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
////////////////////////////////////////////////////////////////////
50
int EggGroupNode::triangulate_polygons(int flags);

1193 14 mesh_triangles 4 1908 28 EggGroupNode::mesh_triangles 0 1 241 318
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
////////////////////////////////////////////////////////////////////
45
void EggGroupNode::mesh_triangles(int flags);

1194 12 rename_nodes 4 1908 26 EggGroupNode::rename_nodes 0 1 242 260
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
////////////////////////////////////////////////////////////////////
90
int EggGroupNode::rename_nodes(vector< basic_string< char > > strip_prefix, bool recurse);

1195 22 remove_unused_vertices 4 1908 36 EggGroupNode::remove_unused_vertices 0 1 243 1111
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
////////////////////////////////////////////////////////////////////
55
int EggGroupNode::remove_unused_vertices(bool recurse);

1196 25 remove_invalid_primitives 4 1908 39 EggGroupNode::remove_invalid_primitives 0 1 244 453
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
////////////////////////////////////////////////////////////////////
58
int EggGroupNode::remove_invalid_primitives(bool recurse);

1197 23 clear_connected_shading 4 1908 37 EggGroupNode::clear_connected_shading 0 1 245 635
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
////////////////////////////////////////////////////////////////////
49
void EggGroupNode::clear_connected_shading(void);

1198 21 get_connected_shading 4 1908 35 EggGroupNode::get_connected_shading 0 1 246 463
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
////////////////////////////////////////////////////////////////////
47
void EggGroupNode::get_connected_shading(void);

1199 16 unify_attributes 4 1908 30 EggGroupNode::unify_attributes 0 1 247 1614
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
104
void EggGroupNode::unify_attributes(bool use_connected_shading, bool allow_per_primitive, bool recurse);

1200 20 apply_last_attribute 4 1908 34 EggGroupNode::apply_last_attribute 0 1 248 768
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
54
void EggGroupNode::apply_last_attribute(bool recurse);

1201 21 apply_first_attribute 4 1908 35 EggGroupNode::apply_first_attribute 0 1 249 772
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
////////////////////////////////////////////////////////////////////
55
void EggGroupNode::apply_first_attribute(bool recurse);

1202 25 post_apply_flat_attribute 4 1908 39 EggGroupNode::post_apply_flat_attribute 0 1 250 490
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
void EggGroupNode::post_apply_flat_attribute(bool recurse);

1203 14 has_primitives 4 1908 28 EggGroupNode::has_primitives 0 1 251 380
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggGroupNode::has_primitives(void) const;

1204 20 joint_has_primitives 4 1908 34 EggGroupNode::joint_has_primitives 0 1 252 416
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggGroupNode::joint_has_primitives(void) const;

1205 11 has_normals 4 1908 25 EggGroupNode::has_normals 0 1 253 417
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggGroupNode::has_normals(void) const;

1206 8 is_right 4 1908 22 EggGroupNode::is_right 0 1 254 765
// Filename: eggGroupNode.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::is_right
//       Access: Private, Static
//  Description: Returns true if the 2-d v1 is to the right of v2.
////////////////////////////////////////////////////////////////////
84
static inline bool EggGroupNode::is_right(LVector2d const &v1, LVector2d const &v2);

1207 14 get_class_type 4 1908 28 EggGroupNode::get_class_type 0 1 255 0
53
static TypeHandle EggGroupNode::get_class_type(void);

1208 13 EggRenderMode 4 1910 28 EggRenderMode::EggRenderMode 0 2 256 257 940
// Filename: eggRenderMode.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
99
EggRenderMode::EggRenderMode(void);
inline EggRenderMode::EggRenderMode(EggRenderMode const &copy);

1209 10 operator = 4 1910 25 EggRenderMode::operator = 0 1 258 235
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
EggRenderMode &EggRenderMode::operator =(EggRenderMode const &copy);

1210 5 write 4 1910 20 EggRenderMode::write 0 1 259 301
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
////////////////////////////////////////////////////////////////////
64
void EggRenderMode::write(ostream &out, int indent_level) const;

1211 14 set_alpha_mode 4 1910 29 EggRenderMode::set_alpha_mode 0 1 260 849
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
////////////////////////////////////////////////////////////////////
73
inline void EggRenderMode::set_alpha_mode(EggRenderMode::AlphaMode mode);

1212 14 get_alpha_mode 4 1910 29 EggRenderMode::get_alpha_mode 0 1 261 357
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
////////////////////////////////////////////////////////////////////
74
inline EggRenderMode::AlphaMode EggRenderMode::get_alpha_mode(void) const;

1213 20 set_depth_write_mode 4 1910 35 EggRenderMode::set_depth_write_mode 0 1 262 412
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
////////////////////////////////////////////////////////////////////
84
inline void EggRenderMode::set_depth_write_mode(EggRenderMode::DepthWriteMode mode);

1214 20 get_depth_write_mode 4 1910 35 EggRenderMode::get_depth_write_mode 0 1 263 376
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
////////////////////////////////////////////////////////////////////
85
inline EggRenderMode::DepthWriteMode EggRenderMode::get_depth_write_mode(void) const;

1215 19 set_depth_test_mode 4 1910 34 EggRenderMode::set_depth_test_mode 0 1 264 521
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
////////////////////////////////////////////////////////////////////
82
inline void EggRenderMode::set_depth_test_mode(EggRenderMode::DepthTestMode mode);

1216 19 get_depth_test_mode 4 1910 34 EggRenderMode::get_depth_test_mode 0 1 265 373
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
////////////////////////////////////////////////////////////////////
83
inline EggRenderMode::DepthTestMode EggRenderMode::get_depth_test_mode(void) const;

1217 19 set_visibility_mode 4 1910 34 EggRenderMode::set_visibility_mode 0 1 266 530
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
////////////////////////////////////////////////////////////////////
83
inline void EggRenderMode::set_visibility_mode(EggRenderMode::VisibilityMode mode);

1218 19 get_visibility_mode 4 1910 34 EggRenderMode::get_visibility_mode 0 1 267 372
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
////////////////////////////////////////////////////////////////////
84
inline EggRenderMode::VisibilityMode EggRenderMode::get_visibility_mode(void) const;

1219 16 set_depth_offset 4 1910 31 EggRenderMode::set_depth_offset 0 1 268 459
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_offset
//       Access: Public
//  Description: Sets the "depth-offset" flag associated with this
//               object.  This adds or subtracts an offset bias
//               into the depth buffer. See also DepthOffsetAttrib
//               and NodePath::set_depth_offset().
////////////////////////////////////////////////////////////////////
54
inline void EggRenderMode::set_depth_offset(int bias);

1220 16 get_depth_offset 4 1910 31 EggRenderMode::get_depth_offset 0 1 269 336
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_offset
//       Access: Public
//  Description: Returns the "depth-offset" flag as set for this
//               particular object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
55
inline int EggRenderMode::get_depth_offset(void) const;

1221 16 has_depth_offset 4 1910 31 EggRenderMode::has_depth_offset 0 1 270 348
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_depth_offset
//       Access: Public
//  Description: Returns true if the depth-offset flag has been set for
//               this particular object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
56
inline bool EggRenderMode::has_depth_offset(void) const;

1222 18 clear_depth_offset 4 1910 33 EggRenderMode::clear_depth_offset 0 1 271 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_depth_offset
//       Access: Public
//  Description: Removes the depth-offset flag from this particular
//               object.  See set_depth_offset().
////////////////////////////////////////////////////////////////////
52
inline void EggRenderMode::clear_depth_offset(void);

1223 14 set_draw_order 4 1910 29 EggRenderMode::set_draw_order 0 1 272 534
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
////////////////////////////////////////////////////////////////////
53
inline void EggRenderMode::set_draw_order(int order);

1224 14 get_draw_order 4 1910 29 EggRenderMode::get_draw_order 0 1 273 330
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
53
inline int EggRenderMode::get_draw_order(void) const;

1225 14 has_draw_order 4 1910 29 EggRenderMode::has_draw_order 0 1 274 342
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
54
inline bool EggRenderMode::has_draw_order(void) const;

1226 16 clear_draw_order 4 1910 31 EggRenderMode::clear_draw_order 0 1 275 324
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
////////////////////////////////////////////////////////////////////
50
inline void EggRenderMode::clear_draw_order(void);

1227 7 set_bin 4 1910 22 EggRenderMode::set_bin 0 1 276 691
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
////////////////////////////////////////////////////////////////////
68
inline void EggRenderMode::set_bin(basic_string< char > const &bin);

1228 7 get_bin 4 1910 22 EggRenderMode::get_bin 0 1 277 326
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
////////////////////////////////////////////////////////////////////
63
inline basic_string< char > EggRenderMode::get_bin(void) const;

1229 7 has_bin 4 1910 22 EggRenderMode::has_bin 0 1 278 319
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
////////////////////////////////////////////////////////////////////
47
inline bool EggRenderMode::has_bin(void) const;

1230 9 clear_bin 4 1910 24 EggRenderMode::clear_bin 0 1 279 315
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
////////////////////////////////////////////////////////////////////
43
inline void EggRenderMode::clear_bin(void);

1231 11 operator == 4 1910 26 EggRenderMode::operator == 0 1 280 264
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
bool EggRenderMode::operator ==(EggRenderMode const &other) const;

1232 11 operator != 4 1910 26 EggRenderMode::operator != 0 1 281 266
// Comparison operators are handy.

////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline bool EggRenderMode::operator !=(EggRenderMode const &other) const;

1233 10 operator < 4 1910 25 EggRenderMode::operator < 0 1 282 228
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Ordering Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
bool EggRenderMode::operator <(EggRenderMode const &other) const;

1234 17 string_alpha_mode 4 1910 32 EggRenderMode::string_alpha_mode 0 1 283 413
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
////////////////////////////////////////////////////////////////////
101
static EggRenderMode::AlphaMode EggRenderMode::string_alpha_mode(basic_string< char > const &string);

1235 23 string_depth_write_mode 4 1910 38 EggRenderMode::string_depth_write_mode 0 1 284 447
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
////////////////////////////////////////////////////////////////////
112
static EggRenderMode::DepthWriteMode EggRenderMode::string_depth_write_mode(basic_string< char > const &string);

1236 22 string_depth_test_mode 4 1910 37 EggRenderMode::string_depth_test_mode 0 1 285 444
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
////////////////////////////////////////////////////////////////////
110
static EggRenderMode::DepthTestMode EggRenderMode::string_depth_test_mode(basic_string< char > const &string);

1237 22 string_visibility_mode 4 1910 37 EggRenderMode::string_visibility_mode 0 1 286 437
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
////////////////////////////////////////////////////////////////////
111
static EggRenderMode::VisibilityMode EggRenderMode::string_visibility_mode(basic_string< char > const &string);

1238 14 get_class_type 4 1910 29 EggRenderMode::get_class_type 0 1 287 0
54
static TypeHandle EggRenderMode::get_class_type(void);

1239 14 ~EggRenderMode 4 1910 29 EggRenderMode::~EggRenderMode 0 0 0
36
EggRenderMode::~EggRenderMode(void);

1240 12 EggTransform 4 1915 26 EggTransform::EggTransform 0 2 288 289 449
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
87
EggTransform::EggTransform(void);
EggTransform::EggTransform(EggTransform const &copy);

1241 10 operator = 4 1915 24 EggTransform::operator = 0 1 290 234
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
EggTransform &EggTransform::operator =(EggTransform const &copy);

1242 13 ~EggTransform 4 1915 27 EggTransform::~EggTransform 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual EggTransform::~EggTransform(void);

1243 15 clear_transform 4 1915 29 EggTransform::clear_transform 0 1 291 266
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
////////////////////////////////////////////////////////////////////
48
inline void EggTransform::clear_transform(void);

1244 15 add_translate2d 4 1915 29 EggTransform::add_translate2d 0 1 292 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate2d(LVector2d const &translate);

1245 15 add_translate3d 4 1915 29 EggTransform::add_translate3d 0 1 293 304
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
////////////////////////////////////////////////////////////////////
63
void EggTransform::add_translate3d(LVector3d const &translate);

1246 12 add_rotate2d 4 1915 26 EggTransform::add_rotate2d 0 1 294 384
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
////////////////////////////////////////////////////////////////////
46
void EggTransform::add_rotate2d(double angle);

1247 8 add_rotx 4 1915 22 EggTransform::add_rotx 0 1 295 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotx(double angle);

1248 8 add_roty 4 1915 22 EggTransform::add_roty 0 1 296 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_roty(double angle);

1249 8 add_rotz 4 1915 22 EggTransform::add_rotz 0 1 297 391
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////
42
void EggTransform::add_rotz(double angle);

1250 12 add_rotate3d 4 1915 26 EggTransform::add_rotate3d 0 2 298 299 811
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
////////////////////////////////////////////////////////////////////
128
void EggTransform::add_rotate3d(double angle, LVector3d const &axis);
void EggTransform::add_rotate3d(LQuaterniond const &quat);

1251 11 add_scale2d 4 1915 25 EggTransform::add_scale2d 0 1 300 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale2d(LVecBase2d const &scale);

1252 11 add_scale3d 4 1915 25 EggTransform::add_scale3d 0 1 301 301
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
////////////////////////////////////////////////////////////////////
56
void EggTransform::add_scale3d(LVecBase3d const &scale);

1253 17 add_uniform_scale 4 1915 31 EggTransform::add_uniform_scale 0 1 302 277
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
////////////////////////////////////////////////////////////////////
51
void EggTransform::add_uniform_scale(double scale);

1254 11 add_matrix3 4 1915 25 EggTransform::add_matrix3 0 1 303 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix3(LMatrix3d const &mat);

1255 11 add_matrix4 4 1915 25 EggTransform::add_matrix4 0 1 304 296
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
////////////////////////////////////////////////////////////////////
60
inline void EggTransform::add_matrix4(LMatrix4d const &mat);

1256 13 has_transform 4 1915 27 EggTransform::has_transform 0 1 305 432
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
////////////////////////////////////////////////////////////////////
52
inline bool EggTransform::has_transform(void) const;

1257 15 has_transform2d 4 1915 29 EggTransform::has_transform2d 0 1 306 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform2d(void) const;

1258 15 set_transform2d 4 1915 29 EggTransform::set_transform2d 0 1 307 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform2d(LMatrix3d const &mat);

1259 15 has_transform3d 4 1915 29 EggTransform::has_transform3d 0 1 308 632
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
////////////////////////////////////////////////////////////////////
54
inline bool EggTransform::has_transform3d(void) const;

1260 15 set_transform3d 4 1915 29 EggTransform::set_transform3d 0 1 309 385
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
////////////////////////////////////////////////////////////////////
64
inline void EggTransform::set_transform3d(LMatrix4d const &mat);

1261 15 get_transform2d 4 1915 29 EggTransform::get_transform2d 0 1 310 348
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
////////////////////////////////////////////////////////////////////
59
inline LMatrix3d EggTransform::get_transform2d(void) const;

1262 15 get_transform3d 4 1915 29 EggTransform::get_transform3d 0 1 311 450
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
////////////////////////////////////////////////////////////////////
66
inline LMatrix4d const &EggTransform::get_transform3d(void) const;

1263 21 transform_is_identity 4 1915 35 EggTransform::transform_is_identity 0 1 312 318
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool EggTransform::transform_is_identity(void) const;

1264 18 get_num_components 4 1915 32 EggTransform::get_num_components 0 1 313 306
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
////////////////////////////////////////////////////////////////////
56
inline int EggTransform::get_num_components(void) const;

1265 18 get_component_type 4 1915 32 EggTransform::get_component_type 0 1 314 267
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
////////////////////////////////////////////////////////////////////
81
inline EggTransform::ComponentType EggTransform::get_component_type(int n) const;

1266 20 get_component_number 4 1915 34 EggTransform::get_component_number 0 1 315 531
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
////////////////////////////////////////////////////////////////////
62
inline double EggTransform::get_component_number(int n) const;

1267 18 get_component_vec2 4 1915 32 EggTransform::get_component_vec2 0 1 316 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase2d const &EggTransform::get_component_vec2(int n) const;

1268 18 get_component_vec3 4 1915 32 EggTransform::get_component_vec3 0 1 317 519
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
////////////////////////////////////////////////////////////////////
71
inline LVecBase3d const &EggTransform::get_component_vec3(int n) const;

1269 18 get_component_mat3 4 1915 32 EggTransform::get_component_mat3 0 1 318 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
////////////////////////////////////////////////////////////////////
70
inline LMatrix3d const &EggTransform::get_component_mat3(int n) const;

1270 18 get_component_mat4 4 1915 32 EggTransform::get_component_mat4 0 1 319 390
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
////////////////////////////////////////////////////////////////////
70
inline LMatrix4d const &EggTransform::get_component_mat4(int n) const;

1271 5 write 4 1915 19 EggTransform::write 0 1 320 292
////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
////////////////////////////////////////////////////////////////////
98
void EggTransform::write(ostream &out, int indent_level, basic_string< char > const &label) const;

1272 9 make_copy 4 1917 29 EggSwitchCondition::make_copy 0 1 321 0
74
virtual EggSwitchCondition *EggSwitchCondition::make_copy(void) const = 0;

1273 5 write 4 1917 25 EggSwitchCondition::write 0 1 322 0
81
virtual void EggSwitchCondition::write(ostream &out, int indent_level) const = 0;

1274 9 transform 4 1917 29 EggSwitchCondition::transform 0 1 323 0
69
virtual void EggSwitchCondition::transform(LMatrix4d const &mat) = 0;

1275 14 get_class_type 4 1917 34 EggSwitchCondition::get_class_type 0 1 324 0
59
static TypeHandle EggSwitchCondition::get_class_type(void);

1276 19 ~EggSwitchCondition 4 1917 39 EggSwitchCondition::~EggSwitchCondition 0 0 0
46
EggSwitchCondition::~EggSwitchCondition(void);

1277 26 EggSwitchConditionDistance 4 1918 54 EggSwitchConditionDistance::EggSwitchConditionDistance 0 2 325 326 235
////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
135
EggSwitchConditionDistance::EggSwitchConditionDistance(double switch_in, double switch_out, LPoint3d const &center, double fade = (0));

1278 8 get_fade 20 1918 36 EggSwitchConditionDistance::get_fade 0 1 328 52
getter for double EggSwitchConditionDistance::_fade;
56
double EggSwitchConditionDistance::get_fade(void) const;

1279 8 set_fade 36 1918 36 EggSwitchConditionDistance::set_fade 0 1 329 52
setter for double EggSwitchConditionDistance::_fade;
56
void EggSwitchConditionDistance::set_fade(double value);

1280 14 get_switch_out 20 1918 42 EggSwitchConditionDistance::get_switch_out 0 1 330 58
getter for double EggSwitchConditionDistance::_switch_out;
62
double EggSwitchConditionDistance::get_switch_out(void) const;

1281 14 set_switch_out 36 1918 42 EggSwitchConditionDistance::set_switch_out 0 1 331 58
setter for double EggSwitchConditionDistance::_switch_out;
62
void EggSwitchConditionDistance::set_switch_out(double value);

1282 13 get_switch_in 20 1918 41 EggSwitchConditionDistance::get_switch_in 0 1 332 57
getter for double EggSwitchConditionDistance::_switch_in;
61
double EggSwitchConditionDistance::get_switch_in(void) const;

1283 13 set_switch_in 36 1918 41 EggSwitchConditionDistance::set_switch_in 0 1 333 57
setter for double EggSwitchConditionDistance::_switch_in;
61
void EggSwitchConditionDistance::set_switch_in(double value);

1284 10 get_center 20 1918 38 EggSwitchConditionDistance::get_center 0 1 334 56
getter for LPoint3d EggSwitchConditionDistance::_center;
67
LPoint3d const &EggSwitchConditionDistance::get_center(void) const;

1285 14 get_class_type 4 1918 42 EggSwitchConditionDistance::get_class_type 0 1 327 0
67
static TypeHandle EggSwitchConditionDistance::get_class_type(void);

1286 27 ~EggSwitchConditionDistance 4 1918 55 EggSwitchConditionDistance::~EggSwitchConditionDistance 0 0 0
62
EggSwitchConditionDistance::~EggSwitchConditionDistance(void);

1287 22 upcast_to_EggGroupNode 12 1921 32 EggGroup::upcast_to_EggGroupNode 0 1 471 36
upcast from EggGroup to EggGroupNode
53
EggGroupNode *EggGroup::upcast_to_EggGroupNode(void);

1288 20 downcast_to_EggGroup 12 1908 34 EggGroupNode::downcast_to_EggGroup 0 1 472 38
downcast from EggGroupNode to EggGroup
51
EggGroup *EggGroupNode::downcast_to_EggGroup(void);

1289 23 upcast_to_EggRenderMode 12 1921 33 EggGroup::upcast_to_EggRenderMode 0 1 473 37
upcast from EggGroup to EggRenderMode
55
EggRenderMode *EggGroup::upcast_to_EggRenderMode(void);

1290 20 downcast_to_EggGroup 12 1910 35 EggRenderMode::downcast_to_EggGroup 0 1 474 39
downcast from EggRenderMode to EggGroup
52
EggGroup *EggRenderMode::downcast_to_EggGroup(void);

1291 22 upcast_to_EggTransform 12 1921 32 EggGroup::upcast_to_EggTransform 0 1 475 36
upcast from EggGroup to EggTransform
53
EggTransform *EggGroup::upcast_to_EggTransform(void);

1292 20 downcast_to_EggGroup 12 1915 34 EggTransform::downcast_to_EggGroup 0 1 476 38
downcast from EggTransform to EggGroup
51
EggGroup *EggTransform::downcast_to_EggGroup(void);

1293 8 EggGroup 4 1921 18 EggGroup::EggGroup 0 3 335 336 337 447
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
EggGroup::EggGroup(basic_string< char > const &name = (""));
EggGroup::EggGroup(EggGroup const &copy);

1294 10 operator = 4 1921 20 EggGroup::operator = 0 1 338 233
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
EggGroup &EggGroup::operator =(EggGroup const &copy);

1295 9 ~EggGroup 4 1921 19 EggGroup::~EggGroup 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
34
virtual EggGroup::~EggGroup(void);

1296 5 write 4 1921 15 EggGroup::write 0 1 339 327
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
////////////////////////////////////////////////////////////////////
67
virtual void EggGroup::write(ostream &out, int indent_level) const;

1297 21 write_billboard_flags 4 1921 31 EggGroup::write_billboard_flags 0 1 340 326
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
75
void EggGroup::write_billboard_flags(ostream &out, int indent_level) const;

1298 19 write_collide_flags 4 1921 29 EggGroup::write_collide_flags 0 1 341 322
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
////////////////////////////////////////////////////////////////////
73
void EggGroup::write_collide_flags(ostream &out, int indent_level) const;

1299 17 write_model_flags 4 1921 27 EggGroup::write_model_flags 0 1 342 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_model_flags(ostream &out, int indent_level) const;

1300 18 write_switch_flags 4 1921 28 EggGroup::write_switch_flags 0 1 343 313
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_switch_flags(ostream &out, int indent_level) const;

1301 18 write_object_types 4 1921 28 EggGroup::write_object_types 0 1 344 317
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
72
void EggGroup::write_object_types(ostream &out, int indent_level) const;

1302 17 write_decal_flags 4 1921 27 EggGroup::write_decal_flags 0 1 345 272
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_decal_flags(ostream &out, int indent_level) const;

1303 10 write_tags 4 1921 20 EggGroup::write_tags 0 1 346 301
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
////////////////////////////////////////////////////////////////////
64
void EggGroup::write_tags(ostream &out, int indent_level) const;

1304 17 write_render_mode 4 1921 27 EggGroup::write_render_mode 0 1 347 344
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
////////////////////////////////////////////////////////////////////
71
void EggGroup::write_render_mode(ostream &out, int indent_level) const;

1305 8 is_joint 4 1921 18 EggGroup::is_joint 0 1 348 508
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
////////////////////////////////////////////////////////////////////
44
virtual bool EggGroup::is_joint(void) const;

1306 20 determine_alpha_mode 4 1921 30 EggGroup::determine_alpha_mode 0 1 349 554
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_alpha_mode(void);

1307 26 determine_depth_write_mode 4 1921 36 EggGroup::determine_depth_write_mode 0 1 350 566
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggGroup::determine_depth_write_mode(void);

1308 25 determine_depth_test_mode 4 1921 35 EggGroup::determine_depth_test_mode 0 1 351 564
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_depth_test_mode(void);

1309 25 determine_visibility_mode 4 1921 35 EggGroup::determine_visibility_mode 0 1 352 563
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
65
virtual EggRenderMode *EggGroup::determine_visibility_mode(void);

1310 22 determine_depth_offset 4 1921 32 EggGroup::determine_depth_offset 0 1 353 540
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
62
virtual EggRenderMode *EggGroup::determine_depth_offset(void);

1311 20 determine_draw_order 4 1921 30 EggGroup::determine_draw_order 0 1 354 536
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
60
virtual EggRenderMode *EggGroup::determine_draw_order(void);

1312 13 determine_bin 4 1921 23 EggGroup::determine_bin 0 1 355 523
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
53
virtual EggRenderMode *EggGroup::determine_bin(void);

1313 17 determine_indexed 4 1921 27 EggGroup::determine_indexed 0 1 356 619
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool EggGroup::determine_indexed(void);

1314 15 determine_decal 4 1921 25 EggGroup::determine_decal 0 1 357 607
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
////////////////////////////////////////////////////////////////////
45
virtual bool EggGroup::determine_decal(void);

1315 14 set_group_type 4 1921 24 EggGroup::set_group_type 0 1 358 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void EggGroup::set_group_type(EggGroup::GroupType type);

1316 14 get_group_type 4 1921 24 EggGroup::get_group_type 0 1 359 707
// Filename: eggGroup.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::GroupType EggGroup::get_group_type(void) const;

1317 16 is_instance_type 4 1921 26 EggGroup::is_instance_type 0 1 360 668
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::is_instance_type(void) const;

1318 18 set_billboard_type 4 1921 28 EggGroup::set_billboard_type 0 1 361 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline void EggGroup::set_billboard_type(EggGroup::BillboardType type);

1319 18 get_billboard_type 4 1921 28 EggGroup::get_billboard_type 0 1 362 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BillboardType EggGroup::get_billboard_type(void) const;

1320 20 set_billboard_center 4 1921 30 EggGroup::set_billboard_center 0 1 363 1120
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
////////////////////////////////////////////////////////////////////
77
inline void EggGroup::set_billboard_center(LPoint3d const &billboard_center);

1321 22 clear_billboard_center 4 1921 32 EggGroup::clear_billboard_center 0 1 364 231
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::clear_billboard_center(void);

1322 20 has_billboard_center 4 1921 30 EggGroup::has_billboard_center 0 1 365 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline bool EggGroup::has_billboard_center(void) const;

1323 20 get_billboard_center 4 1921 30 EggGroup::get_billboard_center 0 1 366 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LPoint3d const &EggGroup::get_billboard_center(void) const;

1324 11 set_cs_type 4 1921 21 EggGroup::set_cs_type 0 1 367 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_cs_type(EggGroup::CollisionSolidType type);

1325 11 get_cs_type 4 1921 21 EggGroup::get_cs_type 0 1 368 220
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollisionSolidType EggGroup::get_cs_type(void) const;

1326 17 set_collide_flags 4 1921 27 EggGroup::set_collide_flags 0 1 369 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggGroup::set_collide_flags(int flags);

1327 17 get_collide_flags 4 1921 27 EggGroup::get_collide_flags 0 1 370 226
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
inline EggGroup::CollideFlags EggGroup::get_collide_flags(void) const;

1328 18 set_collision_name 4 1921 28 EggGroup::set_collision_name 0 1 371 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
85
inline void EggGroup::set_collision_name(basic_string< char > const &collision_name);

1329 20 clear_collision_name 4 1921 30 EggGroup::clear_collision_name 0 1 372 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::clear_collision_name(void);

1330 18 has_collision_name 4 1921 28 EggGroup::has_collision_name 0 1 373 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::has_collision_name(void) const;

1331 18 get_collision_name 4 1921 28 EggGroup::get_collision_name 0 1 374 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &EggGroup::get_collision_name(void) const;

1332 12 set_dcs_type 4 1921 22 EggGroup::set_dcs_type 0 1 375 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggGroup::set_dcs_type(EggGroup::DCSType type);

1333 12 get_dcs_type 4 1921 22 EggGroup::get_dcs_type 0 1 376 221
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggGroup::DCSType EggGroup::get_dcs_type(void) const;

1334 12 has_dcs_type 4 1921 22 EggGroup::has_dcs_type 0 1 377 316
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
////////////////////////////////////////////////////////////////////
47
inline bool EggGroup::has_dcs_type(void) const;

1335 13 set_dart_type 4 1921 23 EggGroup::set_dart_type 0 1 378 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_dart_type(EggGroup::DartType type);

1336 13 get_dart_type 4 1921 23 EggGroup::get_dart_type 0 1 379 222
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggGroup::DartType EggGroup::get_dart_type(void) const;

1337 15 set_switch_flag 4 1921 25 EggGroup::set_switch_flag 0 1 380 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_flag(bool flag);

1338 15 get_switch_flag 4 1921 25 EggGroup::get_switch_flag 0 1 381 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_switch_flag(void) const;

1339 14 set_switch_fps 4 1921 24 EggGroup::set_switch_fps 0 1 382 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_switch_fps(double fps);

1340 14 get_switch_fps 4 1921 24 EggGroup::get_switch_fps 0 1 383 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline double EggGroup::get_switch_fps(void) const;

1341 15 add_object_type 4 1921 25 EggGroup::add_object_type 0 1 384 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggGroup::add_object_type(basic_string< char > const &object_type);

1342 18 clear_object_types 4 1921 28 EggGroup::clear_object_types 0 1 385 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_object_types(void);

1343 20 get_num_object_types 4 1921 30 EggGroup::get_num_object_types 0 1 386 229
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline int EggGroup::get_num_object_types(void) const;

1344 15 get_object_type 4 1921 25 EggGroup::get_object_type 0 1 387 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > EggGroup::get_object_type(int index) const;

1345 15 has_object_type 4 1921 25 EggGroup::has_object_type 0 1 388 332
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
////////////////////////////////////////////////////////////////////
78
bool EggGroup::has_object_type(basic_string< char > const &object_type) const;

1346 18 remove_object_type 4 1921 28 EggGroup::remove_object_type 0 1 389 440
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
////////////////////////////////////////////////////////////////////
75
bool EggGroup::remove_object_type(basic_string< char > const &object_type);

1347 14 set_model_flag 4 1921 24 EggGroup::set_model_flag 0 1 390 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_model_flag(bool flag);

1348 14 get_model_flag 4 1921 24 EggGroup::get_model_flag 0 1 391 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_model_flag(void) const;

1349 16 set_texlist_flag 4 1921 26 EggGroup::set_texlist_flag 0 1 392 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_texlist_flag(bool flag);

1350 16 get_texlist_flag 4 1921 26 EggGroup::get_texlist_flag 0 1 393 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_texlist_flag(void) const;

1351 14 set_nofog_flag 4 1921 24 EggGroup::set_nofog_flag 0 1 394 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_nofog_flag(bool flag);

1352 14 get_nofog_flag 4 1921 24 EggGroup::get_nofog_flag 0 1 395 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_nofog_flag(void) const;

1353 14 set_decal_flag 4 1921 24 EggGroup::set_decal_flag 0 1 396 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void EggGroup::set_decal_flag(bool flag);

1354 14 get_decal_flag 4 1921 24 EggGroup::get_decal_flag 0 1 397 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool EggGroup::get_decal_flag(void) const;

1355 15 set_direct_flag 4 1921 25 EggGroup::set_direct_flag 0 1 398 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_direct_flag(bool flag);

1356 15 get_direct_flag 4 1921 25 EggGroup::get_direct_flag 0 1 399 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_direct_flag(void) const;

1357 15 set_portal_flag 4 1921 25 EggGroup::set_portal_flag 0 1 400 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggGroup::set_portal_flag(bool flag);

1358 15 get_portal_flag 4 1921 25 EggGroup::get_portal_flag 0 1 401 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::get_portal_flag(void) const;

1359 18 set_polylight_flag 4 1921 28 EggGroup::set_polylight_flag 0 1 402 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::set_polylight_flag(bool flag);

1360 18 get_polylight_flag 4 1921 28 EggGroup::get_polylight_flag 0 1 403 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggGroup::get_polylight_flag(void) const;

1361 16 set_indexed_flag 4 1921 26 EggGroup::set_indexed_flag 0 1 404 335
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
////////////////////////////////////////////////////////////////////
50
inline void EggGroup::set_indexed_flag(bool flag);

1362 18 clear_indexed_flag 4 1921 28 EggGroup::clear_indexed_flag 0 1 405 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_indexed_flag(void);

1363 16 has_indexed_flag 4 1921 26 EggGroup::has_indexed_flag 0 1 406 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_indexed_flag(void) const;

1364 16 get_indexed_flag 4 1921 26 EggGroup::get_indexed_flag 0 1 407 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::get_indexed_flag(void) const;

1365 16 set_collide_mask 4 1921 26 EggGroup::set_collide_mask 0 1 408 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggGroup::set_collide_mask(BitMask< unsigned int, 32 > mask);

1366 18 clear_collide_mask 4 1921 28 EggGroup::clear_collide_mask 0 1 409 227
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_collide_mask(void);

1367 16 has_collide_mask 4 1921 26 EggGroup::has_collide_mask 0 1 410 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggGroup::has_collide_mask(void) const;

1368 16 get_collide_mask 4 1921 26 EggGroup::get_collide_mask 0 1 411 225
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline BitMask< unsigned int, 32 > EggGroup::get_collide_mask(void) const;

1369 21 set_from_collide_mask 4 1921 31 EggGroup::set_from_collide_mask 0 1 412 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline void EggGroup::set_from_collide_mask(BitMask< unsigned int, 32 > mask);

1370 23 clear_from_collide_mask 4 1921 33 EggGroup::clear_from_collide_mask 0 1 413 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_from_collide_mask(void);

1371 21 has_from_collide_mask 4 1921 31 EggGroup::has_from_collide_mask 0 1 414 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_from_collide_mask(void) const;

1372 21 get_from_collide_mask 4 1921 31 EggGroup::get_from_collide_mask 0 1 415 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline BitMask< unsigned int, 32 > EggGroup::get_from_collide_mask(void) const;

1373 21 set_into_collide_mask 4 1921 31 EggGroup::set_into_collide_mask 0 1 416 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline void EggGroup::set_into_collide_mask(BitMask< unsigned int, 32 > mask);

1374 23 clear_into_collide_mask 4 1921 33 EggGroup::clear_into_collide_mask 0 1 417 232
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void EggGroup::clear_into_collide_mask(void);

1375 21 has_into_collide_mask 4 1921 31 EggGroup::has_into_collide_mask 0 1 418 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline bool EggGroup::has_into_collide_mask(void) const;

1376 21 get_into_collide_mask 4 1921 31 EggGroup::get_into_collide_mask 0 1 419 230
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline BitMask< unsigned int, 32 > EggGroup::get_into_collide_mask(void) const;

1377 14 set_blend_mode 4 1921 24 EggGroup::set_blend_mode 0 1 420 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_mode(EggGroup::BlendMode blend_mode);

1378 14 get_blend_mode 4 1921 24 EggGroup::get_blend_mode 0 1 421 223
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggGroup::BlendMode EggGroup::get_blend_mode(void) const;

1379 19 set_blend_operand_a 4 1921 29 EggGroup::set_blend_operand_a 0 1 422 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_a(EggGroup::BlendOperand blend_operand_a);

1380 19 get_blend_operand_a 4 1921 29 EggGroup::get_blend_operand_a 0 1 423 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_a(void) const;

1381 19 set_blend_operand_b 4 1921 29 EggGroup::set_blend_operand_b 0 1 424 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggGroup::set_blend_operand_b(EggGroup::BlendOperand blend_operand_b);

1382 19 get_blend_operand_b 4 1921 29 EggGroup::get_blend_operand_b 0 1 425 228
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggGroup::BlendOperand EggGroup::get_blend_operand_b(void) const;

1383 15 set_blend_color 4 1921 25 EggGroup::set_blend_color 0 1 426 224
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void EggGroup::set_blend_color(LVecBase4f const &blend_color);

1384 17 clear_blend_color 4 1921 27 EggGroup::clear_blend_color 0 1 427 265
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
////////////////////////////////////////////////////////////////////
46
inline void EggGroup::clear_blend_color(void);

1385 15 has_blend_color 4 1921 25 EggGroup::has_blend_color 0 1 428 310
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggGroup::has_blend_color(void) const;

1386 15 get_blend_color 4 1921 25 EggGroup::get_blend_color 0 1 429 324
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
////////////////////////////////////////////////////////////////////
63
inline LVecBase4f const &EggGroup::get_blend_color(void) const;

1387 7 set_lod 4 1921 17 EggGroup::set_lod 0 1 430 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void EggGroup::set_lod(EggSwitchCondition const &lod);

1388 9 clear_lod 4 1921 19 EggGroup::clear_lod 0 1 431 218
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
38
inline void EggGroup::clear_lod(void);

1389 7 has_lod 4 1921 17 EggGroup::has_lod 0 1 432 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool EggGroup::has_lod(void) const;

1390 7 get_lod 4 1921 17 EggGroup::get_lod 0 1 433 216
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline EggSwitchCondition const &EggGroup::get_lod(void) const;

1391 7 set_tag 4 1921 17 EggGroup::set_tag 0 1 434 878
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
98
inline void EggGroup::set_tag(basic_string< char > const &key, basic_string< char > const &value);

1392 7 get_tag 4 1921 17 EggGroup::get_tag 0 1 435 433
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > EggGroup::get_tag(basic_string< char > const &key) const;

1393 7 has_tag 4 1921 17 EggGroup::has_tag 0 1 436 404
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
////////////////////////////////////////////////////////////////////
69
inline bool EggGroup::has_tag(basic_string< char > const &key) const;

1394 9 clear_tag 4 1921 19 EggGroup::clear_tag 0 1 437 397
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
65
inline void EggGroup::clear_tag(basic_string< char > const &key);

1395 16 get_default_pose 4 1921 26 EggGroup::get_default_pose 0 1 438 603
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_default_pose
//       Access: Published
//  Description: Returns a read-only accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
////////////////////////////////////////////////////////////////////
66
inline EggTransform const &EggGroup::get_default_pose(void) const;

1396 19 modify_default_pose 4 1921 29 EggGroup::modify_default_pose 0 1 439 605
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::modify_default_pose
//       Access: Published
//  Description: Returns a writable accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
////////////////////////////////////////////////////////////////////
57
inline EggTransform &EggGroup::modify_default_pose(void);

1397 16 set_default_pose 4 1921 26 EggGroup::set_default_pose 0 1 440 580
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_default_pose
//       Access: Published
//  Description: Replaces the initial pose transform.  This is the
//               <DefaultPose> entry for a Joint, and defines only the
//               initial transform pose for the unanimated joint; it
//               has nothing to do with the group's <Transform> entry,
//               which defines the (eventual) space of the group's
//               vertices.
////////////////////////////////////////////////////////////////////
70
inline void EggGroup::set_default_pose(EggTransform const &transform);

1398 18 clear_default_pose 4 1921 28 EggGroup::clear_default_pose 0 1 441 305
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_default_pose
//       Access: Published
//  Description: Removes the initial pose transform.  See
//               set_default_pose().
////////////////////////////////////////////////////////////////////
47
inline void EggGroup::clear_default_pose(void);

1399 12 set_scroll_u 4 1921 22 EggGroup::set_scroll_u 0 1 442 0
57
inline void EggGroup::set_scroll_u(double const u_speed);

1400 12 set_scroll_v 4 1921 22 EggGroup::set_scroll_v 0 1 443 0
57
inline void EggGroup::set_scroll_v(double const v_speed);

1401 12 set_scroll_r 4 1921 22 EggGroup::set_scroll_r 0 1 444 0
57
inline void EggGroup::set_scroll_r(double const r_speed);

1402 12 get_scroll_u 4 1921 22 EggGroup::get_scroll_u 0 1 445 0
49
inline double EggGroup::get_scroll_u(void) const;

1403 12 get_scroll_v 4 1921 22 EggGroup::get_scroll_v 0 1 446 0
49
inline double EggGroup::get_scroll_v(void) const;

1404 12 get_scroll_r 4 1921 22 EggGroup::get_scroll_r 0 1 447 0
49
inline double EggGroup::get_scroll_r(void) const;

1405 17 has_scrolling_uvs 4 1921 27 EggGroup::has_scrolling_uvs 0 1 448 0
46
inline bool EggGroup::has_scrolling_uvs(void);

1406 10 ref_vertex 4 1921 20 EggGroup::ref_vertex 0 2 449 450 467
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
////////////////////////////////////////////////////////////////////
68
void EggGroup::ref_vertex(EggVertex *vert, double membership = (1));

1407 12 unref_vertex 4 1921 22 EggGroup::unref_vertex 0 1 451 372
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
////////////////////////////////////////////////////////////////////
45
void EggGroup::unref_vertex(EggVertex *vert);

1408 18 unref_all_vertices 4 1921 28 EggGroup::unref_all_vertices 0 1 452 273
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
////////////////////////////////////////////////////////////////////
40
void EggGroup::unref_all_vertices(void);

1409 21 get_vertex_membership 4 1921 31 EggGroup::get_vertex_membership 0 1 453 390
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
////////////////////////////////////////////////////////////////////
68
double EggGroup::get_vertex_membership(EggVertex const *vert) const;

1410 21 set_vertex_membership 4 1921 31 EggGroup::set_vertex_membership 0 1 454 340
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
////////////////////////////////////////////////////////////////////
73
void EggGroup::set_vertex_membership(EggVertex *vert, double membership);

1411 11 steal_vrefs 4 1921 21 EggGroup::steal_vrefs 0 1 455 450
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
////////////////////////////////////////////////////////////////////
44
void EggGroup::steal_vrefs(EggGroup *other);

1412 19 test_vref_integrity 4 1921 29 EggGroup::test_vref_integrity 0 1 456 340
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::test_vref_integrity
//       Access: Published
//  Description: Verifies that each vertex in the group exists and
//               that it knows it is referenced by the group.
////////////////////////////////////////////////////////////////////
47
void EggGroup::test_vref_integrity(void) const;

1413 13 add_group_ref 4 1921 23 EggGroup::add_group_ref 0 1 457 474
// NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_group_ref
//       Access: Published
//  Description: Adds a new <Ref> entry to the group.  This declares
//               an internal reference to another node, and is used to
//               implement scene-graph instancing; it is only valid if
//               the group_type is GT_instance.
////////////////////////////////////////////////////////////////////
46
void EggGroup::add_group_ref(EggGroup *group);

1414 18 get_num_group_refs 4 1921 28 EggGroup::get_num_group_refs 0 1 458 321
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_group_refs
//       Access: Published
//  Description: Returns the number of <Ref> entries within this
//               group.  See add_group_ref().
////////////////////////////////////////////////////////////////////
45
int EggGroup::get_num_group_refs(void) const;

1415 13 get_group_ref 4 1921 23 EggGroup::get_group_ref 0 1 459 308
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_ref
//       Access: Published
//  Description: Returns the nth <Ref> entry within this group.  See
//               add_group_ref().
////////////////////////////////////////////////////////////////////
47
EggGroup *EggGroup::get_group_ref(int n) const;

1416 16 remove_group_ref 4 1921 26 EggGroup::remove_group_ref 0 1 460 311
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_group_ref
//       Access: Published
//  Description: Removes the nth <Ref> entry within this group.  See
//               add_group_ref().
////////////////////////////////////////////////////////////////////
39
void EggGroup::remove_group_ref(int n);

1417 16 clear_group_refs 4 1921 26 EggGroup::clear_group_refs 0 1 461 315
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_group_refs
//       Access: Published
//  Description: Removes all of the <Ref> entries within this group.
//               See add_group_ref().
////////////////////////////////////////////////////////////////////
38
void EggGroup::clear_group_refs(void);

1418 17 string_group_type 4 1921 27 EggGroup::string_group_type 0 1 462 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
////////////////////////////////////////////////////////////////////
91
static EggGroup::GroupType EggGroup::string_group_type(basic_string< char > const &strval);

1419 16 string_dart_type 4 1921 26 EggGroup::string_dart_type 0 1 463 409
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
////////////////////////////////////////////////////////////////////
89
static EggGroup::DartType EggGroup::string_dart_type(basic_string< char > const &strval);

1420 15 string_dcs_type 4 1921 25 EggGroup::string_dcs_type 0 1 464 413
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
////////////////////////////////////////////////////////////////////
87
static EggGroup::DCSType EggGroup::string_dcs_type(basic_string< char > const &strval);

1421 21 string_billboard_type 4 1921 31 EggGroup::string_billboard_type 0 1 465 424
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
////////////////////////////////////////////////////////////////////
99
static EggGroup::BillboardType EggGroup::string_billboard_type(basic_string< char > const &strval);

1422 14 string_cs_type 4 1921 24 EggGroup::string_cs_type 0 1 466 428
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
////////////////////////////////////////////////////////////////////
97
static EggGroup::CollisionSolidType EggGroup::string_cs_type(basic_string< char > const &strval);

1423 20 string_collide_flags 4 1921 30 EggGroup::string_collide_flags 0 1 467 546
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
////////////////////////////////////////////////////////////////////
97
static EggGroup::CollideFlags EggGroup::string_collide_flags(basic_string< char > const &strval);

1424 17 string_blend_mode 4 1921 27 EggGroup::string_blend_mode 0 1 468 406
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
////////////////////////////////////////////////////////////////////
91
static EggGroup::BlendMode EggGroup::string_blend_mode(basic_string< char > const &strval);

1425 20 string_blend_operand 4 1921 30 EggGroup::string_blend_operand 0 1 469 415
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
////////////////////////////////////////////////////////////////////
97
static EggGroup::BlendOperand EggGroup::string_blend_operand(basic_string< char > const &strval);

1426 14 get_class_type 4 1921 24 EggGroup::get_class_type 0 1 470 0
49
static TypeHandle EggGroup::get_class_type(void);

1427 6 EggBin 4 1930 14 EggBin::EggBin 0 4 477 478 479 480 668
////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
EggBin::EggBin(basic_string< char > const &name = (""));
EggBin::EggBin(EggGroup const &copy);
EggBin::EggBin(EggBin const &copy);

1428 14 set_bin_number 4 1930 22 EggBin::set_bin_number 0 1 481 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void EggBin::set_bin_number(int bin_number);

1429 14 get_bin_number 4 1930 22 EggBin::get_bin_number 0 1 482 218
////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
int EggBin::get_bin_number(void) const;

1430 14 get_class_type 4 1930 22 EggBin::get_class_type 0 1 483 0
47
static TypeHandle EggBin::get_class_type(void);

1431 7 ~EggBin 4 1930 15 EggBin::~EggBin 0 0 0
22
EggBin::~EggBin(void);

1432 9 make_bins 4 1931 22 EggBinMaker::make_bins 0 1 484 460
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
////////////////////////////////////////////////////////////////////
53
int EggBinMaker::make_bins(EggGroupNode *root_group);

1433 12 prepare_node 4 1931 25 EggBinMaker::prepare_node 0 1 485 419
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
////////////////////////////////////////////////////////////////////
54
virtual void EggBinMaker::prepare_node(EggNode *node);

1434 14 get_bin_number 4 1931 27 EggBinMaker::get_bin_number 0 1 486 0
65
virtual int EggBinMaker::get_bin_number(EggNode const *node) = 0;

1435 10 sorts_less 4 1931 23 EggBinMaker::sorts_less 0 1 487 669
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
////////////////////////////////////////////////////////////////////
89
virtual bool EggBinMaker::sorts_less(int bin_number, EggNode const *a, EggNode const *b);

1436 14 collapse_group 4 1931 27 EggBinMaker::collapse_group 0 1 488 398
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
////////////////////////////////////////////////////////////////////
80
virtual bool EggBinMaker::collapse_group(EggGroup const *group, int bin_number);

1437 12 get_bin_name 4 1931 25 EggBinMaker::get_bin_name 0 1 489 381
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
////////////////////////////////////////////////////////////////////
93
virtual basic_string< char > EggBinMaker::get_bin_name(int bin_number, EggNode const *child);

1438 8 make_bin 4 1931 21 EggBinMaker::make_bin 0 1 490 655
////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
////////////////////////////////////////////////////////////////////
113
virtual PointerTo< EggBin > EggBinMaker::make_bin(int bin_number, EggNode const *child, EggGroup *collapse_from);

1439 14 get_class_type 4 1931 27 EggBinMaker::get_class_type 0 1 491 0
52
static TypeHandle EggBinMaker::get_class_type(void);

1440 10 EggComment 4 1932 22 EggComment::EggComment 0 2 492 493 931
// Filename: eggComment.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
161
inline EggComment::EggComment(basic_string< char > const &node_name, basic_string< char > const &comment);
inline EggComment::EggComment(EggComment const &copy);

1441 10 operator = 4 1932 22 EggComment::operator = 0 2 494 495 545
// You can use the string operators to directly set and manipulate
// the comment.

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggComment &EggComment::operator =(basic_string< char > const &comment);
inline EggComment &EggComment::operator =(EggComment const &copy);

1442 17 operator typecast 132 1932 29 EggComment::operator typecast 0 1 499 232
////////////////////////////////////////////////////////////////////
//     Function: EggComment::String typecast operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &EggComment::operator typecast(void) const;

1443 11 set_comment 4 1932 23 EggComment::set_comment 0 1 496 262
// Or, you can set and get it explicitly.

////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggComment::set_comment(basic_string< char > const &comment);

1444 11 get_comment 4 1932 23 EggComment::get_comment 0 1 497 219
////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline basic_string< char > EggComment::get_comment(void) const;

1445 14 get_class_type 4 1932 26 EggComment::get_class_type 0 1 498 0
51
static TypeHandle EggComment::get_class_type(void);

1446 11 ~EggComment 4 1932 23 EggComment::~EggComment 0 0 0
30
EggComment::~EggComment(void);

1447 10 operator = 4 1933 27 EggFilenameNode::operator = 0 1 500 237
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggFilenameNode &EggFilenameNode::operator =(EggFilenameNode const &copy);

1448 21 get_default_extension 4 1933 38 EggFilenameNode::get_default_extension 0 1 501 297
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
////////////////////////////////////////////////////////////////////
80
virtual basic_string< char > EggFilenameNode::get_default_extension(void) const;

1449 12 get_filename 4 1933 29 EggFilenameNode::get_filename 0 1 502 276
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_filename(void) const;

1450 12 set_filename 4 1933 29 EggFilenameNode::set_filename 0 1 503 225
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_filename(Filename const &filename);

1451 12 get_fullpath 4 1933 29 EggFilenameNode::get_fullpath 0 1 504 822
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
////////////////////////////////////////////////////////////////////
65
inline Filename const &EggFilenameNode::get_fullpath(void) const;

1452 12 set_fullpath 4 1933 29 EggFilenameNode::set_fullpath 0 1 505 316
////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
////////////////////////////////////////////////////////////////////
68
inline void EggFilenameNode::set_fullpath(Filename const &fullpath);

1453 14 get_class_type 4 1933 31 EggFilenameNode::get_class_type 0 1 506 0
56
static TypeHandle EggFilenameNode::get_class_type(void);

1454 16 ~EggFilenameNode 4 1933 33 EggFilenameNode::~EggFilenameNode 0 0 0
40
EggFilenameNode::~EggFilenameNode(void);

1455 25 upcast_to_EggFilenameNode 12 1934 37 EggTexture::upcast_to_EggFilenameNode 0 1 609 41
upcast from EggTexture to EggFilenameNode
61
EggFilenameNode *EggTexture::upcast_to_EggFilenameNode(void);

1456 22 downcast_to_EggTexture 12 1933 39 EggFilenameNode::downcast_to_EggTexture 0 1 610 43
downcast from EggFilenameNode to EggTexture
58
EggTexture *EggFilenameNode::downcast_to_EggTexture(void);

1457 23 upcast_to_EggRenderMode 12 1934 35 EggTexture::upcast_to_EggRenderMode 0 1 611 39
upcast from EggTexture to EggRenderMode
57
EggRenderMode *EggTexture::upcast_to_EggRenderMode(void);

1458 22 downcast_to_EggTexture 12 1910 37 EggRenderMode::downcast_to_EggTexture 0 1 612 41
downcast from EggRenderMode to EggTexture
56
EggTexture *EggRenderMode::downcast_to_EggTexture(void);

1459 22 upcast_to_EggTransform 12 1934 34 EggTexture::upcast_to_EggTransform 0 1 613 38
upcast from EggTexture to EggTransform
55
EggTransform *EggTexture::upcast_to_EggTransform(void);

1460 22 downcast_to_EggTexture 12 1915 36 EggTransform::downcast_to_EggTexture 0 1 614 40
downcast from EggTransform to EggTexture
55
EggTexture *EggTransform::downcast_to_EggTexture(void);

1461 10 EggTexture 4 1934 22 EggTexture::EggTexture 0 2 507 508 451
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
EggTexture::EggTexture(basic_string< char > const &tref_name, Filename const &filename);
EggTexture::EggTexture(EggTexture const &copy);

1462 10 operator = 4 1934 22 EggTexture::operator = 0 1 509 235
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
EggTexture &EggTexture::operator =(EggTexture const &copy);

1463 11 ~EggTexture 4 1934 23 EggTexture::~EggTexture 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
38
virtual EggTexture::~EggTexture(void);

1464 5 write 4 1934 17 EggTexture::write 0 1 510 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
////////////////////////////////////////////////////////////////////
69
virtual void EggTexture::write(ostream &out, int indent_level) const;

1465 16 is_equivalent_to 4 1934 28 EggTexture::is_equivalent_to 0 1 511 1471
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
////////////////////////////////////////////////////////////////////
73
bool EggTexture::is_equivalent_to(EggTexture const &other, int eq) const;

1466 15 sorts_less_than 4 1934 27 EggTexture::sorts_less_than 0 1 512 502
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
72
bool EggTexture::sorts_less_than(EggTexture const &other, int eq) const;

1467 17 has_alpha_channel 4 1934 29 EggTexture::has_alpha_channel 0 1 513 537
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
////////////////////////////////////////////////////////////////////
61
bool EggTexture::has_alpha_channel(int num_components) const;

1468 16 set_texture_type 4 1934 28 EggTexture::set_texture_type 0 1 514 713
// Filename: eggTexture.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_texture_type(EggTexture::TextureType texture_type);

1469 16 get_texture_type 4 1934 28 EggTexture::get_texture_type 0 1 515 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggTexture::TextureType EggTexture::get_texture_type(void) const;

1470 10 set_format 4 1934 22 EggTexture::set_format 0 1 516 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_format(EggTexture::Format format);

1471 10 get_format 4 1934 22 EggTexture::get_format 0 1 517 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline EggTexture::Format EggTexture::get_format(void) const;

1472 20 set_compression_mode 4 1934 32 EggTexture::set_compression_mode 0 1 518 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_compression_mode(EggTexture::CompressionMode mode);

1473 20 get_compression_mode 4 1934 32 EggTexture::get_compression_mode 0 1 519 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
inline EggTexture::CompressionMode EggTexture::get_compression_mode(void) const;

1474 13 set_wrap_mode 4 1934 25 EggTexture::set_wrap_mode 0 1 520 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void EggTexture::set_wrap_mode(EggTexture::WrapMode mode);

1475 13 get_wrap_mode 4 1934 25 EggTexture::get_wrap_mode 0 1 521 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggTexture::WrapMode EggTexture::get_wrap_mode(void) const;

1476 10 set_wrap_u 4 1934 22 EggTexture::set_wrap_u 0 1 522 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_u(EggTexture::WrapMode mode);

1477 10 get_wrap_u 4 1934 22 EggTexture::get_wrap_u 0 1 523 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_u(void) const;

1478 16 determine_wrap_u 4 1934 28 EggTexture::determine_wrap_u 0 1 524 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_u(void) const;

1479 10 set_wrap_v 4 1934 22 EggTexture::set_wrap_v 0 1 525 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_v(EggTexture::WrapMode mode);

1480 10 get_wrap_v 4 1934 22 EggTexture::get_wrap_v 0 1 526 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_v(void) const;

1481 16 determine_wrap_v 4 1934 28 EggTexture::determine_wrap_v 0 1 527 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_v(void) const;

1482 10 set_wrap_w 4 1934 22 EggTexture::set_wrap_w 0 1 528 221
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void EggTexture::set_wrap_w(EggTexture::WrapMode mode);

1483 10 get_wrap_w 4 1934 22 EggTexture::get_wrap_w 0 1 529 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
////////////////////////////////////////////////////////////////////
63
inline EggTexture::WrapMode EggTexture::get_wrap_w(void) const;

1484 16 determine_wrap_w 4 1934 28 EggTexture::determine_wrap_w 0 1 530 439
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
////////////////////////////////////////////////////////////////////
69
inline EggTexture::WrapMode EggTexture::determine_wrap_w(void) const;

1485 13 set_minfilter 4 1934 25 EggTexture::set_minfilter 0 1 531 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_minfilter(EggTexture::FilterType type);

1486 13 get_minfilter 4 1934 25 EggTexture::get_minfilter 0 1 532 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_minfilter(void) const;

1487 13 set_magfilter 4 1934 25 EggTexture::set_magfilter 0 1 533 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggTexture::set_magfilter(EggTexture::FilterType type);

1488 13 get_magfilter 4 1934 25 EggTexture::get_magfilter 0 1 534 224
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline EggTexture::FilterType EggTexture::get_magfilter(void) const;

1489 22 set_anisotropic_degree 4 1934 34 EggTexture::set_anisotropic_degree 0 1 535 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_anisotropic_degree(int anisotropic_degree);

1490 24 clear_anisotropic_degree 4 1934 36 EggTexture::clear_anisotropic_degree 0 1 536 321
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_anisotropic_degree(void);

1491 22 has_anisotropic_degree 4 1934 34 EggTexture::has_anisotropic_degree 0 1 537 382
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_anisotropic_degree(void) const;

1492 22 get_anisotropic_degree 4 1934 34 EggTexture::get_anisotropic_degree 0 1 538 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_anisotropic_degree(void) const;

1493 12 set_env_type 4 1934 24 EggTexture::set_env_type 0 1 539 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTexture::set_env_type(EggTexture::EnvType type);

1494 12 get_env_type 4 1934 24 EggTexture::get_env_type 0 1 540 223
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTexture::EnvType EggTexture::get_env_type(void) const;

1495 21 affects_polygon_alpha 4 1934 33 EggTexture::affects_polygon_alpha 0 1 541 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an affect on
//               the polygon's alpha values, false otherwise.
////////////////////////////////////////////////////////////////////
51
bool EggTexture::affects_polygon_alpha(void) const;

1496 16 set_combine_mode 4 1934 28 EggTexture::set_combine_mode 0 1 542 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
105
inline void EggTexture::set_combine_mode(EggTexture::CombineChannel channel, EggTexture::CombineMode cm);

1497 16 get_combine_mode 4 1934 28 EggTexture::get_combine_mode 0 1 543 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
inline EggTexture::CombineMode EggTexture::get_combine_mode(EggTexture::CombineChannel channel) const;

1498 18 set_combine_source 4 1934 30 EggTexture::set_combine_source 0 1 544 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline void EggTexture::set_combine_source(EggTexture::CombineChannel channel, int n, EggTexture::CombineSource cs);

1499 18 get_combine_source 4 1934 30 EggTexture::get_combine_source 0 1 545 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
113
inline EggTexture::CombineSource EggTexture::get_combine_source(EggTexture::CombineChannel channel, int n) const;

1500 19 set_combine_operand 4 1934 31 EggTexture::set_combine_operand 0 1 546 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline void EggTexture::set_combine_operand(EggTexture::CombineChannel channel, int n, EggTexture::CombineOperand co);

1501 19 get_combine_operand 4 1934 31 EggTexture::get_combine_operand 0 1 547 230
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
115
inline EggTexture::CombineOperand EggTexture::get_combine_operand(EggTexture::CombineChannel channel, int n) const;

1502 16 set_saved_result 4 1934 28 EggTexture::set_saved_result 0 1 548 1011
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_saved_result(bool saved_result);

1503 16 get_saved_result 4 1934 28 EggTexture::get_saved_result 0 1 549 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_saved_result(void) const;

1504 11 set_tex_gen 4 1934 23 EggTexture::set_tex_gen 0 1 550 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void EggTexture::set_tex_gen(EggTexture::TexGen tex_gen);

1505 11 get_tex_gen 4 1934 23 EggTexture::get_tex_gen 0 1 551 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline EggTexture::TexGen EggTexture::get_tex_gen(void) const;

1506 17 set_quality_level 4 1934 29 EggTexture::set_quality_level 0 1 552 228
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_quality_level
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
inline void EggTexture::set_quality_level(EggTexture::QualityLevel quality_level);

1507 17 get_quality_level 4 1934 29 EggTexture::get_quality_level 0 1 553 228
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_quality_level
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
inline EggTexture::QualityLevel EggTexture::get_quality_level(void) const;

1508 14 set_stage_name 4 1934 26 EggTexture::set_stage_name 0 1 554 778
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
////////////////////////////////////////////////////////////////////
79
inline void EggTexture::set_stage_name(basic_string< char > const &stage_name);

1509 16 clear_stage_name 4 1934 28 EggTexture::clear_stage_name 0 1 555 273
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
////////////////////////////////////////////////////////////////////
47
inline void EggTexture::clear_stage_name(void);

1510 14 has_stage_name 4 1934 26 EggTexture::has_stage_name 0 1 556 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool EggTexture::has_stage_name(void) const;

1511 14 get_stage_name 4 1934 26 EggTexture::get_stage_name 0 1 557 392
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
74
inline basic_string< char > const &EggTexture::get_stage_name(void) const;

1512 12 set_priority 4 1934 24 EggTexture::set_priority 0 1 558 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::set_priority(int priority);

1513 14 clear_priority 4 1934 26 EggTexture::clear_priority 0 1 559 345
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
////////////////////////////////////////////////////////////////////
45
inline void EggTexture::clear_priority(void);

1514 12 has_priority 4 1934 24 EggTexture::has_priority 0 1 560 371
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool EggTexture::has_priority(void) const;

1515 12 get_priority 4 1934 24 EggTexture::get_priority 0 1 561 386
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
////////////////////////////////////////////////////////////////////
48
inline int EggTexture::get_priority(void) const;

1516 9 set_color 4 1934 21 EggTexture::set_color 0 1 562 220
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void EggTexture::set_color(LVecBase4f const &color);

1517 11 clear_color 4 1934 23 EggTexture::clear_color 0 1 563 222
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggTexture::clear_color(void);

1518 9 has_color 4 1934 21 EggTexture::has_color 0 1 564 303
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
46
inline bool EggTexture::has_color(void) const;

1519 9 get_color 4 1934 21 EggTexture::get_color 0 1 565 315
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
59
inline LVecBase4f const &EggTexture::get_color(void) const;

1520 16 set_border_color 4 1934 28 EggTexture::set_border_color 0 1 566 227
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggTexture::set_border_color(LVecBase4f const &border_color);

1521 18 clear_border_color 4 1934 30 EggTexture::clear_border_color 0 1 567 229
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggTexture::clear_border_color(void);

1522 16 has_border_color 4 1934 28 EggTexture::has_border_color 0 1 568 311
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::has_border_color(void) const;

1523 16 get_border_color 4 1934 28 EggTexture::get_border_color 0 1 569 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f const &EggTexture::get_border_color(void) const;

1524 11 set_uv_name 4 1934 23 EggTexture::set_uv_name 0 1 570 593
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
////////////////////////////////////////////////////////////////////
73
inline void EggTexture::set_uv_name(basic_string< char > const &uv_name);

1525 13 clear_uv_name 4 1934 25 EggTexture::clear_uv_name 0 1 571 398
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
////////////////////////////////////////////////////////////////////
44
inline void EggTexture::clear_uv_name(void);

1526 11 has_uv_name 4 1934 23 EggTexture::has_uv_name 0 1 572 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool EggTexture::has_uv_name(void) const;

1527 11 get_uv_name 4 1934 23 EggTexture::get_uv_name 0 1 573 395
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
////////////////////////////////////////////////////////////////////
71
inline basic_string< char > const &EggTexture::get_uv_name(void) const;

1528 13 set_rgb_scale 4 1934 25 EggTexture::set_rgb_scale 0 1 574 493
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
53
inline void EggTexture::set_rgb_scale(int rgb_scale);

1529 15 clear_rgb_scale 4 1934 27 EggTexture::clear_rgb_scale 0 1 575 325
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
46
inline void EggTexture::clear_rgb_scale(void);

1530 13 has_rgb_scale 4 1934 25 EggTexture::has_rgb_scale 0 1 576 323
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
50
inline bool EggTexture::has_rgb_scale(void) const;

1531 13 get_rgb_scale 4 1934 25 EggTexture::get_rgb_scale 0 1 577 374
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
////////////////////////////////////////////////////////////////////
49
inline int EggTexture::get_rgb_scale(void) const;

1532 15 set_alpha_scale 4 1934 27 EggTexture::set_alpha_scale 0 1 578 468
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
////////////////////////////////////////////////////////////////////
57
inline void EggTexture::set_alpha_scale(int alpha_scale);

1533 17 clear_alpha_scale 4 1934 29 EggTexture::clear_alpha_scale 0 1 579 329
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
////////////////////////////////////////////////////////////////////
48
inline void EggTexture::clear_alpha_scale(void);

1534 15 has_alpha_scale 4 1934 27 EggTexture::has_alpha_scale 0 1 580 327
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool EggTexture::has_alpha_scale(void) const;

1535 15 get_alpha_scale 4 1934 27 EggTexture::get_alpha_scale 0 1 581 380
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
////////////////////////////////////////////////////////////////////
51
inline int EggTexture::get_alpha_scale(void) const;

1536 18 set_alpha_filename 4 1934 30 EggTexture::set_alpha_filename 0 1 582 516
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_filename(Filename const &filename);

1537 20 clear_alpha_filename 4 1934 32 EggTexture::clear_alpha_filename 0 1 583 231
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void EggTexture::clear_alpha_filename(void);

1538 18 has_alpha_filename 4 1934 30 EggTexture::has_alpha_filename 0 1 584 381
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
////////////////////////////////////////////////////////////////////
55
inline bool EggTexture::has_alpha_filename(void) const;

1539 18 get_alpha_filename 4 1934 30 EggTexture::get_alpha_filename 0 1 585 419
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_filename(void) const;

1540 18 set_alpha_fullpath 4 1934 30 EggTexture::set_alpha_fullpath 0 1 586 326
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
////////////////////////////////////////////////////////////////////
69
inline void EggTexture::set_alpha_fullpath(Filename const &fullpath);

1541 18 get_alpha_fullpath 4 1934 30 EggTexture::get_alpha_fullpath 0 1 587 817
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
////////////////////////////////////////////////////////////////////
66
inline Filename const &EggTexture::get_alpha_fullpath(void) const;

1542 22 set_alpha_file_channel 4 1934 34 EggTexture::set_alpha_file_channel 0 1 588 742
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
////////////////////////////////////////////////////////////////////
71
inline void EggTexture::set_alpha_file_channel(int alpha_file_channel);

1543 24 clear_alpha_file_channel 4 1934 36 EggTexture::clear_alpha_file_channel 0 1 589 336
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
////////////////////////////////////////////////////////////////////
55
inline void EggTexture::clear_alpha_file_channel(void);

1544 22 has_alpha_file_channel 4 1934 34 EggTexture::has_alpha_file_channel 0 1 590 349
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool EggTexture::has_alpha_file_channel(void) const;

1545 22 get_alpha_file_channel 4 1934 34 EggTexture::get_alpha_file_channel 0 1 591 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
////////////////////////////////////////////////////////////////////
58
inline int EggTexture::get_alpha_file_channel(void) const;

1546 16 set_read_mipmaps 4 1934 28 EggTexture::set_read_mipmaps 0 1 592 912
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a type that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
////////////////////////////////////////////////////////////////////
60
inline void EggTexture::set_read_mipmaps(bool read_mipmaps);

1547 16 get_read_mipmaps 4 1934 28 EggTexture::get_read_mipmaps 0 1 593 322
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
////////////////////////////////////////////////////////////////////
53
inline bool EggTexture::get_read_mipmaps(void) const;

1548 18 clear_multitexture 4 1934 30 EggTexture::clear_multitexture 0 1 594 437
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
////////////////////////////////////////////////////////////////////
42
void EggTexture::clear_multitexture(void);

1549 17 multitexture_over 4 1934 29 EggTexture::multitexture_over 0 1 595 771
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
////////////////////////////////////////////////////////////////////
54
bool EggTexture::multitexture_over(EggTexture *other);

1550 21 get_multitexture_sort 4 1934 33 EggTexture::get_multitexture_sort 0 1 596 628
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
////////////////////////////////////////////////////////////////////
57
inline int EggTexture::get_multitexture_sort(void) const;

1551 19 string_texture_type 4 1934 31 EggTexture::string_texture_type 0 1 597 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
////////////////////////////////////////////////////////////////////
99
static EggTexture::TextureType EggTexture::string_texture_type(basic_string< char > const &string);

1552 13 string_format 4 1934 25 EggTexture::string_format 0 1 598 410
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
////////////////////////////////////////////////////////////////////
88
static EggTexture::Format EggTexture::string_format(basic_string< char > const &string);

1553 23 string_compression_mode 4 1934 35 EggTexture::string_compression_mode 0 1 599 435
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
////////////////////////////////////////////////////////////////////
107
static EggTexture::CompressionMode EggTexture::string_compression_mode(basic_string< char > const &string);

1554 16 string_wrap_mode 4 1934 28 EggTexture::string_wrap_mode 0 1 600 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
////////////////////////////////////////////////////////////////////
93
static EggTexture::WrapMode EggTexture::string_wrap_mode(basic_string< char > const &string);

1555 18 string_filter_type 4 1934 30 EggTexture::string_filter_type 0 1 601 424
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
////////////////////////////////////////////////////////////////////
97
static EggTexture::FilterType EggTexture::string_filter_type(basic_string< char > const &string);

1556 15 string_env_type 4 1934 27 EggTexture::string_env_type 0 1 602 415
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
////////////////////////////////////////////////////////////////////
91
static EggTexture::EnvType EggTexture::string_env_type(basic_string< char > const &string);

1557 19 string_combine_mode 4 1934 31 EggTexture::string_combine_mode 0 1 603 427
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
////////////////////////////////////////////////////////////////////
99
static EggTexture::CombineMode EggTexture::string_combine_mode(basic_string< char > const &string);

1558 21 string_combine_source 4 1934 33 EggTexture::string_combine_source 0 1 604 433
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
////////////////////////////////////////////////////////////////////
103
static EggTexture::CombineSource EggTexture::string_combine_source(basic_string< char > const &string);

1559 22 string_combine_operand 4 1934 34 EggTexture::string_combine_operand 0 1 605 436
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
////////////////////////////////////////////////////////////////////
105
static EggTexture::CombineOperand EggTexture::string_combine_operand(basic_string< char > const &string);

1560 14 string_tex_gen 4 1934 26 EggTexture::string_tex_gen 0 1 606 412
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
89
static EggTexture::TexGen EggTexture::string_tex_gen(basic_string< char > const &string);

1561 20 string_quality_level 4 1934 32 EggTexture::string_quality_level 0 1 607 418
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_quality_level
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
////////////////////////////////////////////////////////////////////
101
static EggTexture::QualityLevel EggTexture::string_quality_level(basic_string< char > const &string);

1562 14 get_class_type 4 1934 26 EggTexture::get_class_type 0 1 608 0
51
static TypeHandle EggTexture::get_class_type(void);

1563 11 EggMaterial 4 1949 24 EggMaterial::EggMaterial 0 2 615 616 447
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
115
EggMaterial::EggMaterial(basic_string< char > const &mref_name);
EggMaterial::EggMaterial(EggMaterial const &copy);

1564 16 is_equivalent_to 4 1949 29 EggMaterial::is_equivalent_to 0 1 617 784
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
////////////////////////////////////////////////////////////////////
75
bool EggMaterial::is_equivalent_to(EggMaterial const &other, int eq) const;

1565 15 sorts_less_than 4 1949 28 EggMaterial::sorts_less_than 0 1 618 502
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
////////////////////////////////////////////////////////////////////
74
bool EggMaterial::sorts_less_than(EggMaterial const &other, int eq) const;

1566 8 set_diff 4 1949 21 EggMaterial::set_diff 0 1 619 704
// Filename: eggMaterial.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_diff(LVecBase4f const &diff);

1567 10 clear_diff 4 1949 23 EggMaterial::clear_diff 0 1 620 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_diff(void);

1568 8 has_diff 4 1949 21 EggMaterial::has_diff 0 1 621 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_diff(void) const;

1569 8 get_diff 4 1949 21 EggMaterial::get_diff 0 1 622 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_diff(void) const;

1570 7 set_amb 4 1949 20 EggMaterial::set_amb 0 1 623 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggMaterial::set_amb(LVecBase4f const &amb);

1571 9 clear_amb 4 1949 22 EggMaterial::clear_amb 0 1 624 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggMaterial::clear_amb(void);

1572 7 has_amb 4 1949 20 EggMaterial::has_amb 0 1 625 216
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggMaterial::has_amb(void) const;

1573 7 get_amb 4 1949 20 EggMaterial::get_amb 0 1 626 357
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
////////////////////////////////////////////////////////////////////
51
inline LVecBase4f EggMaterial::get_amb(void) const;

1574 8 set_emit 4 1949 21 EggMaterial::set_emit 0 1 627 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_emit(LVecBase4f const &emit);

1575 10 clear_emit 4 1949 23 EggMaterial::clear_emit 0 1 628 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_emit(void);

1576 8 has_emit 4 1949 21 EggMaterial::has_emit 0 1 629 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_emit(void) const;

1577 8 get_emit 4 1949 21 EggMaterial::get_emit 0 1 630 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_emit(void) const;

1578 8 set_spec 4 1949 21 EggMaterial::set_spec 0 1 631 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void EggMaterial::set_spec(LVecBase4f const &spec);

1579 10 clear_spec 4 1949 23 EggMaterial::clear_spec 0 1 632 219
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void EggMaterial::clear_spec(void);

1580 8 has_spec 4 1949 21 EggMaterial::has_spec 0 1 633 217
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool EggMaterial::has_spec(void) const;

1581 8 get_spec 4 1949 21 EggMaterial::get_spec 0 1 634 360
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f EggMaterial::get_spec(void) const;

1582 13 set_shininess 4 1949 26 EggMaterial::set_shininess 0 1 635 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void EggMaterial::set_shininess(double shininess);

1583 15 clear_shininess 4 1949 28 EggMaterial::clear_shininess 0 1 636 224
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::clear_shininess(void);

1584 13 has_shininess 4 1949 26 EggMaterial::has_shininess 0 1 637 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline bool EggMaterial::has_shininess(void) const;

1585 13 get_shininess 4 1949 26 EggMaterial::get_shininess 0 1 638 222
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline double EggMaterial::get_shininess(void) const;

1586 9 set_local 4 1949 22 EggMaterial::set_local 0 1 639 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline void EggMaterial::set_local(bool local);

1587 11 clear_local 4 1949 24 EggMaterial::clear_local 0 1 640 220
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggMaterial::clear_local(void);

1588 9 has_local 4 1949 22 EggMaterial::has_local 0 1 641 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::has_local(void) const;

1589 9 get_local 4 1949 22 EggMaterial::get_local 0 1 642 218
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggMaterial::get_local(void) const;

1590 14 get_class_type 4 1949 27 EggMaterial::get_class_type 0 1 643 0
52
static TypeHandle EggMaterial::get_class_type(void);

1591 12 ~EggMaterial 4 1949 25 EggMaterial::~EggMaterial 0 0 0
32
EggMaterial::~EggMaterial(void);

1592 17 upcast_to_EggNode 12 1951 31 EggPrimitive::upcast_to_EggNode 0 1 696 35
upcast from EggPrimitive to EggNode
47
EggNode *EggPrimitive::upcast_to_EggNode(void);

1593 24 downcast_to_EggPrimitive 12 1899 33 EggNode::downcast_to_EggPrimitive 0 1 697 37
downcast from EggNode to EggPrimitive
54
EggPrimitive *EggNode::downcast_to_EggPrimitive(void);

1594 23 upcast_to_EggAttributes 12 1951 37 EggPrimitive::upcast_to_EggAttributes 0 1 698 41
upcast from EggPrimitive to EggAttributes
59
EggAttributes *EggPrimitive::upcast_to_EggAttributes(void);

1595 24 downcast_to_EggPrimitive 12 1902 39 EggAttributes::downcast_to_EggPrimitive 0 1 699 43
downcast from EggAttributes to EggPrimitive
60
EggPrimitive *EggAttributes::downcast_to_EggPrimitive(void);

1596 23 upcast_to_EggRenderMode 12 1951 37 EggPrimitive::upcast_to_EggRenderMode 0 1 700 41
upcast from EggPrimitive to EggRenderMode
59
EggRenderMode *EggPrimitive::upcast_to_EggRenderMode(void);

1597 24 downcast_to_EggPrimitive 12 1910 39 EggRenderMode::downcast_to_EggPrimitive 0 1 701 43
downcast from EggRenderMode to EggPrimitive
60
EggPrimitive *EggRenderMode::downcast_to_EggPrimitive(void);

1598 10 operator = 4 1951 24 EggPrimitive::operator = 0 1 644 237
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggPrimitive &EggPrimitive::operator =(EggPrimitive const &copy);

1599 13 ~EggPrimitive 4 1951 27 EggPrimitive::~EggPrimitive 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
virtual inline EggPrimitive::~EggPrimitive(void);

1600 20 determine_alpha_mode 4 1951 34 EggPrimitive::determine_alpha_mode 0 1 645 562
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_alpha_mode(void);

1601 26 determine_depth_write_mode 4 1951 40 EggPrimitive::determine_depth_write_mode 0 1 646 569
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
70
virtual EggRenderMode *EggPrimitive::determine_depth_write_mode(void);

1602 25 determine_depth_test_mode 4 1951 39 EggPrimitive::determine_depth_test_mode 0 1 647 567
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_depth_test_mode(void);

1603 25 determine_visibility_mode 4 1951 39 EggPrimitive::determine_visibility_mode 0 1 648 566
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
////////////////////////////////////////////////////////////////////
69
virtual EggRenderMode *EggPrimitive::determine_visibility_mode(void);

1604 22 determine_depth_offset 4 1951 36 EggPrimitive::determine_depth_offset 0 1 649 548
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
66
virtual EggRenderMode *EggPrimitive::determine_depth_offset(void);

1605 20 determine_draw_order 4 1951 34 EggPrimitive::determine_draw_order 0 1 650 544
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
////////////////////////////////////////////////////////////////////
64
virtual EggRenderMode *EggPrimitive::determine_draw_order(void);

1606 13 determine_bin 4 1951 27 EggPrimitive::determine_bin 0 1 651 531
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
////////////////////////////////////////////////////////////////////
57
virtual EggRenderMode *EggPrimitive::determine_bin(void);

1607 13 get_sort_name 4 1951 27 EggPrimitive::get_sort_name 0 1 652 498
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
////////////////////////////////////////////////////////////////////
68
inline basic_string< char > EggPrimitive::get_sort_name(void) const;

1608 11 get_shading 4 1951 25 EggPrimitive::get_shading 0 1 653 1114
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
////////////////////////////////////////////////////////////////////
68
virtual EggPrimitive::Shading EggPrimitive::get_shading(void) const;

1609 23 clear_connected_shading 4 1951 37 EggPrimitive::clear_connected_shading 0 1 654 385
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
////////////////////////////////////////////////////////////////////
56
inline void EggPrimitive::clear_connected_shading(void);

1610 21 get_connected_shading 4 1951 35 EggPrimitive::get_connected_shading 0 1 655 852
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
////////////////////////////////////////////////////////////////////
77
inline EggPrimitive::Shading EggPrimitive::get_connected_shading(void) const;

1611 11 set_texture 4 1951 25 EggPrimitive::set_texture 0 1 656 494
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  Please use the multitexture
//               variant add_texture instead.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::set_texture(EggTexture *texture);

1612 11 has_texture 4 1951 25 EggPrimitive::has_texture 0 2 657 658 843
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
////////////////////////////////////////////////////////////////////
116
inline bool EggPrimitive::has_texture(void) const;
inline bool EggPrimitive::has_texture(EggTexture *texture) const;

1613 11 get_texture 4 1951 25 EggPrimitive::get_texture 0 2 659 660 850
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
116
inline EggTexture *EggPrimitive::get_texture(void) const;
inline EggTexture *EggPrimitive::get_texture(int n) const;

1614 11 add_texture 4 1951 25 EggPrimitive::add_texture 0 1 661 549
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
////////////////////////////////////////////////////////////////////
59
inline void EggPrimitive::add_texture(EggTexture *texture);

1615 13 clear_texture 4 1951 27 EggPrimitive::clear_texture 0 1 662 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
////////////////////////////////////////////////////////////////////
46
inline void EggPrimitive::clear_texture(void);

1616 16 get_num_textures 4 1951 30 EggPrimitive::get_num_textures 0 1 663 303
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_textures(void) const;

1617 12 set_material 4 1951 26 EggPrimitive::set_material 0 1 664 274
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
////////////////////////////////////////////////////////////////////
62
inline void EggPrimitive::set_material(EggMaterial *material);

1618 14 clear_material 4 1951 28 EggPrimitive::clear_material 0 1 665 268
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
////////////////////////////////////////////////////////////////////
47
inline void EggPrimitive::clear_material(void);

1619 12 get_material 4 1951 26 EggPrimitive::get_material 0 1 666 326
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
////////////////////////////////////////////////////////////////////
59
inline EggMaterial *EggPrimitive::get_material(void) const;

1620 12 has_material 4 1951 26 EggPrimitive::has_material 0 1 667 406
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
////////////////////////////////////////////////////////////////////
51
inline bool EggPrimitive::has_material(void) const;

1621 14 set_bface_flag 4 1951 28 EggPrimitive::set_bface_flag 0 1 668 466
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
////////////////////////////////////////////////////////////////////
52
inline void EggPrimitive::set_bface_flag(bool flag);

1622 14 get_bface_flag 4 1951 28 EggPrimitive::get_bface_flag 0 1 669 313
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
////////////////////////////////////////////////////////////////////
53
inline bool EggPrimitive::get_bface_flag(void) const;

1623 15 copy_attributes 4 1951 29 EggPrimitive::copy_attributes 0 2 670 671 616
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
////////////////////////////////////////////////////////////////////
126
void EggPrimitive::copy_attributes(EggAttributes const &other);
void EggPrimitive::copy_attributes(EggPrimitive const &other);

1624 17 has_vertex_normal 4 1951 31 EggPrimitive::has_vertex_normal 0 1 672 588
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
49
bool EggPrimitive::has_vertex_normal(void) const;

1625 16 has_vertex_color 4 1951 30 EggPrimitive::has_vertex_color 0 1 673 586
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
////////////////////////////////////////////////////////////////////
48
bool EggPrimitive::has_vertex_color(void) const;

1626 16 unify_attributes 4 1951 30 EggPrimitive::unify_attributes 0 1 674 1216
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
////////////////////////////////////////////////////////////////////
75
virtual void EggPrimitive::unify_attributes(EggPrimitive::Shading shading);

1627 20 apply_last_attribute 4 1951 34 EggPrimitive::apply_last_attribute 0 1 675 689
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
54
virtual void EggPrimitive::apply_last_attribute(void);

1628 21 apply_first_attribute 4 1951 35 EggPrimitive::apply_first_attribute 0 1 676 693
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
////////////////////////////////////////////////////////////////////
55
virtual void EggPrimitive::apply_first_attribute(void);

1629 25 post_apply_flat_attribute 4 1951 39 EggPrimitive::post_apply_flat_attribute 0 1 677 499
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
////////////////////////////////////////////////////////////////////
59
virtual void EggPrimitive::post_apply_flat_attribute(void);

1630 23 reverse_vertex_ordering 4 1951 37 EggPrimitive::reverse_vertex_ordering 0 1 678 481
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
////////////////////////////////////////////////////////////////////
57
virtual void EggPrimitive::reverse_vertex_ordering(void);

1631 7 cleanup 4 1951 21 EggPrimitive::cleanup 0 1 679 550
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
////////////////////////////////////////////////////////////////////
41
virtual bool EggPrimitive::cleanup(void);

1632 20 remove_doubled_verts 4 1951 34 EggPrimitive::remove_doubled_verts 0 1 680 945
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
////////////////////////////////////////////////////////////////////
53
void EggPrimitive::remove_doubled_verts(bool closed);

1633 22 remove_nonunique_verts 4 1951 36 EggPrimitive::remove_nonunique_verts 0 1 681 541
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
////////////////////////////////////////////////////////////////////
48
void EggPrimitive::remove_nonunique_verts(void);

1634 14 has_primitives 4 1951 28 EggPrimitive::has_primitives 0 1 682 380
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool EggPrimitive::has_primitives(void) const;

1635 20 joint_has_primitives 4 1951 34 EggPrimitive::joint_has_primitives 0 1 683 416
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
////////////////////////////////////////////////////////////////////
60
virtual bool EggPrimitive::joint_has_primitives(void) const;

1636 11 has_normals 4 1951 25 EggPrimitive::has_normals 0 1 684 417
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool EggPrimitive::has_normals(void) const;

1637 5 clear 4 1951 19 EggPrimitive::clear 0 1 685 266
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
////////////////////////////////////////////////////////////////////
38
inline void EggPrimitive::clear(void);

1638 10 add_vertex 4 1951 24 EggPrimitive::add_vertex 0 1 686 330
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
////////////////////////////////////////////////////////////////////
55
EggVertex *EggPrimitive::add_vertex(EggVertex *vertex);

1639 13 remove_vertex 4 1951 27 EggPrimitive::remove_vertex 0 1 687 421
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
////////////////////////////////////////////////////////////////////
58
EggVertex *EggPrimitive::remove_vertex(EggVertex *vertex);

1640 13 copy_vertices 4 1951 27 EggPrimitive::copy_vertices 0 1 688 370
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
////////////////////////////////////////////////////////////////////
60
void EggPrimitive::copy_vertices(EggPrimitive const &other);

1641 16 get_num_vertices 4 1951 30 EggPrimitive::get_num_vertices 0 1 689 295
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline int EggPrimitive::get_num_vertices(void) const;

1642 10 set_vertex 4 1951 24 EggPrimitive::set_vertex 0 1 690 510
// These are shorthands if you don't want to use the iterators.

////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
////////////////////////////////////////////////////////////////////
67
inline void EggPrimitive::set_vertex(int index, EggVertex *vertex);

1643 10 get_vertex 4 1951 24 EggPrimitive::get_vertex 0 1 691 277
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
////////////////////////////////////////////////////////////////////
60
inline EggVertex *EggPrimitive::get_vertex(int index) const;

1644 8 get_pool 4 1951 22 EggPrimitive::get_pool 0 1 692 368
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
////////////////////////////////////////////////////////////////////
57
inline EggVertexPool *EggPrimitive::get_pool(void) const;

1645 5 write 4 1951 19 EggPrimitive::write 0 1 693 0
75
virtual void EggPrimitive::write(ostream &out, int indent_level) const = 0;

1646 19 test_vref_integrity 4 1951 33 EggPrimitive::test_vref_integrity 0 1 694 352
////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::test_vref_integrity
//       Access: Published
//  Description: Verifies that each vertex in the primitive exists and
//               that it knows it is referenced by the primitive.
////////////////////////////////////////////////////////////////////
51
void EggPrimitive::test_vref_integrity(void) const;

1647 14 get_class_type 4 1951 28 EggPrimitive::get_class_type 0 1 695 0
53
static TypeHandle EggPrimitive::get_class_type(void);

1648 10 operator = 4 1953 33 EggCompositePrimitive::operator = 0 1 702 246
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
99
inline EggCompositePrimitive &EggCompositePrimitive::operator =(EggCompositePrimitive const &copy);

1649 18 get_num_components 4 1953 41 EggCompositePrimitive::get_num_components 0 1 703 410
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
////////////////////////////////////////////////////////////////////
65
inline int EggCompositePrimitive::get_num_components(void) const;

1650 13 get_component 4 1953 36 EggCompositePrimitive::get_component 0 2 704 705 616
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
145
inline EggAttributes const *EggCompositePrimitive::get_component(int i) const;
inline EggAttributes *EggCompositePrimitive::get_component(int i);

1651 13 set_component 4 1953 36 EggCompositePrimitive::set_component 0 1 706 307
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
////////////////////////////////////////////////////////////////////
85
inline void EggCompositePrimitive::set_component(int i, EggAttributes const *attrib);

1652 16 triangulate_into 4 1953 39 EggCompositePrimitive::triangulate_into 0 1 707 678
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
////////////////////////////////////////////////////////////////////
83
inline bool EggCompositePrimitive::triangulate_into(EggGroupNode *container) const;

1653 20 triangulate_in_place 4 1953 43 EggCompositePrimitive::triangulate_in_place 0 1 708 830
////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
85
PointerTo< EggCompositePrimitive > EggCompositePrimitive::triangulate_in_place(void);

1654 14 get_class_type 4 1953 37 EggCompositePrimitive::get_class_type 0 1 709 0
62
static TypeHandle EggCompositePrimitive::get_class_type(void);

1655 7 EggData 4 1954 16 EggData::EggData 0 2 710 711 922
// Filename: eggData.I
// Created by:  drose (11Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline EggData::EggData(void);
inline EggData::EggData(EggData const &copy);

1656 10 operator = 4 1954 19 EggData::operator = 0 1 712 229
////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggData &EggData::operator =(EggData const &copy);

1657 20 resolve_egg_filename 4 1954 29 EggData::resolve_egg_filename 0 2 713 714 479
////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
////////////////////////////////////////////////////////////////////
106
static bool EggData::resolve_egg_filename(Filename &egg_filename, DSearchPath const &searchpath = ((())));

1658 4 read 4 1954 13 EggData::read 0 3 715 716 717 1348
////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
////////////////////////////////////////////////////////////////////
121
bool EggData::read(Filename filename, basic_string< char > display_name = ((string())));
bool EggData::read(istream &in);

1659 5 merge 4 1954 14 EggData::merge 0 1 718 324
////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
////////////////////////////////////////////////////////////////////
36
void EggData::merge(EggData &other);

1660 14 load_externals 4 1954 23 EggData::load_externals 0 3 719 720 721 1314
////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////
154
bool EggData::load_externals(DSearchPath const &searchpath = ((())));
bool EggData::load_externals(DSearchPath const &searchpath, BamCacheRecord *record);

1661 28 collapse_equivalent_textures 4 1954 37 EggData::collapse_equivalent_textures 0 1 722 608
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
////////////////////////////////////////////////////////////////////
48
int EggData::collapse_equivalent_textures(void);

1662 29 collapse_equivalent_materials 4 1954 38 EggData::collapse_equivalent_materials 0 1 723 607
////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
////////////////////////////////////////////////////////////////////
49
int EggData::collapse_equivalent_materials(void);

1663 9 write_egg 4 1954 18 EggData::write_egg 0 2 724 725 532
////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
////////////////////////////////////////////////////////////////////
82
bool EggData::write_egg(Filename filename);
bool EggData::write_egg(ostream &out);

1664 26 set_auto_resolve_externals 4 1954 35 EggData::set_auto_resolve_externals 0 1 726 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
62
inline void EggData::set_auto_resolve_externals(bool resolve);

1665 26 get_auto_resolve_externals 4 1954 35 EggData::get_auto_resolve_externals 0 1 727 399
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
////////////////////////////////////////////////////////////////////
60
inline bool EggData::get_auto_resolve_externals(void) const;

1666 31 original_had_absolute_pathnames 4 1954 40 EggData::original_had_absolute_pathnames 0 1 728 741
////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
////////////////////////////////////////////////////////////////////
65
inline bool EggData::original_had_absolute_pathnames(void) const;

1667 21 set_coordinate_system 4 1954 30 EggData::set_coordinate_system 0 1 729 403
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
////////////////////////////////////////////////////////////////////
63
void EggData::set_coordinate_system(CoordinateSystem coordsys);

1668 21 get_coordinate_system 4 1954 30 EggData::get_coordinate_system 0 1 730 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggData::get_coordinate_system(void) const;

1669 16 set_egg_filename 4 1954 25 EggData::set_egg_filename 0 1 731 392
////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
////////////////////////////////////////////////////////////////////
68
inline void EggData::set_egg_filename(Filename const &egg_filename);

1670 16 get_egg_filename 4 1954 25 EggData::get_egg_filename 0 1 732 307
////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
////////////////////////////////////////////////////////////////////
61
inline Filename const &EggData::get_egg_filename(void) const;

1671 24 recompute_vertex_normals 4 1954 33 EggData::recompute_vertex_normals 0 1 733 1124
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
64
inline void EggData::recompute_vertex_normals(double threshold);

1672 25 recompute_polygon_normals 4 1954 34 EggData::recompute_polygon_normals 0 1 734 1069
////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
53
inline void EggData::recompute_polygon_normals(void);

1673 13 strip_normals 4 1954 22 EggData::strip_normals 0 1 735 598
////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
////////////////////////////////////////////////////////////////////
41
inline void EggData::strip_normals(void);

1674 14 get_class_type 4 1954 23 EggData::get_class_type 0 1 736 0
48
static TypeHandle EggData::get_class_type(void);

1675 8 ~EggData 4 1954 17 EggData::~EggData 0 0 0
24
EggData::~EggData(void);

1676 19 EggCoordinateSystem 4 1955 40 EggCoordinateSystem::EggCoordinateSystem 0 3 737 738 739 958
// Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
169
inline EggCoordinateSystem::EggCoordinateSystem(CoordinateSystem value = (CS_default));
inline EggCoordinateSystem::EggCoordinateSystem(EggCoordinateSystem const &copy);

1677 9 set_value 4 1955 30 EggCoordinateSystem::set_value 0 1 740 226
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline void EggCoordinateSystem::set_value(CoordinateSystem value);

1678 9 get_value 4 1955 30 EggCoordinateSystem::get_value 0 1 741 226
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem EggCoordinateSystem::get_value(void) const;

1679 14 get_class_type 4 1955 35 EggCoordinateSystem::get_class_type 0 1 742 0
60
static TypeHandle EggCoordinateSystem::get_class_type(void);

1680 20 ~EggCoordinateSystem 4 1955 41 EggCoordinateSystem::~EggCoordinateSystem 0 0 0
48
EggCoordinateSystem::~EggCoordinateSystem(void);

1681 10 operator = 4 1956 20 EggCurve::operator = 0 1 743 230
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggCurve &EggCurve::operator =(EggCurve const &copy);

1682 10 set_subdiv 4 1956 20 EggCurve::set_subdiv 0 1 744 559
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
////////////////////////////////////////////////////////////////////
45
inline void EggCurve::set_subdiv(int subdiv);

1683 10 get_subdiv 4 1956 20 EggCurve::get_subdiv 0 1 745 335
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
////////////////////////////////////////////////////////////////////
44
inline int EggCurve::get_subdiv(void) const;

1684 14 set_curve_type 4 1956 24 EggCurve::set_curve_type 0 1 746 367
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
////////////////////////////////////////////////////////////////////
63
inline void EggCurve::set_curve_type(EggCurve::CurveType type);

1685 14 get_curve_type 4 1956 24 EggCurve::get_curve_type 0 1 747 261
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
////////////////////////////////////////////////////////////////////
64
inline EggCurve::CurveType EggCurve::get_curve_type(void) const;

1686 17 string_curve_type 4 1956 27 EggCurve::string_curve_type 0 1 748 412
////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
////////////////////////////////////////////////////////////////////
91
static EggCurve::CurveType EggCurve::string_curve_type(basic_string< char > const &string);

1687 14 get_class_type 4 1956 24 EggCurve::get_class_type 0 1 749 0
49
static TypeHandle EggCurve::get_class_type(void);

1688 9 ~EggCurve 4 1956 19 EggCurve::~EggCurve 0 0 0
26
EggCurve::~EggCurve(void);

1689 20 EggExternalReference 4 1958 42 EggExternalReference::EggExternalReference 0 2 750 751 465
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
EggExternalReference::EggExternalReference(basic_string< char > const &node_name, basic_string< char > const &filename);
EggExternalReference::EggExternalReference(EggExternalReference const &copy);

1690 10 operator = 4 1958 32 EggExternalReference::operator = 0 1 752 242
////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggExternalReference &EggExternalReference::operator =(EggExternalReference const &copy);

1691 14 get_class_type 4 1958 36 EggExternalReference::get_class_type 0 1 753 0
61
static TypeHandle EggExternalReference::get_class_type(void);

1692 21 ~EggExternalReference 4 1958 43 EggExternalReference::~EggExternalReference 0 0 0
50
EggExternalReference::~EggExternalReference(void);

1693 5 clear 4 1959 24 EggNameUniquifier::clear 0 1 754 313
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
////////////////////////////////////////////////////////////////////
36
void EggNameUniquifier::clear(void);

1694 8 uniquify 4 1959 27 EggNameUniquifier::uniquify 0 1 755 269
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
////////////////////////////////////////////////////////////////////
48
void EggNameUniquifier::uniquify(EggNode *node);

1695 8 get_node 4 1959 27 EggNameUniquifier::get_node 0 1 756 341
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
////////////////////////////////////////////////////////////////////
115
EggNode *EggNameUniquifier::get_node(basic_string< char > const &category, basic_string< char > const &name) const;

1696 8 has_name 4 1959 27 EggNameUniquifier::has_name 0 1 757 332
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
////////////////////////////////////////////////////////////////////
111
bool EggNameUniquifier::has_name(basic_string< char > const &category, basic_string< char > const &name) const;

1697 8 add_name 4 1959 27 EggNameUniquifier::add_name 0 2 758 759 477
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
////////////////////////////////////////////////////////////////////
136
bool EggNameUniquifier::add_name(basic_string< char > const &category, basic_string< char > const &name, EggNode *node = ((void *)(0)));

1698 12 get_category 4 1959 31 EggNameUniquifier::get_category 0 1 760 0
80
virtual basic_string< char > EggNameUniquifier::get_category(EggNode *node) = 0;

1699 11 filter_name 4 1959 30 EggNameUniquifier::filter_name 0 1 761 487
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
////////////////////////////////////////////////////////////////////
75
virtual basic_string< char > EggNameUniquifier::filter_name(EggNode *node);

1700 13 generate_name 4 1959 32 EggNameUniquifier::generate_name 0 1 762 682
////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
////////////////////////////////////////////////////////////////////
126
virtual basic_string< char > EggNameUniquifier::generate_name(EggNode *node, basic_string< char > const &category, int index);

1701 14 get_class_type 4 1959 33 EggNameUniquifier::get_class_type 0 1 763 0
58
static TypeHandle EggNameUniquifier::get_class_type(void);

1702 18 EggGroupUniquifier 4 1960 38 EggGroupUniquifier::EggGroupUniquifier 0 2 764 765 530
////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
////////////////////////////////////////////////////////////////////
64
EggGroupUniquifier::EggGroupUniquifier(bool filter_names = (1));

1703 14 get_class_type 4 1960 34 EggGroupUniquifier::get_class_type 0 1 766 0
59
static TypeHandle EggGroupUniquifier::get_class_type(void);

1704 19 ~EggGroupUniquifier 4 1960 39 EggGroupUniquifier::~EggGroupUniquifier 0 0 0
46
EggGroupUniquifier::~EggGroupUniquifier(void);

1705 7 EggLine 4 1961 16 EggLine::EggLine 0 3 767 768 769 922
// Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
111
inline EggLine::EggLine(basic_string< char > const &name = (""));
inline EggLine::EggLine(EggLine const &copy);

1706 10 operator = 4 1961 19 EggLine::operator = 0 1 770 229
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline EggLine &EggLine::operator =(EggLine const &copy);

1707 9 has_thick 4 1961 18 EggLine::has_thick 0 1 771 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline bool EggLine::has_thick(void) const;

1708 9 get_thick 4 1961 18 EggLine::get_thick 0 1 772 328
////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
45
inline double EggLine::get_thick(void) const;

1709 9 set_thick 4 1961 18 EggLine::set_thick 0 1 773 217
////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggLine::set_thick(double thick);

1710 11 clear_thick 4 1961 20 EggLine::clear_thick 0 1 774 219
////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline void EggLine::clear_thick(void);

1711 14 get_class_type 4 1961 23 EggLine::get_class_type 0 1 775 0
48
static TypeHandle EggLine::get_class_type(void);

1712 21 EggMaterialCollection 4 1962 44 EggMaterialCollection::EggMaterialCollection 0 2 776 777 467
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
132
EggMaterialCollection::EggMaterialCollection(void);
EggMaterialCollection::EggMaterialCollection(EggMaterialCollection const &copy);

1713 10 operator = 4 1962 33 EggMaterialCollection::operator = 0 1 778 243
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
EggMaterialCollection &EggMaterialCollection::operator =(EggMaterialCollection const &copy);

1714 22 ~EggMaterialCollection 4 1962 45 EggMaterialCollection::~EggMaterialCollection 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
EggMaterialCollection::~EggMaterialCollection(void);

1715 5 clear 4 1962 28 EggMaterialCollection::clear 0 1 779 267
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
////////////////////////////////////////////////////////////////////
40
void EggMaterialCollection::clear(void);

1716 17 extract_materials 4 1962 40 EggMaterialCollection::extract_materials 0 1 780 483
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
////////////////////////////////////////////////////////////////////
65
int EggMaterialCollection::extract_materials(EggGroupNode *node);

1717 19 find_used_materials 4 1962 42 EggMaterialCollection::find_used_materials 0 1 781 1402
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
////////////////////////////////////////////////////////////////////
62
int EggMaterialCollection::find_used_materials(EggNode *node);

1718 23 remove_unused_materials 4 1962 46 EggMaterialCollection::remove_unused_materials 0 1 782 574
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
67
void EggMaterialCollection::remove_unused_materials(EggNode *node);

1719 29 collapse_equivalent_materials 4 1962 52 EggMaterialCollection::collapse_equivalent_materials 0 2 783 784 1793
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
219
int EggMaterialCollection::collapse_equivalent_materials(int eq, EggGroupNode *node);
int EggMaterialCollection::collapse_equivalent_materials(int eq, map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > &removed);

1720 17 replace_materials 4 1962 40 EggMaterialCollection::replace_materials 0 1 785 606
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
147
static void EggMaterialCollection::replace_materials(EggGroupNode *node, map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const &replace);

1721 14 uniquify_mrefs 4 1962 37 EggMaterialCollection::uniquify_mrefs 0 1 786 386
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
49
void EggMaterialCollection::uniquify_mrefs(void);

1722 12 sort_by_mref 4 1962 35 EggMaterialCollection::sort_by_mref 0 1 787 406
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
47
void EggMaterialCollection::sort_by_mref(void);

1723 12 add_material 4 1962 35 EggMaterialCollection::add_material 0 1 788 413
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
64
bool EggMaterialCollection::add_material(EggMaterial *material);

1724 15 remove_material 4 1962 38 EggMaterialCollection::remove_material 0 1 789 414
////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
67
bool EggMaterialCollection::remove_material(EggMaterial *material);

1725 22 create_unique_material 4 1962 45 EggMaterialCollection::create_unique_material 0 1 790 700
// create_unique_material() creates a new material if there is not
// already one equivalent (according to eq, see
// EggMaterial::is_equivalent_to()) to the indicated material, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
92
EggMaterial *EggMaterialCollection::create_unique_material(EggMaterial const &copy, int eq);

1726 9 find_mref 4 1962 32 EggMaterialCollection::find_mref 0 1 791 377
// Find a material with a particular MRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
////////////////////////////////////////////////////////////////////
91
EggMaterial *EggMaterialCollection::find_mref(basic_string< char > const &mref_name) const;

1727 10 EggPolygon 4 1963 22 EggPolygon::EggPolygon 0 3 792 793 794 937
// Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline EggPolygon::EggPolygon(basic_string< char > const &name = (""));
inline EggPolygon::EggPolygon(EggPolygon const &copy);

1728 10 operator = 4 1963 22 EggPolygon::operator = 0 1 795 235
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggPolygon &EggPolygon::operator =(EggPolygon const &copy);

1729 16 calculate_normal 4 1963 28 EggPolygon::calculate_normal 0 2 796 797 678
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
////////////////////////////////////////////////////////////////////
95
bool EggPolygon::calculate_normal(LVector3d &result, CoordinateSystem cs = (CS_default)) const;

1730 9 is_planar 4 1963 21 EggPolygon::is_planar 0 1 798 327
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
////////////////////////////////////////////////////////////////////
39
bool EggPolygon::is_planar(void) const;

1731 24 recompute_polygon_normal 4 1963 36 EggPolygon::recompute_polygon_normal 0 2 799 800 480
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
////////////////////////////////////////////////////////////////////
85
inline bool EggPolygon::recompute_polygon_normal(CoordinateSystem cs = (CS_default));

1732 16 triangulate_into 4 1963 28 EggPolygon::triangulate_into 0 1 801 1053
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
90
inline bool EggPolygon::triangulate_into(EggGroupNode *container, bool convex_also) const;

1733 20 triangulate_in_place 4 1963 32 EggPolygon::triangulate_in_place 0 1 802 786
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
////////////////////////////////////////////////////////////////////
75
PointerTo< EggPolygon > EggPolygon::triangulate_in_place(bool convex_also);

1734 14 get_class_type 4 1963 26 EggPolygon::get_class_type 0 1 803 0
51
static TypeHandle EggPolygon::get_class_type(void);

1735 11 ~EggPolygon 4 1963 23 EggPolygon::~EggPolygon 0 0 0
30
EggPolygon::~EggPolygon(void);

1736 13 EggNurbsCurve 4 1964 28 EggNurbsCurve::EggNurbsCurve 0 3 804 805 806 940
// Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline EggNurbsCurve::EggNurbsCurve(basic_string< char > const &name = (""));
inline EggNurbsCurve::EggNurbsCurve(EggNurbsCurve const &copy);

1737 10 operator = 4 1964 25 EggNurbsCurve::operator = 0 1 807 235
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
75
inline EggNurbsCurve &EggNurbsCurve::operator =(EggNurbsCurve const &copy);

1738 5 setup 4 1964 20 EggNurbsCurve::setup 0 1 808 588
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
////////////////////////////////////////////////////////////////////
52
void EggNurbsCurve::setup(int order, int num_knots);

1739 9 set_order 4 1964 24 EggNurbsCurve::set_order 0 1 809 542
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
////////////////////////////////////////////////////////////////////
48
inline void EggNurbsCurve::set_order(int order);

1740 13 set_num_knots 4 1964 28 EggNurbsCurve::set_num_knots 0 1 810 665
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
////////////////////////////////////////////////////////////////////
43
void EggNurbsCurve::set_num_knots(int num);

1741 8 set_knot 4 1964 23 EggNurbsCurve::set_knot 0 1 811 452
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
////////////////////////////////////////////////////////////////////
57
inline void EggNurbsCurve::set_knot(int k, double value);

1742 8 is_valid 4 1964 23 EggNurbsCurve::is_valid 0 1 812 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggNurbsCurve::is_valid(void) const;

1743 9 get_order 4 1964 24 EggNurbsCurve::get_order 0 1 813 470
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
////////////////////////////////////////////////////////////////////
48
inline int EggNurbsCurve::get_order(void) const;

1744 10 get_degree 4 1964 25 EggNurbsCurve::get_degree 0 1 814 310
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
49
inline int EggNurbsCurve::get_degree(void) const;

1745 13 get_num_knots 4 1964 28 EggNurbsCurve::get_num_knots 0 1 815 253
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsCurve::get_num_knots(void) const;

1746 11 get_num_cvs 4 1964 26 EggNurbsCurve::get_num_cvs 0 1 816 669
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
////////////////////////////////////////////////////////////////////
50
inline int EggNurbsCurve::get_num_cvs(void) const;

1747 9 is_closed 4 1964 24 EggNurbsCurve::is_closed 0 1 817 458
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
////////////////////////////////////////////////////////////////////
42
bool EggNurbsCurve::is_closed(void) const;

1748 8 get_knot 4 1964 23 EggNurbsCurve::get_knot 0 1 818 255
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
////////////////////////////////////////////////////////////////////
51
inline double EggNurbsCurve::get_knot(int k) const;

1749 14 get_class_type 4 1964 29 EggNurbsCurve::get_class_type 0 1 819 0
54
static TypeHandle EggNurbsCurve::get_class_type(void);

1750 14 ~EggNurbsCurve 4 1964 29 EggNurbsCurve::~EggNurbsCurve 0 0 0
36
EggNurbsCurve::~EggNurbsCurve(void);

1751 10 operator = 4 1965 22 EggSurface::operator = 0 1 820 232
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline EggSurface &EggSurface::operator =(EggSurface const &copy);

1752 12 set_u_subdiv 4 1965 24 EggSurface::set_u_subdiv 0 1 821 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_u_subdiv(int subdiv);

1753 12 get_u_subdiv 4 1965 24 EggSurface::get_u_subdiv 0 1 822 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_u_subdiv(void) const;

1754 12 set_v_subdiv 4 1965 24 EggSurface::set_v_subdiv 0 1 823 586
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
////////////////////////////////////////////////////////////////////
49
inline void EggSurface::set_v_subdiv(int subdiv);

1755 12 get_v_subdiv 4 1965 24 EggSurface::get_v_subdiv 0 1 824 375
////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
////////////////////////////////////////////////////////////////////
48
inline int EggSurface::get_v_subdiv(void) const;

1756 14 get_class_type 4 1965 26 EggSurface::get_class_type 0 1 825 0
51
static TypeHandle EggSurface::get_class_type(void);

1757 11 ~EggSurface 4 1965 23 EggSurface::~EggSurface 0 0 0
30
EggSurface::~EggSurface(void);

1758 15 EggNurbsSurface 4 1966 32 EggNurbsSurface::EggNurbsSurface 0 3 826 827 828 946
// Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
151
inline EggNurbsSurface::EggNurbsSurface(basic_string< char > const &name = (""));
inline EggNurbsSurface::EggNurbsSurface(EggNurbsSurface const &copy);

1759 10 operator = 4 1966 27 EggNurbsSurface::operator = 0 1 829 237
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
81
inline EggNurbsSurface &EggNurbsSurface::operator =(EggNurbsSurface const &copy);

1760 5 setup 4 1966 22 EggNurbsSurface::setup 0 1 830 647
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::setup
//       Access: Public
//  Description: Prepares a new surface definition with the indicated
//               order and number of knots in each dimension.  This
//               also implies a particular number of vertices in each
//               dimension as well (the number of knots minus the
//               order), but it is up to the user to add the correct
//               number of vertices to the surface by repeatedly
//               calling push_back().
////////////////////////////////////////////////////////////////////
88
void EggNurbsSurface::setup(int u_order, int v_order, int num_u_knots, int num_v_knots);

1761 11 set_u_order 4 1966 28 EggNurbsSurface::set_u_order 0 1 831 586
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_order
//       Access: Public
//  Description: Directly changes the order in the U direction to the
//               indicated value (which must be an integer in the
//               range 1 <= u_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
////////////////////////////////////////////////////////////////////
54
inline void EggNurbsSurface::set_u_order(int u_order);

1762 11 set_v_order 4 1966 28 EggNurbsSurface::set_v_order 0 1 832 586
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_order
//       Access: Public
//  Description: Directly changes the order in the V direction to the
//               indicated value (which must be an integer in the
//               range 1 <= v_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
////////////////////////////////////////////////////////////////////
54
inline void EggNurbsSurface::set_v_order(int v_order);

1763 15 set_num_u_knots 4 1966 32 EggNurbsSurface::set_num_u_knots 0 1 833 690
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_u_knots
//       Access: Public
//  Description: Directly changes the number of knots in the U
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
////////////////////////////////////////////////////////////////////
47
void EggNurbsSurface::set_num_u_knots(int num);

1764 15 set_num_v_knots 4 1966 32 EggNurbsSurface::set_num_v_knots 0 1 834 690
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_v_knots
//       Access: Public
//  Description: Directly changes the number of knots in the V
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
////////////////////////////////////////////////////////////////////
47
void EggNurbsSurface::set_num_v_knots(int num);

1765 10 set_u_knot 4 1966 27 EggNurbsSurface::set_u_knot 0 1 835 462
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_u_knots(),
//               and the value must be in the range get_u_knot(k - 1)
//               <= value <= get_u_knot(k + 1).
////////////////////////////////////////////////////////////////////
61
inline void EggNurbsSurface::set_u_knot(int k, double value);

1766 10 set_v_knot 4 1966 27 EggNurbsSurface::set_v_knot 0 1 836 462
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_v_knots(),
//               and the value must be in the range get_v_knot(k - 1)
//               <= value <= get_v_knot(k + 1).
////////////////////////////////////////////////////////////////////
61
inline void EggNurbsSurface::set_v_knot(int k, double value);

1767 6 set_cv 4 1966 23 EggNurbsSurface::set_cv 0 1 837 456
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_cv
//       Access: Public
//  Description: Redefines the control vertex associated with a
//               particular u, v coordinate pair.  This is just a
//               shorthand to access the EggPrimitive's normal vertex
//               assignment for a 2-d control vertex.
////////////////////////////////////////////////////////////////////
71
inline void EggNurbsSurface::set_cv(int ui, int vi, EggVertex *vertex);

1768 8 is_valid 4 1966 25 EggNurbsSurface::is_valid 0 1 838 460
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
////////////////////////////////////////////////////////////////////
43
bool EggNurbsSurface::is_valid(void) const;

1769 11 get_u_order 4 1966 28 EggNurbsSurface::get_u_order 0 1 839 511
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_order
//       Access: Public
//  Description: Returns the order of the surface in the U direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_u_order(void) const;

1770 11 get_v_order 4 1966 28 EggNurbsSurface::get_v_order 0 1 840 511
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_order
//       Access: Public
//  Description: Returns the order of the surface in the V direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_v_order(void) const;

1771 12 get_u_degree 4 1966 29 EggNurbsSurface::get_u_degree 0 1 841 334
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_degree
//       Access: Public
//  Description: Returns the degree of the surface in the U direction.
//               For a typical NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
53
inline int EggNurbsSurface::get_u_degree(void) const;

1772 12 get_v_degree 4 1966 29 EggNurbsSurface::get_v_degree 0 1 842 334
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_degree
//       Access: Public
//  Description: Returns the degree of the surface in the V direction.
//               for a typical NURBS, the degree is 3.
////////////////////////////////////////////////////////////////////
53
inline int EggNurbsSurface::get_v_degree(void) const;

1773 15 get_num_u_knots 4 1966 32 EggNurbsSurface::get_num_u_knots 0 1 843 276
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_knots
//       Access: Public
//  Description: Returns the number of knots in the U direction.
////////////////////////////////////////////////////////////////////
56
inline int EggNurbsSurface::get_num_u_knots(void) const;

1774 15 get_num_v_knots 4 1966 32 EggNurbsSurface::get_num_v_knots 0 1 844 276
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_knots
//       Access: Public
//  Description: Returns the number of knots in the V direction.
////////////////////////////////////////////////////////////////////
56
inline int EggNurbsSurface::get_num_v_knots(void) const;

1775 13 get_num_u_cvs 4 1966 30 EggNurbsSurface::get_num_u_cvs 0 1 845 657
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the U direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
////////////////////////////////////////////////////////////////////
54
inline int EggNurbsSurface::get_num_u_cvs(void) const;

1776 13 get_num_v_cvs 4 1966 30 EggNurbsSurface::get_num_v_cvs 0 1 846 657
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the V direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
////////////////////////////////////////////////////////////////////
54
inline int EggNurbsSurface::get_num_v_cvs(void) const;

1777 11 get_num_cvs 4 1966 28 EggNurbsSurface::get_num_cvs 0 1 847 679
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the surface.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the surface.  (However, if the number of vertices in
//               the surface are wrong, the surface is invalid.)
////////////////////////////////////////////////////////////////////
52
inline int EggNurbsSurface::get_num_cvs(void) const;

1778 11 get_u_index 4 1966 28 EggNurbsSurface::get_u_index 0 1 848 538
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_index
//       Access: Public
//  Description: Returns the U index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the U index number that
//               corresponds to the nth vertex in the list.
////////////////////////////////////////////////////////////////////
64
inline int EggNurbsSurface::get_u_index(int vertex_index) const;

1779 11 get_v_index 4 1966 28 EggNurbsSurface::get_v_index 0 1 849 538
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_index
//       Access: Public
//  Description: Returns the V index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the V index number that
//               corresponds to the nth vertex in the list.
////////////////////////////////////////////////////////////////////
64
inline int EggNurbsSurface::get_v_index(int vertex_index) const;

1780 16 get_vertex_index 4 1966 33 EggNurbsSurface::get_vertex_index 0 1 850 344
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_vertex_index
//       Access: Public
//  Description: Returns the index number within the EggPrimitive's
//               list of the control vertex at position ui, vi.
////////////////////////////////////////////////////////////////////
67
inline int EggNurbsSurface::get_vertex_index(int ui, int vi) const;

1781 11 is_closed_u 4 1966 28 EggNurbsSurface::is_closed_u 0 1 851 503
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_u
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the U direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
////////////////////////////////////////////////////////////////////
46
bool EggNurbsSurface::is_closed_u(void) const;

1782 11 is_closed_v 4 1966 28 EggNurbsSurface::is_closed_v 0 1 852 503
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_v
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the V direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
////////////////////////////////////////////////////////////////////
46
bool EggNurbsSurface::is_closed_v(void) const;

1783 10 get_u_knot 4 1966 27 EggNurbsSurface::get_u_knot 0 1 853 295
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the U
//               direction.
////////////////////////////////////////////////////////////////////
55
inline double EggNurbsSurface::get_u_knot(int k) const;

1784 10 get_v_knot 4 1966 27 EggNurbsSurface::get_v_knot 0 1 854 295
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the V
//               direction.
////////////////////////////////////////////////////////////////////
55
inline double EggNurbsSurface::get_v_knot(int k) const;

1785 6 get_cv 4 1966 23 EggNurbsSurface::get_cv 0 1 855 294
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_cv
//       Access: Public
//  Description: Returns the control vertex at the indicate U, V
//               position.
////////////////////////////////////////////////////////////////////
64
inline EggVertex *EggNurbsSurface::get_cv(int ui, int vi) const;

1786 21 get_curves_on_surface 20 1966 38 EggNurbsSurface::get_curves_on_surface 0 1 857 82
getter for list< PointerTo< EggNurbsCurve > > EggNurbsSurface::_curves_on_surface;
93
list< PointerTo< EggNurbsCurve > > const &EggNurbsSurface::get_curves_on_surface(void) const;

1787 9 get_trims 20 1966 26 EggNurbsSurface::get_trims 0 1 858 86
getter for list< list< list< PointerTo< EggNurbsCurve > > > > EggNurbsSurface::_trims;
97
list< list< list< PointerTo< EggNurbsCurve > > > > const &EggNurbsSurface::get_trims(void) const;

1788 14 get_class_type 4 1966 31 EggNurbsSurface::get_class_type 0 1 856 0
56
static TypeHandle EggNurbsSurface::get_class_type(void);

1789 16 ~EggNurbsSurface 4 1966 33 EggNurbsSurface::~EggNurbsSurface 0 0 0
40
EggNurbsSurface::~EggNurbsSurface(void);

1790 8 EggPoint 4 1969 18 EggPoint::EggPoint 0 3 859 860 861 925
// Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline EggPoint::EggPoint(basic_string< char > const &name = (""));
inline EggPoint::EggPoint(EggPoint const &copy);

1791 10 operator = 4 1969 20 EggPoint::operator = 0 1 862 230
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggPoint &EggPoint::operator =(EggPoint const &copy);

1792 9 has_thick 4 1969 19 EggPoint::has_thick 0 1 863 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline bool EggPoint::has_thick(void) const;

1793 9 get_thick 4 1969 19 EggPoint::get_thick 0 1 864 330
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
////////////////////////////////////////////////////////////////////
46
inline double EggPoint::get_thick(void) const;

1794 9 set_thick 4 1969 19 EggPoint::set_thick 0 1 865 218
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::set_thick(double thick);

1795 11 clear_thick 4 1969 21 EggPoint::clear_thick 0 1 866 220
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline void EggPoint::clear_thick(void);

1796 15 has_perspective 4 1969 25 EggPoint::has_perspective 0 1 867 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::has_perspective(void) const;

1797 15 get_perspective 4 1969 25 EggPoint::get_perspective 0 1 868 370
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
////////////////////////////////////////////////////////////////////
50
inline bool EggPoint::get_perspective(void) const;

1798 15 set_perspective 4 1969 25 EggPoint::set_perspective 0 1 869 224
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void EggPoint::set_perspective(bool perspective);

1799 17 clear_perspective 4 1969 27 EggPoint::clear_perspective 0 1 870 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggPoint::clear_perspective(void);

1800 14 get_class_type 4 1969 24 EggPoint::get_class_type 0 1 871 0
49
static TypeHandle EggPoint::get_class_type(void);

1801 9 ~EggPoint 4 1969 19 EggPoint::~EggPoint 0 0 0
26
EggPoint::~EggPoint(void);

1802 15 EggPolysetMaker 4 1970 32 EggPolysetMaker::EggPolysetMaker 0 1 872 225
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
39
EggPolysetMaker::EggPolysetMaker(void);

1803 14 set_properties 4 1970 31 EggPolysetMaker::set_properties 0 1 873 609
////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
////////////////////////////////////////////////////////////////////
53
void EggPolysetMaker::set_properties(int properties);

1804 14 get_class_type 4 1970 31 EggPolysetMaker::get_class_type 0 1 874 0
56
static TypeHandle EggPolysetMaker::get_class_type(void);

1805 16 ~EggPolysetMaker 4 1970 33 EggPolysetMaker::~EggPolysetMaker 0 0 0
40
EggPolysetMaker::~EggPolysetMaker(void);

1806 17 EggPoolUniquifier 4 1973 36 EggPoolUniquifier::EggPoolUniquifier 0 1 875 226
////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
EggPoolUniquifier::EggPoolUniquifier(void);

1807 14 get_class_type 4 1973 33 EggPoolUniquifier::get_class_type 0 1 876 0
58
static TypeHandle EggPoolUniquifier::get_class_type(void);

1808 18 ~EggPoolUniquifier 4 1973 37 EggPoolUniquifier::~EggPoolUniquifier 0 0 0
44
EggPoolUniquifier::~EggPoolUniquifier(void);

1809 12 EggSAnimData 4 1974 26 EggSAnimData::EggSAnimData 0 3 877 878 879 937
// Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
136
inline EggSAnimData::EggSAnimData(basic_string< char > const &name = (""));
inline EggSAnimData::EggSAnimData(EggSAnimData const &copy);

1810 10 operator = 4 1974 24 EggSAnimData::operator = 0 1 880 234
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline EggSAnimData &EggSAnimData::operator =(EggSAnimData const &copy);

1811 12 get_num_rows 4 1974 26 EggSAnimData::get_num_rows 0 1 881 326
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
////////////////////////////////////////////////////////////////////
50
inline int EggSAnimData::get_num_rows(void) const;

1812 9 get_value 4 1974 23 EggSAnimData::get_value 0 1 882 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
53
inline double EggSAnimData::get_value(int row) const;

1813 9 set_value 4 1974 23 EggSAnimData::set_value 0 1 883 329
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
////////////////////////////////////////////////////////////////////
59
inline void EggSAnimData::set_value(int row, double value);

1814 8 optimize 4 1974 22 EggSAnimData::optimize 0 1 884 322
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
////////////////////////////////////////////////////////////////////
34
void EggSAnimData::optimize(void);

1815 14 get_class_type 4 1974 28 EggSAnimData::get_class_type 0 1 885 0
53
static TypeHandle EggSAnimData::get_class_type(void);

1816 13 ~EggSAnimData 4 1974 27 EggSAnimData::~EggSAnimData 0 0 0
34
EggSAnimData::~EggSAnimData(void);

1817 8 EggTable 4 1975 18 EggTable::EggTable 0 3 886 887 888 925
// Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline EggTable::EggTable(basic_string< char > const &name = (""));
inline EggTable::EggTable(EggTable const &copy);

1818 10 operator = 4 1975 20 EggTable::operator = 0 1 889 230
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline EggTable &EggTable::operator =(EggTable const &copy);

1819 14 set_table_type 4 1975 24 EggTable::set_table_type 0 1 890 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline void EggTable::set_table_type(EggTable::TableType type);

1820 14 get_table_type 4 1975 24 EggTable::get_table_type 0 1 891 220
////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline EggTable::TableType EggTable::get_table_type(void) const;

1821 13 has_transform 4 1975 23 EggTable::has_transform 0 1 892 313
////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
////////////////////////////////////////////////////////////////////
41
bool EggTable::has_transform(void) const;

1822 17 string_table_type 4 1975 27 EggTable::string_table_type 0 1 893 412
////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
////////////////////////////////////////////////////////////////////
91
static EggTable::TableType EggTable::string_table_type(basic_string< char > const &string);

1823 14 get_class_type 4 1975 24 EggTable::get_class_type 0 1 894 0
49
static TypeHandle EggTable::get_class_type(void);

1824 9 ~EggTable 4 1975 19 EggTable::~EggTable 0 0 0
26
EggTable::~EggTable(void);

1825 20 EggTextureCollection 4 1977 42 EggTextureCollection::EggTextureCollection 0 2 895 896 465
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
EggTextureCollection::EggTextureCollection(void);
EggTextureCollection::EggTextureCollection(EggTextureCollection const &copy);

1826 10 operator = 4 1977 32 EggTextureCollection::operator = 0 1 897 242
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
EggTextureCollection &EggTextureCollection::operator =(EggTextureCollection const &copy);

1827 21 ~EggTextureCollection 4 1977 43 EggTextureCollection::~EggTextureCollection 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
EggTextureCollection::~EggTextureCollection(void);

1828 5 clear 4 1977 27 EggTextureCollection::clear 0 1 898 265
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
////////////////////////////////////////////////////////////////////
39
void EggTextureCollection::clear(void);

1829 16 extract_textures 4 1977 38 EggTextureCollection::extract_textures 0 1 899 479
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
////////////////////////////////////////////////////////////////////
63
int EggTextureCollection::extract_textures(EggGroupNode *node);

1830 8 is_empty 4 1977 30 EggTextureCollection::is_empty 0 1 900 322
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
48
bool EggTextureCollection::is_empty(void) const;

1831 16 get_num_textures 4 1977 38 EggTextureCollection::get_num_textures 0 1 901 290
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
55
int EggTextureCollection::get_num_textures(void) const;

1832 11 get_texture 4 1977 33 EggTextureCollection::get_texture 0 1 902 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
63
EggTexture *EggTextureCollection::get_texture(int index) const;

1833 18 find_used_textures 4 1977 40 EggTextureCollection::find_used_textures 0 1 903 1765
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
////////////////////////////////////////////////////////////////////
60
int EggTextureCollection::find_used_textures(EggNode *node);

1834 22 remove_unused_textures 4 1977 44 EggTextureCollection::remove_unused_textures 0 1 904 570
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
////////////////////////////////////////////////////////////////////
65
void EggTextureCollection::remove_unused_textures(EggNode *node);

1835 28 collapse_equivalent_textures 4 1977 50 EggTextureCollection::collapse_equivalent_textures 0 2 905 906 1777
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
////////////////////////////////////////////////////////////////////
213
int EggTextureCollection::collapse_equivalent_textures(int eq, EggGroupNode *node);
int EggTextureCollection::collapse_equivalent_textures(int eq, map< PointerTo< EggTexture >, PointerTo< EggTexture > > &removed);

1836 16 replace_textures 4 1977 38 EggTextureCollection::replace_textures 0 1 907 601
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
////////////////////////////////////////////////////////////////////
143
static void EggTextureCollection::replace_textures(EggGroupNode *node, map< PointerTo< EggTexture >, PointerTo< EggTexture > > const &replace);

1837 14 uniquify_trefs 4 1977 36 EggTextureCollection::uniquify_trefs 0 1 908 384
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
////////////////////////////////////////////////////////////////////
48
void EggTextureCollection::uniquify_trefs(void);

1838 12 sort_by_tref 4 1977 34 EggTextureCollection::sort_by_tref 0 1 909 404
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
46
void EggTextureCollection::sort_by_tref(void);

1839 16 sort_by_basename 4 1977 38 EggTextureCollection::sort_by_basename 0 1 910 471
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
////////////////////////////////////////////////////////////////////
50
void EggTextureCollection::sort_by_basename(void);

1840 11 operator [] 4 1977 33 EggTextureCollection::operator [] 0 1 911 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::operator []
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
////////////////////////////////////////////////////////////////////
75
inline EggTexture *EggTextureCollection::operator [](unsigned int n) const;

1841 4 size 4 1977 26 EggTextureCollection::size 0 1 912 278
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::size
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
////////////////////////////////////////////////////////////////////
59
inline unsigned int EggTextureCollection::size(void) const;

1842 11 add_texture 4 1977 33 EggTextureCollection::add_texture 0 1 913 409
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
////////////////////////////////////////////////////////////////////
60
bool EggTextureCollection::add_texture(EggTexture *texture);

1843 14 remove_texture 4 1977 36 EggTextureCollection::remove_texture 0 1 914 410
////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
////////////////////////////////////////////////////////////////////
63
bool EggTextureCollection::remove_texture(EggTexture *texture);

1844 21 create_unique_texture 4 1977 43 EggTextureCollection::create_unique_texture 0 1 915 691
// create_unique_texture() creates a new texture if there is not
// already one equivalent (according to eq, see
// EggTexture::is_equivalent_to()) to the indicated texture, or
// returns the existing one if there is.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
////////////////////////////////////////////////////////////////////
88
EggTexture *EggTextureCollection::create_unique_texture(EggTexture const &copy, int eq);

1845 9 find_tref 4 1977 31 EggTextureCollection::find_tref 0 1 916 373
// Find a texture with a particular TRef name.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
89
EggTexture *EggTextureCollection::find_tref(basic_string< char > const &tref_name) const;

1846 13 find_filename 4 1977 35 EggTextureCollection::find_filename 0 1 917 375
// Find a texture with a particular filename.

////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
////////////////////////////////////////////////////////////////////
80
EggTexture *EggTextureCollection::find_filename(Filename const &filename) const;

1847 14 EggTriangleFan 4 1978 30 EggTriangleFan::EggTriangleFan 0 3 918 919 920 949
// Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
146
inline EggTriangleFan::EggTriangleFan(basic_string< char > const &name = (""));
inline EggTriangleFan::EggTriangleFan(EggTriangleFan const &copy);

1848 10 operator = 4 1978 26 EggTriangleFan::operator = 0 1 921 239
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggTriangleFan &EggTriangleFan::operator =(EggTriangleFan const &copy);

1849 14 get_class_type 4 1978 30 EggTriangleFan::get_class_type 0 1 922 0
55
static TypeHandle EggTriangleFan::get_class_type(void);

1850 16 EggTriangleStrip 4 1979 34 EggTriangleStrip::EggTriangleStrip 0 3 923 924 925 955
// Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
156
inline EggTriangleStrip::EggTriangleStrip(basic_string< char > const &name = (""));
inline EggTriangleStrip::EggTriangleStrip(EggTriangleStrip const &copy);

1851 10 operator = 4 1979 28 EggTriangleStrip::operator = 0 1 926 241
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
84
inline EggTriangleStrip &EggTriangleStrip::operator =(EggTriangleStrip const &copy);

1852 14 get_class_type 4 1979 32 EggTriangleStrip::get_class_type 0 1 927 0
57
static TypeHandle EggTriangleStrip::get_class_type(void);

1853 11 EggXfmSAnim 4 1980 24 EggXfmSAnim::EggXfmSAnim 0 5 928 929 930 931 932 1258
// Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
////////////////////////////////////////////////////////////////////
229
inline EggXfmSAnim::EggXfmSAnim(basic_string< char > const &name = (""), CoordinateSystem cs = (CS_default));
EggXfmSAnim::EggXfmSAnim(EggXfmAnimData const &convert_from);
inline EggXfmSAnim::EggXfmSAnim(EggXfmSAnim const &copy);

1854 10 operator = 4 1980 23 EggXfmSAnim::operator = 0 1 933 233
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline EggXfmSAnim &EggXfmSAnim::operator =(EggXfmSAnim const &copy);

1855 7 set_fps 4 1980 20 EggXfmSAnim::set_fps 0 1 934 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline void EggXfmSAnim::set_fps(double fps);

1856 9 clear_fps 4 1980 22 EggXfmSAnim::clear_fps 0 1 935 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void EggXfmSAnim::clear_fps(void);

1857 7 has_fps 4 1980 20 EggXfmSAnim::has_fps 0 1 936 216
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline bool EggXfmSAnim::has_fps(void) const;

1858 7 get_fps 4 1980 20 EggXfmSAnim::get_fps 0 1 937 262
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
////////////////////////////////////////////////////////////////////
47
inline double EggXfmSAnim::get_fps(void) const;

1859 9 set_order 4 1980 22 EggXfmSAnim::set_order 0 1 938 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline void EggXfmSAnim::set_order(basic_string< char > const &order);

1860 11 clear_order 4 1980 24 EggXfmSAnim::clear_order 0 1 939 220
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void EggXfmSAnim::clear_order(void);

1861 9 has_order 4 1980 22 EggXfmSAnim::has_order 0 1 940 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline bool EggXfmSAnim::has_order(void) const;

1862 9 get_order 4 1980 22 EggXfmSAnim::get_order 0 1 941 218
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &EggXfmSAnim::get_order(void) const;

1863 18 get_standard_order 4 1980 31 EggXfmSAnim::get_standard_order 0 1 942 448
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
80
static inline basic_string< char > const &EggXfmSAnim::get_standard_order(void);

1864 21 get_coordinate_system 4 1980 34 EggXfmSAnim::get_coordinate_system 0 1 943 589
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
71
inline CoordinateSystem EggXfmSAnim::get_coordinate_system(void) const;

1865 8 optimize 4 1980 21 EggXfmSAnim::optimize 0 1 944 290
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
////////////////////////////////////////////////////////////////////
33
void EggXfmSAnim::optimize(void);

1866 26 optimize_to_standard_order 4 1980 39 EggXfmSAnim::optimize_to_standard_order 0 1 945 512
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
////////////////////////////////////////////////////////////////////
51
void EggXfmSAnim::optimize_to_standard_order(void);

1867 9 normalize 4 1980 22 EggXfmSAnim::normalize 0 1 946 508
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
////////////////////////////////////////////////////////////////////
34
void EggXfmSAnim::normalize(void);

1868 12 get_num_rows 4 1980 25 EggXfmSAnim::get_num_rows 0 1 947 528
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
////////////////////////////////////////////////////////////////////
42
int EggXfmSAnim::get_num_rows(void) const;

1869 9 get_value 4 1980 22 EggXfmSAnim::get_value 0 1 948 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
////////////////////////////////////////////////////////////////////
59
void EggXfmSAnim::get_value(int row, LMatrix4d &mat) const;

1870 9 set_value 4 1980 22 EggXfmSAnim::set_value 0 1 949 716
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
////////////////////////////////////////////////////////////////////
59
bool EggXfmSAnim::set_value(int row, LMatrix4d const &mat);

1871 10 clear_data 4 1980 23 EggXfmSAnim::clear_data 0 1 950 316
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
////////////////////////////////////////////////////////////////////
42
inline void EggXfmSAnim::clear_data(void);

1872 8 add_data 4 1980 21 EggXfmSAnim::add_data 0 1 951 1669
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
////////////////////////////////////////////////////////////////////
49
bool EggXfmSAnim::add_data(LMatrix4d const &mat);

1873 18 add_component_data 4 1980 31 EggXfmSAnim::add_component_data 0 2 952 953 639
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
////////////////////////////////////////////////////////////////////
162
void EggXfmSAnim::add_component_data(basic_string< char > const &component_name, double value);
void EggXfmSAnim::add_component_data(int component, double value);

1874 18 compose_with_order 4 1980 31 EggXfmSAnim::compose_with_order 0 1 954 442
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
////////////////////////////////////////////////////////////////////
214
static void EggXfmSAnim::compose_with_order(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &trans, basic_string< char > const &order, CoordinateSystem cs);

1875 14 get_class_type 4 1980 27 EggXfmSAnim::get_class_type 0 1 955 0
52
static TypeHandle EggXfmSAnim::get_class_type(void);

1876 12 ~EggXfmSAnim 4 1980 25 EggXfmSAnim::~EggXfmSAnim 0 0 0
32
EggXfmSAnim::~EggXfmSAnim(void);

1877 14 EggXfmAnimData 4 1981 30 EggXfmAnimData::EggXfmAnimData 0 5 956 957 958 959 960 1270
// Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
////////////////////////////////////////////////////////////////////
247
inline EggXfmAnimData::EggXfmAnimData(basic_string< char > const &name = (""), CoordinateSystem cs = (CS_default));
EggXfmAnimData::EggXfmAnimData(EggXfmSAnim const &convert_from);
inline EggXfmAnimData::EggXfmAnimData(EggXfmAnimData const &copy);

1878 10 operator = 4 1981 26 EggXfmAnimData::operator = 0 1 961 236
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline EggXfmAnimData &EggXfmAnimData::operator =(EggXfmAnimData const &copy);

1879 9 set_order 4 1981 25 EggXfmAnimData::set_order 0 1 962 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void EggXfmAnimData::set_order(basic_string< char > const &order);

1880 11 clear_order 4 1981 27 EggXfmAnimData::clear_order 0 1 963 223
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void EggXfmAnimData::clear_order(void);

1881 9 has_order 4 1981 25 EggXfmAnimData::has_order 0 1 964 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline bool EggXfmAnimData::has_order(void) const;

1882 9 get_order 4 1981 25 EggXfmAnimData::get_order 0 1 965 221
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &EggXfmAnimData::get_order(void) const;

1883 18 get_standard_order 4 1981 34 EggXfmAnimData::get_standard_order 0 1 966 451
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
////////////////////////////////////////////////////////////////////
83
static inline basic_string< char > const &EggXfmAnimData::get_standard_order(void);

1884 12 set_contents 4 1981 28 EggXfmAnimData::set_contents 0 1 967 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
79
inline void EggXfmAnimData::set_contents(basic_string< char > const &contents);

1885 14 clear_contents 4 1981 30 EggXfmAnimData::clear_contents 0 1 968 226
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void EggXfmAnimData::clear_contents(void);

1886 12 has_contents 4 1981 28 EggXfmAnimData::has_contents 0 1 969 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline bool EggXfmAnimData::has_contents(void) const;

1887 12 get_contents 4 1981 28 EggXfmAnimData::get_contents 0 1 970 224
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
inline basic_string< char > const &EggXfmAnimData::get_contents(void) const;

1888 21 get_coordinate_system 4 1981 37 EggXfmAnimData::get_coordinate_system 0 1 971 592
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
////////////////////////////////////////////////////////////////////
74
inline CoordinateSystem EggXfmAnimData::get_coordinate_system(void) const;

1889 12 get_num_rows 4 1981 28 EggXfmAnimData::get_num_rows 0 1 972 265
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_rows(void) const;

1890 12 get_num_cols 4 1981 28 EggXfmAnimData::get_num_cols 0 1 973 393
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
////////////////////////////////////////////////////////////////////
52
inline int EggXfmAnimData::get_num_cols(void) const;

1891 9 get_value 4 1981 25 EggXfmAnimData::get_value 0 2 974 975 839
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
////////////////////////////////////////////////////////////////////
127
inline double EggXfmAnimData::get_value(int row, int col) const;
void EggXfmAnimData::get_value(int row, LMatrix4d &mat) const;

1892 14 get_class_type 4 1981 30 EggXfmAnimData::get_class_type 0 1 976 0
55
static TypeHandle EggXfmAnimData::get_class_type(void);

1893 15 ~EggXfmAnimData 4 1981 31 EggXfmAnimData::~EggXfmAnimData 0 0 0
38
EggXfmAnimData::~EggXfmAnimData(void);

976
1 14 Dtool_kAOMa5Wu 7 3 1982 0 14 Dtool_kAOMa5Wu 707 // Filename: eggUserData.I
// Created by:  drose (03Jun03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_kAOMEDMc 7 3 1982 0 14 Dtool_kAOMEDMc 225 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1983  
3 14 Dtool_kAOMDBa1 7 4 1982 0 14 Dtool_kAOMDBa1 233 ////////////////////////////////////////////////////////////////////
//     Function: EggUserData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1982  4 copy 1 1983  
4 14 Dtool_kAOMkdis 7 5 1986 0 14 Dtool_kAOMkdis 0 0 
5 14 Dtool_kAOMc5tZ 7 7 1987 0 14 Dtool_kAOMc5tZ 221 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
6 14 Dtool_kAOM6VZo 7 7 1987 0 14 Dtool_kAOM6VZo 226 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1988  
7 14 Dtool_kAOM43pX 7 8 1987 0 14 Dtool_kAOM43pX 234 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1987  4 copy 1 1988  
8 14 Dtool_kAOMi4s0 4 9 1990 0 14 Dtool_kAOMi4s0 1201 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::set_user_data
//       Access: Published
//  Description: Sets the user data associated with this object.  This
//               may be any EggUserData-derived object.  The egg
//               library will do nothing with this pointer, except to
//               hold its reference count and return the pointer on
//               request.
//
//               The EggObject maintains multiple different
//               EggUserData pointers, one for each unique type (as
//               reported by get_type()).  If you know that only one
//               type of EggUserData object will be added in your
//               application, you may use the query functions that
//               accept no parameters, but it is recommended that in
//               general you pass in the type of your particular user
//               data, to allow multiple applications to coexist in
//               the same egg data.
//
//               This pointer is also copied by the copy assignment
//               operator and copy constructor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1987  9 user_data 1 1982  
9 14 Dtool_kAOMWm2j 7 10 1982 0 14 Dtool_kAOMWm2j 366 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer most recently stored on
//               this object, or NULL if nothing was previously
//               stored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1988  
10 14 Dtool_kAOMTuxe 7 10 1982 0 14 Dtool_kAOMTuxe 331 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::get_user_data
//       Access: Published
//  Description: Returns the user data pointer of the indicated type,
//               if it exists, or NULL if it does not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1988  4 type 1 1986  
11 14 Dtool_kAOMibXq 6 11 1991 0 14 Dtool_kAOMibXq 361 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if a generic user data pointer has
//               recently been set and not yet cleared, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1988  
12 14 Dtool_kAOMvhRl 6 11 1991 0 14 Dtool_kAOMvhRl 331 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::has_user_data
//       Access: Published
//  Description: Returns true if the user data pointer of the
//               indicated type has been set, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1988  4 type 1 1986  
13 14 Dtool_kAOM0OqA 4 12 1990 0 14 Dtool_kAOM0OqA 273 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes *all* user data pointers from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1987  
14 14 Dtool_kAOMjTs3 4 12 1990 0 14 Dtool_kAOMjTs3 278 ////////////////////////////////////////////////////////////////////
//     Function: EggObject::clear_user_data
//       Access: Published
//  Description: Removes the user data pointer of the indicated type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1987  4 type 1 1986  
15 14 Dtool_kAOML1Gc 7 13 1986 0 14 Dtool_kAOML1Gc 0 0 
16 14 Dtool_kAOMzuI5 7 20 1994 995 14 Dtool_kAOMzuI5 228 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1992  
17 14 Dtool_kAOM1nQw 7 20 1994 995 14 Dtool_kAOM1nQw 713 // Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
18 14 Dtool_kAOMFcLP 7 20 1994 995 14 Dtool_kAOMFcLP 713 // Filename: eggNamedObject.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
19 14 Dtool_kAOMgt6J 7 21 1994 995 14 Dtool_kAOMgt6J 236 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1994  4 copy 1 1992  
20 14 Dtool_kAOMjJfG 4 22 1990 0 14 Dtool_kAOMjJfG 219 ////////////////////////////////////////////////////////////////////
//     Function: EggNamedObject::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1992  3 out 1 1996  
21 14 Dtool_kAOMcBDe 7 23 1986 0 14 Dtool_kAOMcBDe 0 0 
22 14 Dtool_kAOMxcwm 7 15 1987 0 14 Dtool_kAOMxcwm 0 1 4 this 3 1994  
23 14 Dtool_kAOMd530 7 16 1994 995 14 Dtool_kAOMd530 0 1 4 this 3 1987  
24 14 Dtool_kAOMQtFW 6 18 1998 0 14 Dtool_kAOMQtFW 0 1 4 this 3 1994  
25 14 Dtool_kAOM__2j 7 19 1994 995 14 Dtool_kAOM__2j 0 1 4 this 3 1998  
26 14 Dtool_kAOMj5Y4 7 26 1999 1034 14 Dtool_kAOMj5Y4 229 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  4 copy 1 2000  
27 14 Dtool_kAOMcWNY 7 27 2002 1034 14 Dtool_kAOMcWNY 215 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_parent
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
28 14 Dtool_kAOMyhAk 6 28 2003 0 14 Dtool_kAOMyhAk 297 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_depth
//       Access: Public
//  Description: Returns the number of nodes above this node in the
//               egg hierarchy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
29 14 Dtool_kAOM3MCH 6 29 1991 0 14 Dtool_kAOM3MCH 366 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_instance
//       Access: Public
//  Description: Returns true if there is an <Instance> node somewhere
//               in the egg tree at or above this node, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
30 14 Dtool_kAOMaghw 6 30 1991 0 14 Dtool_kAOMaghw 368 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_under_transform
//       Access: Public
//  Description: Returns true if there is a <Transform> entry somewhere
//               in the egg tree at or above this node, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
31 14 Dtool_kAOMyHkj 6 31 1991 0 14 Dtool_kAOMyHkj 443 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_local_coord
//       Access: Public
//  Description: Returns true if this node's vertices are not in the
//               global coordinate space.  This will be the case if
//               there was an <Instance> node under a transform at or
//               above this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
32 14 Dtool_kAOMtrwF 6 32 2004 0 14 Dtool_kAOMtrwF 1112 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame
//       Access: Public
//  Description: Returns the coordinate frame of the vertices
//               referenced by primitives at or under this node.  This
//               is not the same as get_node_frame().
//
//               Generally, vertices in an egg file are stored in the
//               global coordinate space, regardless of the transforms
//               defined at each node.  Thus, get_vertex_frame() will
//               usually return the identity transform (global
//               coordinate space).  However, primitives under an
//               <Instance> entry reference their vertices in the
//               coordinate system under effect at the time of the
//               <Instance>.  Thus, nodes under an <Instance> entry
//               may return this non-identity matrix.
//
//               Specifically, this may return a non-identity matrix
//               only if is_local_coord() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
33 14 Dtool_kAOMsUiB 6 33 2004 0 14 Dtool_kAOMsUiB 372 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame
//       Access: Public
//  Description: Returns the coordinate frame of the node itself.
//               This is simply the net product of all transformations
//               up to the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
34 14 Dtool_kAOMN4KR 6 34 2004 0 14 Dtool_kAOMN4KR 333 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_vertex_frame().  See get_vertex_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
35 14 Dtool_kAOMv1_V 6 35 2004 0 14 Dtool_kAOMv1_V 327 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv
//       Access: Public
//  Description: Returns the inverse of the matrix returned by
//               get_node_frame().  See get_node_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
36 14 Dtool_kAOMXcNr 6 36 2004 0 14 Dtool_kAOMXcNr 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting the vertices as read from the egg file
//               into the coordinate space of the node.  This is the
//               same thing as:
//
//               get_vertex_frame() * get_node_frame_inv()
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
37 14 Dtool_kAOMNv_a 6 37 2004 0 14 Dtool_kAOMNv_a 535 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex
//       Access: Public
//  Description: Returns the transformation matrix suitable for
//               converting vertices in the coordinate space of the
//               node to the appropriate coordinate space for storing
//               in the egg file.  This is the same thing as:
//
//               get_node_frame() * get_vertex_frame_inv()
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
38 14 Dtool_kAOMv1HP 6 38 2004 0 14 Dtool_kAOMv1HP 366 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
39 14 Dtool_kAOM_tqL 6 39 2004 0 14 Dtool_kAOM_tqL 362 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
40 14 Dtool_kAOM3nvZ 6 40 2004 0 14 Dtool_kAOM3nvZ 374 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_frame_inv()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
41 14 Dtool_kAOMKkmK 6 41 2004 0 14 Dtool_kAOMKkmK 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_frame_inv_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_frame_inv()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
42 14 Dtool_kAOMB_1f 6 42 2004 0 14 Dtool_kAOMB_1f 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_vertex_to_node_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_vertex_to_node()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
43 14 Dtool_kAOM3soP 6 43 2004 0 14 Dtool_kAOM3soP 370 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::get_node_to_vertex_ptr
//       Access: Public
//  Description: Returns either a NULL pointer or a unique pointer
//               shared by nodes with the same get_node_to_vertex()
//               matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
44 14 Dtool_kAOMoQ8D 4 44 1990 0 14 Dtool_kAOMoQ8D 308 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform
//       Access: Public
//  Description: Applies the indicated transformation to the node and
//               all of its descendants.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  3 mat 1 2004  
45 14 Dtool_kAOM2Yja 4 45 1990 0 14 Dtool_kAOM2Yja 476 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::transform_vertices_only
//       Access: Public
//  Description: Applies the indicated transformation only to vertices
//               that appear in global space within vertex pools at
//               this node and below.  Joints and other transforms are
//               not affected, nor are local vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  3 mat 1 2004  
46 14 Dtool_kAOM7nS3 4 46 1990 0 14 Dtool_kAOM7nS3 699 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::flatten_transforms
//       Access: Public
//  Description: Removes any transform and instance records from this
//               node in the scene graph and below.  If an instance
//               node is encountered, removes the instance and applies
//               the transform to its vertices, duplicating vertices
//               if necessary.
//
//               Since this function may result in duplicated
//               vertices, it may be a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
47 14 Dtool_kAOMpzMK 4 47 1990 0 14 Dtool_kAOMpzMK 398 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::apply_texmats
//       Access: Public
//  Description: Applies the texture matrices to the UV's of the
//               vertices that reference them, and then removes the
//               texture matrices from the textures themselves.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
48 14 Dtool_kAOM_Twb 6 48 2003 0 14 Dtool_kAOM_Twb 254 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::rename_node
//       Access: Published
//  Description: Rename by stripping out the prefix
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  12 strip_prefix 1 2007  
49 14 Dtool_kAOMHHnM 6 49 1991 0 14 Dtool_kAOMHHnM 504 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_joint
//       Access: Public, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
50 14 Dtool_kAOM82MW 6 50 1991 0 14 Dtool_kAOM82MW 341 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::is_anim_matrix
//       Access: Public, Virtual
//  Description: Returns true if this node represents a table of
//               animation transformation data, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
51 14 Dtool_kAOMuPXv 6 51 2009 0 14 Dtool_kAOMuPXv 549 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_alpha_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
52 14 Dtool_kAOMNEGB 6 52 2009 0 14 Dtool_kAOMNEGB 561 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_write_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
53 14 Dtool_kAOMUWLJ 6 53 2009 0 14 Dtool_kAOMUWLJ 559 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_test_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
54 14 Dtool_kAOMf8Wt 6 54 2009 0 14 Dtool_kAOMf8Wt 558 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_visibility_mode
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
55 14 Dtool_kAOM61kv 6 55 2009 0 14 Dtool_kAOM61kv 535 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_depth_offset
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
56 14 Dtool_kAOMx2w6 6 56 2009 0 14 Dtool_kAOMx2w6 531 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_draw_order
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
57 14 Dtool_kAOM6z27 6 57 2009 0 14 Dtool_kAOM6z27 518 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_bin
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
58 14 Dtool_kAOM6Ucg 6 58 1991 0 14 Dtool_kAOM6Ucg 615 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_indexed
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
59 14 Dtool_kAOMEwBk 6 59 1991 0 14 Dtool_kAOMEwBk 603 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::determine_decal
//       Access: Public, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
60 14 Dtool_kAOMIrWM 4 60 1990 0 14 Dtool_kAOMIrWM 0 3 4 this 3 2000  3 out 1 1996  12 indent_level 1 2003  
61 14 Dtool_kAOMZKVQ 6 61 1991 0 14 Dtool_kAOMZKVQ 575 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::parse_egg
//       Access: Public
//  Description: Parses the egg syntax given in the indicate string as
//               if it had been read from the egg file within this
//               object's definition.  Updates the object accordingly.
//               Returns true if successful, false if there was some
//               parse error or if the object does not support this
//               functionality.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  10 egg_syntax 1 1995  
62 14 Dtool_kAOMp6_k 4 62 1990 0 14 Dtool_kAOMp6_k 380 ////////////////////////////////////////////////////////////////////
//     Function: EggNode::test_under_integrity
//       Access: Public
//  Description: Recursively checks the integrity of the _under_flags,
//               _parent, and _depth members of this node and all of
//               its ancestors.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
63 14 Dtool_kAOMrFAL 7 63 1986 0 14 Dtool_kAOMrFAL 0 0 
64 14 Dtool_kAOMZZeu 7 66 2010 1045 14 Dtool_kAOMZZeu 233 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2010  4 copy 1 2011  
65 14 Dtool_kAOMgqhB 4 67 1990 0 14 Dtool_kAOMgqhB 216 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2010  4 type 1 1919  
66 14 Dtool_kAOMKf9p 4 68 1990 0 14 Dtool_kAOMKf9p 218 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2010  
67 14 Dtool_kAOMJAtY 6 69 1991 0 14 Dtool_kAOMJAtY 216 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2011  
68 14 Dtool_kAOMRAYV 6 70 1919 0 14 Dtool_kAOMRAYV 262 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2011  
69 14 Dtool_kAOMML2y 4 71 1990 0 14 Dtool_kAOMML2y 259 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::clear_data
//       Access: Public
//  Description: Removes all data and empties the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2010  
70 14 Dtool_kAOMAf6I 4 72 1990 0 14 Dtool_kAOMAf6I 253 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::add_data
//       Access: Public
//  Description: Adds a single element to the table.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2010  5 value 1 1919  
71 14 Dtool_kAOMDiDs 6 73 2003 0 14 Dtool_kAOMDiDs 262 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::get_size
//       Access: Public
//  Description: Returns the number of elements in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2011  
72 14 Dtool_kAOMbri2 4 74 1990 0 14 Dtool_kAOMbri2 303 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimData::quantize
//       Access: Public
//  Description: Rounds each element of the table to the nearest
//               multiple of quantum.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2010  7 quantum 1 1919  
73 14 Dtool_kAOM25FJ 7 75 1986 0 14 Dtool_kAOM25FJ 0 0 
74 14 Dtool_kAOM3GiB 7 78 2015 1057 14 Dtool_kAOM3GiB 228 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2013  
75 14 Dtool_kAOMCh8o 7 78 2015 1057 14 Dtool_kAOMCh8o 713 // Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
76 14 Dtool_kAOM8Z3H 7 78 2015 1057 14 Dtool_kAOM8Z3H 713 // Filename: eggAnimPreload.I
// Created by:  drose (06Aug08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
77 14 Dtool_kAOMwGZ8 7 79 2015 1057 14 Dtool_kAOMwGZ8 236 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2015  4 copy 1 2013  
78 14 Dtool_kAOMJXBe 4 80 1990 0 14 Dtool_kAOMJXBe 219 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2015  3 fps 1 1919  
79 14 Dtool_kAOMHVnp 4 81 1990 0 14 Dtool_kAOMHVnp 221 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2015  
80 14 Dtool_kAOMUOEv 6 82 1991 0 14 Dtool_kAOMUOEv 219 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2013  
81 14 Dtool_kAOM80Di 6 83 1919 0 14 Dtool_kAOM80Di 265 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2013  
82 14 Dtool_kAOMv4k5 4 84 1990 0 14 Dtool_kAOMv4k5 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::set_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2015  10 num_frames 1 2003  
83 14 Dtool_kAOM_5Yk 4 85 1990 0 14 Dtool_kAOM_5Yk 228 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::clear_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2015  
84 14 Dtool_kAOMh_YG 6 86 1991 0 14 Dtool_kAOMh_YG 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::has_num_frames
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2013  
85 14 Dtool_kAOMeYX5 6 87 2003 0 14 Dtool_kAOMeYX5 279 ////////////////////////////////////////////////////////////////////
//     Function: EggAnimPreload::get_num_frames
//       Access: Public
//  Description: This is only valid if has_num_frames() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2013  
86 14 Dtool_kAOM3ayU 7 88 1986 0 14 Dtool_kAOM3ayU 0 0 
87 14 Dtool_kAOMhfwD 7 91 2016 1060 14 Dtool_kAOMhfwD 225 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
88 14 Dtool_kAOMepOm 7 91 2016 1060 14 Dtool_kAOMepOm 230 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2017  
89 14 Dtool_kAOMUF8y 6 92 2016 0 14 Dtool_kAOMUF8y 238 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2016  4 copy 1 2017  
90 14 Dtool_kAOMw9Eb 6 94 1991 0 14 Dtool_kAOMw9Eb 713 // Filename: eggAttributes.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2017  
91 14 Dtool_kAOMVCpK 6 95 2019 0 14 Dtool_kAOMVCpK 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2017  
92 14 Dtool_kAOMpRK6 4 96 1990 0 14 Dtool_kAOMpRK6 224 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::set_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2016  6 normal 1 2019  
93 14 Dtool_kAOMS6MT 4 97 1990 0 14 Dtool_kAOMS6MT 226 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::clear_normal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2016  
94 14 Dtool_kAOMiri2 6 98 1991 0 14 Dtool_kAOMiri2 345 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_normal
//       Access: Published
//  Description: Returns true if this normal matches that of the other
//               EggAttributes object, include the morph list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2017  5 other 1 2017  
95 14 Dtool_kAOMTZ3E 4 99 1990 0 14 Dtool_kAOMTZ3E 376 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_normal
//       Access: Published
//  Description: Sets this normal to be the same as the other's,
//               include morphs.  If the other has no normal, this
//               clears the normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2016  5 other 1 2017  
96 14 Dtool_kAOMKFjr 6 100 1991 0 14 Dtool_kAOMKFjr 223 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::has_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2017  
97 14 Dtool_kAOMXGJb 7 101 2023 0 14 Dtool_kAOMXGJb 333 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::get_color
//       Access: Published
//  Description: Returns the color set on this particular attribute.
//               If there is no color set, returns white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2017  
98 14 Dtool_kAOMFNlA 4 102 1990 0 14 Dtool_kAOMFNlA 214 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2016  5 Color 1 2024  
99 14 Dtool_kAOMfqMj 4 103 1990 0 14 Dtool_kAOMfqMj 214 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2016  
100 14 Dtool_kAOMDKr_ 6 104 1991 0 14 Dtool_kAOMDKr_ 343 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::matches_color
//       Access: Published
//  Description: Returns true if this color matches that of the other
//               EggAttributes object, include the morph list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2017  5 other 1 2017  
101 14 Dtool_kAOMPa3O 4 105 1990 0 14 Dtool_kAOMPa3O 372 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::copy_color
//       Access: Published
//  Description: Sets this color to be the same as the other's,
//               include morphs.  If the other has no color, this
//               clears the color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2016  5 other 1 2017  
102 14 Dtool_kAOMgbBE 4 106 1990 0 14 Dtool_kAOMgbBE 304 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::write
//       Access: Published
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2017  3 out 1 1996  12 indent_level 1 2003  
103 14 Dtool_kAOMOpUR 6 107 1991 0 14 Dtool_kAOMOpUR 399 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2017  5 other 1 2017  
104 14 Dtool_kAOMsaDm 6 108 2003 0 14 Dtool_kAOMsaDm 394 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2017  5 other 1 2017  
105 14 Dtool_kAOMZnUo 4 109 1990 0 14 Dtool_kAOMZnUo 312 ////////////////////////////////////////////////////////////////////
//     Function: EggAttributes::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               attributes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2016  3 mat 1 2004  
106 14 Dtool_kAOMX9Yr 7 116 1986 0 14 Dtool_kAOMX9Yr 0 0 
107 14 Dtool_kAOMP4Um 6 111 2026 0 14 Dtool_kAOMP4Um 0 1 4 this 3 2017  
108 14 Dtool_kAOM7lZz 6 114 2028 0 14 Dtool_kAOM7lZz 0 1 4 this 3 2017  
109 14 Dtool_kAOMfgDe 7 118 2032 995 14 Dtool_kAOMfgDe 229 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2030  
110 14 Dtool_kAOMrGLE 7 118 2032 995 14 Dtool_kAOMrGLE 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 1995  2 uv 1 2033  
111 14 Dtool_kAOMdlNE 7 118 2032 995 14 Dtool_kAOMdlNE 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 name 1 1995  3 uvw 1 2036  
112 14 Dtool_kAOMDsRd 7 119 2032 995 14 Dtool_kAOMDsRd 237 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2032  4 copy 1 2030  
113 14 Dtool_kAOMwe3A 6 120 1995 0 14 Dtool_kAOMwe3A 998 // Filename: eggVertexUV.I
// Created by:  drose (20Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::filter_name
//       Access: Published, Static
//  Description: Returns the actual name that should be set for a
//               given name string.  Usually this is the same string
//               that is input, but for historical reasons the texture
//               coordinate name "default" is mapped to the empty
//               string.
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
114 14 Dtool_kAOM_tuC 4 121 1990 0 14 Dtool_kAOM_tuC 220 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2032  4 name 1 1995  
115 14 Dtool_kAOMkls8 6 122 2003 0 14 Dtool_kAOMkls8 401 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_num_dimensions
//       Access: Published
//  Description: Returns the number of components of the texture
//               coordinate set.  This is either 2 (the normal case)
//               or 3 (for a 3-d texture coordinate).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2030  
116 14 Dtool_kAOMI9Ho 6 123 1991 0 14 Dtool_kAOMI9Ho 369 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_w
//       Access: Published
//  Description: Returns true if the texture coordinate has a third, w
//               component, false if it is just a normal 2-d texture
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2030  
117 14 Dtool_kAOMWnKk 7 124 2038 0 14 Dtool_kAOMWnKk 302 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uv
//       Access: Published
//  Description: Returns the texture coordinate pair, if
//               get_num_dimensions() is 2.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2030  
118 14 Dtool_kAOMlXG_ 6 125 2036 0 14 Dtool_kAOMlXG_ 435 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_uvw
//       Access: Published
//  Description: Returns the texture coordinate triple, if
//               get_num_dimensions() is 3.  This is also legal to
//               call if get_num_dimensions() is 2 (but the last
//               dimension will be zero).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2030  
119 14 Dtool_kAOMC1GK 4 126 1990 0 14 Dtool_kAOMC1GK 372 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uv
//       Access: Published
//  Description: Sets the texture coordinate pair.  This makes the
//               texture coordinate a 2-d texture coordinate, which is
//               the usual case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2032  8 texCoord 1 2033  
120 14 Dtool_kAOMjWDX 4 127 1990 0 14 Dtool_kAOMjWDX 333 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_uvw
//       Access: Published
//  Description: Sets the texture coordinate triple.  This makes the
//               texture coordinate a 3-d texture coordinate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2032  8 texCoord 1 2036  
121 14 Dtool_kAOMHSNX 6 128 1991 0 14 Dtool_kAOMHSNX 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2030  
122 14 Dtool_kAOMvT4T 6 129 2019 0 14 Dtool_kAOMvT4T 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2030  
123 14 Dtool_kAOMt4TN 4 130 1990 0 14 Dtool_kAOMt4TN 223 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2032  7 tangent 1 2019  
124 14 Dtool_kAOMimjh 4 131 1990 0 14 Dtool_kAOMimjh 225 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_tangent
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2032  
125 14 Dtool_kAOMSW5F 6 132 1991 0 14 Dtool_kAOMSW5F 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::has_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2030  
126 14 Dtool_kAOMsWkC 6 133 2019 0 14 Dtool_kAOMsWkC 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::get_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2030  
127 14 Dtool_kAOMMNOa 4 134 1990 0 14 Dtool_kAOMMNOa 224 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::set_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2032  8 binormal 1 2019  
128 14 Dtool_kAOMwfvM 4 135 1990 0 14 Dtool_kAOMwfvM 226 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::clear_binormal
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2032  
129 14 Dtool_kAOML2C8 4 136 1990 0 14 Dtool_kAOML2C8 400 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               UV's tangent and/or binormal.  This does nothing if
//               there is no tangent or binormal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2032  3 mat 1 2004  
130 14 Dtool_kAOMaahg 4 137 1990 0 14 Dtool_kAOMaahg 215 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2030  3 out 1 1996  12 indent_level 1 2003  
131 14 Dtool_kAOMpA7a 6 138 2003 0 14 Dtool_kAOMpA7a 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexUV::compare_to
//       Access: Public
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2030  5 other 1 2030  
132 14 Dtool_kAOMBqeg 7 141 1986 0 14 Dtool_kAOMBqeg 0 0 
133 14 Dtool_kAOMnXa0 6 139 2026 0 14 Dtool_kAOMnXa0 0 1 4 this 3 2030  
134 14 Dtool_kAOMtjbY 7 147 2039 1109 14 Dtool_kAOMtjbY 221 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
135 14 Dtool_kAOMbgja 7 147 2039 1109 14 Dtool_kAOMbgja 339 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy constructor
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2040  
136 14 Dtool_kAOMmaUY 7 148 2039 1109 14 Dtool_kAOMmaUY 347 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::Copy assignment operator
//       Access: Published
//  Description: Copies all properties of the vertex except its vertex
//               pool, index number, and group membership.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  4 copy 1 2040  
137 14 Dtool_kAOMz9Ky 7 150 2042 1034 14 Dtool_kAOMz9Ky 847 // Filename: eggVertex.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pool
//       Access: Published
//  Description: Returns the vertex pool this vertex belongs in.  This
//               may be NULL if the vertex has not been added to a
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
138 14 Dtool_kAOMp_H_ 6 151 1991 0 14 Dtool_kAOMp_H_ 710 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::is_forward_reference
//       Access: Published
//  Description: Returns true if the vertex is a forward reference to
//               some vertex that hasn't been defined yet.  In this
//               case, the vertex may not have any properties filled
//               in yet.
//
//               This can only happen if you implicitly create a
//               vertex via EggVertexPool::get_forward_vertex().
//               Presumably, when the vertex pool is later filled in,
//               this vertex will be replaced with real data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
139 14 Dtool_kAOM2yZs 4 152 1990 0 14 Dtool_kAOM2yZs 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a two-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  3 pos 1 2033  
140 14 Dtool_kAOMW1At 4 152 1990 0 14 Dtool_kAOMW1At 320 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a three-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  3 pos 1 2036  
141 14 Dtool_kAOM25nt 4 152 1990 0 14 Dtool_kAOM25nt 319 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a four-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  3 pos 1 2043  
142 14 Dtool_kAOMZ6NP 4 152 1990 0 14 Dtool_kAOMZ6NP 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos
//       Access: Published
//  Description: Sets the vertex position.  This variant sets the
//               vertex to a one-dimensional value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  3 pos 1 1919  
143 14 Dtool_kAOMPMSb 4 153 1990 0 14 Dtool_kAOMPMSb 600 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_pos4
//       Access: Published
//  Description: This special flavor of set_pos() sets the vertex as a
//               four-component value, but does not change the set
//               number of dimensions.  It's handy for retrieving the
//               vertex position via get_pos4, manipulating it, then
//               storing it back again, without worrying about the
//               number of dimensions it actually had.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  3 pos 1 2043  
144 14 Dtool_kAOMO31_ 6 154 2003 0 14 Dtool_kAOMO31_ 371 // get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components). 1 4 this 3 2040  
145 14 Dtool_kAOMJIBG 6 155 1919 0 14 Dtool_kAOMJIBG 371 // get_pos[123] return the pos as the corresponding type.  It is an
// error to call any of these without first verifying that
// get_num_dimensions() matches the desired type.  However,
// get_pos4() may always be called; it returns the pos as a
// four-component point in homogeneous space (with a 1.0 in the last
// position if the pos has fewer than four components). 1 4 this 3 2040  
146 14 Dtool_kAOMbHBN 7 156 2038 0 14 Dtool_kAOMbHBN 330 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos2
//       Access: Published
//  Description: Only valid if get_num_dimensions() returns 2.
//               Returns the position as a two-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
147 14 Dtool_kAOMtGBU 7 157 2046 0 14 Dtool_kAOMtGBU 332 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos3
//       Access: Published
//  Description: Valid if get_num_dimensions() returns 3 or 4.
//               Returns the position as a three-dimensional value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
148 14 Dtool_kAOM_FBb 7 158 2047 0 14 Dtool_kAOM_FBb 591 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_pos4
//       Access: Published
//  Description: This is always valid, regardless of the value of
//               get_num_dimensions.  It returns the position as a
//               four-dimensional value.  If the pos has fewer than
//               four dimensions, this value represents the pos
//               extended into four-dimensional homogenous space,
//               e.g. by adding 1 as the fourth component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
149 14 Dtool_kAOMmIlN 6 159 1991 0 14 Dtool_kAOMmIlN 551 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has an unnamed UV
//               coordinate pair, false otherwise.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see has_uv(name) for the interface
//               that supports multitexturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
150 14 Dtool_kAOMKQRh 6 159 1991 0 14 Dtool_kAOMKQRh 369 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uv
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate pair, and the named UV coordinate pair is
//               2-d, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  4 name 1 1995  
151 14 Dtool_kAOMaaFH 7 160 2038 0 14 Dtool_kAOMaaFH 604 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the unnamed UV coordinate pair on the
//               vertex.  It is an error to call this if has_uv() has
//               returned false.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see get_uv(name) for the interface
//               that supports multitexturing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
152 14 Dtool_kAOM_Bxa 7 160 2038 0 14 Dtool_kAOM_Bxa 371 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv
//       Access: Published
//  Description: Returns the named UV coordinate pair on the vertex.
//               vertex.  It is an error to call this if has_uv(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  4 name 1 1995  
153 14 Dtool_kAOMAFVN 4 161 1990 0 14 Dtool_kAOMAFVN 556 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Replaces the unnamed UV coordinate pair on the vertex
//               with the indicated value.
//
//               This is the more restrictive interface, and is
//               generally useful only in the absence of
//               multitexturing; see set_uv(name, uv) for the
//               interface that supports multitexturing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  8 texCoord 1 2033  
154 14 Dtool_kAOMs1Zd 4 161 1990 0 14 Dtool_kAOMs1Zd 407 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv
//       Access: Published
//  Description: Sets the indicated UV coordinate pair on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, but preserves UV morphs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2039  4 name 1 1995  8 texCoord 1 2033  
155 14 Dtool_kAOMqW8Y 4 162 1990 0 14 Dtool_kAOMqW8Y 267 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes all UV coordinate pairs from the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2039  
156 14 Dtool_kAOMBuq9 4 162 1990 0 14 Dtool_kAOMBuq9 314 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_uv
//       Access: Published
//  Description: Removes the named UV coordinate pair from the vertex,
//               along with any UV morphs.
/////////////////////////////////////////////////////////////////// 2 4 this 3 2039  4 name 1 1995  
157 14 Dtool_kAOMSUTE 6 163 1991 0 14 Dtool_kAOMSUTE 374 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_uvw
//       Access: Published
//  Description: Returns true if the vertex has the named UV
//               coordinate triple, and the named UV coordinate triple is
//               3-d, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  4 name 1 1995  
158 14 Dtool_kAOMvqz9 6 164 2036 0 14 Dtool_kAOMvqz9 375 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uvw
//       Access: Published
//  Description: Returns the named UV coordinate triple on the vertex.
//               vertex.  It is an error to call this if has_uvw(name)
//               returned false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  4 name 1 1995  
159 14 Dtool_kAOMUOlT 4 165 1990 0 14 Dtool_kAOMUOlT 437 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uvw
//       Access: Published
//  Description: Sets the indicated UV coordinate triple on the vertex.
//               This replaces any UV coordinate pair or triple with
//               the same name already on the vertex, but preserves UV
//               morphs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2039  4 name 1 1995  8 texCoord 1 2036  
160 14 Dtool_kAOM_lz7 7 166 2030 0 14 Dtool_kAOM_lz7 584 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_uv_obj
//       Access: Published
//  Description: Returns the named EggVertexUV object, which defines
//               both the UV coordinate pair for this name and the UV
//               morphs.  This object might be shared between multiple
//               vertices.  You should not attempt to modify this
//               object; instead, call modify_uv_object to return a
//               modifiable pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  4 name 1 1995  
161 14 Dtool_kAOMfsq4 7 167 2032 995 14 Dtool_kAOMfsq4 462 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::modify_uv_obj
//       Access: Published
//  Description: Returns a modifiable pointer to the named EggVertexUV
//               object, which defines both the UV coordinate pair for
//               this name and the UV morphs.  Returns NULL if there
//               is no such named UV object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  4 name 1 1995  
162 14 Dtool_kAOM37Oi 4 168 1990 0 14 Dtool_kAOM37Oi 400 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_uv_obj
//       Access: Published
//  Description: Sets the indicated EggVertexUV on the vertex.
//               This replaces any UV coordinate pair with the same
//               name already on the vertex, including UV morphs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  9 vertex_uv 1 2032  
163 14 Dtool_kAOMPXw_ 6 169 2003 0 14 Dtool_kAOMPXw_ 292 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_index
//       Access: Published
//  Description: Returns the index number of the vertex within its
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
164 14 Dtool_kAOMRa07 4 170 1990 0 14 Dtool_kAOMRa07 822 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::set_external_index
//       Access: Published
//  Description: Sets a special index number that is associated with
//               the EggVertex (but is not written to the egg file).
//               This number is not interpreted by any egg code; it is
//               simply maintained along with the vertex.  It *is*
//               used to differentiate otherwise identical vertices in
//               EggVertexPool::create_unique_vertex(), however.
//
//               The intention of this number is as an aid for file
//               converters, to associate an EggVertex back to the
//               index number of the original source vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  14 external_index 1 2003  
165 14 Dtool_kAOMlfWC 6 171 2003 0 14 Dtool_kAOMlfWC 320 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_external_index
//       Access: Published
//  Description: Returns the number set by set_external_index().  See
//               set_external_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
166 14 Dtool_kAOM3GP5 4 172 1990 0 14 Dtool_kAOM3GP5 296 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::write
//       Access: Published
//  Description: Writes the vertex to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2040  3 out 1 1996  12 indent_level 1 2003  
167 14 Dtool_kAOMBgJ_ 6 173 1991 0 14 Dtool_kAOMBgJ_ 395 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  5 other 1 2040  
168 14 Dtool_kAOMZ_zx 6 174 2003 0 14 Dtool_kAOMZ_zx 1165 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::compare_to
//       Access: Published
//  Description: An ordering operator to compare two vertices for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique vertices.
//
//               Group membership is not considered in this
//               comparison.  This is somewhat problematic, but cannot
//               easily be helped, because considering group
//               membership would make it difficult to add and remove
//               groups from vertices.  It also makes it impossible to
//               meaningfully compare with a concrete EggVertex object
//               (which cannot have group memberships).
//
//               However, this is not altogether bad, because two
//               vertices that are identical in all other properties
//               should generally also be identical in group
//               memberships, else the vertices will tend to fly apart
//               when the joints animate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  5 other 1 2040  
169 14 Dtool_kAOMQ2Pa 6 175 2003 0 14 Dtool_kAOMQ2Pa 384 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_local_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted to be in a local
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
170 14 Dtool_kAOMTVqu 6 176 2003 0 14 Dtool_kAOMTVqu 382 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::get_num_global_coord
//       Access: Published
//  Description: Returns the number of primitives that own this vertex
//               whose vertices are interpreted in the global
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
171 14 Dtool_kAOMHCW9 4 177 1990 0 14 Dtool_kAOMHCW9 304 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::transform
//       Access: Published, Virtual
//  Description: Applies the indicated transformation matrix to the
//               vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  3 mat 1 2004  
172 14 Dtool_kAOMZsOw 6 178 1991 0 14 Dtool_kAOMZsOw 312 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_gref
//       Access: Published
//  Description: Returns true if the indicated group references this
//               vertex, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  5 group 1 2048  
173 14 Dtool_kAOM2kRg 4 179 1990 0 14 Dtool_kAOM2kRg 725 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::copy_grefs_from
//       Access: Published
//  Description: Copies all the group references from the other vertex
//               onto this one.  This assigns the current vertex to
//               exactly the same groups, with exactly the same
//               memberships, as the given one.
//
//               Warning: only an EggVertex allocated from the free
//               store may have groups assigned to it.  Do not attempt
//               to call this on a temporary concrete EggVertex
//               object; a core dump will certainly result.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2039  5 other 1 2040  
174 14 Dtool_kAOM1JbX 4 180 1990 0 14 Dtool_kAOM1JbX 325 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::clear_grefs
//       Access: Published
//  Description: Removes all group references from the vertex, so that
//               it is not assigned to any group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2039  
175 14 Dtool_kAOMk0J_ 6 181 2003 0 14 Dtool_kAOMk0J_ 338 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::has_pref
//       Access: Published
//  Description: Returns the number of times the vertex appears in the
//               indicated primitive, or 0 if it does not appear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  4 prim 1 2050  
176 14 Dtool_kAOMgTDr 4 182 1990 0 14 Dtool_kAOMgTDr 379 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::test_gref_integrity
//       Access: Published
//  Description: Verifies that the gref list is correct and that all
//               the groups included actually exist and do reference
//               the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
177 14 Dtool_kAOMhP_W 4 183 1990 0 14 Dtool_kAOMhP_W 383 ////////////////////////////////////////////////////////////////////
//     Function: EggVertex::test_pref_integrity
//       Access: Published
//  Description: Verifies that the pref list is correct and that all
//               the primitives included actually exist and do
//               reference the vertex.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2040  
178 14 Dtool_kAOMOrKC 4 184 1990 0 14 Dtool_kAOMOrKC 226 // NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: EggVertex::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2040  3 out 1 1996  
179 14 Dtool_kAOMGT9t 7 187 1986 0 14 Dtool_kAOMGT9t 0 0 
180 14 Dtool_kAOMKcUy 7 143 1987 0 14 Dtool_kAOMKcUy 0 1 4 this 3 2039  
181 14 Dtool_kAOMlnwr 7 144 2039 1109 14 Dtool_kAOMlnwr 0 1 4 this 3 1987  
182 14 Dtool_kAOModNS 6 145 2016 0 14 Dtool_kAOModNS 0 1 4 this 3 2039  
183 14 Dtool_kAOMTrUk 7 146 2039 1109 14 Dtool_kAOMTrUk 0 1 4 this 3 2016  
184 14 Dtool_kAOMTzXy 6 185 2026 0 14 Dtool_kAOMTzXy 0 1 4 this 3 2040  
185 14 Dtool_kAOMBdMA 7 189 2042 1034 14 Dtool_kAOMBdMA 459 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Copy Constructor
//       Access: Public
//  Description: Copying a vertex pool is of questionable value, since
//               it will copy all of the vertices and assign new
//               pointers to them all. There will be no polygons
//               referring to the new vertices.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2052  
186 14 Dtool_kAOMY_4J 7 189 2042 1034 14 Dtool_kAOMY_4J 222 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
187 14 Dtool_kAOMrRQ_ 6 190 1991 0 14 Dtool_kAOMrRQ_ 878 // Filename: eggVertexPool.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_vertex
//       Access: Public
//  Description: Returns true if the indicated vertex has been defined
//               in the vertex pool, false otherwise.  This does not
//               include forward references.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2052  5 index 1 2003  
188 14 Dtool_kAOMKc1J 6 191 1991 0 14 Dtool_kAOMKc1J 386 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_forward_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               undefined forward-reference vertices, false if all
//               vertices are defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
189 14 Dtool_kAOMsCOx 6 192 1991 0 14 Dtool_kAOMsCOx 383 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_defined_vertices
//       Access: Published
//  Description: Returns true if any vertices in the pool are
//               fully defined vertices, false if all vertices are
//               forward references.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
190 14 Dtool_kAOM_O2t 7 193 2039 1109 14 Dtool_kAOM_O2t 366 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2052  5 index 1 2003  
191 14 Dtool_kAOMGe06 7 194 2039 1109 14 Dtool_kAOMGe06 373 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::indexing operator
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number, or NULL if no vertices have that index
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2052  5 index 1 2003  
192 14 Dtool_kAOMB8Di 7 195 2039 1109 14 Dtool_kAOMB8Di 619 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_forward_vertex
//       Access: Public
//  Description: Returns the vertex in the pool with the indicated
//               index number.  If there is not a vertex in the pool
//               with the indicated index number, creates a special
//               forward-reference EggVertex that has no data, on the
//               assumption that the vertex pool has not yet been
//               fully read and more data will be available later.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  5 index 1 2003  
193 14 Dtool_kAOMX2qU 6 196 2003 0 14 Dtool_kAOMX2qU 389 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_highest_index
//       Access: Public
//  Description: Returns the highest index number used by any vertex
//               in the pool (except forward references).  Returns -1
//               if the pool is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
194 14 Dtool_kAOMm_MH 4 197 1990 0 14 Dtool_kAOMm_MH 553 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::set_highest_index
//       Access: Public
//  Description: Artificially changes the "highest index number", so
//               that a newly created vertex will begin at this number
//               plus 1.  This can be used to default a vertex pool to
//               start counting at 1 (or any other index number),
//               instead of the default of 0.  Use with caution.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  13 highest_index 1 2003  
195 14 Dtool_kAOMk7ro 6 198 2003 0 14 Dtool_kAOMk7ro 319 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_num_dimensions
//       Access: Public
//  Description: Returns the maximum number of dimensions used by any
//               vertex in the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
196 14 Dtool_kAOMtNSd 6 199 1991 0 14 Dtool_kAOMtNSd 326 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_normals
//       Access: Public
//  Description: Returns true if any vertex in the pool has a normal
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
197 14 Dtool_kAOMfhjn 6 200 1991 0 14 Dtool_kAOMfhjn 324 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
198 14 Dtool_kAOM1q_C 6 201 1991 0 14 Dtool_kAOM1q_C 403 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_nonwhite_colors
//       Access: Public
//  Description: Returns true if any vertex in the pool has a color
//               defined other than white, false if no vertices have
//               colors, or if all colors are white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
199 14 Dtool_kAOMmTXK 6 203 1991 0 14 Dtool_kAOMmTXK 318 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::has_uvs
//       Access: Public
//  Description: Returns true if any vertex in the pool has a uv
//               defined, false if none of them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
200 14 Dtool_kAOMZ_MQ 4 204 1990 0 14 Dtool_kAOMZ_MQ 654 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::get_uv_names
//       Access: Public
//  Description: Returns the list of UV names that are defined by any
//               vertices in the pool, as well as the subset of UV
//               names that actually define 3-d texture coordinates
//               ("uvw_names").  Also returns the subset of UV/UVW
//               names that define a tangent and binormal.  It is the
//               user's responsibility to clear both vectors before
//               calling this method.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2052  8 uv_names 1 2007  9 uvw_names 1 2007  9 tbn_names 1 2007  
201 14 Dtool_kAOM_u9p 6 205 2054 0 14 Dtool_kAOM_u9p 261 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::size()
//       Access: Public
//  Description: Returns the number of vertices in the pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2052  
202 14 Dtool_kAOMG7Zj 7 206 2039 1109 14 Dtool_kAOMG7Zj 1245 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2042  6 vertex 1 2039  5 index 1 2003  
203 14 Dtool_kAOMiMXH 7 206 2039 1109 14 Dtool_kAOMiMXH 1245 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::add_vertex
//       Access: Public
//  Description: Adds the indicated vertex to the pool.  It is an
//               error if the vertex is already a member of this or
//               any other pool.  The vertex must have been allocated
//               from the free store; its pointer will now be owned by
//               the vertex pool.  If the index number is supplied,
//               tries to assign that index number; it is an error if
//               the index number is already in use.
//
//               It is possible that a forward reference to this
//               vertex was requested in the past; if so, the data
//               from the supplied vertex is copied onto the forward
//               reference, which becomes the actual vertex.  In this
//               case, a different pointer is saved (and returned)
//               than the one actually passed in.  In the usual case,
//               however, the vertex pointer passed in is the one that
//               is saved in the vertex pool and returned from this
//               method.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  6 vertex 1 2039  
204 14 Dtool_kAOMPbgz 7 207 2039 1109 14 Dtool_kAOMPbgz 376 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2042  
205 14 Dtool_kAOMmAmN 7 207 2039 1109 14 Dtool_kAOMmAmN 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  3 pos 1 2033  
206 14 Dtool_kAOM_DGR 7 207 2039 1109 14 Dtool_kAOM_DGR 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  3 pos 1 2036  
207 14 Dtool_kAOMUCmU 7 207 2039 1109 14 Dtool_kAOMUCmU 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  3 pos 1 2043  
208 14 Dtool_kAOMqB5d 7 207 2039 1109 14 Dtool_kAOMqB5d 559 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::make_new_vertex()
//       Access: Public
//  Description: Allocates and returns a new vertex from the pool.
//               This is one of three ways to add new vertices to a
//               vertex pool.
//
//               This flavor of make_new_vertex() explicitly sets the
//               vertex position as it is allocated.  It does not
//               attempt to share vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  3 pos 1 1919  
209 14 Dtool_kAOM6VIP 7 208 2039 1109 14 Dtool_kAOM6VIP 458 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::create_unique_vertex
//       Access: Public
//  Description: Creates a new vertex in the pool that is a copy of
//               the indicated one and returns it.  If there is
//               already a vertex in the pool like the indicated one,
//               simply returns that one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  4 copy 1 2040  
210 14 Dtool_kAOMxlGu 7 209 2039 1109 14 Dtool_kAOMxlGu 478 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::find_matching_vertex
//       Access: Public
//  Description: If the EggVertexPool already has a vertex matching
//               the indicated vertex, returns it; otherwise, returns
//               NULL.  This is similar to create_unique_vertex()
//               except that a new vertex is never created.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  4 copy 1 2040  
211 14 Dtool_kAOMJ0C_ 4 210 1990 0 14 Dtool_kAOMJ0C_ 342 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_vertex
//       Access: Public
//  Description: Removes the vertex from the pool.  It is an error if
//               the vertex is not already a member of the pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  6 vertex 1 2039  
212 14 Dtool_kAOMrkZg 6 211 2003 0 14 Dtool_kAOMrkZg 591 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::remove_unused_vertices
//       Access: Public
//  Description: Removes all vertices from the pool that are not
//               referenced by at least one primitive.  Also collapses
//               together equivalent vertices, and renumbers all
//               vertices after the operation so their indices are
//               consecutive, beginning at zero.  Returns the number
//               of vertices removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2042  
213 14 Dtool_kAOMh7hw 4 212 1990 0 14 Dtool_kAOMh7hw 733 ////////////////////////////////////////////////////////////////////
//     Function: EggVertexPool::transform
//       Access: Public
//  Description: Applies the indicated transformation matrix to all
//               the vertices.  However, vertices that are attached to
//               primitives that believe their vertices are in a local
//               coordinate system are transformed only by the scale
//               and rotation component.  If a vertex happens to be
//               attached both to a local and a global primitive, and
//               the transformation includes a translation component,
//               the vertex will be split.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2042  3 mat 1 2004  
214 14 Dtool_kAOMOYkz 7 213 1986 0 14 Dtool_kAOMOYkz 0 0 
215 14 Dtool_kAOMyaS_ 7 215 2002 1034 14 Dtool_kAOMyaS_ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2055  
216 14 Dtool_kAOM7UZA 7 215 2002 1034 14 Dtool_kAOM7UZA 0 1 4 name 1 1995  
217 14 Dtool_kAOM0aiu 7 215 2002 1034 14 Dtool_kAOM0aiu 0 0 
218 14 Dtool_kAOMsatI 7 216 2002 1034 14 Dtool_kAOMsatI 237 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  4 copy 1 2055  
219 14 Dtool_kAOMRZjf 6 217 1991 0 14 Dtool_kAOMRZjf 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::empty
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2055  
220 14 Dtool_kAOMn_u7 6 218 2054 0 14 Dtool_kAOMn_u7 217 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::size
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2055  
221 14 Dtool_kAOMdGRB 4 219 1990 0 14 Dtool_kAOMdGRB 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
222 14 Dtool_kAOMWCah 7 220 1999 1034 14 Dtool_kAOMWCah 665 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_first_child
//       Access: Published
//  Description: Returns the first child in the group's list of
//               children, or NULL if the list of children is empty.
//               Can be used with get_next_child() to return the
//               complete list of children without using the iterator
//               class; however, this is non-thread-safe, and so is
//               not recommended except for languages other than C++
//               which cannot use the iterators.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
223 14 Dtool_kAOM7zBu 7 221 1999 1034 14 Dtool_kAOM7zBu 857 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_next_child
//       Access: Published
//  Description: Returns the next child in the group's list of
//               children since the last call to get_first_child() or
//               get_next_child(), or NULL if the last child has been
//               returned.  Can be used with get_first_child() to
//               return the complete list of children without using
//               the iterator class; however, this is non-thread-safe,
//               and so is not recommended except for languages other
//               than C++ which cannot use the iterators.
//
//               It is an error to call this without previously
//               calling get_first_child().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
224 14 Dtool_kAOMQ_Zu 7 222 1999 1034 14 Dtool_kAOMQ_Zu 385 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::add_child
//       Access: Published
//  Description: Adds the indicated child to the group and returns it.
//               If the child node is already a child of some other
//               node, removes it first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  4 node 1 1999  
225 14 Dtool_kAOMKOID 7 223 1999 1034 14 Dtool_kAOMKOID 398 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_child
//       Access: Published
//  Description: Removes the indicated child node from the group and
//               returns it.  If the child was not already in the
//               group, does nothing and returns NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  4 node 1 1999  
226 14 Dtool_kAOM0PPR 4 224 1990 0 14 Dtool_kAOM0PPR 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node to this
//               one.  This is especially useful because the group
//               node copy assignment operator does not copy children.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  5 other 1 2002  
227 14 Dtool_kAOMIxZU 7 225 1999 1034 14 Dtool_kAOMIxZU 410 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::find_child
//       Access: Published
//  Description: Returns the child of this node whose name is the
//               indicated string, or NULL if there is no child of
//               this node by that name.  Does not search recursively.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2055  4 name 1 1995  
228 14 Dtool_kAOMWpyO 6 226 1991 0 14 Dtool_kAOMWpyO 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_absolute_pathnames
//       Access: Published
//  Description: Returns true if any nodes at this level and below
//               include a reference to a file via an absolute
//               pathname, or false if all references are relative.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2055  
229 14 Dtool_kAOMQMtA 4 227 1990 0 14 Dtool_kAOMQMtA 472 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::resolve_filenames
//       Access: Published
//  Description: Walks the tree and attempts to resolve any filenames
//               encountered.  This looks up filenames along the
//               specified search path; it does not automatically
//               search the model_path for missing files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  10 searchpath 1 2057  
230 14 Dtool_kAOMGIQc 4 228 1990 0 14 Dtool_kAOMGIQc 452 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::force_filenames
//       Access: Published
//  Description: Similar to resolve_filenames, but each non-absolute
//               filename encountered is arbitrarily taken to be in
//               the indicated directory, whether or not the so-named
//               filename exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  9 directory 1 2060  
231 14 Dtool_kAOM1ZhK 4 229 1990 0 14 Dtool_kAOM1ZhK 393 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::reverse_vertex_ordering
//       Access: Published
//  Description: Reverses the vertex ordering of all polygons defined
//               at this node and below.  Does not change the surface
//               normals, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
232 14 Dtool_kAOM_XGy 4 230 1990 0 14 Dtool_kAOM_XGy 1132 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2002  9 threshold 1 1919  2 cs 1 2063  
233 14 Dtool_kAOMC1bM 4 230 1990 0 14 Dtool_kAOMC1bM 1132 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_vertex_normals
//       Access: Published
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  9 threshold 1 1919  
234 14 Dtool_kAOMxT4d 4 231 1990 0 14 Dtool_kAOMxT4d 1077 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  2 cs 1 2063  
235 14 Dtool_kAOMb2rf 4 231 1990 0 14 Dtool_kAOMb2rf 1077 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_polygon_normals
//       Access: Published
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
236 14 Dtool_kAOMtsfH 4 232 1990 0 14 Dtool_kAOMtsfH 606 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::strip_normals
//       Access: Published
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
237 14 Dtool_kAOMd7eS 6 233 1991 0 14 Dtool_kAOMd7eS 1204 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate set for all vertices at
//               this level and below.  Use the empty string for the
//               default texture coordinate set.
//
//               It is necessary for each vertex to already have a
//               normal (or at least a polygon normal), as well as a
//               texture coordinate in the named texture coordinate
//               set, before calling this function.  You might precede
//               this with recompute_vertex_normals() to ensure that
//               the normals exist.
//
//               Like recompute_vertex_normals(), this function does
//               not remove or adjust vertices in the vertex pool; it
//               only adds new vertices with the new tangents and
//               binormals computed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  7 uv_name 1 2064  
238 14 Dtool_kAOMyGU5 6 233 1991 0 14 Dtool_kAOMyGU5 397 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               the named texture coordinate sets.
//               Returns true if anything was done.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  5 names 1 2067  
239 14 Dtool_kAOMWrV6 6 234 1991 0 14 Dtool_kAOMWrV6 421 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::recompute_tangent_binormal_auto
//       Access: Published
//  Description: This function recomputes the tangent and binormal for
//               any texture coordinate set that affects a normal map.
//               Returns true if anything was done.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
240 14 Dtool_kAOM_se2 6 236 2003 0 14 Dtool_kAOM_se2 772 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::triangulate_polygons
//       Access: Published
//  Description: Replace all higher-order polygons at this point in
//               the scene graph and below with triangles.  Returns
//               the total number of new triangles produced, less
//               degenerate polygons removed.
//
//               If flags contains T_polygon and T_convex, both
//               concave and convex polygons will be subdivided into
//               triangles; with only T_polygon, only concave polygons
//               will be subdivided, and convex polygons will be
//               largely unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  5 flags 1 2003  
241 14 Dtool_kAOM0h9U 4 237 1990 0 14 Dtool_kAOM0h9U 318 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::mesh_triangles
//       Access: Published
//  Description: Combine triangles together into triangle strips, at
//               this group and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  5 flags 1 2003  
242 14 Dtool_kAOMXEMS 6 238 2003 0 14 Dtool_kAOMXEMS 260 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::rename_nodes
//       Access: Published
//  Description: Rename by stripping out the prefix
//////////////////////////////////////////////////////////////////// 3 4 this 3 2002  12 strip_prefix 1 2007  7 recurse 1 1991  
243 14 Dtool_kAOMfhj6 6 239 2003 0 14 Dtool_kAOMfhj6 1111 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_unused_vertices
//       Access: Published
//  Description: Removes all vertices from VertexPools within this
//               group or below that are not referenced by at least
//               one primitive.  Also collapses together equivalent
//               vertices, and renumbers all vertices after the
//               operation so their indices are consecutive, beginning
//               at zero.  Returns the total number of vertices
//               removed.
//
//               Note that this operates on the VertexPools within
//               this group level, without respect to primitives that
//               reference these vertices (unlike other functions like
//               strip_normals()).  It is therefore most useful to
//               call this on the EggData root, rather than on a
//               subgroup within the hierarchy, since a VertexPool may
//               appear anywhere in the hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  7 recurse 1 1991  
244 14 Dtool_kAOMlgIl 6 240 2003 0 14 Dtool_kAOMlgIl 453 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::remove_invalid_primitives
//       Access: Published
//  Description: Removes primitives at this level and below which
//               appear to be degenerate; e.g. polygons with fewer
//               than 3 vertices, etc.  Returns the number of
//               primitives removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  7 recurse 1 1991  
245 14 Dtool_kAOMNnDZ 4 241 1990 0 14 Dtool_kAOMNnDZ 635 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading information on all
//               primitives at this node and below, so that it may be
//               accurately rederived by the next call to
//               get_connected_shading().
//
//               It may be a good idea to call
//               remove_unused_vertices() as well, to establish the
//               correct connectivity between common vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
246 14 Dtool_kAOMVHnl 4 242 1990 0 14 Dtool_kAOMVHnl 463 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::get_connected_shading
//       Access: Published
//  Description: Queries the connected_shading information on all
//               primitives at this node and below, to ensure that it
//               has been completely filled in before we start mucking
//               around with vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2002  
247 14 Dtool_kAOMsdwz 4 243 1990 0 14 Dtool_kAOMsdwz 1614 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::unify_attributes
//       Access: Published
//  Description: Applies per-vertex normal and color to all vertices,
//               if they are in fact per-vertex (and different for
//               each vertex), or moves them to the primitive if they
//               are all the same.
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               If use_connected_shading is true, each polygon is
//               considered in conjunction with all connected
//               polygons; otherwise, each polygon is considered
//               individually.
//
//               If allow_per_primitive is false, S_per_face or
//               S_overall will treated like S_per_vertex: normals and
//               colors will always be assigned to the vertices.  In
//               this case, there will never be per-primitive colors
//               or normals after this call returns.  On the other
//               hand, if allow_per_primitive is true, then S_per_face
//               means that normals and colors should be assigned to
//               the primitives, and removed from the vertices, as
//               described above.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 4 4 this 3 2002  21 use_connected_shading 1 1991  19 allow_per_primitive 1 1991  7 recurse 1 1991  
248 14 Dtool_kAOMdiHh 4 244 1990 0 14 Dtool_kAOMdiHh 768 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_last_attribute
//       Access: Published
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  7 recurse 1 1991  
249 14 Dtool_kAOMm0yZ 4 245 1990 0 14 Dtool_kAOMm0yZ 772 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::apply_first_attribute
//       Access: Published
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may create redundant vertices in the vertex
//               pool, so it may be a good idea to follow this up with
//               remove_unused_vertices().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  7 recurse 1 1991  
250 14 Dtool_kAOMUq1z 4 246 1990 0 14 Dtool_kAOMUq1z 490 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::post_apply_flat_attribute
//       Access: Published
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2002  7 recurse 1 1991  
251 14 Dtool_kAOMsIZU 6 247 1991 0 14 Dtool_kAOMsIZU 380 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2055  
252 14 Dtool_kAOME4HK 6 248 1991 0 14 Dtool_kAOME4HK 416 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2055  
253 14 Dtool_kAOM0QVV 6 249 1991 0 14 Dtool_kAOM0QVV 417 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2055  
254 14 Dtool_kAOMdAYG 6 250 1991 0 14 Dtool_kAOMdAYG 765 // Filename: eggGroupNode.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroupNode::is_right
//       Access: Private, Static
//  Description: Returns true if the 2-d v1 is to the right of v2.
//////////////////////////////////////////////////////////////////// 2 2 v1 1 2069  2 v2 1 2069  
255 14 Dtool_kAOMl4Aq 7 251 1986 0 14 Dtool_kAOMl4Aq 0 0 
256 14 Dtool_kAOMTDmL 7 253 2009 1239 14 Dtool_kAOMTDmL 222 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
257 14 Dtool_kAOMD72v 7 253 2009 1239 14 Dtool_kAOMD72v 716 // Filename: eggRenderMode.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2072  
258 14 Dtool_kAOMr5z0 6 254 2009 0 14 Dtool_kAOMr5z0 235 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2009  4 copy 1 2072  
259 14 Dtool_kAOMtH5E 4 255 1990 0 14 Dtool_kAOMtH5E 301 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::write
//       Access: Public
//  Description: Writes the attributes to the indicated output stream in
//               Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2072  3 out 1 1996  12 indent_level 1 2003  
260 14 Dtool_kAOM7kse 4 260 1990 0 14 Dtool_kAOM7kse 849 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_alpha_mode
//       Access: Public
//  Description: Specifies precisely how the transparency for this
//               geometry should be achieved, or if it should be used.
//               The default, AM_unspecified, is to use transparency
//               if the geometry has a color whose alpha value is
//               non-1, or if it has a four-channel texture applied;
//               otherwise, AM_on forces transparency on, and AM_off
//               forces it off.  The other flavors of transparency are
//               specific ways to turn on transparency, which may or
//               may not be supported by a particular rendering
//               backend.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2009  4 mode 1 1911  
261 14 Dtool_kAOM3t3A 6 261 1911 0 14 Dtool_kAOM3t3A 357 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_alpha_mode
//       Access: Public
//  Description: Returns the alpha mode that was set, or
//               AM_unspecified if nothing was set.  See
//               set_alpha_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
262 14 Dtool_kAOMCEUa 4 262 1990 0 14 Dtool_kAOMCEUa 412 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_write_mode
//       Access: Public
//  Description: Specifies whether writes should be made to the depth
//               buffer (assuming the rendering backend provides a
//               depth buffer) when rendering this geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2009  4 mode 1 1912  
263 14 Dtool_kAOMaHHZ 6 263 1912 0 14 Dtool_kAOMaHHZ 376 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_write_mode
//       Access: Public
//  Description: Returns the depth_write mode that was set, or
//               DWM_unspecified if nothing was set.  See
//               set_depth_write_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
264 14 Dtool_kAOMOa7S 4 264 1990 0 14 Dtool_kAOMOa7S 521 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_test_mode
//       Access: Public
//  Description: Specifies whether this geometry should be tested
//               against the depth buffer when it is drawn (assuming
//               the rendering backend provides a depth buffer).  Note
//               that this is different, and independent from, the
//               depth_write mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2009  4 mode 1 1913  
265 14 Dtool_kAOMkkuX 6 265 1913 0 14 Dtool_kAOMkkuX 373 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_test_mode
//       Access: Public
//  Description: Returns the depth_test mode that was set, or
//               DTM_unspecified if nothing was set.  See
//               set_depth_test_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
266 14 Dtool_kAOMreNq 4 266 1990 0 14 Dtool_kAOMreNq 530 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_visibility_mode
//       Access: Public
//  Description: Specifies whether this geometry is to be considered
//               normally visible, or hidden.  If it is hidden, it is
//               either not loaded into the scene graph at all, or
//               loaded as a "stashed" node, according to the setting
//               of egg-suppress-hidden.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2009  4 mode 1 1914  
267 14 Dtool_kAOMta47 6 267 1914 0 14 Dtool_kAOMta47 372 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_visibility_mode
//       Access: Public
//  Description: Returns the visibility mode that was set, or
//               VM_unspecified if nothing was set.  See
//               set_visibility_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
268 14 Dtool_kAOMuxBz 4 268 1990 0 14 Dtool_kAOMuxBz 459 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_depth_offset
//       Access: Public
//  Description: Sets the "depth-offset" flag associated with this
//               object.  This adds or subtracts an offset bias
//               into the depth buffer. See also DepthOffsetAttrib
//               and NodePath::set_depth_offset().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2009  4 bias 1 2003  
269 14 Dtool_kAOMScq9 6 269 2003 0 14 Dtool_kAOMScq9 336 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_depth_offset
//       Access: Public
//  Description: Returns the "depth-offset" flag as set for this
//               particular object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
270 14 Dtool_kAOM0eEO 6 270 1991 0 14 Dtool_kAOM0eEO 348 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_depth_offset
//       Access: Public
//  Description: Returns true if the depth-offset flag has been set for
//               this particular object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
271 14 Dtool_kAOM1yzp 4 271 1990 0 14 Dtool_kAOM1yzp 330 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_depth_offset
//       Access: Public
//  Description: Removes the depth-offset flag from this particular
//               object.  See set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2009  
272 14 Dtool_kAOM1SSq 4 272 1990 0 14 Dtool_kAOM1SSq 534 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_draw_order
//       Access: Public
//  Description: Sets the "draw-order" flag associated with this
//               object.  This specifies a particular order in which
//               objects of this type should be drawn, within the
//               specified bin.  If a bin is not explicitly specified,
//               "fixed" is used.  See also set_bin().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2009  5 order 1 2003  
273 14 Dtool_kAOMY4RM 6 273 2003 0 14 Dtool_kAOMY4RM 330 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_draw_order
//       Access: Public
//  Description: Returns the "draw-order" flag as set for this
//               particular object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
274 14 Dtool_kAOMV5rc 6 274 1991 0 14 Dtool_kAOMV5rc 342 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_draw_order
//       Access: Public
//  Description: Returns true if the draw-order flag has been set for
//               this particular object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
275 14 Dtool_kAOMgDCN 4 275 1990 0 14 Dtool_kAOMgDCN 324 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_draw_order
//       Access: Public
//  Description: Removes the draw-order flag from this particular
//               object.  See set_draw_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2009  
276 14 Dtool_kAOMOpBx 4 276 1990 0 14 Dtool_kAOMOpBx 691 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::set_bin
//       Access: Public
//  Description: Sets the "bin" string for this particular object.
//               This names a particular bin in which the object
//               should be rendered.  The exact meaning of a bin is
//               implementation defined, but generally a GeomBin
//               matching each bin name must also be specifically
//               added to the rendering engine (e.g. the
//               CullTraverser) in use for this to work.  See also
//               set_draw_order().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2009  3 bin 1 1995  
277 14 Dtool_kAOMtssd 6 277 1995 0 14 Dtool_kAOMtssd 326 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::get_bin
//       Access: Public
//  Description: Returns the bin name that has been set for this
//               particular object, if any.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
278 14 Dtool_kAOM6rGu 6 278 1991 0 14 Dtool_kAOM6rGu 319 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::has_bin
//       Access: Public
//  Description: Returns true if a bin name has been set for this
//               particular object.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2072  
279 14 Dtool_kAOMlrzU 4 279 1990 0 14 Dtool_kAOMlrzU 315 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::clear_bin
//       Access: Public
//  Description: Removes the bin name that was set for this particular
//               object.  See set_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2009  
280 14 Dtool_kAOMpyzm 6 280 1991 0 14 Dtool_kAOMpyzm 228 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2072  5 other 1 2072  
281 14 Dtool_kAOMV_Rm 6 281 1991 0 14 Dtool_kAOMV_Rm 230 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2072  5 other 1 2072  
282 14 Dtool_kAOMT1ZU 6 282 1991 0 14 Dtool_kAOMT1ZU 228 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::Ordering Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2072  5 other 1 2072  
283 14 Dtool_kAOMX3lo 6 283 1911 0 14 Dtool_kAOMX3lo 413 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_alpha_mode
//       Access: Public
//  Description: Returns the AlphaMode value associated with the given
//               string representation, or AM_unspecified if the string
//               does not match any known AlphaMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
284 14 Dtool_kAOMj8l7 6 284 1912 0 14 Dtool_kAOMj8l7 447 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_write_mode
//       Access: Public
//  Description: Returns the DepthWriteMode value associated with the
//               given string representation, or DWM_unspecified if
//               the string does not match any known DepthWriteMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
285 14 Dtool_kAOMecqF 6 285 1913 0 14 Dtool_kAOMecqF 444 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_depth_test_mode
//       Access: Public
//  Description: Returns the DepthTestMode value associated with the
//               given string representation, or DTM_unspecified if
//               the string does not match any known DepthTestMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
286 14 Dtool_kAOMMsGH 6 286 1914 0 14 Dtool_kAOMMsGH 437 ////////////////////////////////////////////////////////////////////
//     Function: EggRenderMode::string_visibility_mode
//       Access: Public
//  Description: Returns the HiddenMode value associated with the
//               given string representation, or VM_unspecified if
//               the string does not match any known HiddenMode
//               value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
287 14 Dtool_kAOMYBRs 7 287 1986 0 14 Dtool_kAOMYBRs 0 0 
288 14 Dtool_kAOMmgGu 7 290 2074 1242 14 Dtool_kAOMmgGu 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
289 14 Dtool_kAOMqhDZ 7 290 2074 1242 14 Dtool_kAOMqhDZ 226 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2075  
290 14 Dtool_kAOMQzqw 6 291 2074 0 14 Dtool_kAOMQzqw 234 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  4 copy 1 2075  
291 14 Dtool_kAOMdMr5 4 293 1990 0 14 Dtool_kAOMdMr5 266 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::clear_transform
//       Access: Public
//  Description: Resets the transform to empty, identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2074  
292 14 Dtool_kAOMserh 4 294 1990 0 14 Dtool_kAOMserh 304 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate2d
//       Access: Public
//  Description: Appends a 2-d translation operation to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  9 translate 1 2069  
293 14 Dtool_kAOMdeDW 4 295 1990 0 14 Dtool_kAOMdeDW 304 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_translate3d
//       Access: Public
//  Description: Appends a 3-d translation operation to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  9 translate 1 2019  
294 14 Dtool_kAOMgbuR 4 296 1990 0 14 Dtool_kAOMgbuR 384 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate2d
//       Access: Public
//  Description: Appends a 2-d rotation to the current transform.  The
//               rotation angle is specified in degrees
//               counterclockwise about the origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  5 angle 1 1919  
295 14 Dtool_kAOMi76M 4 297 1990 0 14 Dtool_kAOMi76M 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotx
//       Access: Public
//  Description: Appends a rotation about the X axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  5 angle 1 1919  
296 14 Dtool_kAOMiDrW 4 298 1990 0 14 Dtool_kAOMiDrW 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_roty
//       Access: Public
//  Description: Appends a rotation about the Y axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  5 angle 1 1919  
297 14 Dtool_kAOMiLcg 4 299 1990 0 14 Dtool_kAOMiLcg 391 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotz
//       Access: Public
//  Description: Appends a rotation about the Z axis to the current
//               transform.  The rotation angle is specified in
//               degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  5 angle 1 1919  
298 14 Dtool_kAOMNSrS 4 300 1990 0 14 Dtool_kAOMNSrS 403 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends an arbitrary 3-d rotation to the current
//               transform, expressed as a quaternion.  This is
//               converted to axis-angle notation for the egg file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  4 quat 1 2077  
299 14 Dtool_kAOM5cDY 4 300 1990 0 14 Dtool_kAOM5cDY 406 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_rotate3d
//       Access: Public
//  Description: Appends a 3-d rotation about an arbitrary axis to the
//               current transform.  The rotation angle is specified
//               in degrees counterclockwise about the axis.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2074  5 angle 1 1919  4 axis 1 2019  
300 14 Dtool_kAOM_EZa 4 301 1990 0 14 Dtool_kAOM_EZa 301 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale2d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  5 scale 1 2080  
301 14 Dtool_kAOMnxdo 4 302 1990 0 14 Dtool_kAOMnxdo 301 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_scale3d
//       Access: Public
//  Description: Appends a possibly non-uniform scale to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  5 scale 1 2083  
302 14 Dtool_kAOMX0Zd 4 303 1990 0 14 Dtool_kAOMX0Zd 277 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_uniform_scale
//       Access: Public
//  Description: Appends a uniform scale to the current transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  5 scale 1 1919  
303 14 Dtool_kAOM4xVb 4 304 1990 0 14 Dtool_kAOM4xVb 296 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix3
//       Access: Public
//  Description: Appends an arbitrary 3x3 matrix to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  3 mat 1 2086  
304 14 Dtool_kAOMyNWT 4 305 1990 0 14 Dtool_kAOMyNWT 296 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::add_matrix4
//       Access: Public
//  Description: Appends an arbitrary 4x4 matrix to the current
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  3 mat 1 2004  
305 14 Dtool_kAOMICsz 6 306 1991 0 14 Dtool_kAOMICsz 432 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform
//       Access: Public
//  Description: Returns true if the transform is nonempty, false if
//               it is empty (no transform components have been
//               added).  This is true for either a 2-d or a 3-d
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2075  
306 14 Dtool_kAOMAHYm 6 307 1991 0 14 Dtool_kAOMAHYm 632 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform2d
//       Access: Public
//  Description: Returns true if the transform is specified as a 2-d
//               transform, e.g. with a 3x3 matrix, or false if it is
//               specified as a 3-d transform (with a 4x4 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 2-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2075  
307 14 Dtool_kAOMBcLy 4 308 1990 0 14 Dtool_kAOMBcLy 385 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform2d
//       Access: Public
//  Description: Sets the overall transform as a 3x3 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  3 mat 1 2086  
308 14 Dtool_kAOMKHQX 6 309 1991 0 14 Dtool_kAOMKHQX 632 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::has_transform3d
//       Access: Public
//  Description: Returns true if the transform is specified as a 3-d
//               transform, e.g. with a 4x4 matrix, or false if it is
//               specified as a 2-d transform (with a 2x2 matrix), or
//               not specified at all.
//
//               Normally, EggTextures have a 3-d matrix (but
//               occasionally they use a 3-d matrix), and EggGroups
//               always have a 3-d matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2075  
309 14 Dtool_kAOMSfjm 4 310 1990 0 14 Dtool_kAOMSfjm 385 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::set_transform3d
//       Access: Public
//  Description: Sets the overall transform as a 4x4 matrix.  This
//               completely replaces whatever componentwise transform
//               may have been defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2074  3 mat 1 2004  
310 14 Dtool_kAOM_l37 7 311 2089 0 14 Dtool_kAOM_l37 348 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform2d
//       Access: Public
//  Description: Returns the overall transform as a 3x3 matrix.  It is
//               an error to call this if has_transform3d() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2075  
311 14 Dtool_kAOMxlvs 6 312 2004 0 14 Dtool_kAOMxlvs 450 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_transform3d
//       Access: Public
//  Description: Returns the overall transform as a 4x4 matrix.  It is
//               valid to call this even if has_transform2d() is true;
//               in this case, the 3x3 transform will be expanded to a
//               4x4 matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2075  
312 14 Dtool_kAOMDiCM 6 313 1991 0 14 Dtool_kAOMDiCM 318 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::transform_is_identity
//       Access: Public
//  Description: Returns true if the described transform is identity,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2075  
313 14 Dtool_kAOMn3Zw 6 315 2003 0 14 Dtool_kAOMn3Zw 306 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_num_components
//       Access: Public
//  Description: Returns the number of components that make up the
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2075  
314 14 Dtool_kAOMUtyU 6 316 1916 0 14 Dtool_kAOMUtyU 267 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_type
//       Access: Public
//  Description: Returns the type of the nth component.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2075  1 n 1 2003  
315 14 Dtool_kAOMQrgR 6 317 1919 0 14 Dtool_kAOMQrgR 531 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_number
//       Access: Public
//  Description: Returns the solitary number associated with the nth
//               component.  In the case of a rotation, this is the
//               angle in degrees to rotate; in the case of uniform
//               scale, this is the amount of the scale.  Other types
//               do not use this property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2075  1 n 1 2003  
316 14 Dtool_kAOMv2X0 6 318 2080 0 14 Dtool_kAOMv2X0 519 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec2
//       Access: Public
//  Description: Returns the 2-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 2-d
//               vector property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2075  1 n 1 2003  
317 14 Dtool_kAOMuWbb 6 319 2083 0 14 Dtool_kAOMuWbb 519 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_vec3
//       Access: Public
//  Description: Returns the 3-component vector associated with the
//               nth component.  This may be the translate vector,
//               rotate axis, or non-uniform scale.  It is an error to
//               call this if the component type does not use a 3-d
//               vector property.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2075  1 n 1 2003  
318 14 Dtool_kAOMggA0 6 320 2086 0 14 Dtool_kAOMggA0 390 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat3
//       Access: Public
//  Description: Returns the 3x3 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix3.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2075  1 n 1 2003  
319 14 Dtool_kAOMhADb 6 321 2004 0 14 Dtool_kAOMhADb 390 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::get_component_mat4
//       Access: Public
//  Description: Returns the 4x4 matrix associated with the nth
//               component.  It is an error to call this if the
//               component type is not CT_matrix4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2075  1 n 1 2003  
320 14 Dtool_kAOMnJrv 4 322 1990 0 14 Dtool_kAOMnJrv 292 ////////////////////////////////////////////////////////////////////
//     Function: EggTransform::write
//       Access: Public
//  Description: Writes the transform to the indicated stream in Egg
//               format.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2075  3 out 1 1996  12 indent_level 1 2003  5 label 1 1995  
321 14 Dtool_kAOMMAjk 7 324 2092 1276 14 Dtool_kAOMMAjk 0 1 4 this 3 2090  
322 14 Dtool_kAOMdfeb 4 325 1990 0 14 Dtool_kAOMdfeb 0 3 4 this 3 2090  3 out 1 1996  12 indent_level 1 2003  
323 14 Dtool_kAOMXbAk 4 326 1990 0 14 Dtool_kAOMXbAk 0 2 4 this 3 2092  3 mat 1 2004  
324 14 Dtool_kAOMgiFq 7 327 1986 0 14 Dtool_kAOMgiFq 0 0 
325 14 Dtool_kAOMemc2 7 330 2093 1286 14 Dtool_kAOMemc2 235 ////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 9 switch_in 1 1919  10 switch_out 1 1919  6 center 1 2036  4 fade 1 1919  
326 14 Dtool_kAOM_Nir 7 330 2093 1286 14 Dtool_kAOM_Nir 235 ////////////////////////////////////////////////////////////////////
//     Function: EggSwitchConditionDistance::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 9 switch_in 1 1919  10 switch_out 1 1919  6 center 1 2036  
327 14 Dtool_kAOMq5Bf 7 344 1986 0 14 Dtool_kAOMq5Bf 0 0 
328 14 Dtool_kAOMO5L_ 6 332 1919 0 14 Dtool_kAOMO5L_ 0 1 4 this 3 2094  
329 14 Dtool_kAOM3UK1 4 333 1990 0 14 Dtool_kAOM3UK1 0 2 4 this 3 2093  5 value 1 1919  
330 14 Dtool_kAOMQD2H 6 335 1919 0 14 Dtool_kAOMQD2H 0 1 4 this 3 2094  
331 14 Dtool_kAOM1NkY 4 336 1990 0 14 Dtool_kAOM1NkY 0 2 4 this 3 2093  5 value 1 1919  
332 14 Dtool_kAOMird7 6 338 1919 0 14 Dtool_kAOMird7 0 1 4 this 3 2094  
333 14 Dtool_kAOMIshZ 4 339 1990 0 14 Dtool_kAOMIshZ 0 2 4 this 3 2093  5 value 1 1919  
334 14 Dtool_kAOMqtNt 6 342 2036 0 14 Dtool_kAOMqtNt 0 1 4 this 3 2094  
335 14 Dtool_kAOMGDad 7 361 2096 1295 14 Dtool_kAOMGDad 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2048  
336 14 Dtool_kAOMA1nz 7 361 2096 1295 14 Dtool_kAOMA1nz 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
337 14 Dtool_kAOMo0fE 7 361 2096 1295 14 Dtool_kAOMo0fE 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
338 14 Dtool_kAOM4lhn 7 362 2096 1295 14 Dtool_kAOM4lhn 233 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 copy 1 2048  
339 14 Dtool_kAOM4Dn7 4 364 1990 0 14 Dtool_kAOM4Dn7 327 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write
//       Access: Published, Virtual
//  Description: Writes the group and all of its children to the
//               indicated output stream in Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
340 14 Dtool_kAOMn03j 4 365 1990 0 14 Dtool_kAOMn03j 326 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_billboard_flags
//       Access: Published
//  Description: Writes just the <Billboard> entry and related fields to
//               the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
341 14 Dtool_kAOMxbxc 4 366 1990 0 14 Dtool_kAOMxbxc 322 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_collide_flags
//       Access: Published
//  Description: Writes just the <Collide> entry and related fields to
//               the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
342 14 Dtool_kAOMxeV_ 4 367 1990 0 14 Dtool_kAOMxeV_ 311 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_model_flags
//       Access: Published
//  Description: Writes the <Model> flag and related flags to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
343 14 Dtool_kAOMsgHb 4 368 1990 0 14 Dtool_kAOMsgHb 313 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_switch_flags
//       Access: Published
//  Description: Writes the <Switch> flag and related flags to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
344 14 Dtool_kAOM0xU5 4 369 1990 0 14 Dtool_kAOM0xU5 317 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_object_types
//       Access: Published
//  Description: Writes just the <ObjectTypes> entries, if any, to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
345 14 Dtool_kAOMIFLx 4 370 1990 0 14 Dtool_kAOMIFLx 272 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_decal_flags
//       Access: Published
//  Description: Writes the flags related to decaling, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
346 14 Dtool_kAOMl6kP 4 371 1990 0 14 Dtool_kAOMl6kP 301 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_tags
//       Access: Published
//  Description: Writes just the <Tag> entries, if any, to the
//               indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
347 14 Dtool_kAOMeW5J 4 372 1990 0 14 Dtool_kAOMeW5J 344 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::write_render_mode
//       Access: Published
//  Description: Writes the flags inherited from EggRenderMode and
//               similar flags that control obscure render effects.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2048  3 out 1 1996  12 indent_level 1 2003  
348 14 Dtool_kAOMwL5B 6 373 1991 0 14 Dtool_kAOMwL5B 508 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_joint
//       Access: Published, Virtual
//  Description: Returns true if this particular node represents a
//               <Joint> entry or not.  This is a handy thing to know
//               since Joints are sorted to the end of their sibling
//               list when writing an egg file.  See
//               EggGroupNode::write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
349 14 Dtool_kAOMBkMb 6 374 2009 0 14 Dtool_kAOMBkMb 554 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
350 14 Dtool_kAOMmFzS 6 375 2009 0 14 Dtool_kAOMmFzS 566 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_write_mode other
//               than DWM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
351 14 Dtool_kAOMTTlV 6 376 2009 0 14 Dtool_kAOMTTlV 564 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_test_mode other
//               than DTM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
352 14 Dtool_kAOMVd5a 6 377 2009 0 14 Dtool_kAOMVd5a 563 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a visibility_mode other
//               than VM_unspecified.  Returns a valid EggRenderMode
//               pointer if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
353 14 Dtool_kAOMRcRh 6 378 2009 0 14 Dtool_kAOMRcRh 540 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
354 14 Dtool_kAOM76XI 6 379 2009 0 14 Dtool_kAOM76XI 536 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
355 14 Dtool_kAOMoQnq 6 380 2009 0 14 Dtool_kAOMoQnq 523 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this group that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
356 14 Dtool_kAOMJ8J_ 6 381 1991 0 14 Dtool_kAOMJ8J_ 619 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_indexed
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "indexed" scalar
//               set.  Returns the value of the indexed scalar if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "indexed" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
357 14 Dtool_kAOMeytv 6 382 1991 0 14 Dtool_kAOMeytv 607 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::determine_decal
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               at this level or above that has the "decal" flag
//               set.  Returns the value of the decal flag if it
//               is found, or false if it is not.
//
//               In other words, returns true if the "decal" flag is
//               in effect for the indicated node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
358 14 Dtool_kAOM_8Pb 4 383 1990 0 14 Dtool_kAOM_8Pb 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_group_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 type 1 1922  
359 14 Dtool_kAOMCug2 6 384 1922 0 14 Dtool_kAOMCug2 707 // Filename: eggGroup.I
// Created by:  drose (16Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
360 14 Dtool_kAOMrrYW 6 385 1991 0 14 Dtool_kAOMrrYW 668 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::is_instance_type
//       Access: Published
//  Description: Returns true if this group is an instance type node;
//               i.e. it begins the root of a local coordinate space.
//               This is not related to instancing (multiple copies of
//               a node in a scene graph).
//
//               This also includes the case of the node including a
//               billboard flag without an explicit center, which
//               implicitly makes the node behave like an instance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
361 14 Dtool_kAOMPYft 4 386 1990 0 14 Dtool_kAOMPYft 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 type 1 1924  
362 14 Dtool_kAOMUh7T 6 387 1924 0 14 Dtool_kAOMUh7T 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
363 14 Dtool_kAOMVkAl 4 388 1990 0 14 Dtool_kAOMVkAl 1120 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_billboard_center
//       Access: Published
//  Description: Sets the point around which the billboard will
//               rotate, if this node contains a billboard
//               specification.
//
//               If a billboard type is given but no billboard_center
//               is specified, then the group node is treated as an
//               <Instance>, and the billboard rotates around the
//               origin.  If, however, a billboard_center is
//               specified, then the group node is *not* treated as an
//               <Instance>, and the billboard rotates around the
//               specified point.
//
//               The point is in the same coordinate system as the
//               vertices of this node: usually global, but possibly
//               local if there is an <Instance> somewhere above.
//               Specifically, this is the coordinate system defined
//               by get_vertex_frame().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  16 billboard_center 1 2036  
364 14 Dtool_kAOMx2ed 4 389 1990 0 14 Dtool_kAOMx2ed 231 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
365 14 Dtool_kAOMVHfQ 6 390 1991 0 14 Dtool_kAOMVHfQ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
366 14 Dtool_kAOMyHSo 6 391 2036 0 14 Dtool_kAOMyHSo 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_billboard_center
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
367 14 Dtool_kAOMx6Vi 4 392 1990 0 14 Dtool_kAOMx6Vi 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_cs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 type 1 1925  
368 14 Dtool_kAOMvaDZ 6 393 1925 0 14 Dtool_kAOMvaDZ 220 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_cs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
369 14 Dtool_kAOMGbxk 4 394 1990 0 14 Dtool_kAOMGbxk 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  5 flags 1 2003  
370 14 Dtool_kAOMB6er 6 395 1926 0 14 Dtool_kAOMB6er 226 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
371 14 Dtool_kAOMf_or 4 396 1990 0 14 Dtool_kAOMf_or 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  14 collision_name 1 1995  
372 14 Dtool_kAOM2IvZ 4 397 1990 0 14 Dtool_kAOM2IvZ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
373 14 Dtool_kAOMW1Ru 6 398 1991 0 14 Dtool_kAOMW1Ru 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
374 14 Dtool_kAOMs1EG 6 399 1995 0 14 Dtool_kAOMs1EG 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collision_name
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
375 14 Dtool_kAOM1BYb 4 400 1990 0 14 Dtool_kAOM1BYb 221 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dcs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 type 1 1923  
376 14 Dtool_kAOM6COw 6 401 1923 0 14 Dtool_kAOM6COw 221 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dcs_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
377 14 Dtool_kAOMfCbY 6 402 1991 0 14 Dtool_kAOMfCbY 316 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_dcs_type
//       Access: Published
//  Description: Returns true if the specified DCS type is not
//               DC_none and not DC_unspecified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
378 14 Dtool_kAOMf8q2 4 403 1990 0 14 Dtool_kAOMf8q2 222 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_dart_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 type 1 1927  
379 14 Dtool_kAOMLvy6 6 404 1927 0 14 Dtool_kAOMLvy6 222 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_dart_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
380 14 Dtool_kAOM41Ux 4 405 1990 0 14 Dtool_kAOM41Ux 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
381 14 Dtool_kAOM0H1c 6 406 1991 0 14 Dtool_kAOM0H1c 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
382 14 Dtool_kAOMlCF0 4 407 1990 0 14 Dtool_kAOMlCF0 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_switch_fps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  3 fps 1 1919  
383 14 Dtool_kAOM8G_G 6 408 1919 0 14 Dtool_kAOM8G_G 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_switch_fps
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
384 14 Dtool_kAOMAKpq 4 409 1990 0 14 Dtool_kAOMAKpq 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_object_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  11 object_type 1 1995  
385 14 Dtool_kAOMLFHb 4 410 1990 0 14 Dtool_kAOMLFHb 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_object_types
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
386 14 Dtool_kAOMJ86I 6 411 2003 0 14 Dtool_kAOMJ86I 229 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_object_types
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
387 14 Dtool_kAOMa9XK 6 412 1995 0 14 Dtool_kAOMa9XK 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_object_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2048  5 index 1 2003  
388 14 Dtool_kAOMZ76F 6 413 1991 0 14 Dtool_kAOMZ76F 332 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_object_type
//       Access: Published
//  Description: Returns true if the indicated object type has been
//               added to the group, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2048  11 object_type 1 1995  
389 14 Dtool_kAOMOHD5 6 414 1991 0 14 Dtool_kAOMOHD5 440 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_object_type
//       Access: Published
//  Description: Removes the first instance of the indicated object
//               type from the group if it is present.  Returns true
//               if the object type was found and removed, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  11 object_type 1 1995  
390 14 Dtool_kAOMGIqq 4 415 1990 0 14 Dtool_kAOMGIqq 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_model_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
391 14 Dtool_kAOMT2IL 6 416 1991 0 14 Dtool_kAOMT2IL 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_model_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
392 14 Dtool_kAOMxoGr 4 417 1990 0 14 Dtool_kAOMxoGr 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_texlist_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
393 14 Dtool_kAOMPvu3 6 418 1991 0 14 Dtool_kAOMPvu3 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_texlist_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
394 14 Dtool_kAOMSunb 4 419 1990 0 14 Dtool_kAOMSunb 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_nofog_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
395 14 Dtool_kAOMA4F8 6 420 1991 0 14 Dtool_kAOMA4F8 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_nofog_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
396 14 Dtool_kAOM_rVD 4 421 1990 0 14 Dtool_kAOM_rVD 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_decal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
397 14 Dtool_kAOMhgzj 6 422 1991 0 14 Dtool_kAOMhgzj 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_decal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
398 14 Dtool_kAOM_U5j 4 423 1990 0 14 Dtool_kAOM_U5j 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_direct_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
399 14 Dtool_kAOMn6bP 6 424 1991 0 14 Dtool_kAOMn6bP 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_direct_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
400 14 Dtool_kAOMQTF_ 4 425 1990 0 14 Dtool_kAOMQTF_ 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_portal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
401 14 Dtool_kAOMkFnp 6 426 1991 0 14 Dtool_kAOMkFnp 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_portal_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
402 14 Dtool_kAOMivYc 4 427 1990 0 14 Dtool_kAOMivYc 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_polylight_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
403 14 Dtool_kAOMVOiF 6 428 1991 0 14 Dtool_kAOMVOiF 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_polylight_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
404 14 Dtool_kAOMeROZ 4 429 1990 0 14 Dtool_kAOMeROZ 335 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_indexed_flag
//       Access: Published
//  Description: If this flag is true, geometry at this node and below
//               will be generated as indexed geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 flag 1 1991  
405 14 Dtool_kAOM1pLz 4 430 1990 0 14 Dtool_kAOM1pLz 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
406 14 Dtool_kAOM_iEO 6 431 1991 0 14 Dtool_kAOM_iEO 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
407 14 Dtool_kAOMUi3l 6 432 1991 0 14 Dtool_kAOMUi3l 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_indexed_flag
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
408 14 Dtool_kAOM1gfh 4 433 1990 0 14 Dtool_kAOM1gfh 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 mask 1 2097  
409 14 Dtool_kAOML2rQ 4 434 1990 0 14 Dtool_kAOML2rQ 227 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
410 14 Dtool_kAOMhy6F 6 435 1991 0 14 Dtool_kAOMhy6F 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
411 14 Dtool_kAOMGxtd 7 436 2097 0 14 Dtool_kAOMGxtd 225 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
412 14 Dtool_kAOMUUte 4 437 1990 0 14 Dtool_kAOMUUte 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 mask 1 2097  
413 14 Dtool_kAOMzsDo 4 438 1990 0 14 Dtool_kAOMzsDo 232 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
414 14 Dtool_kAOMPGMA 6 439 1991 0 14 Dtool_kAOMPGMA 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
415 14 Dtool_kAOMkHBY 7 440 2097 0 14 Dtool_kAOMkHBY 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_from_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
416 14 Dtool_kAOMJQ9_ 4 441 1990 0 14 Dtool_kAOMJQ9_ 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 mask 1 2097  
417 14 Dtool_kAOMnw2o 4 442 1990 0 14 Dtool_kAOMnw2o 232 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
418 14 Dtool_kAOMFwdg 6 443 1991 0 14 Dtool_kAOMFwdg 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
419 14 Dtool_kAOMgwQ4 7 444 2097 0 14 Dtool_kAOMgwQ4 230 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_into_collide_mask
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
420 14 Dtool_kAOMd41w 4 445 1990 0 14 Dtool_kAOMd41w 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  10 blend_mode 1 1928  
421 14 Dtool_kAOMrtNy 6 446 1928 0 14 Dtool_kAOMrtNy 223 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
422 14 Dtool_kAOMpJnY 4 447 1990 0 14 Dtool_kAOMpJnY 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  15 blend_operand_a 1 1929  
423 14 Dtool_kAOMHARo 6 448 1929 0 14 Dtool_kAOMHARo 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_a
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
424 14 Dtool_kAOMhOn0 4 449 1990 0 14 Dtool_kAOMhOn0 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_operand_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  15 blend_operand_b 1 1929  
425 14 Dtool_kAOMI9RE 6 450 1929 0 14 Dtool_kAOMI9RE 228 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_operand_b
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
426 14 Dtool_kAOMzp1m 4 451 1990 0 14 Dtool_kAOMzp1m 224 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_blend_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  11 blend_color 1 2024  
427 14 Dtool_kAOM5NwH 4 452 1990 0 14 Dtool_kAOM5NwH 265 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_blend_color
//       Access: Published
//  Description: Removes the blend color specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
428 14 Dtool_kAOMTtqa 6 453 1991 0 14 Dtool_kAOMTtqa 310 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_blend_color
//       Access: Published
//  Description: Returns true if the blend color has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
429 14 Dtool_kAOMstdy 6 454 2024 0 14 Dtool_kAOMstdy 324 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_blend_color
//       Access: Published
//  Description: Returns the blend color if one has been specified, or
//               (0, 0, 0, 0) if one has not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
430 14 Dtool_kAOMIRO1 4 455 1990 0 14 Dtool_kAOMIRO1 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  3 lod 1 2090  
431 14 Dtool_kAOMq3tX 4 456 1990 0 14 Dtool_kAOMq3tX 218 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
432 14 Dtool_kAOMXcWg 6 457 1991 0 14 Dtool_kAOMXcWg 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
433 14 Dtool_kAOMKcL4 7 458 2090 0 14 Dtool_kAOMKcL4 216 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_lod
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
434 14 Dtool_kAOMAteX 4 459 1990 0 14 Dtool_kAOMAteX 878 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.  This value
//               will be copied to the PandaNode that is created for
//               this particular EggGroup if the egg file is loaded as
//               a scene.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2096  3 key 1 1995  5 value 1 1995  
435 14 Dtool_kAOMezZY 6 460 1995 0 14 Dtool_kAOMezZY 433 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2048  3 key 1 1995  
436 14 Dtool_kAOM7ymA 6 461 1991 0 14 Dtool_kAOM7ymA 404 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2048  3 key 1 1995  
437 14 Dtool_kAOM6Cat 4 462 1990 0 14 Dtool_kAOM6Cat 397 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  3 key 1 1995  
438 14 Dtool_kAOMDa06 6 463 2075 0 14 Dtool_kAOMDa06 603 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_default_pose
//       Access: Published
//  Description: Returns a read-only accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
439 14 Dtool_kAOMsMDk 6 464 2074 0 14 Dtool_kAOMsMDk 605 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::modify_default_pose
//       Access: Published
//  Description: Returns a writable accessor to the initial pose
//               transform.  This is the <DefaultPose> entry for a
//               Joint, and defines only the initial transform pose
//               for the unanimated joint; it has nothing to do with
//               the group's <Transform> entry, which defines the
//               (eventual) space of the group's vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
440 14 Dtool_kAOM9f2J 4 465 1990 0 14 Dtool_kAOM9f2J 580 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_default_pose
//       Access: Published
//  Description: Replaces the initial pose transform.  This is the
//               <DefaultPose> entry for a Joint, and defines only the
//               initial transform pose for the unanimated joint; it
//               has nothing to do with the group's <Transform> entry,
//               which defines the (eventual) space of the group's
//               vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  9 transform 1 2075  
441 14 Dtool_kAOM0e90 4 466 1990 0 14 Dtool_kAOM0e90 305 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_default_pose
//       Access: Published
//  Description: Removes the initial pose transform.  See
//               set_default_pose().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
442 14 Dtool_kAOMXeBY 4 467 1990 0 14 Dtool_kAOMXeBY 0 2 4 this 3 2096  7 u_speed 1 1919  
443 14 Dtool_kAOMXGyh 4 468 1990 0 14 Dtool_kAOMXGyh 0 2 4 this 3 2096  7 v_speed 1 1919  
444 14 Dtool_kAOMWmv6 4 469 1990 0 14 Dtool_kAOMWmv6 0 2 4 this 3 2096  7 r_speed 1 1919  
445 14 Dtool_kAOMZV09 6 470 1919 0 14 Dtool_kAOMZV09 0 1 4 this 3 2048  
446 14 Dtool_kAOMadlH 6 471 1919 0 14 Dtool_kAOMadlH 0 1 4 this 3 2048  
447 14 Dtool_kAOMZ9ig 6 472 1919 0 14 Dtool_kAOMZ9ig 0 1 4 this 3 2048  
448 14 Dtool_kAOMSS3d 6 473 1991 0 14 Dtool_kAOMSS3d 0 1 4 this 3 2096  
449 14 Dtool_kAOMHB62 4 474 1990 0 14 Dtool_kAOMHB62 467 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2096  4 vert 1 2039  10 membership 1 1919  
450 14 Dtool_kAOMl5JZ 4 474 1990 0 14 Dtool_kAOMl5JZ 467 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::ref_vertex
//       Access: Published
//  Description: Adds the vertex to the set of those referenced by the
//               group, at the indicated membership level.  If the
//               vertex is already being referenced, increases the
//               membership amount by the indicated amount.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 vert 1 2039  
451 14 Dtool_kAOMEYVk 4 475 1990 0 14 Dtool_kAOMEYVk 372 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_vertex
//       Access: Published
//  Description: Removes the vertex from the set of those referenced
//               by the group.  Does nothing if the vertex is not
//               already reffed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  4 vert 1 2039  
452 14 Dtool_kAOM7o8l 4 476 1990 0 14 Dtool_kAOM7o8l 273 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::unref_all_vertices
//       Access: Published
//  Description: Removes all vertices from the reference list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
453 14 Dtool_kAOMu4_n 6 477 1919 0 14 Dtool_kAOMu4_n 390 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_vertex_membership
//       Access: Published
//  Description: Returns the amount of membership of the indicated
//               vertex in this group.  If the vertex is not reffed by
//               the group, returns 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2048  4 vert 1 2040  
454 14 Dtool_kAOMcwbO 4 478 1990 0 14 Dtool_kAOMcwbO 340 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::set_vertex_membership
//       Access: Published
//  Description: Explicitly sets the net membership of the indicated
//               vertex in this group to the given value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2096  4 vert 1 2039  10 membership 1 1919  
455 14 Dtool_kAOMuK6m 4 479 1990 0 14 Dtool_kAOMuK6m 450 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::steal_vrefs
//       Access: Published
//  Description: Moves all of the vertex references from the indicated
//               other group into this one.  If a given vertex was
//               previously shared by both groups, the relative
//               memberships will be summed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  5 other 1 2096  
456 14 Dtool_kAOMhtdv 4 480 1990 0 14 Dtool_kAOMhtdv 340 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::test_vref_integrity
//       Access: Published
//  Description: Verifies that each vertex in the group exists and
//               that it knows it is referenced by the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
457 14 Dtool_kAOM93Zh 4 481 1990 0 14 Dtool_kAOM93Zh 474 // NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: EggGroup::add_group_ref
//       Access: Published
//  Description: Adds a new <Ref> entry to the group.  This declares
//               an internal reference to another node, and is used to
//               implement scene-graph instancing; it is only valid if
//               the group_type is GT_instance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  5 group 1 2096  
458 14 Dtool_kAOMakcS 6 482 2003 0 14 Dtool_kAOMakcS 321 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_num_group_refs
//       Access: Published
//  Description: Returns the number of <Ref> entries within this
//               group.  See add_group_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2048  
459 14 Dtool_kAOMg97e 7 483 2096 1295 14 Dtool_kAOMg97e 308 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::get_group_ref
//       Access: Published
//  Description: Returns the nth <Ref> entry within this group.  See
//               add_group_ref().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2048  1 n 1 2003  
460 14 Dtool_kAOMaZFu 4 484 1990 0 14 Dtool_kAOMaZFu 311 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::remove_group_ref
//       Access: Published
//  Description: Removes the nth <Ref> entry within this group.  See
//               add_group_ref().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2096  1 n 1 2003  
461 14 Dtool_kAOMGl6H 4 485 1990 0 14 Dtool_kAOMGl6H 315 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::clear_group_refs
//       Access: Published
//  Description: Removes all of the <Ref> entries within this group.
//               See add_group_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2096  
462 14 Dtool_kAOM4npg 6 486 1922 0 14 Dtool_kAOM4npg 415 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_group_type
//       Access: Published, Static
//  Description: Returns the GroupType value associated with the given
//               string representation, or GT_invalid if the string
//               does not match any known GroupType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 1995  
463 14 Dtool_kAOMHRvQ 6 487 1927 0 14 Dtool_kAOMHRvQ 409 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dart_type
//       Access: Published, Static
//  Description: Returns the DartType value associated with the given
//               string representation, or DT_none if the string
//               does not match any known DartType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 1995  
464 14 Dtool_kAOMSWba 6 488 1923 0 14 Dtool_kAOMSWba 413 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_dcs_type
//       Access: Published, Static
//  Description: Returns the DCSType value associated with the given
//               string representation, or DC_unspecified if the
//               string does not match any known DCSType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 1995  
465 14 Dtool_kAOM5ugT 6 489 1924 0 14 Dtool_kAOM5ugT 424 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_billboard_type
//       Access: Published, Static
//  Description: Returns the BillboardType value associated with the
//               given string representation, or BT_none if the string
//               does not match any known BillboardType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 1995  
466 14 Dtool_kAOMJTFH 6 490 1925 0 14 Dtool_kAOMJTFH 428 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_cs_type
//       Access: Published, Static
//  Description: Returns the CollisionSolidType value associated with the
//               given string representation, or CST_none if the string
//               does not match any known CollisionSolidType value.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 1995  
467 14 Dtool_kAOMm6lB 6 491 1926 0 14 Dtool_kAOMm6lB 546 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_collide_flags
//       Access: Published, Static
//  Description: Returns the CollideFlags value associated with the
//               given string representation, or CF_none if the string
//               does not match any known CollideFlags value.  This
//               only recognizes a single keyword; it does not attempt
//               to parse a string of keywords.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 1995  
468 14 Dtool_kAOMZVpI 6 492 1928 0 14 Dtool_kAOMZVpI 406 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_mode
//       Access: Published, Static
//  Description: Returns the BlendMode value associated with the
//               given string representation, or BM_none if the string
//               does not match any known BlendMode.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 1995  
469 14 Dtool_kAOM6SMq 6 493 1929 0 14 Dtool_kAOM6SMq 415 ////////////////////////////////////////////////////////////////////
//     Function: EggGroup::string_blend_operand
//       Access: Published, Static
//  Description: Returns the BlendOperand value associated with the
//               given string representation, or BO_none if the string
//               does not match any known BlendOperand.
//////////////////////////////////////////////////////////////////// 1 6 strval 1 1995  
470 14 Dtool_kAOMSfTP 7 494 1986 0 14 Dtool_kAOMSfTP 0 0 
471 14 Dtool_kAOMrm2D 7 347 2002 1034 14 Dtool_kAOMrm2D 0 1 4 this 3 2096  
472 14 Dtool_kAOMFwi7 7 348 2096 1295 14 Dtool_kAOMFwi7 0 1 4 this 3 2002  
473 14 Dtool_kAOMyqbi 6 349 2009 0 14 Dtool_kAOMyqbi 0 1 4 this 3 2096  
474 14 Dtool_kAOMj6hd 7 350 2096 1295 14 Dtool_kAOMj6hd 0 1 4 this 3 2009  
475 14 Dtool_kAOMo_zk 6 351 2074 0 14 Dtool_kAOMo_zk 0 1 4 this 3 2096  
476 14 Dtool_kAOMrQmh 7 352 2096 1295 14 Dtool_kAOMrQmh 0 1 4 this 3 2074  
477 14 Dtool_kAOME04m 7 496 2101 1431 14 Dtool_kAOME04m 220 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2099  
478 14 Dtool_kAOM5VW_ 7 496 2101 1431 14 Dtool_kAOM5VW_ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::EggGroup copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2048  
479 14 Dtool_kAOMxysi 7 496 2101 1431 14 Dtool_kAOMxysi 215 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
480 14 Dtool_kAOMcVXw 7 496 2101 1431 14 Dtool_kAOMcVXw 215 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
481 14 Dtool_kAOM35b4 4 497 1990 0 14 Dtool_kAOM35b4 218 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::set_bin_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  10 bin_number 1 2003  
482 14 Dtool_kAOM39QH 6 498 2003 0 14 Dtool_kAOM39QH 218 ////////////////////////////////////////////////////////////////////
//     Function: EggBin::get_bin_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2099  
483 14 Dtool_kAOMDJum 7 499 1986 0 14 Dtool_kAOMDJum 0 0 
484 14 Dtool_kAOM8q6p 6 502 2003 0 14 Dtool_kAOM8q6p 460 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bins
//       Access: Public
//  Description: The main entry point to EggBinMaker.  Walks the egg
//               scene graph beginning at the indicated root node, and
//               moves all binnable nodes into EggBin objects.
//               Returns the number of EggBins created.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  10 root_group 1 2002  
485 14 Dtool_kAOMQ2a2 4 503 1990 0 14 Dtool_kAOMQ2a2 419 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::prepare_node
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to perform some
//               setup work as each node is encountered.  This will be
//               called once for each node in the egg hierarchy.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  4 node 1 1999  
486 14 Dtool_kAOM_qCk 6 504 2003 0 14 Dtool_kAOM_qCk 0 2 4 this 3 2102  4 node 1 2000  
487 14 Dtool_kAOMZCvy 6 505 1991 0 14 Dtool_kAOMZCvy 669 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::sorts_less
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to create
//               additional bins within a particular bin number, based
//               on some arbitrary property of nodes.  This function
//               establishes an arbitrary but fixed ordering between
//               nodes; if two nodes do not sort to the same position,
//               different bins are created for each one (with the
//               same bin number on each bin).
//////////////////////////////////////////////////////////////////// 4 4 this 3 2102  10 bin_number 1 2003  1 a 1 2000  1 b 1 2000  
488 14 Dtool_kAOMGhQi 6 506 1991 0 14 Dtool_kAOMGhQi 398 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::collapse_group
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to specify
//               whether a particular group node, apparently
//               redundant, may be safely collapsed out.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2102  5 group 1 2048  10 bin_number 1 2003  
489 14 Dtool_kAOMHt3e 6 507 1995 0 14 Dtool_kAOMHt3e 381 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::get_bin_name
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to define a name
//               for each new bin, based on its bin number, and a
//               sample child.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2102  10 bin_number 1 2003  5 child 1 2000  
490 14 Dtool_kAOMnETC 7 508 2101 1431 14 Dtool_kAOMnETC 655 ////////////////////////////////////////////////////////////////////
//     Function: EggBinMaker::make_bin
//       Access: Public, Virtual
//  Description: May be overridden in derived classes to construct a
//               new EggBin object (or some derived class, if needed),
//               and preload some initial data into as required.
//
//               child is an arbitrary child of the bin, and
//               collapse_from is the group the bin is being collapsed
//               with, if any (implying collapse_group() returned
//               true), or NULL if not.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2102  10 bin_number 1 2003  5 child 1 2000  13 collapse_from 1 2096  
491 14 Dtool_kAOM_kc_ 7 509 1986 0 14 Dtool_kAOM_kc_ 0 0 
492 14 Dtool_kAOMljwn 7 511 2105 1446 14 Dtool_kAOMljwn 224 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2103  
493 14 Dtool_kAOMPzAM 7 511 2105 1446 14 Dtool_kAOMPzAM 705 // Filename: eggComment.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggComment::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 node_name 1 1995  7 comment 1 1995  
494 14 Dtool_kAOMAmi9 7 512 2105 1446 14 Dtool_kAOMAmi9 232 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  4 copy 1 2103  
495 14 Dtool_kAOMokdP 7 512 2105 1446 14 Dtool_kAOMokdP 227 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::Assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  7 comment 1 1995  
496 14 Dtool_kAOM_5Ek 4 514 1990 0 14 Dtool_kAOM_5Ek 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2105  7 comment 1 1995  
497 14 Dtool_kAOMgAcI 6 515 1995 0 14 Dtool_kAOMgAcI 219 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::set_comment
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2103  
498 14 Dtool_kAOMikvz 7 516 1986 0 14 Dtool_kAOMikvz 0 0 
499 14 Dtool_kAOMJt6A 6 513 1995 0 14 Dtool_kAOMJt6A 232 ////////////////////////////////////////////////////////////////////
//     Function: EggComment::String typecast operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2103  
500 14 Dtool_kAOM_1Ie 7 519 2106 1454 14 Dtool_kAOM_1Ie 237 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2106  4 copy 1 2107  
501 14 Dtool_kAOMXj7g 6 520 1995 0 14 Dtool_kAOMXj7g 297 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_default_extension
//       Access: Public, Virtual
//  Description: Returns the default extension for this filename type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2107  
502 14 Dtool_kAOMXJxZ 6 521 2060 0 14 Dtool_kAOMXJxZ 276 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_filename
//       Access: Public
//  Description: Returns a nonmodifiable reference to the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2107  
503 14 Dtool_kAOMA0g1 4 522 1990 0 14 Dtool_kAOMA0g1 225 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_filename
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2106  8 filename 1 2060  
504 14 Dtool_kAOM8Thq 6 523 2060 0 14 Dtool_kAOM8Thq 822 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::get_fullpath
//       Access: Public
//  Description: Returns the full pathname to the file, if it is
//               known; otherwise, returns the same thing as
//               get_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_fullpath().  This string is not
//               written to the egg file; its main purpose is to
//               record the full path to a filename (for instance, a
//               texture filename) if it is known, for egg structures
//               that are generated in-memory and then immediately
//               converted to a scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2107  
505 14 Dtool_kAOMI1PG 4 524 1990 0 14 Dtool_kAOMI1PG 316 ////////////////////////////////////////////////////////////////////
//     Function: EggFilenameNode::set_fullpath
//       Access: Public
//  Description: Records the full pathname to the file, for the
//               benefit of get_fullpath().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2106  8 fullpath 1 2060  
506 14 Dtool_kAOMMHF_ 7 525 1986 0 14 Dtool_kAOMMHF_ 0 0 
507 14 Dtool_kAOMhng8 7 534 2111 1463 14 Dtool_kAOMhng8 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2109  
508 14 Dtool_kAOMzo9s 7 534 2111 1463 14 Dtool_kAOMzo9s 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 tref_name 1 1995  8 filename 1 2060  
509 14 Dtool_kAOM0TMq 7 535 2111 1463 14 Dtool_kAOM0TMq 235 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 copy 1 2109  
510 14 Dtool_kAOMBpY9 4 537 1990 0 14 Dtool_kAOMBpY9 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::write
//       Access: Public, Virtual
//  Description: Writes the texture definition to the indicated output
//               stream in Egg format.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2109  3 out 1 1996  12 indent_level 1 2003  
511 14 Dtool_kAOMUj_f 6 539 1991 0 14 Dtool_kAOMUj_f 1471 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::is_equivalent_to
//       Access: Published
//  Description: Returns true if the two textures are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggTexture::E_basename:
//                 The basename part of the texture filename, without
//                 the directory prefix *or* the filename extension.
//
//               EggTexture::E_extension:
//                 The extension part of the texture filename.
//
//               EggTexture::E_dirname:
//                 The directory prefix of the texture filename.
//
//               EggTexture::E_complete_filename:
//                 The union of the above three; that is, the complete
//                 filename, with directory, basename, and extension.
//
//               EggTexture::E_transform:
//                 The texture matrix.
//
//               EggTexture::E_attributes:
//                 All remaining texture attributes (mode, mipmap,
//                 etc.) except TRef name.
//
//               EggTexture::E_tref_name:
//                 The TRef name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2109  5 other 1 2109  2 eq 1 2003  
512 14 Dtool_kAOMzib2 6 540 1991 0 14 Dtool_kAOMzib2 502 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::sorts_less_than
//       Access: Published
//  Description: An ordering operator to compare two textures for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique textures, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2109  5 other 1 2109  2 eq 1 2003  
513 14 Dtool_kAOMmUrS 6 541 1991 0 14 Dtool_kAOMmUrS 537 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_channel
//       Access: Published
//  Description: Given the number of color components (channels) in
//               the image file as actually read from the disk, return
//               true if this texture seems to have an alpha channel
//               or not.  This depends on the EggTexture's format as
//               well as the number of channels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2109  14 num_components 1 2003  
514 14 Dtool_kAOMyubp 4 555 1990 0 14 Dtool_kAOMyubp 713 // Filename: eggTexture.I
// Created by:  drose (18Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_texture_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  12 texture_type 1 1936  
515 14 Dtool_kAOMippZ 6 556 1936 0 14 Dtool_kAOMippZ 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_texture_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
516 14 Dtool_kAOMN8dF 4 557 1990 0 14 Dtool_kAOMN8dF 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_format
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  6 format 1 1937  
517 14 Dtool_kAOMkehA 6 558 1937 0 14 Dtool_kAOMkehA 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_format
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
518 14 Dtool_kAOMuZpO 4 559 1990 0 14 Dtool_kAOMuZpO 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_compression_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 mode 1 1938  
519 14 Dtool_kAOMc1f8 6 560 1938 0 14 Dtool_kAOMc1f8 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_compression_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
520 14 Dtool_kAOMDsmU 4 561 1990 0 14 Dtool_kAOMDsmU 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 mode 1 1939  
521 14 Dtool_kAOM8r0r 6 562 1939 0 14 Dtool_kAOM8r0r 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
522 14 Dtool_kAOMgtfQ 4 563 1990 0 14 Dtool_kAOMgtfQ 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_u
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 mode 1 1939  
523 14 Dtool_kAOMefXa 6 564 1939 0 14 Dtool_kAOMefXa 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_u
//       Access: Published
//  Description: Returns the amount specified for U wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
524 14 Dtool_kAOMHY2e 6 565 1939 0 14 Dtool_kAOMHY2e 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_u
//       Access: Published
//  Description: Determines the appropriate wrap in the U direction.
//               This is different from get_wrap_u() in that if the U
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
525 14 Dtool_kAOMglQa 4 566 1990 0 14 Dtool_kAOMglQa 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_v
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 mode 1 1939  
526 14 Dtool_kAOMeXIk 6 567 1939 0 14 Dtool_kAOMeXIk 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_v
//       Access: Published
//  Description: Returns the amount specified for V wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
527 14 Dtool_kAOM9buP 6 568 1939 0 14 Dtool_kAOM9buP 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_v
//       Access: Published
//  Description: Determines the appropriate wrap in the V direction.
//               This is different from get_wrap_v() in that if the V
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
528 14 Dtool_kAOMgdAk 4 569 1990 0 14 Dtool_kAOMgdAk 221 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_wrap_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 mode 1 1939  
529 14 Dtool_kAOMev5t 6 570 1939 0 14 Dtool_kAOMev5t 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_wrap_w
//       Access: Published
//  Description: Returns the amount specified for W wrap.  This may be
//               unspecified, even if there is an overall wrap value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
530 14 Dtool_kAOMrbmA 6 571 1939 0 14 Dtool_kAOMrbmA 439 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::determine_wrap_w
//       Access: Published
//  Description: Determines the appropriate wrap in the W direction.
//               This is different from get_wrap_w() in that if the W
//               wrap is unspecified, it returns the overall wrap
//               value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
531 14 Dtool_kAOMqq6L 4 572 1990 0 14 Dtool_kAOMqq6L 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 type 1 1940  
532 14 Dtool_kAOMmUr5 6 573 1940 0 14 Dtool_kAOMmUr5 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_minfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
533 14 Dtool_kAOM6hL5 4 574 1990 0 14 Dtool_kAOM6hL5 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 type 1 1940  
534 14 Dtool_kAOMsd7m 6 575 1940 0 14 Dtool_kAOMsd7m 224 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_magfilter
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
535 14 Dtool_kAOMKwkc 4 576 1990 0 14 Dtool_kAOMKwkc 381 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_anisotropic_degree
//       Access: Published
//  Description: Sets the degree of anisotropic filtering for this
//               texture.  1 is off; higher levels indicate filtering
//               in effect.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  18 anisotropic_degree 1 2003  
536 14 Dtool_kAOMc_H7 4 577 1990 0 14 Dtool_kAOMc_H7 321 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_anisotropic_degree
//       Access: Published
//  Description: Removes the specification of anisotropic filtering
//               from the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
537 14 Dtool_kAOMvvBL 6 578 1991 0 14 Dtool_kAOMvvBL 382 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_anisotropic_degree
//       Access: Published
//  Description: Returns true if a value for the anisotropic filtering
//               degree has been specified for this texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
538 14 Dtool_kAOMrl66 6 579 2003 0 14 Dtool_kAOMrl66 386 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_anisotropic_degree
//       Access: Published
//  Description: Returns the anisotropic filtering degree that has
//               been specified for this texture, or 0 if nothing has
//               been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
539 14 Dtool_kAOM5MIV 4 580 1990 0 14 Dtool_kAOM5MIV 223 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_env_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  4 type 1 1941  
540 14 Dtool_kAOMm3Xk 6 581 1941 0 14 Dtool_kAOMm3Xk 223 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_env_type
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
541 14 Dtool_kAOM2l6J 6 582 1991 0 14 Dtool_kAOM2l6J 415 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::affects_polygon_alpha
//       Access: Published
//  Description: Returns true if this texture's environment type or
//               combine mode allows the texture to have an affect on
//               the polygon's alpha values, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
542 14 Dtool_kAOMc01z 4 583 1990 0 14 Dtool_kAOMc01z 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2111  7 channel 1 1943  2 cm 1 1942  
543 14 Dtool_kAOMmQoH 6 584 1942 0 14 Dtool_kAOMmQoH 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2109  7 channel 1 1943  
544 14 Dtool_kAOM0GKW 4 585 1990 0 14 Dtool_kAOM0GKW 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_source
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2111  7 channel 1 1943  1 n 1 2003  2 cs 1 1945  
545 14 Dtool_kAOM7qA3 6 586 1945 0 14 Dtool_kAOM7qA3 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_source
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2109  7 channel 1 1943  1 n 1 2003  
546 14 Dtool_kAOMBmvl 4 587 1990 0 14 Dtool_kAOMBmvl 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_combine_operand
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2111  7 channel 1 1943  1 n 1 2003  2 co 1 1946  
547 14 Dtool_kAOMDf6C 6 588 1946 0 14 Dtool_kAOMDf6C 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_combine_operand
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2109  7 channel 1 1943  1 n 1 2003  
548 14 Dtool_kAOM8Qj0 4 589 1990 0 14 Dtool_kAOM8Qj0 1011 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_saved_result
//       Access: Published
//  Description: Sets the saved_result flag.  When this is true, the
//               output of this stage is not part of the normal
//               pipeline--that is, it will not be supplied as the
//               "previous" source for the next texture stage--but it
//               will instead be supplied as the "last_saved_result"
//               source for any future stages, until the next
//               TextureStage with a saved_result set true is
//               encountered.
//
//               This can be used to reuse the results of this texture
//               stage as input to more than one stage later in the
//               pipeline.
//
//               The last texture in the pipeline (the one with the
//               highest sort value) should not have this flag set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  12 saved_result 1 1991  
549 14 Dtool_kAOMm3S1 6 590 1991 0 14 Dtool_kAOMm3S1 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_saved_result
//       Access: Published
//  Description: Returns the current setting of the saved_result flag.
//               See set_saved_result().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
550 14 Dtool_kAOM2fGJ 4 591 1990 0 14 Dtool_kAOM2fGJ 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_tex_gen
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  7 tex_gen 1 1947  
551 14 Dtool_kAOMNv5D 6 592 1947 0 14 Dtool_kAOMNv5D 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_tex_gen
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
552 14 Dtool_kAOMJp2q 4 593 1990 0 14 Dtool_kAOMJp2q 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_quality_level
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  13 quality_level 1 1948  
553 14 Dtool_kAOMDQFW 6 594 1948 0 14 Dtool_kAOMDQFW 228 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_quality_level
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
554 14 Dtool_kAOMe7XX 4 595 1990 0 14 Dtool_kAOMe7XX 778 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_stage_name
//       Access: Published
//  Description: Specifies the particular TextureStage this texture
//               will be rendered on by name.  If this is omitted, the
//               texture will be rendered on the default TextureStage,
//               unless some other stage-specific property is
//               specificied, in which case the texture will be
//               rendered on a TextureStage with the same name as the
//               tref.  This is in support of multitexturing.
//
//               Each different TextureStage in the world must be
//               uniquely named.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  10 stage_name 1 1995  
555 14 Dtool_kAOMiXJB 4 596 1990 0 14 Dtool_kAOMiXJB 273 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_stage_name
//       Access: Published
//  Description: Removes the named TextureStage specification.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
556 14 Dtool_kAOMDGGJ 6 597 1991 0 14 Dtool_kAOMDGGJ 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_stage_name
//       Access: Published
//  Description: Returns true if a stage name has been explicitly
//               specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
557 14 Dtool_kAOM2aA5 6 598 1995 0 14 Dtool_kAOM2aA5 392 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_stage_name
//       Access: Published
//  Description: Returns the stage name that has been specified for
//               this texture, or the tref name if no texture stage
//               has explicitly been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
558 14 Dtool_kAOMUObk 4 599 1990 0 14 Dtool_kAOMUObk 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_priority
//       Access: Published
//  Description: Sets the importance of this texture with respect to
//               other textures also applied on the same geometry.
//               This is only meaningful in the presence of
//               multitexturing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  8 priority 1 2003  
559 14 Dtool_kAOMnuob 4 600 1990 0 14 Dtool_kAOMnuob 345 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_priority
//       Access: Published
//  Description: Removes the specification of multitexture priority
//               from the texture.  The default priority value is 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
560 14 Dtool_kAOMlRHd 6 601 1991 0 14 Dtool_kAOMlRHd 371 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_priority
//       Access: Published
//  Description: Returns true if a priority value for multitexture
//               importance has been specified for the texture, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
561 14 Dtool_kAOMlpBN 6 602 2003 0 14 Dtool_kAOMlpBN 386 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_priority
//       Access: Published
//  Description: Returns the multitexture importance value that has been
//               specified for the texture, or 0 if no priority value has
//               been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
562 14 Dtool_kAOM1PlD 4 603 1990 0 14 Dtool_kAOM1PlD 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  5 color 1 2024  
563 14 Dtool_kAOMlDQn 4 604 1990 0 14 Dtool_kAOMlDQn 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
564 14 Dtool_kAOMYqny 6 605 1991 0 14 Dtool_kAOMYqny 303 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_color
//       Access: Published
//  Description: Returns true if a blend color has been
//               specified for the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
565 14 Dtool_kAOMZ8gi 6 606 2024 0 14 Dtool_kAOMZ8gi 315 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_color
//       Access: Published
//  Description: Returns the blend color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
566 14 Dtool_kAOMBnrh 4 607 1990 0 14 Dtool_kAOMBnrh 227 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_border_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  12 border_color 1 2024  
567 14 Dtool_kAOMlnCT 4 608 1990 0 14 Dtool_kAOMlnCT 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_border_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
568 14 Dtool_kAOM3XPC 6 609 1991 0 14 Dtool_kAOM3XPC 311 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_border_color
//       Access: Published
//  Description: Returns true if a border color has been
//               specified for the texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
569 14 Dtool_kAOM67Jy 6 610 2024 0 14 Dtool_kAOM67Jy 323 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_border_color
//       Access: Published
//  Description: Returns the border color if one has been
//               specified, or (0, 0, 0, 1) otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
570 14 Dtool_kAOMbLpF 4 611 1990 0 14 Dtool_kAOMbLpF 593 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_uv_name
//       Access: Published
//  Description: Specifies the named set of texture coordinates that
//               this texture will use when it is applied to geometry.
//               Geometry may have multiple sets of texture
//               coordinates defined, by name.
//
//               If this is not specified for a particular texture,
//               the default set of texture coordinates will be used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  7 uv_name 1 1995  
571 14 Dtool_kAOMA8X4 4 612 1990 0 14 Dtool_kAOMA8X4 398 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_uv_name
//       Access: Published
//  Description: Removes the restriction to a particular named set of
//               texture coordinates and restores the texture to using
//               the default texture coordinates.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
572 14 Dtool_kAOMY3F6 6 613 1991 0 14 Dtool_kAOMY3F6 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_uv_name
//       Access: Published
//  Description: Returns true if a texcoord name has been explicitly
//               specified for this texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
573 14 Dtool_kAOMSj_p 6 614 1995 0 14 Dtool_kAOMSj_p 395 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_uv_name
//       Access: Published
//  Description: Returns the texcoord name that has been specified for
//               this texture, or the empty string if no texcoord name
//               has explicitly been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
574 14 Dtool_kAOMypUu 4 615 1990 0 14 Dtool_kAOMypUu 493 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_rgb_scale
//       Access: Published
//  Description: Sets an additional factor that will scale all three
//               r, g, b components after the texture has been
//               applied.  This is used only when a combine mode is in
//               effect.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  9 rgb_scale 1 2003  
575 14 Dtool_kAOMgzo5 4 616 1990 0 14 Dtool_kAOMgzo5 325 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_rgb_scale
//       Access: Published
//  Description: Removes the rgb_scale from the texture and restores
//               it to the default value of 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
576 14 Dtool_kAOMLbSS 6 617 1991 0 14 Dtool_kAOMLbSS 323 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_rgb_scale
//       Access: Published
//  Description: Returns true if an rgb_scale has been specified for
//               the texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
577 14 Dtool_kAOMvnMC 6 618 2003 0 14 Dtool_kAOMvnMC 374 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_rgb_scale
//       Access: Published
//  Description: Returns the rgb_scale value that has been
//               specified for the texture, or 1 if no rgb_scale value
//               has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
578 14 Dtool_kAOMIHVT 4 619 1990 0 14 Dtool_kAOMIHVT 468 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_scale
//       Access: Published
//  Description: Sets an additional factor that will scale the
//               alpha component after the texture has been applied.
//               This is used only when a combine mode is in effect.
//
//               The only legal values are 1, 2, or 4.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  11 alpha_scale 1 2003  
579 14 Dtool_kAOM2A36 4 620 1990 0 14 Dtool_kAOM2A36 329 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_scale
//       Access: Published
//  Description: Removes the alpha_scale from the texture and restores
//               it to the default value of 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
580 14 Dtool_kAOMjpwB 6 621 1991 0 14 Dtool_kAOMjpwB 327 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_scale
//       Access: Published
//  Description: Returns true if an alpha_scale has been specified for
//               the texture, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
581 14 Dtool_kAOMoRrx 6 622 2003 0 14 Dtool_kAOMoRrx 380 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_scale
//       Access: Published
//  Description: Returns the alpha_scale value that has been
//               specified for the texture, or 1 if no alpha_scale
//               value has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
582 14 Dtool_kAOMHJuv 4 623 1990 0 14 Dtool_kAOMHJuv 516 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_filename
//       Access: Published
//  Description: Specifies a separate file that will be loaded in with
//               the 1- or 3-component texture and applied as the
//               alpha channel.  This is useful when loading textures
//               from file formats that do not support alpha, for
//               instance jpg.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  8 filename 1 2060  
583 14 Dtool_kAOMdOt2 4 624 1990 0 14 Dtool_kAOMdOt2 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_filename
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
584 14 Dtool_kAOMHCpy 6 625 1991 0 14 Dtool_kAOMHCpy 381 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_filename
//       Access: Published
//  Description: Returns true if a separate file for the alpha
//               component has been applied, false otherwise.  See
//               set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
585 14 Dtool_kAOMUIki 6 626 2060 0 14 Dtool_kAOMUIki 419 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_filename
//       Access: Published
//  Description: Returns the separate file assigned for the alpha
//               channel.  It is an error to call this unless
//               has_alpha_filename() returns true.  See set_alpha_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
586 14 Dtool_kAOMOxMH 4 627 1990 0 14 Dtool_kAOMOxMH 326 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_fullpath
//       Access: Published
//  Description: Records the full pathname to the file, for the
//               benefit of get_alpha_fullpath().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  8 fullpath 1 2060  
587 14 Dtool_kAOMDkA6 6 628 2060 0 14 Dtool_kAOMDkA6 817 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_fullpath
//       Access: Published
//  Description: Returns the full pathname to the alpha file, if it is
//               known; otherwise, returns the same thing as
//               get_alpha_filename().
//
//               This function simply returns whatever was set by the
//               last call to set_alpha_fullpath().  This string is
//               not written to the egg file; its main purpose is to
//               record the full path to the alpha filename if it is
//               known, for egg structures that are generated
//               in-memory and then immediately converted to a scene
//               graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
588 14 Dtool_kAOMidkB 4 629 1990 0 14 Dtool_kAOMidkB 742 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_alpha_file_channel
//       Access: Published
//  Description: If a separate alpha-file is specified, this indicates
//               which channel number should be extracted from this
//               file to derive the alpha channel for the final image.
//               The default is 0, which means the grayscale
//               combination of r, g, b.  Otherwise, this should be
//               the 1-based channel number, for instance 1, 2, or 3
//               for r, g, or b, respectively, or 4 for the alpha
//               channel of a four-component image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  18 alpha_file_channel 1 2003  
589 14 Dtool_kAOMXTSW 4 630 1990 0 14 Dtool_kAOMXTSW 336 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_alpha_file_channel
//       Access: Published
//  Description: Removes the specification of a particular channel to
//               use from the alpha-file image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
590 14 Dtool_kAOMER_v 6 631 1991 0 14 Dtool_kAOMER_v 349 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::has_alpha_file_channel
//       Access: Published
//  Description: Returns true if a particular channel has been
//               specified for the alpha-file image, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
591 14 Dtool_kAOMK55f 6 632 2003 0 14 Dtool_kAOMK55f 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_alpha_file_channel
//       Access: Published
//  Description: Returns the particular channel that has been
//               specified for the alpha-file image, or 0 if no
//               channel has been specified.  See
//               set_alpha_file_channel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
592 14 Dtool_kAOMz4qj 4 633 1990 0 14 Dtool_kAOMz4qj 912 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::set_read_mipmaps
//       Access: Published
//  Description: Sets the read_mipmaps flag.
//
//               If read_mipmaps is true, the filename should contain
//               a hash mark ('#'), which will be filled in with the
//               mipmap level number; and the texture will be defined
//               with a series of images, one for each mipmap level.
//
//               If the filename is of a type that already requires a
//               hash mark, such as a cube map or a 3-d texture, then
//               the filename should now require two hash marks, and
//               the first one indicates the mipmap level number,
//               while the second indicates the face number or 3-d
//               level number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  12 read_mipmaps 1 1991  
593 14 Dtool_kAOMuJck 6 634 1991 0 14 Dtool_kAOMuJck 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_read_mipmaps
//       Access: Published
//  Description: Returns the current setting of the read_mipmaps flag.
//               See set_read_mipmaps().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
594 14 Dtool_kAOMSUMy 4 635 1990 0 14 Dtool_kAOMSUMy 437 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::clear_multitexture
//       Access: Published
//  Description: Resets the multitexture flags set by
//               multitexture_over().  After this call,
//               get_multitexture() will return false, and
//               get_multitexture_sort() will return 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2111  
595 14 Dtool_kAOM3XDK 6 636 1991 0 14 Dtool_kAOM3XDK 771 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::multitexture_over
//       Access: Published
//  Description: Indicates that this texture should be layered on top
//               of the other texture.  This will guarantee that
//               this->get_multitexture_sort() >
//               other->get_multitexture_sort(), at least until
//               clear_multitexture() is called on either one.
//
//               The return value is true if successful, or false if
//               there is a failure because the other texture was
//               already layered on top of this one (or there is a
//               three- or more-way cycle).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2111  5 other 1 2111  
596 14 Dtool_kAOMjbNS 6 637 2003 0 14 Dtool_kAOMjbNS 628 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::get_multitexture_sort
//       Access: Published
//  Description: Returns an integer that represents the depth to which
//               this texture is layered on all other textures in the
//               egg file.  In general, if texture A is layered over
//               texture B, then sort(A) > sort(B).  If texture A is
//               never layered over any other texture, then sort(A) ==
//               0.  More than that is difficult to guarantee.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2109  
597 14 Dtool_kAOM_TOq 6 638 1936 0 14 Dtool_kAOM_TOq 427 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_texture_type
//       Access: Published, Static
//  Description: Returns the Texture_ype value associated with the given
//               string representation, or TT_unspecified if the string
//               does not match any known TextureType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
598 14 Dtool_kAOM0Tc1 6 639 1937 0 14 Dtool_kAOM0Tc1 410 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_format
//       Access: Published, Static
//  Description: Returns the Format value associated with the given
//               string representation, or F_unspecified if the string
//               does not match any known Format value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
599 14 Dtool_kAOMCmfX 6 640 1938 0 14 Dtool_kAOMCmfX 435 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_compression_mode
//       Access: Published, Static
//  Description: Returns the CompressionMode value associated with the given
//               string representation, or CM_default if the string
//               does not match any known CompressionMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
600 14 Dtool_kAOM_IIf 6 641 1939 0 14 Dtool_kAOM_IIf 418 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_wrap_mode
//       Access: Published, Static
//  Description: Returns the WrapMode value associated with the given
//               string representation, or WM_unspecified if the string
//               does not match any known WrapMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
601 14 Dtool_kAOM3nqW 6 642 1940 0 14 Dtool_kAOM3nqW 424 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_filter_type
//       Access: Published, Static
//  Description: Returns the FilterType value associated with the given
//               string representation, or FT_unspecified if the string
//               does not match any known FilterType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
602 14 Dtool_kAOM_bFc 6 643 1941 0 14 Dtool_kAOM_bFc 415 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_env_type
//       Access: Published, Static
//  Description: Returns the EnvType value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known EnvType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
603 14 Dtool_kAOMjFLT 6 644 1942 0 14 Dtool_kAOMjFLT 427 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_mode
//       Access: Published, Static
//  Description: Returns the CombineMode value associated with the given
//               string representation, or CM_unspecified if the string
//               does not match any known CombineMode value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
604 14 Dtool_kAOMEKtK 6 645 1945 0 14 Dtool_kAOMEKtK 433 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_source
//       Access: Published, Static
//  Description: Returns the CombineSource value associated with the given
//               string representation, or CS_unspecified if the string
//               does not match any known CombineSource value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
605 14 Dtool_kAOMnTQ1 6 646 1946 0 14 Dtool_kAOMnTQ1 436 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_combine_operand
//       Access: Published, Static
//  Description: Returns the CombineOperand value associated with the given
//               string representation, or CO_unspecified if the string
//               does not match any known CombineOperand value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
606 14 Dtool_kAOMyeH3 6 647 1947 0 14 Dtool_kAOMyeH3 412 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_tex_gen
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
607 14 Dtool_kAOM1vdm 6 648 1948 0 14 Dtool_kAOM1vdm 418 ////////////////////////////////////////////////////////////////////
//     Function: EggTexture::string_quality_level
//       Access: Published, Static
//  Description: Returns the TexGen value associated with the given
//               string representation, or ET_unspecified if the string
//               does not match any known TexGen value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
608 14 Dtool_kAOMTKZT 7 649 1986 0 14 Dtool_kAOMTKZT 0 0 
609 14 Dtool_kAOMBT72 7 528 2106 1454 14 Dtool_kAOMBT72 0 1 4 this 3 2111  
610 14 Dtool_kAOMWvPr 7 529 2111 1463 14 Dtool_kAOMWvPr 0 1 4 this 3 2106  
611 14 Dtool_kAOM2rIs 6 530 2009 0 14 Dtool_kAOM2rIs 0 1 4 this 3 2111  
612 14 Dtool_kAOM5AMp 7 531 2111 1463 14 Dtool_kAOM5AMp 0 1 4 this 3 2009  
613 14 Dtool_kAOMQ2JC 6 532 2074 0 14 Dtool_kAOMQ2JC 0 1 4 this 3 2111  
614 14 Dtool_kAOMlj8D 7 533 2111 1463 14 Dtool_kAOMlj8D 0 1 4 this 3 2074  
615 14 Dtool_kAOM4BtE 7 651 2114 1591 14 Dtool_kAOM4BtE 225 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2112  
616 14 Dtool_kAOM9ThA 7 651 2114 1591 14 Dtool_kAOM9ThA 220 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 9 mref_name 1 1995  
617 14 Dtool_kAOM7WW0 6 653 1991 0 14 Dtool_kAOM7WW0 784 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::is_equivalent_to
//       Access: Public
//  Description: Returns true if the two materials are equivalent in
//               all relevant properties (according to eq), false
//               otherwise.
//
//               The Equivalence parameter, eq, should be set to the
//               bitwise OR of the following properties, according to
//               what you consider relevant:
//
//               EggMaterial::E_attributes:
//                 All material attributes (diff, spec,
//                 etc.) except MRef name.
//
//               EggMaterial::E_mref_name:
//                 The MRef name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2112  5 other 1 2112  2 eq 1 2003  
618 14 Dtool_kAOMOiSX 6 654 1991 0 14 Dtool_kAOMOiSX 502 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::sorts_less_than
//       Access: Public
//  Description: An ordering operator to compare two materials for
//               sorting order.  This imposes an arbitrary ordering
//               useful to identify unique materials, according to the
//               indicated Equivalence factor.  See
//               is_equivalent_to().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2112  5 other 1 2112  2 eq 1 2003  
619 14 Dtool_kAOM2XHn 4 655 1990 0 14 Dtool_kAOM2XHn 704 // Filename: eggMaterial.I
// Created by:  drose (29Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2114  4 diff 1 2024  
620 14 Dtool_kAOMpXQH 4 656 1990 0 14 Dtool_kAOMpXQH 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2114  
621 14 Dtool_kAOM5VsI 6 657 1991 0 14 Dtool_kAOM5VsI 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_diff
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
622 14 Dtool_kAOMVUXF 7 658 2023 0 14 Dtool_kAOMVUXF 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_diff
//       Access: Public
//  Description: It is legal to call this even if has_diff() returns
//               false.  If so, it simply returns the default diff
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
623 14 Dtool_kAOMkoW3 4 659 1990 0 14 Dtool_kAOMkoW3 216 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2114  3 amb 1 2024  
624 14 Dtool_kAOMM1fj 4 660 1990 0 14 Dtool_kAOMM1fj 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2114  
625 14 Dtool_kAOMAF9W 6 661 1991 0 14 Dtool_kAOMAF9W 216 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_amb
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
626 14 Dtool_kAOM6EmT 7 662 2023 0 14 Dtool_kAOM6EmT 357 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_amb
//       Access: Public
//  Description: It is legal to call this even if has_amb() returns
//               false.  If so, it simply returns the default amb
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
627 14 Dtool_kAOMBinD 4 663 1990 0 14 Dtool_kAOMBinD 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2114  4 emit 1 2024  
628 14 Dtool_kAOMho4b 4 664 1990 0 14 Dtool_kAOMho4b 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2114  
629 14 Dtool_kAOMQHMl 6 665 1991 0 14 Dtool_kAOMQHMl 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_emit
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
630 14 Dtool_kAOM6G3h 7 666 2023 0 14 Dtool_kAOM6G3h 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_emit
//       Access: Public
//  Description: It is legal to call this even if has_emit() returns
//               false.  If so, it simply returns the default emit
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
631 14 Dtool_kAOMLAce 4 667 1990 0 14 Dtool_kAOMLAce 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2114  4 spec 1 2024  
632 14 Dtool_kAOM_Bc2 4 668 1990 0 14 Dtool_kAOM_Bc2 219 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2114  
633 14 Dtool_kAOMNpCA 6 669 1991 0 14 Dtool_kAOMNpCA 217 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_spec
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
634 14 Dtool_kAOM0ot8 7 670 2023 0 14 Dtool_kAOM0ot8 360 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_spec
//       Access: Public
//  Description: It is legal to call this even if has_spec() returns
//               false.  If so, it simply returns the default spec
//               color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
635 14 Dtool_kAOMifeq 4 671 1990 0 14 Dtool_kAOMifeq 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2114  9 shininess 1 1919  
636 14 Dtool_kAOMNivw 4 672 1990 0 14 Dtool_kAOMNivw 224 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2114  
637 14 Dtool_kAOMqZE6 6 673 1991 0 14 Dtool_kAOMqZE6 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
638 14 Dtool_kAOM8bv2 6 674 1919 0 14 Dtool_kAOM8bv2 222 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_shininess
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
639 14 Dtool_kAOMJOXd 4 675 1990 0 14 Dtool_kAOMJOXd 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::set_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2114  5 local 1 1991  
640 14 Dtool_kAOM0Bui 4 676 1990 0 14 Dtool_kAOM0Bui 220 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::clear_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2114  
641 14 Dtool_kAOMmJXP 6 677 1991 0 14 Dtool_kAOMmJXP 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::has_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
642 14 Dtool_kAOMcKAM 6 678 1991 0 14 Dtool_kAOMcKAM 218 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterial::get_local
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2112  
643 14 Dtool_kAOM6GjJ 7 679 1986 0 14 Dtool_kAOM6GjJ 0 0 
644 14 Dtool_kAOMhJqk 7 689 2115 1599 14 Dtool_kAOMhJqk 237 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  4 copy 1 2050  
645 14 Dtool_kAOM70HD 6 691 2009 0 14 Dtool_kAOM70HD 562 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_alpha_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has an alpha_mode other than
//               AM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
646 14 Dtool_kAOM6tkm 6 692 2009 0 14 Dtool_kAOM6tkm 569 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_write_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_write_mode other than
//               DWM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
647 14 Dtool_kAOMIAv2 6 693 2009 0 14 Dtool_kAOMIAv2 567 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_test_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a depth_test_mode other than
//               DTM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
648 14 Dtool_kAOMUKF_ 6 694 2009 0 14 Dtool_kAOMUKF_ 566 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_visibility_mode
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this node that has a visibility_mode other than
//               VM_unspecified.  Returns a valid EggRenderMode pointer
//               if one is found, or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
649 14 Dtool_kAOMf3fD 6 695 2009 0 14 Dtool_kAOMf3fD 548 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_depth_offset
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a depth_offset specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
650 14 Dtool_kAOMJZ7Z 6 696 2009 0 14 Dtool_kAOMJZ7Z 544 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_draw_order
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a draw_order specified.
//               Returns a valid EggRenderMode pointer if one is found,
//               or NULL otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
651 14 Dtool_kAOMSQGc 6 697 2009 0 14 Dtool_kAOMSQGc 531 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::determine_bin
//       Access: Published, Virtual
//  Description: Walks back up the hierarchy, looking for an EggGroup
//               or EggPrimitive or some such object at this level or
//               above this primitive that has a bin specified.  Returns a
//               valid EggRenderMode pointer if one is found, or NULL
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
652 14 Dtool_kAOMAN7z 6 698 1995 0 14 Dtool_kAOMAN7z 498 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_sort_name
//       Access: Published
//  Description: Returns the name of the primitive for the purposes of
//               sorting primitives into different groups, if there is
//               one.
//
//               Presently, this is defined as the primitive name
//               itself, unless it begins with a digit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
653 14 Dtool_kAOMFdVA 6 699 1952 0 14 Dtool_kAOMFdVA 1114 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_shading
//       Access: Published, Virtual
//  Description: Returns the shading properties apparent on this
//               particular primitive.  This returns S_per_vertex if
//               the vertices have colors or normals (and they are not
//               all the same values), or for a simple primitive,
//               S_overall otherwise.  A composite primitive may also
//               return S_per_face if the individual component
//               primitives have colors or normals that are not all
//               the same values.
//
//               To get the most accurate results, you should call
//               clear_shading() on all connected primitives (or on
//               all primitives in the egg file), followed by
//               get_shading() on each primitive.  You may find it
//               easiest to call these methods on the EggData root
//               node (they are defined on EggGroupNode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
654 14 Dtool_kAOMO_bp 4 700 1990 0 14 Dtool_kAOMO_bp 385 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_connected_shading
//       Access: Published
//  Description: Resets the connected_shading member in this
//               primitive, so that get_connected_shading() will
//               recompute a new value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
655 14 Dtool_kAOM7_i5 6 701 1952 0 14 Dtool_kAOM7_i5 852 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_connected_shading
//       Access: Published
//  Description: Determines what sort of shading properties this
//               primitive's connected neighbors have.
//
//               To get the most accurate results, you should first
//               call clear_connected_shading() on all connected
//               primitives (or on all primitives in the egg file).
//               It might also be a good idea to call
//               remove_unused_vertices() to ensure proper
//               connectivity.
//
//               You may find it easiest to call these other methods
//               on the EggData root node (they are defined on
//               EggGroupNode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
656 14 Dtool_kAOMxMIe 4 702 1990 0 14 Dtool_kAOMxMIe 494 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_texture
//       Access: Published
//  Description: Replaces the current list of textures with the
//               indicated texture.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  Please use the multitexture
//               variant add_texture instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  7 texture 1 2111  
657 14 Dtool_kAOMCDRS 6 703 1991 0 14 Dtool_kAOMCDRS 515 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has any textures
//               specified, false otherwise.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
658 14 Dtool_kAOMnWlz 6 703 1991 0 14 Dtool_kAOMnWlz 326 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_texture
//       Access: Published
//  Description: Returns true if the primitive has the particular
//               indicated texture, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2050  7 texture 1 2111  
659 14 Dtool_kAOM2fun 7 704 2111 1463 14 Dtool_kAOM2fun 543 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the first texture on the primitive, if any,
//               or NULL if there are no textures on the primitive.
//
//               This method is deprecated and is used in support of
//               single-texturing only.  New code should be written to
//               use the multitexture variants instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
660 14 Dtool_kAOMoFbC 7 704 2111 1463 14 Dtool_kAOMoFbC 305 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_texture
//       Access: Published
//  Description: Returns the nth texture that has been applied to the
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2050  1 n 1 2003  
661 14 Dtool_kAOMf0zv 4 705 1990 0 14 Dtool_kAOMf0zv 549 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_texture
//       Access: Published
//  Description: Applies the indicated texture to the primitive.
//
//               Note that, in the case of multiple textures being
//               applied to a single primitive, the order in which the
//               textures are applied does not affect the rendering
//               order; use EggTexture::set_sort() to specify that.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  7 texture 1 2111  
662 14 Dtool_kAOMhV0K 4 706 1990 0 14 Dtool_kAOMhV0K 268 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_texture
//       Access: Published
//  Description: Removes any texturing from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
663 14 Dtool_kAOML1FR 6 707 2003 0 14 Dtool_kAOML1FR 303 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_textures
//       Access: Published
//  Description: Returns the number of textures applied to the
//               primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
664 14 Dtool_kAOMLGBt 4 708 1990 0 14 Dtool_kAOMLGBt 274 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_material
//       Access: Published
//  Description: Applies the indicated material to the primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  8 material 1 2114  
665 14 Dtool_kAOM4kT7 4 709 1990 0 14 Dtool_kAOM4kT7 268 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear_material
//       Access: Published
//  Description: Removes any material from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
666 14 Dtool_kAOMElax 7 710 2114 1591 14 Dtool_kAOMElax 326 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_material
//       Access: Published
//  Description: Returns a pointer to the applied material, or NULL if
//               there is no material applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
667 14 Dtool_kAOMYE8b 6 711 1991 0 14 Dtool_kAOMYE8b 406 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_material
//       Access: Published
//  Description: Returns true if the primitive is materiald (and
//               get_material() will return a real pointer), false
//               otherwise (and get_material() will return NULL).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
668 14 Dtool_kAOMeofj 4 712 1990 0 14 Dtool_kAOMeofj 466 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_bface_flag
//       Access: Published
//  Description: Sets the backfacing flag of the polygon.  If this is
//               true, the polygon will be rendered so that both faces
//               are visible; if it is false, only the front face of
//               the polygon will be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  4 flag 1 1991  
669 14 Dtool_kAOMcCgN 6 713 1991 0 14 Dtool_kAOMcCgN 313 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_bface_flag
//       Access: Published
//  Description: Retrieves the backfacing flag of the polygon.  See
//               set_bface_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
670 14 Dtool_kAOM8Cxv 4 714 1990 0 14 Dtool_kAOM8Cxv 307 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  5 other 1 2017  
671 14 Dtool_kAOMLo5X 4 714 1990 0 14 Dtool_kAOMLo5X 307 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_attributes
//       Access: Published
//  Description: Copies the rendering attributes from the indicated
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  5 other 1 2050  
672 14 Dtool_kAOMgHBP 6 715 1991 0 14 Dtool_kAOMgHBP 588 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_normal
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific normal set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
673 14 Dtool_kAOMzlJw 6 716 1991 0 14 Dtool_kAOMzlJw 586 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_vertex_color
//       Access: Published
//  Description: Returns true if any vertex on the primitive has a
//               specific color set, false otherwise.
//
//               If you call unify_attributes() first, this will also
//               return false even if all the vertices were set to the
//               same value (since unify_attributes() removes
//               redundant vertex properties).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
674 14 Dtool_kAOMLGjU 4 717 1990 0 14 Dtool_kAOMLGjU 1216 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::unify_attributes
//       Access: Published, Virtual
//  Description: If the shading property is S_per_vertex, ensures that
//               all vertices have a normal and a color, and the
//               overall primitive does not.
//
//               If the shading property is S_per_face, and this is a
//               composite primitive, ensures that all components have
//               a normal and a color, and the vertices and overall
//               primitive do not.  (If this is a simple primitive,
//               S_per_face works the same as S_overall, below).
//
//               If the shading property is S_overall, ensures that no
//               vertices or components have a normal or a color, and
//               the overall primitive does (if any exists at all).
//
//               After this call, either the primitive will have
//               normals or its vertices will, but not both.  Ditto
//               for colors.
//
//               This may create redundant vertices in the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  7 shading 1 1952  
675 14 Dtool_kAOMKP88 4 718 1990 0 14 Dtool_kAOMKP88 689 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_last_attribute
//       Access: Published, Virtual
//  Description: Sets the last vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               OpenGL convention of storing flat-shaded properties on
//               the last vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
676 14 Dtool_kAOMgkRY 4 719 1990 0 14 Dtool_kAOMgkRY 693 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::apply_first_attribute
//       Access: Published, Virtual
//  Description: Sets the first vertex of the triangle (or each
//               component) to the primitive normal and/or color, if
//               the primitive is flat-shaded.  This reflects the
//               DirectX convention of storing flat-shaded properties on
//               the first vertex, although it is not usually a
//               convention in Egg.
//
//               This may introduce redundant vertices to the vertex
//               pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
677 14 Dtool_kAOM5FGb 4 720 1990 0 14 Dtool_kAOM5FGb 499 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::post_apply_flat_attribute
//       Access: Published, Virtual
//  Description: Intended as a followup to apply_last_attribute(),
//               this also sets an attribute on the first vertices of
//               the primitive, if they don't already have an
//               attribute set, just so they end up with *something*.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
678 14 Dtool_kAOMGw4a 4 721 1990 0 14 Dtool_kAOMGw4a 481 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::reverse_vertex_ordering
//       Access: Published, Virtual
//  Description: Reverses the ordering of the vertices in this
//               primitive, if appropriate, in order to change the
//               direction the polygon appears to be facing.  Does not
//               adjust the surface normal, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
679 14 Dtool_kAOM0Gh8 6 722 1991 0 14 Dtool_kAOM0Gh8 550 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::cleanup
//       Access: Published, Virtual
//  Description: Cleans up modeling errors in whatever context this
//               makes sense.  For instance, for a polygon, this calls
//               remove_doubled_verts(true).  For a point, it calls
//               remove_nonunique_verts().  Returns true if the
//               primitive is valid, or false if it is degenerate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
680 14 Dtool_kAOMwSZ1 4 723 1990 0 14 Dtool_kAOMwSZ1 945 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_doubled_verts
//       Access: Published
//  Description: Certain kinds of primitives, particularly polygons,
//               don't like to have the same vertex repeated
//               consecutively.  Unfortunately, some modeling programs
//               (like MultiGen) make this an easy mistake to make.
//
//               It's handy to have a function to remove these
//               redundant vertices.  If closed is true, it also
//               checks that the first and last vertices are not the
//               same.
//
//               This function identifies repeated vertices by
//               position only; it does not consider any other
//               properties, such as color or UV, significant in
//               differentiating vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  6 closed 1 1991  
681 14 Dtool_kAOMIS4T 4 724 1990 0 14 Dtool_kAOMIS4T 541 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_nonunique_verts
//       Access: Published
//  Description: Removes any multiple appearances of the same vertex
//               from the primitive.  This primarily makes sense for a
//               point primitive, which is really a collection of
//               points and which doesn't make sense to include the
//               same point twice, in any order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
682 14 Dtool_kAOMrzxk 6 725 1991 0 14 Dtool_kAOMrzxk 380 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
683 14 Dtool_kAOMXSfa 6 726 1991 0 14 Dtool_kAOMXSfa 416 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::joint_has_primitives
//       Access: Published, Virtual
//  Description: Returns true if there are any primitives
//               (e.g. polygons) defined within this group or below,
//               but the search does not include nested joints.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
684 14 Dtool_kAOMF6tl 6 727 1991 0 14 Dtool_kAOMF6tl 417 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::has_normals
//       Access: Published, Virtual
//  Description: Returns true if any of the primitives (e.g. polygons)
//               defined within this group or below have either face
//               or vertex normals defined, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
685 14 Dtool_kAOMctoR 4 728 1990 0 14 Dtool_kAOMctoR 266 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::clear
//       Access: Published
//  Description: Removes all of the vertices from the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2115  
686 14 Dtool_kAOMW8_c 7 729 2039 1109 14 Dtool_kAOMW8_c 330 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::add_vertex
//       Access: Published
//  Description: Adds the indicated vertex to the end of the
//               primitive's list of vertices, and returns it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  6 vertex 1 2039  
687 14 Dtool_kAOM7qsK 7 730 2039 1109 14 Dtool_kAOM7qsK 421 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::remove_vertex
//       Access: Published
//  Description: Removes the indicated vertex from the
//               primitive and returns it.  If the vertex was not
//               already in the primitive, does nothing and returns
//               NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  6 vertex 1 2039  
688 14 Dtool_kAOM_m4j 4 731 1990 0 14 Dtool_kAOM_m4j 370 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::copy_vertices
//       Access: Published
//  Description: Replaces the current primitive's list of vertices
//               with a copy of the list of vertices on the other
//               primitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2115  5 other 1 2050  
689 14 Dtool_kAOMkeY6 6 732 2003 0 14 Dtool_kAOMkeY6 230 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_num_vertices
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
690 14 Dtool_kAOM5Wo7 4 733 1990 0 14 Dtool_kAOM5Wo7 445 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::set_vertex
//       Access: Published
//  Description: Replaces a particular vertex based on its index
//               number in the list of vertices.  This is just a
//               convenience function for people who don't want to
//               mess with the iterators.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2115  5 index 1 2003  6 vertex 1 2039  
691 14 Dtool_kAOMFsKW 7 734 2039 1109 14 Dtool_kAOMFsKW 277 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_vertex
//       Access: Published
//  Description: Returns a particular index based on its index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2050  5 index 1 2003  
692 14 Dtool_kAOMm7xE 7 735 2042 1034 14 Dtool_kAOMm7xE 368 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::get_pool
//       Access: Published
//  Description: Returns the vertex pool associated with the vertices
//               of the primitive, or NULL if the primitive has no
//               vertices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
693 14 Dtool_kAOMCGI9 4 736 1990 0 14 Dtool_kAOMCGI9 0 3 4 this 3 2050  3 out 1 1996  12 indent_level 1 2003  
694 14 Dtool_kAOMG9YA 4 737 1990 0 14 Dtool_kAOMG9YA 352 ////////////////////////////////////////////////////////////////////
//     Function: EggPrimitive::test_vref_integrity
//       Access: Published
//  Description: Verifies that each vertex in the primitive exists and
//               that it knows it is referenced by the primitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2050  
695 14 Dtool_kAOM2RY6 7 738 1986 0 14 Dtool_kAOM2RY6 0 0 
696 14 Dtool_kAOM2w28 7 682 1999 1034 14 Dtool_kAOM2w28 0 1 4 this 3 2115  
697 14 Dtool_kAOMUoMZ 7 683 2115 1599 14 Dtool_kAOMUoMZ 0 1 4 this 3 1999  
698 14 Dtool_kAOM6ts2 6 684 2016 0 14 Dtool_kAOM6ts2 0 1 4 this 3 2115  
699 14 Dtool_kAOMcB04 7 685 2115 1599 14 Dtool_kAOMcB04 0 1 4 this 3 2016  
700 14 Dtool_kAOM9Jj3 6 686 2009 0 14 Dtool_kAOM9Jj3 0 1 4 this 3 2115  
701 14 Dtool_kAOMZds5 7 687 2115 1599 14 Dtool_kAOMZds5 0 1 4 this 3 2009  
702 14 Dtool_kAOMXTIC 7 740 2116 1599 14 Dtool_kAOMXTIC 246 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  4 copy 1 2117  
703 14 Dtool_kAOMwm0G 6 741 2003 0 14 Dtool_kAOMwm0G 410 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_num_components
//       Access: Published
//  Description: Returns the number of individual component triangles
//               within the composite.  Each one of these might have a
//               different set of attributes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2117  
704 14 Dtool_kAOMXohz 6 742 2016 0 14 Dtool_kAOMXohz 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2116  1 i 1 2003  
705 14 Dtool_kAOM_Yun 6 742 2017 0 14 Dtool_kAOM_Yun 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::get_component
//       Access: Published
//  Description: Returns the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2117  1 i 1 2003  
706 14 Dtool_kAOMqTJg 4 743 1990 0 14 Dtool_kAOMqTJg 307 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::set_component
//       Access: Published
//  Description: Changes the attributes for the nth component
//               triangle.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2116  1 i 1 2003  6 attrib 1 2017  
707 14 Dtool_kAOM81Mv 6 744 1991 0 14 Dtool_kAOM81Mv 678 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_into
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the indicated container.
//               Does not remove the primitive from its existing
//               parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2117  9 container 1 2002  
708 14 Dtool_kAOM3sTt 7 745 2116 1599 14 Dtool_kAOM3sTt 830 ////////////////////////////////////////////////////////////////////
//     Function: EggCompositePrimitive::triangulate_in_place
//       Access: Published
//  Description: Subdivides the composite primitive into triangles and
//               adds those triangles to the parent group node in
//               place of the original primitive.  Returns a pointer
//               to the original primitive, which is likely about to
//               be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2116  
709 14 Dtool_kAOMflzy 7 746 1986 0 14 Dtool_kAOMflzy 0 0 
710 14 Dtool_kAOM_Tjy 7 748 2119 1675 14 Dtool_kAOM_Tjy 699 // Filename: eggData.I
// Created by:  drose (11Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
711 14 Dtool_kAOMYDEk 7 748 2119 1675 14 Dtool_kAOMYDEk 221 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2120  
712 14 Dtool_kAOMdsvy 7 749 2119 1675 14 Dtool_kAOMdsvy 229 ////////////////////////////////////////////////////////////////////
//     Function: EggData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  4 copy 1 2120  
713 14 Dtool_kAOMqWzm 6 750 1991 0 14 Dtool_kAOMqWzm 479 ////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
//////////////////////////////////////////////////////////////////// 2 12 egg_filename 1 2122  10 searchpath 1 2057  
714 14 Dtool_kAOM_5ZW 6 750 1991 0 14 Dtool_kAOM_5ZW 479 ////////////////////////////////////////////////////////////////////
//     Function: EggData::resolve_egg_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the model_path.
//               If found, updates the filename to the full path and
//               returns true; otherwise, returns false.
//////////////////////////////////////////////////////////////////// 1 12 egg_filename 1 2122  
715 14 Dtool_kAOMR9jy 6 751 1991 0 14 Dtool_kAOMR9jy 584 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2119  8 filename 1 2122  12 display_name 1 1995  
716 14 Dtool_kAOM8ZNq 6 751 1991 0 14 Dtool_kAOM8ZNq 584 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the egg data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//
//               error is the output stream to which to write error
//               messages.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  8 filename 1 2122  
717 14 Dtool_kAOMluzF 6 751 1991 0 14 Dtool_kAOMluzF 762 ////////////////////////////////////////////////////////////////////
//     Function: EggData::read
//       Access: Public
//  Description: Parses the egg syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid egg file, false if there were some
//               errors, in which case the data may be partially read.
//
//               Before you call this routine, you should probably
//               call set_egg_filename() to set the name of the egg
//               file we're processing, if at all possible.  If there
//               is no such filename, you may set it to the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  2 in 1 2123  
718 14 Dtool_kAOMvw2D 4 752 1990 0 14 Dtool_kAOMvw2D 324 ////////////////////////////////////////////////////////////////////
//     Function: EggData::merge
//       Access: Public
//  Description: Appends the other egg structure to the end of this
//               one.  The other egg structure is invalidated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  5 other 1 2119  
719 14 Dtool_kAOMEkdE 6 753 1991 0 14 Dtool_kAOMEkdE 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  10 searchpath 1 2057  
720 14 Dtool_kAOMlY7S 6 753 1991 0 14 Dtool_kAOMlY7S 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2119  
721 14 Dtool_kAOMONYx 6 753 1991 0 14 Dtool_kAOMONYx 656 ////////////////////////////////////////////////////////////////////
//     Function: EggData::load_externals
//       Access: Public
//  Description: Loads up all the egg files referenced by <File>
//               entries within the egg structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2119  10 searchpath 1 2057  6 record 1 2125  
722 14 Dtool_kAOMfumv 6 754 2003 0 14 Dtool_kAOMfumv 608 ////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_textures
//       Access: Public
//  Description: Removes duplicate references to the same texture
//               image with the same properties.  Considers two
//               texture references with identical properties, but
//               different tref names, to be equivalent, and collapses
//               them, choosing one tref name to keep arbitrarily.
//               Returns the number of textures removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2119  
723 14 Dtool_kAOMGkhb 6 755 2003 0 14 Dtool_kAOMGkhb 607 ////////////////////////////////////////////////////////////////////
//     Function: EggData::collapse_equivalent_materials
//       Access: Public
//  Description: Removes duplicate references to the same material
//               with the same properties.  Considers two material
//               references with identical properties, but different
//               mref names, to be equivalent, and collapses them,
//               choosing one mref name to keep arbitrarily.  Returns
//               the number of materials removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2119  
724 14 Dtool_kAOMUZKh 6 756 1991 0 14 Dtool_kAOMUZKh 265 ////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  8 filename 1 2122  
725 14 Dtool_kAOMOkbY 6 756 1991 0 14 Dtool_kAOMOkbY 265 ////////////////////////////////////////////////////////////////////
//     Function: EggData::write_egg
//       Access: Public
//  Description: The main interface for writing complete egg files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  3 out 1 1996  
726 14 Dtool_kAOMkJsK 4 757 1990 0 14 Dtool_kAOMkJsK 399 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  7 resolve 1 1991  
727 14 Dtool_kAOMVTWc 6 758 1991 0 14 Dtool_kAOMVTWc 399 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_auto_resolve_externals
//       Access: Public
//  Description: Indicates whether the EggData object will
//               automatically resolve any external references when
//               read() is called.  The default is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
728 14 Dtool_kAOMLqtE 6 759 1991 0 14 Dtool_kAOMLqtE 741 ////////////////////////////////////////////////////////////////////
//     Function: EggData::original_had_absolute_pathnames
//       Access: Public
//  Description: Returns true if the data processed in the last call
//               to read() contained absolute pathnames, or false if
//               those pathnames were all relative.
//
//               This method is necessary because if
//               auto_resolve_externals() is in effect, it may modify
//               the pathnames to be absolute whether or not they were
//               as loaded from disk.  This method can be used to
//               query the state of the original egg file from disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
729 14 Dtool_kAOMwPUu 4 760 1990 0 14 Dtool_kAOMwPUu 403 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the EggData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  8 coordsys 1 2063  
730 14 Dtool_kAOMW4K_ 6 761 2063 0 14 Dtool_kAOMW4K_ 307 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the egg file
//               is defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
731 14 Dtool_kAOMgZ_q 4 762 1990 0 14 Dtool_kAOMgZ_q 392 ////////////////////////////////////////////////////////////////////
//     Function: EggData::set_egg_filename
//       Access: Public
//  Description: Sets the filename--especially the directory part--in
//               which the egg file is considered to reside.  This is
//               also implicitly set by read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  12 egg_filename 1 2060  
732 14 Dtool_kAOMOvC5 6 763 2060 0 14 Dtool_kAOMOvC5 307 ////////////////////////////////////////////////////////////////////
//     Function: EggData::get_egg_filename
//       Access: Public
//  Description: Returns the directory in which the egg file is
//               considered to reside.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2120  
733 14 Dtool_kAOMHKMn 4 764 1990 0 14 Dtool_kAOMHKMn 1124 ////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_vertex_normals
//       Access: Public
//  Description: Recomputes all the vertex normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  A shared
//               edge between two polygons (even in different groups)
//               is considered smooth if the angle between the two
//               edges is less than threshold degrees.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               correct normals.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2119  9 threshold 1 1919  
734 14 Dtool_kAOMI60Q 4 765 1990 0 14 Dtool_kAOMI60Q 1069 ////////////////////////////////////////////////////////////////////
//     Function: EggData::recompute_polygon_normals
//       Access: Public
//  Description: Recomputes all the polygon normals for polygon
//               geometry at this group node and below so that they
//               accurately reflect the vertex positions.  Normals are
//               removed from the vertices and defined only on
//               polygons, giving the geometry a faceted appearance.
//
//               This function also removes degenerate polygons that
//               do not have enough vertices to define a normal.  It
//               does not affect normals for other kinds of primitives
//               like Nurbs or Points.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normals removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2119  
735 14 Dtool_kAOMMttE 4 766 1990 0 14 Dtool_kAOMMttE 598 ////////////////////////////////////////////////////////////////////
//     Function: EggData::strip_normals
//       Access: Public
//  Description: Removes all normals from primitives, and the vertices
//               they reference, at this node and below.
//
//               This function does not remove or adjust vertices in
//               the vertex pool; it only adds new vertices with the
//               normal removed.  Thus, it is a good idea to call
//               remove_unused_vertices() after calling this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2119  
736 14 Dtool_kAOMDr_V 7 767 1986 0 14 Dtool_kAOMDr_V 0 0 
737 14 Dtool_kAOMYWbP 7 770 2127 1680 14 Dtool_kAOMYWbP 723 // Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 value 1 2063  
738 14 Dtool_kAOM20iH 7 770 2127 1680 14 Dtool_kAOM20iH 723 // Filename: eggCoordinateSystem.I
// Created by:  drose (20Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
739 14 Dtool_kAOMuEBs 7 770 2127 1680 14 Dtool_kAOMuEBs 233 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2128  
740 14 Dtool_kAOMIzaC 4 771 1990 0 14 Dtool_kAOMIzaC 226 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2127  5 value 1 2063  
741 14 Dtool_kAOMXtH9 6 772 2063 0 14 Dtool_kAOMXtH9 226 ////////////////////////////////////////////////////////////////////
//     Function: EggCoordinateSystem::set_value
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2128  
742 14 Dtool_kAOM0Chp 7 773 1986 0 14 Dtool_kAOM0Chp 0 0 
743 14 Dtool_kAOM9d8E 7 776 2130 1688 14 Dtool_kAOM9d8E 230 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2130  4 copy 1 2131  
744 14 Dtool_kAOM6saC 4 778 1990 0 14 Dtool_kAOM6saC 559 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions that will be
//               requested across the curve.  (This doesn't necessary
//               guarantee that this number of subdivisions will be
//               made; it's just a hint to any curve renderer or quick
//               tesselator.)  Set the number to 0 to disable the
//               hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2130  6 subdiv 1 2003  
745 14 Dtool_kAOM_WHg 6 779 2003 0 14 Dtool_kAOM_WHg 335 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions, or 0 if
//               no particular subdivisions have been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
746 14 Dtool_kAOMupv_ 4 780 1990 0 14 Dtool_kAOMupv_ 367 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::set_curve_type
//       Access: Public
//  Description: Sets the type of the curve.  This is primarily used
//               as a hint to any code that may need to deal with this
//               curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2130  4 type 1 1957  
747 14 Dtool_kAOM6DD5 6 781 1957 0 14 Dtool_kAOM6DD5 261 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::get_curve_type
//       Access: Public
//  Description: Returns the indicated type of the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2131  
748 14 Dtool_kAOM5L8d 6 782 1957 0 14 Dtool_kAOM5L8d 412 ////////////////////////////////////////////////////////////////////
//     Function: EggCurve::string_curve_type
//       Access: Public, Static
//  Description: Returns the CurveType value associated with the given
//               string representation, or CT_invalid if the string
//               does not match any known CurveType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
749 14 Dtool_kAOMsThz 7 783 1986 0 14 Dtool_kAOMsThz 0 0 
750 14 Dtool_kAOM_0_W 7 786 2135 1692 14 Dtool_kAOM_0_W 234 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2133  
751 14 Dtool_kAOM8ySO 7 786 2135 1692 14 Dtool_kAOM8ySO 229 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 9 node_name 1 1995  8 filename 1 1995  
752 14 Dtool_kAOMmtLn 7 787 2135 1692 14 Dtool_kAOMmtLn 242 ////////////////////////////////////////////////////////////////////
//     Function: EggExternalReference::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2135  4 copy 1 2133  
753 14 Dtool_kAOMp9UM 7 788 1986 0 14 Dtool_kAOMp9UM 0 0 
754 14 Dtool_kAOM8kwb 4 791 1990 0 14 Dtool_kAOM8kwb 313 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::clear
//       Access: Public
//  Description: Empties the table of used named and prepares the
//               Uniquifier for a new tree.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2136  
755 14 Dtool_kAOMeFPl 4 792 1990 0 14 Dtool_kAOMeFPl 269 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::uniquify
//       Access: Public
//  Description: Begins the traversal from the indicated node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 node 1 1999  
756 14 Dtool_kAOMOi3s 7 793 1999 1034 14 Dtool_kAOMOi3s 341 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::get_node
//       Access: Public
//  Description: Returns the node associated with the given category
//               and name, or NULL if the name has not been used.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2137  8 category 1 1995  4 name 1 1995  
757 14 Dtool_kAOMXkGH 6 794 1991 0 14 Dtool_kAOMXkGH 332 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::has_name
//       Access: Public
//  Description: Returns true if the name has been used for the
//               indicated category already, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2137  8 category 1 1995  4 name 1 1995  
758 14 Dtool_kAOMEft2 6 795 1991 0 14 Dtool_kAOMEft2 477 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2136  8 category 1 1995  4 name 1 1995  4 node 1 1999  
759 14 Dtool_kAOMYHHH 6 795 1991 0 14 Dtool_kAOMYHHH 477 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::add_name
//       Access: Public
//  Description: Adds the name to the indicated category.  This name
//               will not be used for any other egg node within this
//               category.  Returns true if the name was added, or
//               false if it was already in use for the category.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2136  8 category 1 1995  4 name 1 1995  
760 14 Dtool_kAOM3vi3 6 796 1995 0 14 Dtool_kAOM3vi3 0 2 4 this 3 2136  4 node 1 1999  
761 14 Dtool_kAOMEi4Q 6 797 1995 0 14 Dtool_kAOMEi4Q 487 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::filter_name
//       Access: Public, Virtual
//  Description: Returns the name of the given node, or at least the
//               name it should be.  This provides a hook to adjust
//               the name before attempting to uniquify it, if
//               desired, for instance to remove invalid characters.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2136  4 node 1 1999  
762 14 Dtool_kAOM1Kmh 6 798 1995 0 14 Dtool_kAOM1Kmh 682 ////////////////////////////////////////////////////////////////////
//     Function: EggNameUniquifier::generate_name
//       Access: Public, Virtual
//  Description: Generates a new name for the given node when its
//               existing name clashes with some other node.  This
//               function will be called repeatedly, if necessary,
//               until it returns a name that actually is unique.
//
//               The category is the string returned by
//               get_category(), and index is a uniquely-generated
//               number that may be useful for synthesizing the name.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2136  4 node 1 1999  8 category 1 1995  5 index 1 2003  
763 14 Dtool_kAOMDsSt 7 799 1986 0 14 Dtool_kAOMDsSt 0 0 
764 14 Dtool_kAOM0C8Z 7 801 2139 1704 14 Dtool_kAOM0C8Z 530 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
//////////////////////////////////////////////////////////////////// 1 12 filter_names 1 1991  
765 14 Dtool_kAOM6jri 7 801 2139 1704 14 Dtool_kAOM6jri 530 ////////////////////////////////////////////////////////////////////
//     Function: EggGroupUniquifier::Constructor
//       Access: Public
//  Description: If filter_names is true, then the group names will be
//               coerced into a fairly safe, standard convention that
//               uses no characters other than a-z, A-Z, 0-9, and
//               underscore.  If filter_names is false, the group
//               names will be left unchanged.
//////////////////////////////////////////////////////////////////// 0 
766 14 Dtool_kAOMgoSO 7 802 1986 0 14 Dtool_kAOMgoSO 0 0 
767 14 Dtool_kAOMDrFz 7 805 2142 1599 14 Dtool_kAOMDrFz 221 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2140  
768 14 Dtool_kAOMX4DQ 7 805 2142 1599 14 Dtool_kAOMX4DQ 699 // Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
769 14 Dtool_kAOMJipL 7 805 2142 1599 14 Dtool_kAOMJipL 699 // Filename: eggLine.I
// Created by:  drose (14Oct03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggLine::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
770 14 Dtool_kAOMvLAZ 7 806 2142 1599 14 Dtool_kAOMvLAZ 229 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2142  4 copy 1 2140  
771 14 Dtool_kAOM0ujY 6 807 1991 0 14 Dtool_kAOM0ujY 217 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::has_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2140  
772 14 Dtool_kAOMyGRj 6 808 1919 0 14 Dtool_kAOMyGRj 328 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular line.
//               If there is no thickness set, returns 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2140  
773 14 Dtool_kAOMxUAE 4 809 1990 0 14 Dtool_kAOMxUAE 217 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::set_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2142  5 thick 1 1919  
774 14 Dtool_kAOMf5MK 4 810 1990 0 14 Dtool_kAOMf5MK 219 ////////////////////////////////////////////////////////////////////
//     Function: EggLine::clear_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2142  
775 14 Dtool_kAOMZ1pB 7 811 1986 0 14 Dtool_kAOMZ1pB 0 0 
776 14 Dtool_kAOM2_LL 7 813 2143 1714 14 Dtool_kAOM2_LL 230 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
777 14 Dtool_kAOMI3vE 7 813 2143 1714 14 Dtool_kAOMI3vE 235 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2144  
778 14 Dtool_kAOMEcH7 6 814 2143 0 14 Dtool_kAOMEcH7 243 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2143  4 copy 1 2144  
779 14 Dtool_kAOMUC81 4 816 1990 0 14 Dtool_kAOMUC81 267 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::clear
//       Access: Public
//  Description: Removes all materials from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2143  
780 14 Dtool_kAOMOymL 6 817 2003 0 14 Dtool_kAOMOymL 483 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::extract_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggMaterials encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggMaterials encountered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2143  4 node 1 2002  
781 14 Dtool_kAOMxG5C 6 818 2003 0 14 Dtool_kAOMxG5C 1402 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_used_materials
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for materials that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_materials(), it
//               can be used to pick up any additional material
//               references that appeared in the egg hierarchy (but
//               whose EggMaterial node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_materials(), it
//               will fill up the collection with all of the
//               referenced materials (and only the referenced
//               materials), without destructively removing the
//               EggMaterials from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a material in the collection
//               each time a material reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_materials().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2143  4 node 1 1999  
782 14 Dtool_kAOM74xc 4 819 1990 0 14 Dtool_kAOM74xc 574 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_unused_materials
//       Access: Public
//  Description: Removes any materials from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds materials to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2143  4 node 1 1999  
783 14 Dtool_kAOM8xlm 6 820 2003 0 14 Dtool_kAOM8xlm 756 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new material pointers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2143  2 eq 1 2003  4 node 1 2002  
784 14 Dtool_kAOMV3rv 6 820 2003 0 14 Dtool_kAOMV3rv 1035 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::collapse_equivalent_materials
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate materials that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggMaterial::is_equivalent_to()).  The return value is
//               the number of materials removed.
//
//               This flavor of collapse_equivalent_materials() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed material, mapping it back to the
//               equivalent retained material.  It's up to the user to
//               then call replace_materials() with this map, if
//               desired, to apply these changes to the egg hierarchy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2143  2 eq 1 2003  7 removed 1 2146  
785 14 Dtool_kAOM0Vhs 4 821 1990 0 14 Dtool_kAOM0Vhs 606 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::replace_materials
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a material appearing on the left side of the map
//               with its corresponding material on the right side.
//               This is most often done following a call to
//               collapse_equivalent_materials().  It does not directly
//               affect the Collection.
//////////////////////////////////////////////////////////////////// 2 4 node 1 2002  7 replace 1 2148  
786 14 Dtool_kAOMcBOS 4 822 1990 0 14 Dtool_kAOMcBOS 386 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::uniquify_mrefs
//       Access: Public
//  Description: Guarantees that each material in the collection has a
//               unique MRef name.  This is essential before writing
//               an egg file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2143  
787 14 Dtool_kAOMs9_r 4 823 1990 0 14 Dtool_kAOMs9_r 406 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::sort_by_mref
//       Access: Public
//  Description: Sorts all the materials into alphabetical order by
//               MRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2143  
788 14 Dtool_kAOMJriL 6 824 1991 0 14 Dtool_kAOMJriL 413 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::add_material
//       Access: Public
//  Description: Explicitly adds a new material to the collection.
//               Returns true if the material was added, false if it
//               was already there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2143  8 material 1 2114  
789 14 Dtool_kAOMzqxK 6 825 1991 0 14 Dtool_kAOMzqxK 414 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::remove_material
//       Access: Public
//  Description: Explicitly removes a material from the collection.
//               Returns true if the material was removed, false if it
//               wasn't there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2143  8 material 1 2114  
790 14 Dtool_kAOMyOi1 7 826 2114 1591 14 Dtool_kAOMyOi1 477 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::create_unique_material
//       Access: Public
//  Description: Creates a new material if there is not already one
//               equivalent (according to eq, see
//               EggMaterial::is_equivalent_to()) to the indicated
//               material, or returns the existing one if there is.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2143  4 copy 1 2112  2 eq 1 2003  
791 14 Dtool_kAOMcDwq 7 827 2114 1591 14 Dtool_kAOMcDwq 328 ////////////////////////////////////////////////////////////////////
//     Function: EggMaterialCollection::find_mref
//       Access: Public
//  Description: Returns the material with the indicated MRef name, or
//               NULL if no material matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2144  9 mref_name 1 1995  
792 14 Dtool_kAOMXJZS 7 829 2152 1735 14 Dtool_kAOMXJZS 227 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2150  
793 14 Dtool_kAOMUWBj 7 829 2152 1735 14 Dtool_kAOMUWBj 708 // Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
794 14 Dtool_kAOMO3JE 7 829 2152 1735 14 Dtool_kAOMO3JE 708 // Filename: eggPolygon.I
// Created by:  drose (10Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
795 14 Dtool_kAOMG5ro 7 830 2152 1735 14 Dtool_kAOMG5ro 235 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  4 copy 1 2150  
796 14 Dtool_kAOM1KP0 6 831 1991 0 14 Dtool_kAOM1KP0 678 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2150  6 result 1 2153  2 cs 1 2063  
797 14 Dtool_kAOM7k0F 6 831 1991 0 14 Dtool_kAOM7k0F 678 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::calculate_normal
//       Access: Published
//  Description: Calculates the true polygon normal--the vector
//               pointing out of the front of the polygon--based on
//               the vertices.  This does not return or change the
//               polygon's normal as set via set_normal().
//
//               The return value is true if the normal is computed
//               correctly, or false if the polygon is degenerate and
//               does not have at least three noncollinear vertices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2150  6 result 1 2153  
798 14 Dtool_kAOMMiG7 6 832 1991 0 14 Dtool_kAOMMiG7 327 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::is_planar
//       Access: Published
//  Description: Returns true if all of the polygon's vertices lie
//               within the same plane, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2150  
799 14 Dtool_kAOMPIIR 6 833 1991 0 14 Dtool_kAOMPIIR 480 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  2 cs 1 2063  
800 14 Dtool_kAOM5vES 6 833 1991 0 14 Dtool_kAOM5vES 480 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::recompute_polygon_normal
//       Access: Published
//  Description: Recalculates the normal according to the order of the
//               vertices, and sets it.  Returns true if the normal is
//               computed correctly, or false if the polygon is
//               degenerate and does not have a normal.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2152  
801 14 Dtool_kAOMMg0u 6 834 1991 0 14 Dtool_kAOMMg0u 1053 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_into
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds each
//               one to the indicated container.  If the polygon is
//               already a triangle, adds an exact copy of the polygon
//               to the container.  Does not remove the polygon from
//               its existing parent or modify it in any way.
//
//               Returns true if the triangulation is successful, or
//               false if there was some error (in which case the
//               container may contain some partial triangulation).
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2150  9 container 1 2002  11 convex_also 1 1991  
802 14 Dtool_kAOMdd1f 7 835 2152 1735 14 Dtool_kAOMdd1f 786 ////////////////////////////////////////////////////////////////////
//     Function: EggPolygon::triangulate_in_place
//       Access: Published
//  Description: Subdivides the polygon into triangles and adds those
//               triangles to the parent group node in place of the
//               original polygon.  Returns a pointer to the original
//               polygon, which is likely about to be destructed.
//
//               If convex_also is true, both concave and convex
//               polygons will be subdivided into triangles;
//               otherwise, only concave polygons will be subdivided,
//               and convex polygons will be copied unchanged into the
//               container.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2152  11 convex_also 1 1991  
803 14 Dtool_kAOMuGjd 7 836 1986 0 14 Dtool_kAOMuGjd 0 0 
804 14 Dtool_kAOMSb5s 7 839 2156 1750 14 Dtool_kAOMSb5s 227 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2154  
805 14 Dtool_kAOMqKMX 7 839 2156 1750 14 Dtool_kAOMqKMX 711 // Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
806 14 Dtool_kAOM8ypa 7 839 2156 1750 14 Dtool_kAOM8ypa 711 // Filename: eggNurbsCurve.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
807 14 Dtool_kAOMetUP 7 840 2156 1750 14 Dtool_kAOMetUP 235 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2156  4 copy 1 2154  
808 14 Dtool_kAOM1I_P 4 841 1990 0 14 Dtool_kAOM1I_P 588 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::setup
//       Access: Public
//  Description: Prepares a new curve definition with the indicated
//               order and number of knots.  This also implies a
//               particular number of vertices as well (the number of
//               knots minus the order), but it is up to the user to
//               add the correct number of vertices to the curve by
//               repeatedly calling push_back().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2156  5 order 1 2003  9 num_knots 1 2003  
809 14 Dtool_kAOM6zeh 4 842 1990 0 14 Dtool_kAOM6zeh 542 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_order
//       Access: Public
//  Description: Directly changes the order to the indicated value
//               (which must be an integer in the range 1 <= order <=
//               4).  If possible, it is preferable to use the setup()
//               method instead of this method, since changing the
//               order directly may result in an invalid curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2156  5 order 1 2003  
810 14 Dtool_kAOM_mS3 4 843 1990 0 14 Dtool_kAOM_mS3 665 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_num_knots
//       Access: Public
//  Description: Directly changes the number of knots.  This will
//               either add zero-valued knots onto the end, or
//               truncate knot values from the end, depending on
//               whether the list is being increased or decreased.  If
//               possible, it is preferable to use the setup() method
//               instead of directly setting the number of knots, as
//               this may result in an invalid curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2156  3 num 1 2003  
811 14 Dtool_kAOMsz1o 4 844 1990 0 14 Dtool_kAOMsz1o 452 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::set_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_knots(),
//               and the value must be in the range get_knot(k - 1)
//               <= value <= get_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2156  1 k 1 2003  5 value 1 1919  
812 14 Dtool_kAOMXgbF 6 845 1991 0 14 Dtool_kAOMXgbF 458 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2154  
813 14 Dtool_kAOMU0kx 6 846 2003 0 14 Dtool_kAOMU0kx 470 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_order
//       Access: Public
//  Description: Returns the order of the curve.  The order is the
//               degree of the NURBS equation plus 1; for a typical
//               NURBS, the order is 4.  With this implementation of
//               NURBS, the order must be in the range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2154  
814 14 Dtool_kAOMa0DG 6 847 2003 0 14 Dtool_kAOMa0DG 310 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_degree
//       Access: Public
//  Description: Returns the degree of the curve.  For a typical
//               NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2154  
815 14 Dtool_kAOMBXkq 6 848 2003 0 14 Dtool_kAOMBXkq 253 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_knots
//       Access: Public
//  Description: Returns the number of knots.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2154  
816 14 Dtool_kAOMyBqz 6 849 2003 0 14 Dtool_kAOMyBqz 669 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the curve.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the curve.  (However, if the number of vertices in
//               the curve are wrong, the curve is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2154  
817 14 Dtool_kAOM07Jv 6 850 1991 0 14 Dtool_kAOM07Jv 458 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::is_closed
//       Access: Public
//  Description: Returns true if the curve appears to be closed.
//               Since the Egg syntax does not provide a means for
//               explicit indication of closure, this has to be
//               guessed at by examining the curve itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2154  
818 14 Dtool_kAOMYx8U 6 851 1919 0 14 Dtool_kAOMYx8U 255 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsCurve::get_knot
//       Access: Public
//  Description: Returns the nth knot value defined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2154  1 k 1 2003  
819 14 Dtool_kAOMTsQD 7 852 1986 0 14 Dtool_kAOMTsQD 0 0 
820 14 Dtool_kAOM6fZQ 7 855 2157 1757 14 Dtool_kAOM6fZQ 232 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2157  4 copy 1 2158  
821 14 Dtool_kAOMD1tU 4 856 1990 0 14 Dtool_kAOMD1tU 586 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_u_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2157  6 subdiv 1 2003  
822 14 Dtool_kAOM1xT9 6 857 2003 0 14 Dtool_kAOM1xT9 375 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_u_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2158  
823 14 Dtool_kAOMDplZ 4 858 1990 0 14 Dtool_kAOMDplZ 586 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::set_v_subdiv
//       Access: Public
//  Description: Sets the number of subdivisions in the U direction
//               that will be requested across the surface.  (This
//               doesn't necessary guarantee that this number of
//               subdivisions will be made; it's just a hint to any
//               surface renderer or quick tesselator.)  Set the
//               number to 0 to disable the hint.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2157  6 subdiv 1 2003  
824 14 Dtool_kAOM0VLC 6 859 2003 0 14 Dtool_kAOM0VLC 375 ////////////////////////////////////////////////////////////////////
//     Function: EggSurface::get_v_subdiv
//       Access: Public
//  Description: Returns the requested number of subdivisions in the U
//               direction, or 0 if no particular subdivisions have
//               been requested.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2158  
825 14 Dtool_kAOMjy4J 7 860 1986 0 14 Dtool_kAOMjy4J 0 0 
826 14 Dtool_kAOMIadg 7 863 2162 1789 14 Dtool_kAOMIadg 229 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2160  
827 14 Dtool_kAOMbHUr 7 863 2162 1789 14 Dtool_kAOMbHUr 715 // Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
828 14 Dtool_kAOMR3mv 7 863 2162 1789 14 Dtool_kAOMR3mv 715 // Filename: eggNurbsSurface.I
// Created by:  drose (15Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
829 14 Dtool_kAOMOEHi 7 864 2162 1789 14 Dtool_kAOMOEHi 237 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2162  4 copy 1 2160  
830 14 Dtool_kAOMjYcB 4 865 1990 0 14 Dtool_kAOMjYcB 647 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::setup
//       Access: Public
//  Description: Prepares a new surface definition with the indicated
//               order and number of knots in each dimension.  This
//               also implies a particular number of vertices in each
//               dimension as well (the number of knots minus the
//               order), but it is up to the user to add the correct
//               number of vertices to the surface by repeatedly
//               calling push_back().
//////////////////////////////////////////////////////////////////// 5 4 this 3 2162  7 u_order 1 2003  7 v_order 1 2003  11 num_u_knots 1 2003  11 num_v_knots 1 2003  
831 14 Dtool_kAOMjytp 4 866 1990 0 14 Dtool_kAOMjytp 586 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_order
//       Access: Public
//  Description: Directly changes the order in the U direction to the
//               indicated value (which must be an integer in the
//               range 1 <= u_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2162  7 u_order 1 2003  
832 14 Dtool_kAOMj6ez 4 867 1990 0 14 Dtool_kAOMj6ez 586 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_order
//       Access: Public
//  Description: Directly changes the order in the V direction to the
//               indicated value (which must be an integer in the
//               range 1 <= v_order <= 4).  If possible, it is
//               preferable to use the setup() method instead of this
//               method, since changing the order directly may result
//               in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2162  7 v_order 1 2003  
833 14 Dtool_kAOMChzm 4 868 1990 0 14 Dtool_kAOMChzm 690 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_u_knots
//       Access: Public
//  Description: Directly changes the number of knots in the U
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2162  3 num 1 2003  
834 14 Dtool_kAOMiman 4 869 1990 0 14 Dtool_kAOMiman 690 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_num_v_knots
//       Access: Public
//  Description: Directly changes the number of knots in the V
//               direction.  This will either add zero-valued knots
//               onto the end, or truncate knot values from the end,
//               depending on whether the list is being increased or
//               decreased.  If possible, it is preferable to use the
//               setup() method instead of directly setting the number
//               of knots, as this may result in an invalid surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2162  3 num 1 2003  
835 14 Dtool_kAOMzDIS 4 870 1990 0 14 Dtool_kAOMzDIS 462 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_u_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_u_knots(),
//               and the value must be in the range get_u_knot(k - 1)
//               <= value <= get_u_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2162  1 k 1 2003  5 value 1 1919  
836 14 Dtool_kAOMzL7b 4 871 1990 0 14 Dtool_kAOMzL7b 462 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_v_knot
//       Access: Public
//  Description: Resets the value of the indicated knot as indicated.
//               k must be in the range 0 <= k < get_num_v_knots(),
//               and the value must be in the range get_v_knot(k - 1)
//               <= value <= get_v_knot(k + 1).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2162  1 k 1 2003  5 value 1 1919  
837 14 Dtool_kAOMgvjX 4 872 1990 0 14 Dtool_kAOMgvjX 456 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::set_cv
//       Access: Public
//  Description: Redefines the control vertex associated with a
//               particular u, v coordinate pair.  This is just a
//               shorthand to access the EggPrimitive's normal vertex
//               assignment for a 2-d control vertex.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2162  2 ui 1 2003  2 vi 1 2003  6 vertex 1 2039  
838 14 Dtool_kAOMCf_u 6 873 1991 0 14 Dtool_kAOMCf_u 460 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_valid
//       Access: Public
//  Description: Returns true if the NURBS parameters are all
//               internally consistent (e.g. it has the right number
//               of vertices to match its number of knots and order in
//               each dimension), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
839 14 Dtool_kAOMDWLM 6 874 2003 0 14 Dtool_kAOMDWLM 511 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_order
//       Access: Public
//  Description: Returns the order of the surface in the U direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
840 14 Dtool_kAOMDe8V 6 875 2003 0 14 Dtool_kAOMDe8V 511 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_order
//       Access: Public
//  Description: Returns the order of the surface in the V direction.
//               The order is the degree of the NURBS equation plus 1;
//               for a typical NURBS, the order is 4.  With this
//               implementation of NURBS, the order must be in the
//               range [1, 4].
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
841 14 Dtool_kAOMcEe5 6 876 2003 0 14 Dtool_kAOMcEe5 334 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_degree
//       Access: Public
//  Description: Returns the degree of the surface in the U direction.
//               For a typical NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
842 14 Dtool_kAOMTMPD 6 877 2003 0 14 Dtool_kAOMTMPD 334 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_degree
//       Access: Public
//  Description: Returns the degree of the surface in the V direction.
//               for a typical NURBS, the degree is 3.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
843 14 Dtool_kAOM4yej 6 878 2003 0 14 Dtool_kAOM4yej 276 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_knots
//       Access: Public
//  Description: Returns the number of knots in the U direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
844 14 Dtool_kAOMY2Fk 6 879 2003 0 14 Dtool_kAOMY2Fk 276 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_knots
//       Access: Public
//  Description: Returns the number of knots in the V direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
845 14 Dtool_kAOMhRDE 6 880 2003 0 14 Dtool_kAOMhRDE 657 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_u_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the U direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
846 14 Dtool_kAOMBUqE 6 881 2003 0 14 Dtool_kAOMBUqE 657 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_v_cvs
//       Access: Public
//  Description: Returns the number of control vertices that should be
//               present in the V direction.  This is determined by
//               the number of knots and the order; it does not
//               necessarily reflect the number of vertices that have
//               actually been added to the surface.  (However, if the
//               number of vertices in the surface are wrong, the
//               surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
847 14 Dtool_kAOMX9VB 6 882 2003 0 14 Dtool_kAOMX9VB 679 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_num_cvs
//       Access: Public
//  Description: Returns the total number of control vertices that
//               *should* be defined for the surface.  This is
//               determined by the number of knots and the order, in
//               each direction; it does not necessarily reflect the
//               number of vertices that have actually been added to
//               the surface.  (However, if the number of vertices in
//               the surface are wrong, the surface is invalid.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
848 14 Dtool_kAOMNE6h 6 883 2003 0 14 Dtool_kAOMNE6h 538 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_index
//       Access: Public
//  Description: Returns the U index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the U index number that
//               corresponds to the nth vertex in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2160  12 vertex_index 1 2003  
849 14 Dtool_kAOMNMrr 6 884 2003 0 14 Dtool_kAOMNMrr 538 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_index
//       Access: Public
//  Description: Returns the V index number of the given vertex within
//               the EggPrimitive's linear list of vertices.  An
//               EggNurbsSurface maps a linear list of vertices to its
//               2-d mesh; this returns the V index number that
//               corresponds to the nth vertex in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2160  12 vertex_index 1 2003  
850 14 Dtool_kAOMFchs 6 885 2003 0 14 Dtool_kAOMFchs 344 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_vertex_index
//       Access: Public
//  Description: Returns the index number within the EggPrimitive's
//               list of the control vertex at position ui, vi.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2160  2 ui 1 2003  2 vi 1 2003  
851 14 Dtool_kAOM7x_L 6 886 1991 0 14 Dtool_kAOM7x_L 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_u
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the U direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
852 14 Dtool_kAOMsx28 6 887 1991 0 14 Dtool_kAOMsx28 503 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::is_closed_v
//       Access: Public
//  Description: Returns true if the surface appears to be closed in
//               the V direction.  Since the Egg syntax does not
//               provide a means for explicit indication of closure,
//               this has to be guessed at by examining the surface
//               itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2160  
853 14 Dtool_kAOM3gZW 6 888 1919 0 14 Dtool_kAOM3gZW 295 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_u_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the U
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2160  1 k 1 2003  
854 14 Dtool_kAOM34Kg 6 889 1919 0 14 Dtool_kAOM34Kg 295 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_v_knot
//       Access: Public
//  Description: Returns the nth knot value defined in the V
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2160  1 k 1 2003  
855 14 Dtool_kAOMvKm_ 7 890 2039 1109 14 Dtool_kAOMvKm_ 294 ////////////////////////////////////////////////////////////////////
//     Function: EggNurbsSurface::get_cv
//       Access: Public
//  Description: Returns the control vertex at the indicate U, V
//               position.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2160  2 ui 1 2003  2 vi 1 2003  
856 14 Dtool_kAOMnPAw 7 897 1986 0 14 Dtool_kAOMnPAw 0 0 
857 14 Dtool_kAOMULhN 6 892 2163 0 14 Dtool_kAOMULhN 0 1 4 this 3 2160  
858 14 Dtool_kAOMyjF0 6 895 2165 0 14 Dtool_kAOMyjF0 0 1 4 this 3 2160  
859 14 Dtool_kAOMuTpN 7 900 2169 1801 14 Dtool_kAOMuTpN 222 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2167  
860 14 Dtool_kAOMWhKI 7 900 2169 1801 14 Dtool_kAOMWhKI 701 // Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
861 14 Dtool_kAOMHYEZ 7 900 2169 1801 14 Dtool_kAOMHYEZ 701 // Filename: eggPoint.I
// Created by:  drose (15Dec99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
862 14 Dtool_kAOMxU3B 7 901 2169 1801 14 Dtool_kAOMxU3B 230 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2169  4 copy 1 2167  
863 14 Dtool_kAOMYocj 6 902 1991 0 14 Dtool_kAOMYocj 218 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2167  
864 14 Dtool_kAOM_pP7 6 903 1919 0 14 Dtool_kAOM_pP7 330 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_thick
//       Access: Published
//  Description: Returns the thickness set on this particular point.
//               If there is no thickness set, returns 1.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2167  
865 14 Dtool_kAOMOlOS 4 904 1990 0 14 Dtool_kAOMOlOS 218 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2169  5 thick 1 1919  
866 14 Dtool_kAOMIAtY 4 905 1990 0 14 Dtool_kAOMIAtY 220 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_thick
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2169  
867 14 Dtool_kAOM5O26 6 906 1991 0 14 Dtool_kAOM5O26 224 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::has_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2167  
868 14 Dtool_kAOMfOpS 6 907 1991 0 14 Dtool_kAOMfOpS 370 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::get_perspective
//       Access: Published
//  Description: Returns the perspective flag set on this particular
//               point.  If there is no perspective flag set, returns
//               false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2167  
869 14 Dtool_kAOMYNHn 4 908 1990 0 14 Dtool_kAOMYNHn 224 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::set_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2169  11 perspective 1 1991  
870 14 Dtool_kAOMaKhD 4 909 1990 0 14 Dtool_kAOMaKhD 226 ////////////////////////////////////////////////////////////////////
//     Function: EggPoint::clear_perspective
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2169  
871 14 Dtool_kAOMmIlG 7 910 1986 0 14 Dtool_kAOMmIlG 0 0 
872 14 Dtool_kAOMS2yw 7 915 2170 1805 14 Dtool_kAOMS2yw 225 ////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
873 14 Dtool_kAOMlQny 4 916 1990 0 14 Dtool_kAOMlQny 609 ////////////////////////////////////////////////////////////////////
//     Function: EggPolysetMaker::set_properties
//       Access: Public
//  Description: Sets the set of properties that determines which
//               polygons are allowed to be grouped together into a
//               single polyset.  This is the bitwise 'or' of all the
//               properties that matter.  If this is 0, all polygons
//               (within a given group) will be lumped into a common
//               polyset regardless of their properties.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2170  10 properties 1 2003  
874 14 Dtool_kAOM9ANi 7 917 1986 0 14 Dtool_kAOM9ANi 0 0 
875 14 Dtool_kAOMI_S9 7 920 2171 1808 14 Dtool_kAOMI_S9 226 ////////////////////////////////////////////////////////////////////
//     Function: EggPoolUniquifier::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
876 14 Dtool_kAOMxbrf 7 921 1986 0 14 Dtool_kAOMxbrf 0 0 
877 14 Dtool_kAOMKf_r 7 924 2174 1816 14 Dtool_kAOMKf_r 226 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2172  
878 14 Dtool_kAOMaUFB 7 924 2174 1816 14 Dtool_kAOMaUFB 709 // Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
879 14 Dtool_kAOMhDOv 7 924 2174 1816 14 Dtool_kAOMhDOv 709 // Filename: eggSAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
880 14 Dtool_kAOM9kyZ 7 925 2174 1816 14 Dtool_kAOM9kyZ 234 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2174  4 copy 1 2172  
881 14 Dtool_kAOMpyvE 6 926 2003 0 14 Dtool_kAOMpyvE 326 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.  For an
//               SAnim table, each row has one column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2172  
882 14 Dtool_kAOMtEEc 6 927 1919 0 14 Dtool_kAOMtEEc 329 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2172  3 row 1 2003  
883 14 Dtool_kAOMS9Mu 4 928 1990 0 14 Dtool_kAOMS9Mu 329 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::set_value
//       Access: Public
//  Description: Changes the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2174  3 row 1 2003  5 value 1 1919  
884 14 Dtool_kAOML8bt 4 929 1990 0 14 Dtool_kAOML8bt 322 ////////////////////////////////////////////////////////////////////
//     Function: EggSAnimData::optimize
//       Access: Public
//  Description: Optimizes the data by collapsing a long table of
//               duplicate values into a single value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2174  
885 14 Dtool_kAOMmWjq 7 930 1986 0 14 Dtool_kAOMmWjq 0 0 
886 14 Dtool_kAOM4E8v 7 934 2177 1824 14 Dtool_kAOM4E8v 222 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2175  
887 14 Dtool_kAOMTQ_y 7 934 2177 1824 14 Dtool_kAOMTQ_y 701 // Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
888 14 Dtool_kAOMSp2D 7 934 2177 1824 14 Dtool_kAOMSp2D 701 // Filename: eggTable.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
889 14 Dtool_kAOMxP6Z 7 935 2177 1824 14 Dtool_kAOMxP6Z 230 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2177  4 copy 1 2175  
890 14 Dtool_kAOM_8_9 4 936 1990 0 14 Dtool_kAOM_8_9 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::set_table_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2177  4 type 1 1976  
891 14 Dtool_kAOMaj1_ 6 937 1976 0 14 Dtool_kAOMaj1_ 220 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::get_table_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2175  
892 14 Dtool_kAOMZ_ev 6 938 1991 0 14 Dtool_kAOMZ_ev 313 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::has_transform
//       Access: Public
//  Description: Returns true if the table contains a transform
//               description, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2175  
893 14 Dtool_kAOMg8gw 6 939 1976 0 14 Dtool_kAOMg8gw 412 ////////////////////////////////////////////////////////////////////
//     Function: EggTable::string_table_type
//       Access: Public, Static
//  Description: Returns the TableType value associated with the given
//               string representation, or TT_invalid if the string
//               does not match any known TableType value.
//////////////////////////////////////////////////////////////////// 1 6 string 1 1995  
894 14 Dtool_kAOMS_i1 7 940 1986 0 14 Dtool_kAOMS_i1 0 0 
895 14 Dtool_kAOMbU7L 7 943 2178 1827 14 Dtool_kAOMbU7L 229 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
896 14 Dtool_kAOM8vVa 7 943 2178 1827 14 Dtool_kAOM8vVa 234 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2179  
897 14 Dtool_kAOMw9Zk 6 944 2178 0 14 Dtool_kAOMw9Zk 242 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2178  4 copy 1 2179  
898 14 Dtool_kAOMGhyi 4 946 1990 0 14 Dtool_kAOMGhyi 265 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::clear
//       Access: Public
//  Description: Removes all textures from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2178  
899 14 Dtool_kAOMrcPl 6 947 2003 0 14 Dtool_kAOMrcPl 479 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::extract_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, and removes any EggTextures encountered in the
//               hierarchy, adding them to the collection.  Returns
//               the number of EggTextures encountered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2178  4 node 1 2002  
900 14 Dtool_kAOM8UpD 6 948 1991 0 14 Dtool_kAOM8UpD 322 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no EggTexures in the
//               collection, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2179  
901 14 Dtool_kAOMsDuL 6 949 2003 0 14 Dtool_kAOMsDuL 290 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_num_textures
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2179  
902 14 Dtool_kAOMWocW 7 950 2111 1463 14 Dtool_kAOMWocW 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::get_texture
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2179  5 index 1 2003  
903 14 Dtool_kAOMKek0 6 951 2003 0 14 Dtool_kAOMKek0 1765 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_used_textures
//       Access: Public
//  Description: Walks the egg hierarchy beginning at the indicated
//               node, looking for textures that are referenced by
//               primitives but are not already members of the
//               collection, adding them to the collection.
//
//               If this is called following extract_textures(), it
//               can be used to pick up any additional texture
//               references that appeared in the egg hierarchy (but
//               whose EggTexture node was not actually part of the
//               hierarchy).
//
//               If this is called in lieu of extract_textures(), it
//               will fill up the collection with all of the
//               referenced textures (and only the referenced
//               textures), without destructively removing the
//               EggTextures from the hierarchy.
//
//               This also has the side effect of incrementing the
//               internal usage count for a texture in the collection
//               each time a texture reference is encountered.  This
//               side effect is taken advantage of by
//               remove_unused_textures().
//
//               And one more side effect: this function identifies
//               the presence of multitexturing in the egg file, and
//               calls multitexture_over() on each texture
//               appropriately so that, after this call, you may
//               expect get_multitexture_sort() to return a reasonable
//               value for each texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2178  4 node 1 1999  
904 14 Dtool_kAOM9oZ4 4 952 1990 0 14 Dtool_kAOM9oZ4 570 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_unused_textures
//       Access: Public
//  Description: Removes any textures from the collection that aren't
//               referenced by any primitives in the indicated egg
//               hierarchy.  This also, incidentally, adds textures to
//               the collection that had been referenced by primitives
//               but had not previously appeared in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2178  4 node 1 1999  
905 14 Dtool_kAOMqFH7 6 953 2003 0 14 Dtool_kAOMqFH7 749 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures()
//               automatically adjusts all the primitives in the egg
//               hierarchy to refer to the new texture pointers.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2178  2 eq 1 2003  4 node 1 2002  
906 14 Dtool_kAOMKhTa 6 953 2003 0 14 Dtool_kAOMKhTa 1026 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::collapse_equivalent_textures
//       Access: Public
//  Description: Walks through the collection and collapses together
//               any separate textures that are equivalent according
//               to the indicated equivalence factor, eq (see
//               EggTexture::is_equivalent_to()).  The return value is
//               the number of textures removed.
//
//               This flavor of collapse_equivalent_textures() does
//               not adjust any primitives in the egg hierarchy;
//               instead, it fills up the 'removed' map with an entry
//               for each removed texture, mapping it back to the
//               equivalent retained texture.  It's up to the user to
//               then call replace_textures() with this map, if
//               desired, to apply these changes to the egg hierarchy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2178  2 eq 1 2003  7 removed 1 2181  
907 14 Dtool_kAOMeVh6 4 954 1990 0 14 Dtool_kAOMeVh6 601 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::replace_textures
//       Access: Public, Static
//  Description: Walks the egg hierarchy, changing out any reference
//               to a texture appearing on the left side of the map
//               with its corresponding texture on the right side.
//               This is most often done following a call to
//               collapse_equivalent_textures().  It does not directly
//               affect the Collection.
//////////////////////////////////////////////////////////////////// 2 4 node 1 2002  7 replace 1 2183  
908 14 Dtool_kAOMalB_ 4 955 1990 0 14 Dtool_kAOMalB_ 384 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::uniquify_trefs
//       Access: Public
//  Description: Guarantees that each texture in the collection has a
//               unique TRef name.  This is essential before writing
//               an egg file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2178  
909 14 Dtool_kAOM1R_8 4 956 1990 0 14 Dtool_kAOM1R_8 404 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_tref
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               TRef name.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2178  
910 14 Dtool_kAOMOnfn 4 957 1990 0 14 Dtool_kAOMOnfn 471 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::sort_by_basename
//       Access: Public
//  Description: Sorts all the textures into alphabetical order by
//               the basename part (including extension) of the
//               filename.  Subsequent operations using begin()/end()
//               will traverse in this sorted order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2178  
911 14 Dtool_kAOMWRbQ 7 958 2111 1463 14 Dtool_kAOMWRbQ 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::operator []
//       Access: Published
//  Description: Returns the nth EggTexture in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2179  1 n 1 2054  
912 14 Dtool_kAOMiZRv 6 959 2054 0 14 Dtool_kAOMiZRv 278 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::size
//       Access: Published
//  Description: Returns the number of EggTextures in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2179  
913 14 Dtool_kAOMTk2Y 6 960 1991 0 14 Dtool_kAOMTk2Y 409 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::add_texture
//       Access: Public
//  Description: Explicitly adds a new texture to the collection.
//               Returns true if the texture was added, false if it
//               was already there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2178  7 texture 1 2111  
914 14 Dtool_kAOMyDeK 6 961 1991 0 14 Dtool_kAOMyDeK 410 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::remove_texture
//       Access: Public
//  Description: Explicitly removes a texture from the collection.
//               Returns true if the texture was removed, false if it
//               wasn't there or if there was some error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2178  7 texture 1 2111  
915 14 Dtool_kAOMLULD 7 962 2111 1463 14 Dtool_kAOMLULD 472 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::create_unique_texture
//       Access: Public
//  Description: Creates a new texture if there is not already one
//               equivalent (according to eq, see
//               EggTexture::is_equivalent_to()) to the indicated
//               texture, or returns the existing one if there is.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2178  4 copy 1 2109  2 eq 1 2003  
916 14 Dtool_kAOM4Tew 7 963 2111 1463 14 Dtool_kAOM4Tew 325 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_tref
//       Access: Public
//  Description: Returns the texture with the indicated TRef name, or
//               NULL if no texture matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2179  9 tref_name 1 1995  
917 14 Dtool_kAOMQxLn 7 964 2111 1463 14 Dtool_kAOMQxLn 328 ////////////////////////////////////////////////////////////////////
//     Function: EggTextureCollection::find_filename
//       Access: Public
//  Description: Returns the texture with the indicated filename, or
//               NULL if no texture matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2179  8 filename 1 2060  
918 14 Dtool_kAOMngwy 7 966 2187 1599 14 Dtool_kAOMngwy 231 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2185  
919 14 Dtool_kAOMTlzZ 7 966 2187 1599 14 Dtool_kAOMTlzZ 716 // Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
920 14 Dtool_kAOMHju4 7 966 2187 1599 14 Dtool_kAOMHju4 716 // Filename: eggTriangleFan.I
// Created by:  drose (23Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
921 14 Dtool_kAOM1N5q 7 967 2187 1599 14 Dtool_kAOM1N5q 239 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleFan::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2187  4 copy 1 2185  
922 14 Dtool_kAOMTtk9 7 968 1986 0 14 Dtool_kAOMTtk9 0 0 
923 14 Dtool_kAOMzlST 7 970 2190 1599 14 Dtool_kAOMzlST 233 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2188  
924 14 Dtool_kAOMx593 7 970 2190 1599 14 Dtool_kAOMx593 720 // Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
925 14 Dtool_kAOMgo8R 7 970 2190 1599 14 Dtool_kAOMgo8R 720 // Filename: eggTriangleStrip.I
// Created by:  drose (13Mar05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
926 14 Dtool_kAOMVjYd 7 971 2190 1599 14 Dtool_kAOMVjYd 241 ////////////////////////////////////////////////////////////////////
//     Function: EggTriangleStrip::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2190  4 copy 1 2188  
927 14 Dtool_kAOMKwkg 7 972 1986 0 14 Dtool_kAOMKwkg 0 0 
928 14 Dtool_kAOMRYEx 7 974 2193 1876 14 Dtool_kAOMRYEx 322 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Conversion constructor
//       Access: Public
//  Description: Converts the older-style XfmAnim table to the
//               newer-style XfmSAnim table.
//////////////////////////////////////////////////////////////////// 1 12 convert_from 1 2191  
929 14 Dtool_kAOMmYOa 7 974 2193 1876 14 Dtool_kAOMmYOa 225 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2194  
930 14 Dtool_kAOMcgvp 7 974 2193 1876 14 Dtool_kAOMcgvp 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 1995  2 cs 1 2063  
931 14 Dtool_kAOM7lEE 7 974 2193 1876 14 Dtool_kAOM7lEE 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
932 14 Dtool_kAOMg0m6 7 974 2193 1876 14 Dtool_kAOMg0m6 707 // Filename: eggXfmSAnim.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
933 14 Dtool_kAOMBbhs 7 975 2193 1876 14 Dtool_kAOMBbhs 233 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2193  4 copy 1 2194  
934 14 Dtool_kAOMsNjA 4 976 1990 0 14 Dtool_kAOMsNjA 216 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2193  3 fps 1 1919  
935 14 Dtool_kAOM6b_o 4 977 1990 0 14 Dtool_kAOM6b_o 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2193  
936 14 Dtool_kAOMfhuX 6 978 1991 0 14 Dtool_kAOMfhuX 216 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_fps
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2194  
937 14 Dtool_kAOMngbU 6 979 1919 0 14 Dtool_kAOMngbU 262 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_fps
//       Access: Public
//  Description: This is only valid if has_fps() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2194  
938 14 Dtool_kAOMW2jL 4 980 1990 0 14 Dtool_kAOMW2jL 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2193  5 order 1 1995  
939 14 Dtool_kAOMfUuB 4 981 1990 0 14 Dtool_kAOMfUuB 220 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2193  
940 14 Dtool_kAOM2pYT 6 982 1991 0 14 Dtool_kAOM2pYT 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::has_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2194  
941 14 Dtool_kAOMcqDQ 6 983 1995 0 14 Dtool_kAOMcqDQ 218 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2194  
942 14 Dtool_kAOMAIxi 6 984 1995 0 14 Dtool_kAOMAIxi 448 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
//////////////////////////////////////////////////////////////////// 0 
943 14 Dtool_kAOMnUlS 6 985 2063 0 14 Dtool_kAOMnUlS 589 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2194  
944 14 Dtool_kAOMqvPQ 4 986 1990 0 14 Dtool_kAOMqvPQ 290 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2193  
945 14 Dtool_kAOMga25 4 987 1990 0 14 Dtool_kAOMga25 512 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::optimize_to_standard_order
//       Access: Public
//  Description: Optimizes the table by collapsing redundant
//               sub-tables, and simultaneously ensures that the order
//               string is the standard order (which is the same as
//               that supported by compose_matrix() and
//               decompose_matrix()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2193  
946 14 Dtool_kAOMsVux 4 988 1990 0 14 Dtool_kAOMsVux 508 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::normalize
//       Access: Public
//  Description: The inverse operation of optimize(), this ensures
//               that all the sub-tables have the same length by
//               duplicating rows as necessary.  This is needed before
//               doing operations like add_data() or set_value() on an
//               existing table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2193  
947 14 Dtool_kAOMXO7Q 6 989 2003 0 14 Dtool_kAOMXO7Q 528 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_num_rows
//       Access: Public
//  Description: Returns the effective number of rows in the table.
//               This is actually the number of rows of the smallest
//               subtable larger than one row.  This is a convenience
//               function that treats the table of tables as if it
//               were a single table of matrices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2194  
948 14 Dtool_kAOM4L7T 4 990 1990 0 14 Dtool_kAOM4L7T 639 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//////////////////////////////////////////////////////////////////// 3 4 this 3 2194  3 row 1 2003  3 mat 1 2196  
949 14 Dtool_kAOMIeZX 6 991 1991 0 14 Dtool_kAOMIeZX 716 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::set_value
//       Access: Public
//  Description: Replaces the indicated row of the table with the
//               given matrix.
//
//               This function can only be called if all the
//               constraints of add_data(), below, are met.  Call
//               normalize() first if you are not sure.
//
//               The return value is true if the matrix can be
//               decomposed and stored as scale, shear, rotate, and
//               translate, or false otherwise.  The data is set in
//               either case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2193  3 row 1 2003  3 mat 1 2004  
950 14 Dtool_kAOM4n4x 4 992 1990 0 14 Dtool_kAOM4n4x 316 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::clear_data
//       Access: Public
//  Description: Removes all data from the table.  It does this by
//               removing all of its children.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2193  
951 14 Dtool_kAOMCJDG 6 993 1991 0 14 Dtool_kAOMCJDG 1669 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_data
//       Access: Public
//  Description: Adds a new matrix to the table, by adding a new row
//               to each of the subtables.
//
//               This is a convenience function that
//               treats the table of tables as if it were a single
//               table of matrices.  It is an error to call this if
//               any SAnimData children of this node have an improper
//               name (e.g. not a single letter, or not one of
//               "ijkabchprxyz").
//
//               This function has the further requirement that all
//               nine of the subtables must exist and be of the same
//               length.  Furthermore, the order string must be the
//               standard order string, which matches the system
//               compose_matrix() and decompose_matrix() functions.
//
//               Thus, you probably cannot take an existing
//               EggXfmSAnim object and start adding matrices to the
//               end; you must clear out the original data first.  (As
//               a special exception, if no tables exist, they will be
//               created.)  The method normalize() will do this for
//               you on an existing EggXfmSAnim.
//
//               This function may fail silently if the matrix cannot
//               be decomposed into scale, shear, rotate, and
//               translate.  In this case, the closest approximation
//               is added to the table, and false is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2193  3 mat 1 2004  
952 14 Dtool_kAOMAOJJ 4 994 1990 0 14 Dtool_kAOMAOJJ 330 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the named component (one of
//               matrix_component_letters) of the table.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2193  14 component_name 1 1995  5 value 1 1919  
953 14 Dtool_kAOMXAkq 4 994 1990 0 14 Dtool_kAOMXAkq 307 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::add_component_data
//       Access: Public
//  Description: Adds a new row to the indicated component (0-12) of
//               the table.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2193  9 component 1 2003  5 value 1 1919  
954 14 Dtool_kAOM3FmY 4 995 1990 0 14 Dtool_kAOM3FmY 442 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmSAnim::compose_with_order
//       Access: Public, Static
//  Description: Composes a matrix out of the nine individual
//               components, respecting the order string.  The
//               components will be applied in the order indicated by
//               the string.
//////////////////////////////////////////////////////////////////// 7 3 mat 1 2196  5 scale 1 2083  5 shear 1 2083  3 hpr 1 2083  5 trans 1 2083  5 order 1 1995  2 cs 1 2063  
955 14 Dtool_kAOMm6HI 7 996 1986 0 14 Dtool_kAOMm6HI 0 0 
956 14 Dtool_kAOMb2RM 7 999 2197 1893 14 Dtool_kAOMb2RM 228 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2191  
957 14 Dtool_kAOMIOPW 7 999 2197 1893 14 Dtool_kAOMIOPW 325 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Conversion constructor
//       Access: Public
//  Description: Converts the newer-style XfmSAnim table to the
//               older-style XfmAnim table.
//////////////////////////////////////////////////////////////////// 1 12 convert_from 1 2194  
958 14 Dtool_kAOM4g06 7 999 2197 1893 14 Dtool_kAOM4g06 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 1995  2 cs 1 2063  
959 14 Dtool_kAOMwzqM 7 999 2197 1893 14 Dtool_kAOMwzqM 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 1995  
960 14 Dtool_kAOM9omr 7 999 2197 1893 14 Dtool_kAOM9omr 713 // Filename: eggXfmAnimData.I
// Created by:  drose (19Feb99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
961 14 Dtool_kAOMuTJ7 7 1000 2197 1893 14 Dtool_kAOMuTJ7 236 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2197  4 copy 1 2191  
962 14 Dtool_kAOMQOOI 4 1001 1990 0 14 Dtool_kAOMQOOI 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2197  5 order 1 1995  
963 14 Dtool_kAOMF43l 4 1002 1990 0 14 Dtool_kAOMF43l 223 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2197  
964 14 Dtool_kAOMpqB7 6 1003 1991 0 14 Dtool_kAOMpqB7 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
965 14 Dtool_kAOMxPBu 6 1004 1995 0 14 Dtool_kAOMxPBu 221 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_order
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
966 14 Dtool_kAOM4nKv 6 1005 1995 0 14 Dtool_kAOM4nKv 451 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_standard_order
//       Access: Public, Static
//  Description: Returns the standard order of matrix component
//               composition.  This is what the order string must be
//               set to in order to use set_value() or add_data()
//               successfully.
//////////////////////////////////////////////////////////////////// 0 
967 14 Dtool_kAOMf_7y 4 1006 1990 0 14 Dtool_kAOMf_7y 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::set_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2197  8 contents 1 1995  
968 14 Dtool_kAOMCl5p 4 1007 1990 0 14 Dtool_kAOMCl5p 226 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::clear_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2197  
969 14 Dtool_kAOMjktg 6 1008 1991 0 14 Dtool_kAOMjktg 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::has_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
970 14 Dtool_kAOMbBtT 6 1009 1995 0 14 Dtool_kAOMbBtT 224 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_contents
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
971 14 Dtool_kAOMFVWG 6 1010 2063 0 14 Dtool_kAOMFVWG 592 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system this table believes it
//               is defined within.  This should always match the
//               coordinate system of the EggData structure that owns
//               it.  It is necessary to store it here because the
//               meaning of the h, p, and r columns depends on the
//               coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
972 14 Dtool_kAOMjSnu 6 1011 2003 0 14 Dtool_kAOMjSnu 265 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_rows
//       Access: Public
//  Description: Returns the number of rows in the table.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
973 14 Dtool_kAOMf3hX 6 1012 2003 0 14 Dtool_kAOMf3hX 393 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_num_cols
//       Access: Public
//  Description: Returns the number of columns in the table.  This is
//               set according to the "contents" string, which defines
//               the meaning of each column.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2191  
974 14 Dtool_kAOMNC28 4 1013 1990 0 14 Dtool_kAOMNC28 437 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value of the aggregate row of the table
//               as a matrix.  This is a convenience function that
//               treats the 2-d table as if it were a single table of
//               matrices.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2191  3 row 1 2003  3 mat 1 2196  
975 14 Dtool_kAOM_V0v 6 1013 1919 0 14 Dtool_kAOM_V0v 400 ////////////////////////////////////////////////////////////////////
//     Function: EggXfmAnimData::get_value
//       Access: Public
//  Description: Returns the value at the indicated row.  Row must be
//               in the range 0 <= row < get_num_rows(); col must be
//               in the range 0 <= col < get_num_cols().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2191  3 row 1 2003  3 col 1 2003  
976 14 Dtool_kAOM0uoj 7 1014 1986 0 14 Dtool_kAOM0uoj 0 0 
305
1894 11 EggUserData 75777 11 EggUserData 11 EggUserData 0 0 0 1 977 0 0 2 978 979 0 0 1 0 1895 0 0 0 0 632
////////////////////////////////////////////////////////////////////
//       Class : EggUserData
// Description : This is a base class for a user-defined data type to
//               extend egg structures in processing code.  The user
//               of the egg library may derive from EggUserData to
//               associate any arbitrary data with various egg
//               objects.
//
//               However, this data will not be written out to the
//               disk when the egg file is written; it is an in-memory
//               object only.
////////////////////////////////////////////////////////////////////

1895 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1896 9 EggObject 75777 9 EggObject 9 EggObject 0 0 0 1 980 0 0 6 981 982 983 984 985 986 0 0 1 0 1895 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : EggObject
// Description : The highest-level base class in the egg directory.
//               (Almost) all things egg inherit from this.
////////////////////////////////////////////////////////////////////

1897 14 EggNamedObject 141313 14 EggNamedObject 14 EggNamedObject 0 0 0 1 991 995 0 3 992 993 994 0 0 2 3 1896 987 988 3 1898 989 990 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : EggNamedObject
// Description : This is a fairly low-level base class--any egg
//               object that has a name.
////////////////////////////////////////////////////////////////////

1898 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

1899 7 EggNode 141313 7 EggNode 7 EggNode 0 0 0 0 1034 0 38 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 0 0 1 0 1897 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : EggNode
// Description : A base class for things that may be directly added
//               into the egg hierarchy.  This includes groups,
//               joints, polygons, vertex pools, etc., but does not
//               include things like vertices.
////////////////////////////////////////////////////////////////////

1900 11 EggAnimData 141313 11 EggAnimData 11 EggAnimData 0 0 0 0 1045 0 10 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 0 0 1 0 1899 0 0 0 0 0

1901 14 EggAnimPreload 141313 14 EggAnimPreload 14 EggAnimPreload 0 0 0 1 1046 1057 0 10 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 0 0 1 0 1899 0 0 0 0 230
////////////////////////////////////////////////////////////////////
//       Class : EggAnimPreload
// Description : This corresponds to an <AnimPreload> entry.
////////////////////////////////////////////////////////////////////

1902 13 EggAttributes 26625 13 EggAttributes 13 EggAttributes 0 0 0 1 1058 1060 2 2199 2200 18 1059 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1079 0 0 0 0 0 606
////////////////////////////////////////////////////////////////////
//       Class : EggAttributes
// Description : The set of attributes that may be applied to vertices
//               as well as polygons, such as surface normal and
//               color.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1903 37 EggMorphList< EggMorph< LVector3d > > 1050624 37 EggMorphList< EggMorph< LVector3d > > 37 EggMorphList< EggMorph< LVector3d > > 0 0 0 0 0 0 0 0 0 0 0 0 0

1904 37 EggMorphList< EggMorph< LVector4f > > 1050624 37 EggMorphList< EggMorph< LVector4f > > 37 EggMorphList< EggMorph< LVector4f > > 0 0 0 0 0 0 0 0 0 0 0 0 0

1905 11 EggVertexUV 75777 11 EggVertexUV 11 EggVertexUV 0 0 0 1 1080 995 1 2201 21 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1102 0 0 1 0 1897 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : EggVertexUV
// Description : The set of UV's that may or may not be assigned to a
//               vertex.  To support multitexturing, there may be
//               multiple sets of UV's on a particular vertex, each
//               with its own name.
////////////////////////////////////////////////////////////////////

1906 9 EggVertex 26625 9 EggVertex 9 EggVertex 0 0 0 1 1107 1109 1 2202 37 1108 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1146 0 0 2 3 1896 1103 1104 3 1902 1105 1106 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : EggVertex
// Description : Any one-, two-, three-, or four-component vertex,
//               possibly with attributes such as a normal.
////////////////////////////////////////////////////////////////////

1907 13 EggVertexPool 75777 13 EggVertexPool 13 EggVertexPool 0 0 0 1 1147 1034 0 24 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 0 0 1 0 1899 0 0 0 0 876
////////////////////////////////////////////////////////////////////
//       Class : EggVertexPool
// Description : A collection of vertices.  There may be any number of
//               vertex pools in a single egg structure.  The vertices
//               in a single pool need not necessarily have any
//               connection to each other, but it is necessary that
//               any one primitive (e.g. a polygon) must pull all its
//               vertices from the same pool.
//
//               An EggVertexPool is an STL-style container of
//               pointers to EggVertex's.  Functions add_vertex() and
//               remove_vertex() are provided to manipulate the list.
//               The list may also be operated on (read-only) via
//               iterators and begin()/end().
////////////////////////////////////////////////////////////////////

1908 12 EggGroupNode 75777 12 EggGroupNode 12 EggGroupNode 0 0 0 1 1172 1034 0 35 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 0 0 1 0 1899 0 0 0 1 1909 712
////////////////////////////////////////////////////////////////////
//       Class : EggGroupNode
// Description : A base class for nodes in the hierarchy that are not
//               leaf nodes.  (See also EggGroup, which is
//               specifically the "<Group>" node in egg.)
//
//               An EggGroupNode is an STL-style container of pointers
//               to EggNodes, like a vector.  Functions
//               push_back()/pop_back() and insert()/erase() are
//               provided to manipulate the list.  The list may also
//               be operated on (read-only) via iterators and
//               begin()/end().
////////////////////////////////////////////////////////////////////

1909 16 TriangulateFlags 794624 30 EggGroupNode::TriangulateFlags 30 EggGroupNode::TriangulateFlags 1908 0 0 0 0 0 0 0 0 0 5 9 T_polygon 23 EggGroupNode::T_polygon 1 8 T_convex 22 EggGroupNode::T_convex 2 11 T_composite 25 EggGroupNode::T_composite 4 9 T_recurse 23 EggGroupNode::T_recurse 8 13 T_flat_shaded 27 EggGroupNode::T_flat_shaded 16 0 0

1910 13 EggRenderMode 141313 13 EggRenderMode 13 EggRenderMode 0 0 0 1 1208 1239 0 30 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 0 0 0 0 4 1911 1912 1913 1914 827
////////////////////////////////////////////////////////////////////
//       Class : EggRenderMode
// Description : This class stores miscellaneous rendering properties
//               that is associated with geometry, and which may be
//               set on the geometry primitive level, on the group
//               above it, or indirectly via a texture.  It's intended
//               to be a base class for egg objects that can have
//               these properties set.
//
//               This class cannot inherit from EggObject, because it
//               causes problems at the EggPolygon level with multiple
//               appearances of the EggObject base class.  And making
//               EggObject a virtual base class is just no fun.
////////////////////////////////////////////////////////////////////

1911 9 AlphaMode 794624 24 EggRenderMode::AlphaMode 24 EggRenderMode::AlphaMode 1910 0 0 0 0 0 0 0 0 0 9 14 AM_unspecified 29 EggRenderMode::AM_unspecified 0 6 AM_off 21 EggRenderMode::AM_off 1 5 AM_on 20 EggRenderMode::AM_on 2 8 AM_blend 23 EggRenderMode::AM_blend 3 19 AM_blend_no_occlude 34 EggRenderMode::AM_blend_no_occlude 4 5 AM_ms 20 EggRenderMode::AM_ms 5 10 AM_ms_mask 25 EggRenderMode::AM_ms_mask 6 9 AM_binary 24 EggRenderMode::AM_binary 7 7 AM_dual 22 EggRenderMode::AM_dual 8 0 0

1912 14 DepthWriteMode 794624 29 EggRenderMode::DepthWriteMode 29 EggRenderMode::DepthWriteMode 1910 0 0 0 0 0 0 0 0 0 3 15 DWM_unspecified 30 EggRenderMode::DWM_unspecified 0 7 DWM_off 22 EggRenderMode::DWM_off 1 6 DWM_on 21 EggRenderMode::DWM_on 2 0 0

1913 13 DepthTestMode 794624 28 EggRenderMode::DepthTestMode 28 EggRenderMode::DepthTestMode 1910 0 0 0 0 0 0 0 0 0 3 15 DTM_unspecified 30 EggRenderMode::DTM_unspecified 0 7 DTM_off 22 EggRenderMode::DTM_off 1 6 DTM_on 21 EggRenderMode::DTM_on 2 0 0

1914 14 VisibilityMode 794624 29 EggRenderMode::VisibilityMode 29 EggRenderMode::VisibilityMode 1910 0 0 0 0 0 0 0 0 0 3 14 VM_unspecified 29 EggRenderMode::VM_unspecified 0 9 VM_hidden 24 EggRenderMode::VM_hidden 1 9 VM_normal 24 EggRenderMode::VM_normal 2 0 0

1915 12 EggTransform 26625 12 EggTransform 12 EggTransform 0 0 0 1 1240 1242 0 30 1241 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 0 0 0 0 1 1916 579
////////////////////////////////////////////////////////////////////
//       Class : EggTransform
// Description : This represents the <Transform> entry of a group
//               or texture node: a list of component transform
//               operations, applied in order, that describe a net
//               transform matrix.  
//
//               This may be either a 3-d transform, and therefore
//               described by a 4x4 matrix, or a 2-d transform,
//               described by a 3x3 matrix.
////////////////////////////////////////////////////////////////////

1916 13 ComponentType 794624 27 EggTransform::ComponentType 27 EggTransform::ComponentType 1915 0 0 0 0 0 0 0 0 0 13 10 CT_invalid 24 EggTransform::CT_invalid 0 14 CT_translate2d 28 EggTransform::CT_translate2d 1 14 CT_translate3d 28 EggTransform::CT_translate3d 2 11 CT_rotate2d 25 EggTransform::CT_rotate2d 3 7 CT_rotx 21 EggTransform::CT_rotx 4 7 CT_roty 21 EggTransform::CT_roty 5 7 CT_rotz 21 EggTransform::CT_rotz 6 11 CT_rotate3d 25 EggTransform::CT_rotate3d 7 10 CT_scale2d 24 EggTransform::CT_scale2d 8 10 CT_scale3d 24 EggTransform::CT_scale3d 9 16 CT_uniform_scale 30 EggTransform::CT_uniform_scale 10 10 CT_matrix3 24 EggTransform::CT_matrix3 11 10 CT_matrix4 24 EggTransform::CT_matrix4 12 0 0

1917 18 EggSwitchCondition 141313 18 EggSwitchCondition 18 EggSwitchCondition 0 0 0 0 1276 0 4 1272 1273 1274 1275 0 0 1 0 1896 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchCondition
// Description : This corresponds to a <SwitchCondition> entry within
//               a group.  It indicates the condition at which a
//               level-of-detail is switched in or out.  This is
//               actually an abstract base class for potentially any
//               number of specific different kinds of switching
//               conditions; presently, only a <Distance> type is
//               actually supported.
////////////////////////////////////////////////////////////////////

1918 26 EggSwitchConditionDistance 141313 26 EggSwitchConditionDistance 26 EggSwitchConditionDistance 0 0 0 1 1277 1286 4 2203 2204 2205 2206 1 1285 0 0 1 0 1917 0 0 0 0 314
////////////////////////////////////////////////////////////////////
//       Class : EggSwitchConditionDistance
// Description : A SwitchCondition that switches the levels-of-detail
//               based on distance from the camera's eyepoint.
////////////////////////////////////////////////////////////////////

1919 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1920 7 Vertexd 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1921 8 EggGroup 26625 8 EggGroup 8 EggGroup 0 0 0 1 1293 1295 0 132 1294 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 2 2209 2210 0 3 3 1908 1287 1288 3 1910 1289 1290 3 1915 1291 1292 0 8 1922 1923 1924 1925 1926 1927 1928 1929 302
////////////////////////////////////////////////////////////////////
//       Class : EggGroup
// Description : The main glue of the egg hierarchy, this corresponds
//               to the <Group>, <Instance>, and <Joint> type nodes.
////////////////////////////////////////////////////////////////////

1922 9 GroupType 794624 19 EggGroup::GroupType 19 EggGroup::GroupType 1921 0 0 0 0 0 0 0 0 0 4 10 GT_invalid 20 EggGroup::GT_invalid -1 8 GT_group 18 EggGroup::GT_group 0 11 GT_instance 21 EggGroup::GT_instance 1 8 GT_joint 18 EggGroup::GT_joint 2 0 49
// These bits are all stored somewhere in _flags.

1923 7 DCSType 794624 17 EggGroup::DCSType 17 EggGroup::DCSType 1921 0 0 0 0 0 0 0 0 0 6 14 DC_unspecified 24 EggGroup::DC_unspecified 0 7 DC_none 17 EggGroup::DC_none 16 8 DC_local 18 EggGroup::DC_local 32 6 DC_net 16 EggGroup::DC_net 48 11 DC_no_touch 21 EggGroup::DC_no_touch 64 10 DC_default 20 EggGroup::DC_default 80 0 0

1924 13 BillboardType 794624 23 EggGroup::BillboardType 23 EggGroup::BillboardType 1921 0 0 0 0 0 0 0 0 0 4 7 BT_none 17 EggGroup::BT_none 0 7 BT_axis 17 EggGroup::BT_axis 32 24 BT_point_camera_relative 34 EggGroup::BT_point_camera_relative 64 23 BT_point_world_relative 33 EggGroup::BT_point_world_relative 128 0 0

1925 18 CollisionSolidType 794624 28 EggGroup::CollisionSolidType 28 EggGroup::CollisionSolidType 1921 0 0 0 0 0 0 0 0 0 8 8 CST_none 18 EggGroup::CST_none 0 9 CST_plane 19 EggGroup::CST_plane 65536 11 CST_polygon 21 EggGroup::CST_polygon 131072 11 CST_polyset 21 EggGroup::CST_polyset 196608 10 CST_sphere 20 EggGroup::CST_sphere 262144 8 CST_tube 18 EggGroup::CST_tube 327680 14 CST_inv_sphere 24 EggGroup::CST_inv_sphere 393216 14 CST_floor_mesh 24 EggGroup::CST_floor_mesh 524288 0 0

1926 12 CollideFlags 794624 22 EggGroup::CollideFlags 22 EggGroup::CollideFlags 1921 0 0 0 0 0 0 0 0 0 9 7 CF_none 17 EggGroup::CF_none 0 10 CF_descend 20 EggGroup::CF_descend 1048576 8 CF_event 18 EggGroup::CF_event 2097152 7 CF_keep 17 EggGroup::CF_keep 4194304 8 CF_solid 18 EggGroup::CF_solid 8388608 9 CF_center 19 EggGroup::CF_center 16777216 12 CF_turnstile 22 EggGroup::CF_turnstile 33554432 8 CF_level 18 EggGroup::CF_level 67108864 13 CF_intangible 23 EggGroup::CF_intangible 134217728 0 0

1927 8 DartType 794624 18 EggGroup::DartType 18 EggGroup::DartType 1921 0 0 0 0 0 0 0 0 0 5 7 DT_none 17 EggGroup::DT_none 0 13 DT_structured 23 EggGroup::DT_structured 268435456 7 DT_sync 17 EggGroup::DT_sync 536870912 9 DT_nosync 19 EggGroup::DT_nosync 805306368 10 DT_default 20 EggGroup::DT_default 1073741824 0 0

1928 9 BlendMode 794624 19 EggGroup::BlendMode 19 EggGroup::BlendMode 1921 0 0 0 0 0 0 0 0 0 7 14 BM_unspecified 24 EggGroup::BM_unspecified 0 7 BM_none 17 EggGroup::BM_none 1 6 BM_add 16 EggGroup::BM_add 2 11 BM_subtract 21 EggGroup::BM_subtract 3 15 BM_inv_subtract 25 EggGroup::BM_inv_subtract 4 6 BM_min 16 EggGroup::BM_min 5 6 BM_max 16 EggGroup::BM_max 6 0 68
// These correspond to ColorBlendAttrib::Mode (but not numerically).

1929 12 BlendOperand 794624 22 EggGroup::BlendOperand 22 EggGroup::BlendOperand 1921 0 0 0 0 0 0 0 0 0 20 14 BO_unspecified 24 EggGroup::BO_unspecified 0 7 BO_zero 17 EggGroup::BO_zero 1 6 BO_one 16 EggGroup::BO_one 2 17 BO_incoming_color 27 EggGroup::BO_incoming_color 3 27 BO_one_minus_incoming_color 37 EggGroup::BO_one_minus_incoming_color 4 16 BO_fbuffer_color 26 EggGroup::BO_fbuffer_color 5 26 BO_one_minus_fbuffer_color 36 EggGroup::BO_one_minus_fbuffer_color 6 17 BO_incoming_alpha 27 EggGroup::BO_incoming_alpha 7 27 BO_one_minus_incoming_alpha 37 EggGroup::BO_one_minus_incoming_alpha 8 16 BO_fbuffer_alpha 26 EggGroup::BO_fbuffer_alpha 9 26 BO_one_minus_fbuffer_alpha 36 EggGroup::BO_one_minus_fbuffer_alpha 10 17 BO_constant_color 27 EggGroup::BO_constant_color 11 27 BO_one_minus_constant_color 37 EggGroup::BO_one_minus_constant_color 12 17 BO_constant_alpha 27 EggGroup::BO_constant_alpha 13 27 BO_one_minus_constant_alpha 37 EggGroup::BO_one_minus_constant_alpha 14 26 BO_incoming_color_saturate 36 EggGroup::BO_incoming_color_saturate 15 14 BO_color_scale 24 EggGroup::BO_color_scale 16 24 BO_one_minus_color_scale 34 EggGroup::BO_one_minus_color_scale 17 14 BO_alpha_scale 24 EggGroup::BO_alpha_scale 18 24 BO_one_minus_alpha_scale 34 EggGroup::BO_one_minus_alpha_scale 19 0 71
// These correspond to ColorBlendAttrib::Operand (but not numerically).

1930 6 EggBin 141313 6 EggBin 6 EggBin 0 0 0 1 1427 1431 0 3 1428 1429 1430 0 0 1 0 1921 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : EggBin
// Description : A type of group node that holds related subnodes.
//               This is a special kind of node that will never be
//               read in from an egg file, but can only exist in the
//               egg scene graph if it is created via the use of an
//               EggBinMaker.
////////////////////////////////////////////////////////////////////

1931 11 EggBinMaker 75777 11 EggBinMaker 11 EggBinMaker 0 0 0 0 0 0 8 1432 1433 1434 1435 1436 1437 1438 1439 0 0 1 0 1896 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : EggBinMaker
// Description : This is a handy class for collecting related nodes
//               together.  It is an abstract class; to use it you
//               must subclass off of it.  See the somewhat lengthy
//               comment above.
////////////////////////////////////////////////////////////////////

1932 10 EggComment 141313 10 EggComment 10 EggComment 0 0 0 1 1440 1446 0 4 1441 1443 1444 1445 0 1 1442 1 0 1899 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : EggComment
// Description : A comment that appears in an egg file within a
//               <Comment> entry.
////////////////////////////////////////////////////////////////////

1933 15 EggFilenameNode 141313 15 EggFilenameNode 15 EggFilenameNode 0 0 0 0 1454 0 7 1447 1448 1449 1450 1451 1452 1453 0 0 1 0 1899 0 0 0 0 430
////////////////////////////////////////////////////////////////////
//       Class : EggFilenameNode
// Description : This is an egg node that contains a filename.  It
//               references a physical file relative to the directory
//               the egg file was loaded in.  It is a base class for
//               EggTexture and EggExternalReference.
////////////////////////////////////////////////////////////////////

1934 10 EggTexture 26625 10 EggTexture 10 EggTexture 0 0 0 1 1461 1463 0 100 1462 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 0 0 3 3 1933 1455 1456 3 1910 1457 1458 3 1915 1459 1460 0 14 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 254
////////////////////////////////////////////////////////////////////
//       Class : EggTexture
// Description : Defines a texture map that may be applied to
//               geometry.
////////////////////////////////////////////////////////////////////

1935 11 Equivalence 794624 23 EggTexture::Equivalence 23 EggTexture::Equivalence 1934 0 0 0 0 0 0 0 0 0 7 10 E_basename 22 EggTexture::E_basename 1 11 E_extension 23 EggTexture::E_extension 2 9 E_dirname 21 EggTexture::E_dirname 4 19 E_complete_filename 31 EggTexture::E_complete_filename 7 11 E_transform 23 EggTexture::E_transform 8 12 E_attributes 24 EggTexture::E_attributes 16 11 E_tref_name 23 EggTexture::E_tref_name 32 0 0

1936 11 TextureType 794624 23 EggTexture::TextureType 23 EggTexture::TextureType 1934 0 0 0 0 0 0 0 0 0 5 14 TT_unspecified 26 EggTexture::TT_unspecified 0 13 TT_1d_texture 25 EggTexture::TT_1d_texture 1 13 TT_2d_texture 25 EggTexture::TT_2d_texture 2 13 TT_3d_texture 25 EggTexture::TT_3d_texture 3 11 TT_cube_map 23 EggTexture::TT_cube_map 4 0 0

1937 6 Format 794624 18 EggTexture::Format 18 EggTexture::Format 1934 0 0 0 0 0 0 0 0 0 19 13 F_unspecified 25 EggTexture::F_unspecified 0 6 F_rgba 18 EggTexture::F_rgba 1 6 F_rgbm 18 EggTexture::F_rgbm 2 8 F_rgba12 20 EggTexture::F_rgba12 3 7 F_rgba8 19 EggTexture::F_rgba8 4 7 F_rgba4 19 EggTexture::F_rgba4 5 7 F_rgba5 19 EggTexture::F_rgba5 6 5 F_rgb 17 EggTexture::F_rgb 7 7 F_rgb12 19 EggTexture::F_rgb12 8 6 F_rgb8 18 EggTexture::F_rgb8 9 6 F_rgb5 18 EggTexture::F_rgb5 10 8 F_rgb332 20 EggTexture::F_rgb332 11 5 F_red 17 EggTexture::F_red 12 7 F_green 19 EggTexture::F_green 13 6 F_blue 18 EggTexture::F_blue 14 7 F_alpha 19 EggTexture::F_alpha 15 11 F_luminance 23 EggTexture::F_luminance 16 17 F_luminance_alpha 29 EggTexture::F_luminance_alpha 17 21 F_luminance_alphamask 33 EggTexture::F_luminance_alphamask 18 0 0

1938 15 CompressionMode 794624 27 EggTexture::CompressionMode 27 EggTexture::CompressionMode 1934 0 0 0 0 0 0 0 0 0 9 10 CM_default 22 EggTexture::CM_default 0 6 CM_off 18 EggTexture::CM_off 1 5 CM_on 17 EggTexture::CM_on 2 7 CM_fxt1 19 EggTexture::CM_fxt1 3 7 CM_dxt1 19 EggTexture::CM_dxt1 4 7 CM_dxt2 19 EggTexture::CM_dxt2 5 7 CM_dxt3 19 EggTexture::CM_dxt3 6 7 CM_dxt4 19 EggTexture::CM_dxt4 7 7 CM_dxt5 19 EggTexture::CM_dxt5 8 0 0

1939 8 WrapMode 794624 20 EggTexture::WrapMode 20 EggTexture::WrapMode 1934 0 0 0 0 0 0 0 0 0 6 14 WM_unspecified 26 EggTexture::WM_unspecified 0 8 WM_clamp 20 EggTexture::WM_clamp 1 9 WM_repeat 21 EggTexture::WM_repeat 2 9 WM_mirror 21 EggTexture::WM_mirror 3 14 WM_mirror_once 26 EggTexture::WM_mirror_once 4 15 WM_border_color 27 EggTexture::WM_border_color 5 0 0

1940 10 FilterType 794624 22 EggTexture::FilterType 22 EggTexture::FilterType 1934 0 0 0 0 0 0 0 0 0 7 14 FT_unspecified 26 EggTexture::FT_unspecified 0 10 FT_nearest 22 EggTexture::FT_nearest 1 9 FT_linear 21 EggTexture::FT_linear 2 25 FT_nearest_mipmap_nearest 37 EggTexture::FT_nearest_mipmap_nearest 3 24 FT_linear_mipmap_nearest 36 EggTexture::FT_linear_mipmap_nearest 4 24 FT_nearest_mipmap_linear 36 EggTexture::FT_nearest_mipmap_linear 5 23 FT_linear_mipmap_linear 35 EggTexture::FT_linear_mipmap_linear 6 0 0

1941 7 EnvType 794624 19 EggTexture::EnvType 19 EggTexture::EnvType 1934 0 0 0 0 0 0 0 0 0 15 14 ET_unspecified 26 EggTexture::ET_unspecified 0 11 ET_modulate 23 EggTexture::ET_modulate 1 8 ET_decal 20 EggTexture::ET_decal 2 8 ET_blend 20 EggTexture::ET_blend 3 10 ET_replace 22 EggTexture::ET_replace 4 6 ET_add 18 EggTexture::ET_add 5 20 ET_blend_color_scale 32 EggTexture::ET_blend_color_scale 6 16 ET_modulate_glow 28 EggTexture::ET_modulate_glow 7 17 ET_modulate_gloss 29 EggTexture::ET_modulate_gloss 8 9 ET_normal 21 EggTexture::ET_normal 9 16 ET_normal_height 28 EggTexture::ET_normal_height 10 7 ET_glow 19 EggTexture::ET_glow 11 8 ET_gloss 20 EggTexture::ET_gloss 12 9 ET_height 21 EggTexture::ET_height 13 11 ET_selector 23 EggTexture::ET_selector 14 0 21
// "mipmap trilinear"

1942 11 CombineMode 794624 23 EggTexture::CombineMode 23 EggTexture::CombineMode 1934 0 0 0 0 0 0 0 0 0 9 14 CM_unspecified 26 EggTexture::CM_unspecified 0 10 CM_replace 22 EggTexture::CM_replace 1 11 CM_modulate 23 EggTexture::CM_modulate 2 6 CM_add 18 EggTexture::CM_add 3 13 CM_add_signed 25 EggTexture::CM_add_signed 4 14 CM_interpolate 26 EggTexture::CM_interpolate 5 11 CM_subtract 23 EggTexture::CM_subtract 6 11 CM_dot3_rgb 23 EggTexture::CM_dot3_rgb 7 12 CM_dot3_rgba 24 EggTexture::CM_dot3_rgba 8 0 0

1943 14 CombineChannel 794624 26 EggTexture::CombineChannel 26 EggTexture::CombineChannel 1934 0 0 0 0 0 0 0 0 0 3 6 CC_rgb 18 EggTexture::CC_rgb 0 8 CC_alpha 20 EggTexture::CC_alpha 1 15 CC_num_channels 27 EggTexture::CC_num_channels 2 0 0

1944 12 CombineIndex 794624 24 EggTexture::CombineIndex 24 EggTexture::CombineIndex 1934 0 0 0 0 0 0 0 0 0 1 14 CI_num_indices 26 EggTexture::CI_num_indices 3 0 0

1945 13 CombineSource 794624 25 EggTexture::CombineSource 25 EggTexture::CombineSource 1934 0 0 0 0 0 0 0 0 0 7 14 CS_unspecified 26 EggTexture::CS_unspecified 0 10 CS_texture 22 EggTexture::CS_texture 1 11 CS_constant 23 EggTexture::CS_constant 2 16 CS_primary_color 28 EggTexture::CS_primary_color 3 11 CS_previous 23 EggTexture::CS_previous 4 23 CS_constant_color_scale 35 EggTexture::CS_constant_color_scale 5 20 CS_last_saved_result 32 EggTexture::CS_last_saved_result 6 0 0

1946 14 CombineOperand 794624 26 EggTexture::CombineOperand 26 EggTexture::CombineOperand 1934 0 0 0 0 0 0 0 0 0 5 14 CO_unspecified 26 EggTexture::CO_unspecified 0 12 CO_src_color 24 EggTexture::CO_src_color 1 22 CO_one_minus_src_color 34 EggTexture::CO_one_minus_src_color 2 12 CO_src_alpha 24 EggTexture::CO_src_alpha 3 22 CO_one_minus_src_alpha 34 EggTexture::CO_one_minus_src_alpha 4 0 0

1947 6 TexGen 794624 18 EggTexture::TexGen 18 EggTexture::TexGen 1934 0 0 0 0 0 0 0 0 0 9 14 TG_unspecified 26 EggTexture::TG_unspecified 0 17 TG_eye_sphere_map 29 EggTexture::TG_eye_sphere_map 1 17 TG_world_cube_map 29 EggTexture::TG_world_cube_map 2 15 TG_eye_cube_map 27 EggTexture::TG_eye_cube_map 3 15 TG_world_normal 27 EggTexture::TG_world_normal 4 13 TG_eye_normal 25 EggTexture::TG_eye_normal 5 17 TG_world_position 29 EggTexture::TG_world_position 6 15 TG_eye_position 27 EggTexture::TG_eye_position 7 15 TG_point_sprite 27 EggTexture::TG_point_sprite 8 0 0

1948 12 QualityLevel 794624 24 EggTexture::QualityLevel 24 EggTexture::QualityLevel 1934 0 0 0 0 0 0 0 0 0 5 14 QL_unspecified 26 EggTexture::QL_unspecified 0 10 QL_default 22 EggTexture::QL_default 1 10 QL_fastest 22 EggTexture::QL_fastest 2 9 QL_normal 21 EggTexture::QL_normal 3 7 QL_best 19 EggTexture::QL_best 4 0 0

1949 11 EggMaterial 141313 11 EggMaterial 11 EggMaterial 0 0 0 1 1563 1591 0 27 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 0 0 1 0 1899 0 0 0 1 1950 183
////////////////////////////////////////////////////////////////////
//       Class : EggMaterial
// Description :
////////////////////////////////////////////////////////////////////

1950 11 Equivalence 794624 24 EggMaterial::Equivalence 24 EggMaterial::Equivalence 1949 0 0 0 0 0 0 0 0 0 2 12 E_attributes 25 EggMaterial::E_attributes 1 11 E_mref_name 24 EggMaterial::E_mref_name 2 0 0

1951 12 EggPrimitive 26625 12 EggPrimitive 12 EggPrimitive 0 0 0 0 1599 0 49 1598 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 2 2211 2212 0 3 3 1899 1592 1593 3 1902 1594 1595 3 1910 1596 1597 0 1 1952 754
////////////////////////////////////////////////////////////////////
//       Class : EggPrimitive
// Description : A base class for any of a number of kinds of geometry
//               primitives: polygons, point lights, nurbs patches,
//               parametrics curves, etc.  Things with a set of
//               vertices and some rendering properties like color.
//
//               An EggPrimitive is an STL-style container of pointers
//               to EggVertex's.  In fact, it IS a vector, and can be
//               manipulated in all the ways that vectors can.
//               However, it is necessary that all vertices belong to
//               the same vertex pool.
////////////////////////////////////////////////////////////////////

1952 7 Shading 794624 21 EggPrimitive::Shading 21 EggPrimitive::Shading 1951 0 0 0 0 0 0 0 0 0 4 9 S_unknown 23 EggPrimitive::S_unknown 0 9 S_overall 23 EggPrimitive::S_overall 1 10 S_per_face 24 EggPrimitive::S_per_face 2 12 S_per_vertex 26 EggPrimitive::S_per_vertex 3 0 0

1953 21 EggCompositePrimitive 75777 21 EggCompositePrimitive 21 EggCompositePrimitive 0 0 0 0 1599 0 7 1648 1649 1650 1651 1652 1653 1654 1 2213 0 1 0 1951 0 0 0 0 414
////////////////////////////////////////////////////////////////////
//       Class : EggCompositePrimitive
// Description : The base class for primitives such as triangle strips
//               and triangle fans, which include several component
//               triangles, each of which might have its own color
//               and/or normal.
////////////////////////////////////////////////////////////////////

1954 7 EggData 141313 7 EggData 7 EggData 0 0 0 1 1655 1675 0 19 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 0 0 1 0 1908 0 0 0 0 728
////////////////////////////////////////////////////////////////////
//       Class : EggData
// Description : This is the primary interface into all the egg data,
//               and the root of the egg file structure.  An EggData
//               structure corresponds exactly with an egg file on the
//               disk.
//
//               The EggData class inherits from EggGroupNode its
//               collection of children, which are accessed by using
//               the EggData itself as an STL container with begin()
//               and end() calls.  The children of the EggData class
//               are the toplevel nodes in the egg file.
////////////////////////////////////////////////////////////////////

1955 19 EggCoordinateSystem 141313 19 EggCoordinateSystem 19 EggCoordinateSystem 0 0 0 1 1676 1680 0 3 1677 1678 1679 0 0 1 0 1899 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : EggCoordinateSystem
// Description : The <CoordinateSystem> entry at the top of an egg
//               file.  Don't confuse this with the enum
//               EggData::CoordinateSystem, which is the value
//               contained by this entry.
////////////////////////////////////////////////////////////////////

1956 8 EggCurve 141313 8 EggCurve 8 EggCurve 0 0 0 0 1688 0 7 1681 1682 1683 1684 1685 1686 1687 0 0 1 0 1951 0 0 0 1 1957 250
////////////////////////////////////////////////////////////////////
//       Class : EggCurve
// Description : A parametric curve of some kind.  See
//               EggNurbsCurve.
////////////////////////////////////////////////////////////////////

1957 9 CurveType 794624 19 EggCurve::CurveType 19 EggCurve::CurveType 1956 0 0 0 0 0 0 0 0 0 4 7 CT_none 17 EggCurve::CT_none 0 6 CT_xyz 16 EggCurve::CT_xyz 1 6 CT_hpr 16 EggCurve::CT_hpr 2 4 CT_t 14 EggCurve::CT_t 3 0 0

1958 20 EggExternalReference 141313 20 EggExternalReference 20 EggExternalReference 0 0 0 1 1689 1692 0 2 1690 1691 0 0 1 0 1933 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : EggExternalReference
// Description : Defines a reference to another egg file which should
//               be inserted at this point.
////////////////////////////////////////////////////////////////////

1959 17 EggNameUniquifier 75777 17 EggNameUniquifier 17 EggNameUniquifier 0 0 0 0 0 0 9 1693 1694 1695 1696 1697 1698 1699 1700 1701 0 0 1 0 1896 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : EggNameUniquifier
// Description : This is a handy class for guaranteeing unique node
//               names in an egg hierarchy.  It is an abstract class;
//               to use it you must subclass off of it.  See the
//               comment above.
////////////////////////////////////////////////////////////////////

1960 18 EggGroupUniquifier 141313 18 EggGroupUniquifier 18 EggGroupUniquifier 0 0 0 1 1702 1704 0 1 1703 0 0 1 0 1959 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : EggGroupUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for EggGroup nodes.  It's not
//               called automatically; you must invoke it yourself if
//               you want it.
////////////////////////////////////////////////////////////////////

1961 7 EggLine 75777 7 EggLine 7 EggLine 0 0 0 1 1705 1599 0 6 1706 1707 1708 1709 1710 1711 0 0 1 0 1953 0 0 0 0 279
////////////////////////////////////////////////////////////////////
//       Class : EggLine
// Description : A line segment, or a series of connected line
//               segments, defined by a <Line> entry.
////////////////////////////////////////////////////////////////////

1962 21 EggMaterialCollection 26625 21 EggMaterialCollection 21 EggMaterialCollection 0 0 0 1 1712 1714 0 13 1713 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 0 0 0 0 0 477
////////////////////////////////////////////////////////////////////
//       Class : EggMaterialCollection
// Description : This is a collection of materials by MRef name.  It
//               can extract the materials from an egg file and sort
//               them all together; it can also manage the creation of
//               unique materials and the assignment of unique MRef
//               names.
////////////////////////////////////////////////////////////////////

1963 10 EggPolygon 141313 10 EggPolygon 10 EggPolygon 0 0 0 1 1727 1735 0 7 1728 1729 1730 1731 1732 1733 1734 0 0 1 0 1951 0 0 0 0 200
////////////////////////////////////////////////////////////////////
//       Class : EggPolygon
// Description : A single polygon.
////////////////////////////////////////////////////////////////////

1964 13 EggNurbsCurve 141313 13 EggNurbsCurve 13 EggNurbsCurve 0 0 0 1 1736 1750 0 13 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1 2214 0 1 0 1956 0 0 0 0 211
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsCurve
// Description : A parametric NURBS curve.
////////////////////////////////////////////////////////////////////

1965 10 EggSurface 141313 10 EggSurface 10 EggSurface 0 0 0 0 1757 0 6 1751 1752 1753 1754 1755 1756 0 0 1 0 1951 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : EggSurface
// Description : A parametric surface of some kind.  See
//               EggNurbsSurface.
////////////////////////////////////////////////////////////////////

1966 15 EggNurbsSurface 141313 15 EggNurbsSurface 15 EggNurbsSurface 0 0 0 1 1758 1789 2 2207 2208 28 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1788 2 2215 2216 0 1 0 1965 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : EggNurbsSurface
// Description : A parametric NURBS surface.
////////////////////////////////////////////////////////////////////

1967 34 list< PointerTo< EggNurbsCurve > > 2048 34 list< PointerTo< EggNurbsCurve > > 34 list< PointerTo< EggNurbsCurve > > 0 0 0 0 0 0 0 0 0 0 0 0 0

1968 50 list< list< list< PointerTo< EggNurbsCurve > > > > 2048 50 list< list< list< PointerTo< EggNurbsCurve > > > > 50 list< list< list< PointerTo< EggNurbsCurve > > > > 0 0 0 0 0 0 0 0 0 0 0 0 0

1969 8 EggPoint 141313 8 EggPoint 8 EggPoint 0 0 0 1 1790 1801 0 10 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 0 0 1 0 1951 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : EggPoint
// Description : A single point, or a collection of points as defined
//               by a single <PointLight> entry.
////////////////////////////////////////////////////////////////////

1970 15 EggPolysetMaker 141313 15 EggPolysetMaker 15 EggPolysetMaker 0 0 0 1 1802 1805 0 2 1803 1804 0 0 1 0 1931 0 0 0 2 1971 1972 680
////////////////////////////////////////////////////////////////////
//       Class : EggPolysetMaker
// Description : A specialization on EggBinMaker for making polysets
//               that share the same basic rendering characteristic.
//               This really just defines the example functions
//               described in the leading comment to EggBinMaker.
//
//               It makes some common assumptions about how polysets
//               should be grouped; if these are not sufficient, you
//               can always rederive your own further specialization
//               of this class.
////////////////////////////////////////////////////////////////////

1971 9 BinNumber 794624 26 EggPolysetMaker::BinNumber 26 EggPolysetMaker::BinNumber 1970 0 0 0 0 0 0 0 0 0 2 7 BN_none 24 EggPolysetMaker::BN_none 0 10 BN_polyset 27 EggPolysetMaker::BN_polyset 1 0 75
// The BinNumber serves to identify why a particular EggBin was
// created.

1972 10 Properties 794624 27 EggPolysetMaker::Properties 27 EggPolysetMaker::Properties 1970 0 0 0 0 0 0 0 0 0 10 13 P_has_texture 30 EggPolysetMaker::P_has_texture 1 9 P_texture 26 EggPolysetMaker::P_texture 2 14 P_has_material 31 EggPolysetMaker::P_has_material 4 10 P_material 27 EggPolysetMaker::P_material 8 16 P_has_poly_color 33 EggPolysetMaker::P_has_poly_color 16 12 P_poly_color 29 EggPolysetMaker::P_poly_color 32 17 P_has_poly_normal 34 EggPolysetMaker::P_has_poly_normal 64 19 P_has_vertex_normal 36 EggPolysetMaker::P_has_vertex_normal 128 18 P_has_vertex_color 35 EggPolysetMaker::P_has_vertex_color 256 7 P_bface 24 EggPolysetMaker::P_bface 512 0 0

1973 17 EggPoolUniquifier 141313 17 EggPoolUniquifier 17 EggPoolUniquifier 0 0 0 1 1806 1808 0 1 1807 0 0 1 0 1959 0 0 0 0 476
////////////////////////////////////////////////////////////////////
//       Class : EggPoolUniquifier
// Description : This is a specialization of EggNameUniquifier to
//               generate unique names for textures, materials, and
//               vertex pools prior to writing out an egg file.  It's
//               automatically called by EggData prior to writing out
//               an egg file.
////////////////////////////////////////////////////////////////////

1974 12 EggSAnimData 141313 12 EggSAnimData 12 EggSAnimData 0 0 0 1 1809 1816 0 6 1810 1811 1812 1813 1814 1815 0 0 1 0 1900 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : EggSAnimData
// Description : Corresponding to an <S$Anim> entry, this stores a
//               single column of numbers, for instance for a morph
//               target, or as one column in an EggXfmSAnim.
////////////////////////////////////////////////////////////////////

1975 8 EggTable 141313 8 EggTable 8 EggTable 0 0 0 1 1817 1824 0 6 1818 1819 1820 1821 1822 1823 0 0 1 0 1908 0 0 0 1 1976 540
////////////////////////////////////////////////////////////////////
//       Class : EggTable
// Description : This corresponds to a <Table> or a <Bundle> entry.
//               As such, it doesn't actually contain a table of
//               numbers, but it may be a parent to an EggSAnimData or
//               an EggXfmAnimData, which do.  It may also be a parent
//               to another <Table> or <Bundle>, establishing a
//               hierarchy of tables.
////////////////////////////////////////////////////////////////////

1976 9 TableType 794624 19 EggTable::TableType 19 EggTable::TableType 1975 0 0 0 0 0 0 0 0 0 3 10 TT_invalid 20 EggTable::TT_invalid 0 8 TT_table 18 EggTable::TT_table 1 9 TT_bundle 19 EggTable::TT_bundle 2 0 0

1977 20 EggTextureCollection 26625 20 EggTextureCollection 20 EggTextureCollection 0 0 0 1 1825 1827 0 20 1826 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1 2217 0 0 0 0 473
////////////////////////////////////////////////////////////////////
//       Class : EggTextureCollection
// Description : This is a collection of textures by TRef name.  It
//               can extract the textures from an egg file and sort
//               them all together; it can also manage the creation of
//               unique textures and the assignment of unique TRef
//               names.
////////////////////////////////////////////////////////////////////

1978 14 EggTriangleFan 75777 14 EggTriangleFan 14 EggTriangleFan 0 0 0 1 1847 1599 0 2 1848 1849 0 0 1 0 1953 0 0 0 0 347
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleFan
// Description : A connected fan of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

1979 16 EggTriangleStrip 75777 16 EggTriangleStrip 16 EggTriangleStrip 0 0 0 1 1850 1599 0 2 1851 1852 0 0 1 0 1953 0 0 0 0 351
////////////////////////////////////////////////////////////////////
//       Class : EggTriangleStrip
// Description : A connected strip of triangles.  This does not
//               normally appear in an egg file; it is typically
//               generated as a result of meshing.
////////////////////////////////////////////////////////////////////

1980 11 EggXfmSAnim 141313 11 EggXfmSAnim 11 EggXfmSAnim 0 0 0 1 1853 1876 0 22 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 0 0 1 0 1908 0 0 0 0 484
////////////////////////////////////////////////////////////////////
//       Class : EggXfmSAnim
// Description : This corresponds to an <Xfm$Anim_S$> entry, which is
//               a collection of up to nine <S$Anim> entries that
//               specify the nine components of a transformation.
//               It's implemented as a group that can contain
//               any number of EggSAnimData children.
////////////////////////////////////////////////////////////////////

1981 14 EggXfmAnimData 141313 14 EggXfmAnimData 14 EggXfmAnimData 0 0 0 1 1877 1893 0 15 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 0 0 1 0 1900 0 0 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : EggXfmAnimData
// Description : Corresponding to an <Xfm$Anim> entry, this stores a
//               two-dimensional table with up to nine columns, one
//               for each component of a transformation.  This is an
//               older syntax of egg anim table, not often used
//               currently--it's replaced by EggXfmSAnim.
////////////////////////////////////////////////////////////////////

1982 13 EggUserData * 8576 13 EggUserData * 13 EggUserData * 0 0 1894 0 0 0 0 0 0 0 0 0 0

1983 19 EggUserData const * 8576 19 EggUserData const * 19 EggUserData const * 0 0 1984 0 0 0 0 0 0 0 0 0 0

1984 17 EggUserData const 8832 17 EggUserData const 17 EggUserData const 0 0 1894 0 0 0 0 0 0 0 0 0 0

1985 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1986 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 1985 0 0 0 0 0 0 0 0 0 0

1987 11 EggObject * 8576 11 EggObject * 11 EggObject * 0 0 1896 0 0 0 0 0 0 0 0 0 0

1988 17 EggObject const * 8576 17 EggObject const * 17 EggObject const * 0 0 1989 0 0 0 0 0 0 0 0 0 0

1989 15 EggObject const 8832 15 EggObject const 15 EggObject const 0 0 1896 0 0 0 0 0 0 0 0 0 0

1990 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1991 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1992 22 EggNamedObject const * 8576 22 EggNamedObject const * 22 EggNamedObject const * 0 0 1993 0 0 0 0 0 0 0 0 0 0

1993 20 EggNamedObject const 8832 20 EggNamedObject const 20 EggNamedObject const 0 0 1897 0 0 0 0 0 0 0 0 0 0

1994 16 EggNamedObject * 8576 16 EggNamedObject * 16 EggNamedObject * 0 0 1897 0 0 0 0 0 0 0 0 0 0

1995 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1996 9 ostream * 8576 9 ostream * 9 ostream * 0 0 1997 0 0 0 0 0 0 0 0 0 0

1997 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1998 9 Namable * 8576 9 Namable * 9 Namable * 0 0 1898 0 0 0 0 0 0 0 0 0 0

1999 9 EggNode * 8576 9 EggNode * 9 EggNode * 0 0 1899 0 0 0 0 0 0 0 0 0 0

2000 15 EggNode const * 8576 15 EggNode const * 15 EggNode const * 0 0 2001 0 0 0 0 0 0 0 0 0 0

2001 13 EggNode const 8832 13 EggNode const 13 EggNode const 0 0 1899 0 0 0 0 0 0 0 0 0 0

2002 14 EggGroupNode * 8576 14 EggGroupNode * 14 EggGroupNode * 0 0 1908 0 0 0 0 0 0 0 0 0 0

2003 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2004 17 LMatrix4d const * 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2005 0 0 0 0 0 0 0 0 0 0

2005 15 LMatrix4d const 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2006 0 0 0 0 0 0 0 0 0 0

2006 9 LMatrix4d 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 2218 2219 2220 0 0 0 0 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2007 32 vector< basic_string< char > > * 8576 32 vector< basic_string< char > > * 32 vector< basic_string< char > > * 0 0 2008 0 0 0 0 0 0 0 0 0 0

2008 30 vector< basic_string< char > > 2048 30 vector< basic_string< char > > 30 vector< basic_string< char > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2009 15 EggRenderMode * 8576 15 EggRenderMode * 15 EggRenderMode * 0 0 1910 0 0 0 0 0 0 0 0 0 0

2010 13 EggAnimData * 8576 13 EggAnimData * 13 EggAnimData * 0 0 1900 0 0 0 0 0 0 0 0 0 0

2011 19 EggAnimData const * 8576 19 EggAnimData const * 19 EggAnimData const * 0 0 2012 0 0 0 0 0 0 0 0 0 0

2012 17 EggAnimData const 8832 17 EggAnimData const 17 EggAnimData const 0 0 1900 0 0 0 0 0 0 0 0 0 0

2013 22 EggAnimPreload const * 8576 22 EggAnimPreload const * 22 EggAnimPreload const * 0 0 2014 0 0 0 0 0 0 0 0 0 0

2014 20 EggAnimPreload const 8832 20 EggAnimPreload const 20 EggAnimPreload const 0 0 1901 0 0 0 0 0 0 0 0 0 0

2015 16 EggAnimPreload * 8576 16 EggAnimPreload * 16 EggAnimPreload * 0 0 1901 0 0 0 0 0 0 0 0 0 0

2016 15 EggAttributes * 8576 15 EggAttributes * 15 EggAttributes * 0 0 1902 0 0 0 0 0 0 0 0 0 0

2017 21 EggAttributes const * 8576 21 EggAttributes const * 21 EggAttributes const * 0 0 2018 0 0 0 0 0 0 0 0 0 0

2018 19 EggAttributes const 8832 19 EggAttributes const 19 EggAttributes const 0 0 1902 0 0 0 0 0 0 0 0 0 0

2019 17 LVector3d const * 8576 17 LVector3d const * 17 LVector3d const * 0 0 2020 0 0 0 0 0 0 0 0 0 0

2020 15 LVector3d const 8832 15 LVector3d const 15 LVector3d const 0 0 2021 0 0 0 0 0 0 0 0 0 0

2021 7 Normald 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2022 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2023 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 2022 0 0 0 0 0 0 0 0 0 0

2024 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2025 0 0 0 0 0 0 0 0 0 0

2025 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2022 0 0 0 0 0 0 0 0 0 0

2026 45 EggMorphList< EggMorph< LVector3d > > const * 8576 45 EggMorphList< EggMorph< LVector3d > > const * 45 EggMorphList< EggMorph< LVector3d > > const * 0 0 2027 0 0 0 0 0 0 0 0 0 0

2027 43 EggMorphList< EggMorph< LVector3d > > const 8832 43 EggMorphList< EggMorph< LVector3d > > const 43 EggMorphList< EggMorph< LVector3d > > const 0 0 1903 0 0 0 0 0 0 0 0 0 0

2028 45 EggMorphList< EggMorph< LVector4f > > const * 8576 45 EggMorphList< EggMorph< LVector4f > > const * 45 EggMorphList< EggMorph< LVector4f > > const * 0 0 2029 0 0 0 0 0 0 0 0 0 0

2029 43 EggMorphList< EggMorph< LVector4f > > const 8832 43 EggMorphList< EggMorph< LVector4f > > const 43 EggMorphList< EggMorph< LVector4f > > const 0 0 1904 0 0 0 0 0 0 0 0 0 0

2030 19 EggVertexUV const * 8576 19 EggVertexUV const * 19 EggVertexUV const * 0 0 2031 0 0 0 0 0 0 0 0 0 0

2031 17 EggVertexUV const 8832 17 EggVertexUV const 17 EggVertexUV const 0 0 1905 0 0 0 0 0 0 0 0 0 0

2032 13 EggVertexUV * 8576 13 EggVertexUV * 13 EggVertexUV * 0 0 1905 0 0 0 0 0 0 0 0 0 0

2033 16 LPoint2d const * 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2034 0 0 0 0 0 0 0 0 0 0

2034 14 LPoint2d const 8832 14 LPoint2d const 14 LPoint2d const 0 0 2035 0 0 0 0 0 0 0 0 0 0

2035 9 TexCoordd 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2036 16 LPoint3d const * 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2037 0 0 0 0 0 0 0 0 0 0

2037 14 LPoint3d const 8832 14 LPoint3d const 14 LPoint3d const 0 0 1920 0 0 0 0 0 0 0 0 0 0

2038 10 LPoint2d * 8576 10 LPoint2d * 10 LPoint2d * 0 0 2035 0 0 0 0 0 0 0 0 0 0

2039 11 EggVertex * 8576 11 EggVertex * 11 EggVertex * 0 0 1906 0 0 0 0 0 0 0 0 0 0

2040 17 EggVertex const * 8576 17 EggVertex const * 17 EggVertex const * 0 0 2041 0 0 0 0 0 0 0 0 0 0

2041 15 EggVertex const 8832 15 EggVertex const 15 EggVertex const 0 0 1906 0 0 0 0 0 0 0 0 0 0

2042 15 EggVertexPool * 8576 15 EggVertexPool * 15 EggVertexPool * 0 0 1907 0 0 0 0 0 0 0 0 0 0

2043 16 LPoint4d const * 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2044 0 0 0 0 0 0 0 0 0 0

2044 14 LPoint4d const 8832 14 LPoint4d const 14 LPoint4d const 0 0 2045 0 0 0 0 0 0 0 0 0 0

2045 8 LPoint4d 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2046 10 LPoint3d * 8576 10 LPoint3d * 10 LPoint3d * 0 0 1920 0 0 0 0 0 0 0 0 0 0

2047 10 LPoint4d * 8576 10 LPoint4d * 10 LPoint4d * 0 0 2045 0 0 0 0 0 0 0 0 0 0

2048 16 EggGroup const * 8576 16 EggGroup const * 16 EggGroup const * 0 0 2049 0 0 0 0 0 0 0 0 0 0

2049 14 EggGroup const 8832 14 EggGroup const 14 EggGroup const 0 0 1921 0 0 0 0 0 0 0 0 0 0

2050 20 EggPrimitive const * 8576 20 EggPrimitive const * 20 EggPrimitive const * 0 0 2051 0 0 0 0 0 0 0 0 0 0

2051 18 EggPrimitive const 8832 18 EggPrimitive const 18 EggPrimitive const 0 0 1951 0 0 0 0 0 0 0 0 0 0

2052 21 EggVertexPool const * 8576 21 EggVertexPool const * 21 EggVertexPool const * 0 0 2053 0 0 0 0 0 0 0 0 0 0

2053 19 EggVertexPool const 8832 19 EggVertexPool const 19 EggVertexPool const 0 0 1907 0 0 0 0 0 0 0 0 0 0

2054 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2055 20 EggGroupNode const * 8576 20 EggGroupNode const * 20 EggGroupNode const * 0 0 2056 0 0 0 0 0 0 0 0 0 0

2056 18 EggGroupNode const 8832 18 EggGroupNode const 18 EggGroupNode const 0 0 1908 0 0 0 0 0 0 0 0 0 0

2057 19 DSearchPath const * 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2058 0 0 0 0 0 0 0 0 0 0

2058 17 DSearchPath const 8832 17 DSearchPath const 17 DSearchPath const 0 0 2059 0 0 0 0 0 0 0 0 0 0

2059 11 DSearchPath 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 1 2221 0 0 0 0 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

2060 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 2061 0 0 0 0 0 0 0 0 0 0

2061 14 Filename const 8832 14 Filename const 14 Filename const 0 0 2062 0 0 0 0 0 0 0 0 0 0

2062 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

2063 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

2064 19 GlobPattern const * 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2065 0 0 0 0 0 0 0 0 0 0

2065 17 GlobPattern const 8832 17 GlobPattern const 17 GlobPattern const 0 0 2066 0 0 0 0 0 0 0 0 0 0

2066 11 GlobPattern 2048 11 GlobPattern 11 GlobPattern 0 0 0 0 0 0 0 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

2067 38 vector< basic_string< char > > const * 8576 38 vector< basic_string< char > > const * 38 vector< basic_string< char > > const * 0 0 2068 0 0 0 0 0 0 0 0 0 0

2068 36 vector< basic_string< char > > const 8832 36 vector< basic_string< char > > const 36 vector< basic_string< char > > const 0 0 2008 0 0 0 0 0 0 0 0 0 0

2069 17 LVector2d const * 8576 17 LVector2d const * 17 LVector2d const * 0 0 2070 0 0 0 0 0 0 0 0 0 0

2070 15 LVector2d const 8832 15 LVector2d const 15 LVector2d const 0 0 2071 0 0 0 0 0 0 0 0 0 0

2071 9 LVector2d 2048 9 LVector2d 9 LVector2d 0 0 0 0 0 0 0 0 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2072 21 EggRenderMode const * 8576 21 EggRenderMode const * 21 EggRenderMode const * 0 0 2073 0 0 0 0 0 0 0 0 0 0

2073 19 EggRenderMode const 8832 19 EggRenderMode const 19 EggRenderMode const 0 0 1910 0 0 0 0 0 0 0 0 0 0

2074 14 EggTransform * 8576 14 EggTransform * 14 EggTransform * 0 0 1915 0 0 0 0 0 0 0 0 0 0

2075 20 EggTransform const * 8576 20 EggTransform const * 20 EggTransform const * 0 0 2076 0 0 0 0 0 0 0 0 0 0

2076 18 EggTransform const 8832 18 EggTransform const 18 EggTransform const 0 0 1915 0 0 0 0 0 0 0 0 0 0

2077 20 LQuaterniond const * 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2078 0 0 0 0 0 0 0 0 0 0

2078 18 LQuaterniond const 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2079 0 0 0 0 0 0 0 0 0 0

2079 12 LQuaterniond 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2080 18 LVecBase2d const * 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2081 0 0 0 0 0 0 0 0 0 0

2081 16 LVecBase2d const 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2082 0 0 0 0 0 0 0 0 0 0

2082 10 LVecBase2d 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 805
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2083 18 LVecBase3d const * 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2084 0 0 0 0 0 0 0 0 0 0

2084 16 LVecBase3d const 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2085 0 0 0 0 0 0 0 0 0 0

2085 9 RGBColord 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2086 17 LMatrix3d const * 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2087 0 0 0 0 0 0 0 0 0 0

2087 15 LMatrix3d const 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2088 0 0 0 0 0 0 0 0 0 0

2088 9 LMatrix3d 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 2222 2223 2224 2225 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2089 11 LMatrix3d * 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2088 0 0 0 0 0 0 0 0 0 0

2090 26 EggSwitchCondition const * 8576 26 EggSwitchCondition const * 26 EggSwitchCondition const * 0 0 2091 0 0 0 0 0 0 0 0 0 0

2091 24 EggSwitchCondition const 8832 24 EggSwitchCondition const 24 EggSwitchCondition const 0 0 1917 0 0 0 0 0 0 0 0 0 0

2092 20 EggSwitchCondition * 8576 20 EggSwitchCondition * 20 EggSwitchCondition * 0 0 1917 0 0 0 0 0 0 0 0 0 0

2093 28 EggSwitchConditionDistance * 8576 28 EggSwitchConditionDistance * 28 EggSwitchConditionDistance * 0 0 1918 0 0 0 0 0 0 0 0 0 0

2094 34 EggSwitchConditionDistance const * 8576 34 EggSwitchConditionDistance const * 34 EggSwitchConditionDistance const * 0 0 2095 0 0 0 0 0 0 0 0 0 0

2095 32 EggSwitchConditionDistance const 8832 32 EggSwitchConditionDistance const 32 EggSwitchConditionDistance const 0 0 1918 0 0 0 0 0 0 0 0 0 0

2096 10 EggGroup * 8576 10 EggGroup * 10 EggGroup * 0 0 1921 0 0 0 0 0 0 0 0 0 0

2097 29 BitMask< unsigned int, 32 > * 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 2098 0 0 0 0 0 0 0 0 0 0

2098 9 BitMask32 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

2099 14 EggBin const * 8576 14 EggBin const * 14 EggBin const * 0 0 2100 0 0 0 0 0 0 0 0 0 0

2100 12 EggBin const 8832 12 EggBin const 12 EggBin const 0 0 1930 0 0 0 0 0 0 0 0 0 0

2101 8 EggBin * 8576 8 EggBin * 8 EggBin * 0 0 1930 0 0 0 0 0 0 0 0 0 0

2102 13 EggBinMaker * 8576 13 EggBinMaker * 13 EggBinMaker * 0 0 1931 0 0 0 0 0 0 0 0 0 0

2103 18 EggComment const * 8576 18 EggComment const * 18 EggComment const * 0 0 2104 0 0 0 0 0 0 0 0 0 0

2104 16 EggComment const 8832 16 EggComment const 16 EggComment const 0 0 1932 0 0 0 0 0 0 0 0 0 0

2105 12 EggComment * 8576 12 EggComment * 12 EggComment * 0 0 1932 0 0 0 0 0 0 0 0 0 0

2106 17 EggFilenameNode * 8576 17 EggFilenameNode * 17 EggFilenameNode * 0 0 1933 0 0 0 0 0 0 0 0 0 0

2107 23 EggFilenameNode const * 8576 23 EggFilenameNode const * 23 EggFilenameNode const * 0 0 2108 0 0 0 0 0 0 0 0 0 0

2108 21 EggFilenameNode const 8832 21 EggFilenameNode const 21 EggFilenameNode const 0 0 1933 0 0 0 0 0 0 0 0 0 0

2109 18 EggTexture const * 8576 18 EggTexture const * 18 EggTexture const * 0 0 2110 0 0 0 0 0 0 0 0 0 0

2110 16 EggTexture const 8832 16 EggTexture const 16 EggTexture const 0 0 1934 0 0 0 0 0 0 0 0 0 0

2111 12 EggTexture * 8576 12 EggTexture * 12 EggTexture * 0 0 1934 0 0 0 0 0 0 0 0 0 0

2112 19 EggMaterial const * 8576 19 EggMaterial const * 19 EggMaterial const * 0 0 2113 0 0 0 0 0 0 0 0 0 0

2113 17 EggMaterial const 8832 17 EggMaterial const 17 EggMaterial const 0 0 1949 0 0 0 0 0 0 0 0 0 0

2114 13 EggMaterial * 8576 13 EggMaterial * 13 EggMaterial * 0 0 1949 0 0 0 0 0 0 0 0 0 0

2115 14 EggPrimitive * 8576 14 EggPrimitive * 14 EggPrimitive * 0 0 1951 0 0 0 0 0 0 0 0 0 0

2116 23 EggCompositePrimitive * 8576 23 EggCompositePrimitive * 23 EggCompositePrimitive * 0 0 1953 0 0 0 0 0 0 0 0 0 0

2117 29 EggCompositePrimitive const * 8576 29 EggCompositePrimitive const * 29 EggCompositePrimitive const * 0 0 2118 0 0 0 0 0 0 0 0 0 0

2118 27 EggCompositePrimitive const 8832 27 EggCompositePrimitive const 27 EggCompositePrimitive const 0 0 1953 0 0 0 0 0 0 0 0 0 0

2119 9 EggData * 8576 9 EggData * 9 EggData * 0 0 1954 0 0 0 0 0 0 0 0 0 0

2120 15 EggData const * 8576 15 EggData const * 15 EggData const * 0 0 2121 0 0 0 0 0 0 0 0 0 0

2121 13 EggData const 8832 13 EggData const 13 EggData const 0 0 1954 0 0 0 0 0 0 0 0 0 0

2122 10 Filename * 8576 10 Filename * 10 Filename * 0 0 2062 0 0 0 0 0 0 0 0 0 0

2123 9 istream * 8576 9 istream * 9 istream * 0 0 2124 0 0 0 0 0 0 0 0 0 0

2124 7 istream 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2125 16 BamCacheRecord * 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 2126 0 0 0 0 0 0 0 0 0 0

2126 14 BamCacheRecord 2048 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 0 0 0 0 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

2127 21 EggCoordinateSystem * 8576 21 EggCoordinateSystem * 21 EggCoordinateSystem * 0 0 1955 0 0 0 0 0 0 0 0 0 0

2128 27 EggCoordinateSystem const * 8576 27 EggCoordinateSystem const * 27 EggCoordinateSystem const * 0 0 2129 0 0 0 0 0 0 0 0 0 0

2129 25 EggCoordinateSystem const 8832 25 EggCoordinateSystem const 25 EggCoordinateSystem const 0 0 1955 0 0 0 0 0 0 0 0 0 0

2130 10 EggCurve * 8576 10 EggCurve * 10 EggCurve * 0 0 1956 0 0 0 0 0 0 0 0 0 0

2131 16 EggCurve const * 8576 16 EggCurve const * 16 EggCurve const * 0 0 2132 0 0 0 0 0 0 0 0 0 0

2132 14 EggCurve const 8832 14 EggCurve const 14 EggCurve const 0 0 1956 0 0 0 0 0 0 0 0 0 0

2133 28 EggExternalReference const * 8576 28 EggExternalReference const * 28 EggExternalReference const * 0 0 2134 0 0 0 0 0 0 0 0 0 0

2134 26 EggExternalReference const 8832 26 EggExternalReference const 26 EggExternalReference const 0 0 1958 0 0 0 0 0 0 0 0 0 0

2135 22 EggExternalReference * 8576 22 EggExternalReference * 22 EggExternalReference * 0 0 1958 0 0 0 0 0 0 0 0 0 0

2136 19 EggNameUniquifier * 8576 19 EggNameUniquifier * 19 EggNameUniquifier * 0 0 1959 0 0 0 0 0 0 0 0 0 0

2137 25 EggNameUniquifier const * 8576 25 EggNameUniquifier const * 25 EggNameUniquifier const * 0 0 2138 0 0 0 0 0 0 0 0 0 0

2138 23 EggNameUniquifier const 8832 23 EggNameUniquifier const 23 EggNameUniquifier const 0 0 1959 0 0 0 0 0 0 0 0 0 0

2139 20 EggGroupUniquifier * 8576 20 EggGroupUniquifier * 20 EggGroupUniquifier * 0 0 1960 0 0 0 0 0 0 0 0 0 0

2140 15 EggLine const * 8576 15 EggLine const * 15 EggLine const * 0 0 2141 0 0 0 0 0 0 0 0 0 0

2141 13 EggLine const 8832 13 EggLine const 13 EggLine const 0 0 1961 0 0 0 0 0 0 0 0 0 0

2142 9 EggLine * 8576 9 EggLine * 9 EggLine * 0 0 1961 0 0 0 0 0 0 0 0 0 0

2143 23 EggMaterialCollection * 8576 23 EggMaterialCollection * 23 EggMaterialCollection * 0 0 1962 0 0 0 0 0 0 0 0 0 0

2144 29 EggMaterialCollection const * 8576 29 EggMaterialCollection const * 29 EggMaterialCollection const * 0 0 2145 0 0 0 0 0 0 0 0 0 0

2145 27 EggMaterialCollection const 8832 27 EggMaterialCollection const 27 EggMaterialCollection const 0 0 1962 0 0 0 0 0 0 0 0 0 0

2146 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 8576 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 59 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > * 0 0 2147 0 0 0 0 0 0 0 0 0 0

2147 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 2048 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 57 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2148 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 8576 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 65 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const * 0 0 2149 0 0 0 0 0 0 0 0 0 0

2149 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 8832 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 63 map< PointerTo< EggMaterial >, PointerTo< EggMaterial > > const 0 0 2147 0 0 0 0 0 0 0 0 0 0

2150 18 EggPolygon const * 8576 18 EggPolygon const * 18 EggPolygon const * 0 0 2151 0 0 0 0 0 0 0 0 0 0

2151 16 EggPolygon const 8832 16 EggPolygon const 16 EggPolygon const 0 0 1963 0 0 0 0 0 0 0 0 0 0

2152 12 EggPolygon * 8576 12 EggPolygon * 12 EggPolygon * 0 0 1963 0 0 0 0 0 0 0 0 0 0

2153 11 LVector3d * 8576 11 LVector3d * 11 LVector3d * 0 0 2021 0 0 0 0 0 0 0 0 0 0

2154 21 EggNurbsCurve const * 8576 21 EggNurbsCurve const * 21 EggNurbsCurve const * 0 0 2155 0 0 0 0 0 0 0 0 0 0

2155 19 EggNurbsCurve const 8832 19 EggNurbsCurve const 19 EggNurbsCurve const 0 0 1964 0 0 0 0 0 0 0 0 0 0

2156 15 EggNurbsCurve * 8576 15 EggNurbsCurve * 15 EggNurbsCurve * 0 0 1964 0 0 0 0 0 0 0 0 0 0

2157 12 EggSurface * 8576 12 EggSurface * 12 EggSurface * 0 0 1965 0 0 0 0 0 0 0 0 0 0

2158 18 EggSurface const * 8576 18 EggSurface const * 18 EggSurface const * 0 0 2159 0 0 0 0 0 0 0 0 0 0

2159 16 EggSurface const 8832 16 EggSurface const 16 EggSurface const 0 0 1965 0 0 0 0 0 0 0 0 0 0

2160 23 EggNurbsSurface const * 8576 23 EggNurbsSurface const * 23 EggNurbsSurface const * 0 0 2161 0 0 0 0 0 0 0 0 0 0

2161 21 EggNurbsSurface const 8832 21 EggNurbsSurface const 21 EggNurbsSurface const 0 0 1966 0 0 0 0 0 0 0 0 0 0

2162 17 EggNurbsSurface * 8576 17 EggNurbsSurface * 17 EggNurbsSurface * 0 0 1966 0 0 0 0 0 0 0 0 0 0

2163 42 list< PointerTo< EggNurbsCurve > > const * 8576 42 list< PointerTo< EggNurbsCurve > > const * 42 list< PointerTo< EggNurbsCurve > > const * 0 0 2164 0 0 0 0 0 0 0 0 0 0

2164 40 list< PointerTo< EggNurbsCurve > > const 8832 40 list< PointerTo< EggNurbsCurve > > const 40 list< PointerTo< EggNurbsCurve > > const 0 0 1967 0 0 0 0 0 0 0 0 0 0

2165 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 8576 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 58 list< list< list< PointerTo< EggNurbsCurve > > > > const * 0 0 2166 0 0 0 0 0 0 0 0 0 0

2166 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 8832 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 56 list< list< list< PointerTo< EggNurbsCurve > > > > const 0 0 1968 0 0 0 0 0 0 0 0 0 0

2167 16 EggPoint const * 8576 16 EggPoint const * 16 EggPoint const * 0 0 2168 0 0 0 0 0 0 0 0 0 0

2168 14 EggPoint const 8832 14 EggPoint const 14 EggPoint const 0 0 1969 0 0 0 0 0 0 0 0 0 0

2169 10 EggPoint * 8576 10 EggPoint * 10 EggPoint * 0 0 1969 0 0 0 0 0 0 0 0 0 0

2170 17 EggPolysetMaker * 8576 17 EggPolysetMaker * 17 EggPolysetMaker * 0 0 1970 0 0 0 0 0 0 0 0 0 0

2171 19 EggPoolUniquifier * 8576 19 EggPoolUniquifier * 19 EggPoolUniquifier * 0 0 1973 0 0 0 0 0 0 0 0 0 0

2172 20 EggSAnimData const * 8576 20 EggSAnimData const * 20 EggSAnimData const * 0 0 2173 0 0 0 0 0 0 0 0 0 0

2173 18 EggSAnimData const 8832 18 EggSAnimData const 18 EggSAnimData const 0 0 1974 0 0 0 0 0 0 0 0 0 0

2174 14 EggSAnimData * 8576 14 EggSAnimData * 14 EggSAnimData * 0 0 1974 0 0 0 0 0 0 0 0 0 0

2175 16 EggTable const * 8576 16 EggTable const * 16 EggTable const * 0 0 2176 0 0 0 0 0 0 0 0 0 0

2176 14 EggTable const 8832 14 EggTable const 14 EggTable const 0 0 1975 0 0 0 0 0 0 0 0 0 0

2177 10 EggTable * 8576 10 EggTable * 10 EggTable * 0 0 1975 0 0 0 0 0 0 0 0 0 0

2178 22 EggTextureCollection * 8576 22 EggTextureCollection * 22 EggTextureCollection * 0 0 1977 0 0 0 0 0 0 0 0 0 0

2179 28 EggTextureCollection const * 8576 28 EggTextureCollection const * 28 EggTextureCollection const * 0 0 2180 0 0 0 0 0 0 0 0 0 0

2180 26 EggTextureCollection const 8832 26 EggTextureCollection const 26 EggTextureCollection const 0 0 1977 0 0 0 0 0 0 0 0 0 0

2181 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 8576 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 57 map< PointerTo< EggTexture >, PointerTo< EggTexture > > * 0 0 2182 0 0 0 0 0 0 0 0 0 0

2182 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 2048 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 55 map< PointerTo< EggTexture >, PointerTo< EggTexture > > 0 0 0 0 0 0 0 0 0 0 0 0 0

2183 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 8576 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 63 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const * 0 0 2184 0 0 0 0 0 0 0 0 0 0

2184 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 8832 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 61 map< PointerTo< EggTexture >, PointerTo< EggTexture > > const 0 0 2182 0 0 0 0 0 0 0 0 0 0

2185 22 EggTriangleFan const * 8576 22 EggTriangleFan const * 22 EggTriangleFan const * 0 0 2186 0 0 0 0 0 0 0 0 0 0

2186 20 EggTriangleFan const 8832 20 EggTriangleFan const 20 EggTriangleFan const 0 0 1978 0 0 0 0 0 0 0 0 0 0

2187 16 EggTriangleFan * 8576 16 EggTriangleFan * 16 EggTriangleFan * 0 0 1978 0 0 0 0 0 0 0 0 0 0

2188 24 EggTriangleStrip const * 8576 24 EggTriangleStrip const * 24 EggTriangleStrip const * 0 0 2189 0 0 0 0 0 0 0 0 0 0

2189 22 EggTriangleStrip const 8832 22 EggTriangleStrip const 22 EggTriangleStrip const 0 0 1979 0 0 0 0 0 0 0 0 0 0

2190 18 EggTriangleStrip * 8576 18 EggTriangleStrip * 18 EggTriangleStrip * 0 0 1979 0 0 0 0 0 0 0 0 0 0

2191 22 EggXfmAnimData const * 8576 22 EggXfmAnimData const * 22 EggXfmAnimData const * 0 0 2192 0 0 0 0 0 0 0 0 0 0

2192 20 EggXfmAnimData const 8832 20 EggXfmAnimData const 20 EggXfmAnimData const 0 0 1981 0 0 0 0 0 0 0 0 0 0

2193 13 EggXfmSAnim * 8576 13 EggXfmSAnim * 13 EggXfmSAnim * 0 0 1980 0 0 0 0 0 0 0 0 0 0

2194 19 EggXfmSAnim const * 8576 19 EggXfmSAnim const * 19 EggXfmSAnim const * 0 0 2195 0 0 0 0 0 0 0 0 0 0

2195 17 EggXfmSAnim const 8832 17 EggXfmSAnim const 17 EggXfmSAnim const 0 0 1980 0 0 0 0 0 0 0 0 0 0

2196 11 LMatrix4d * 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2006 0 0 0 0 0 0 0 0 0 0

2197 16 EggXfmAnimData * 8576 16 EggXfmAnimData * 16 EggXfmAnimData * 0 0 1981 0 0 0 0 0 0 0 0 0 0

2198 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
10
2199 9 _dnormals 2 1903 1077 0 24 EggAttributes::_dnormals 
2200 7 _drgbas 2 1904 1078 0 22 EggAttributes::_drgbas 
2201 5 _duvs 2 1903 1101 0 18 EggVertexUV::_duvs 
2202 6 _dxyzs 2 1903 1145 0 17 EggVertex::_dxyzs 
2203 5 _fade 6 1919 1278 1279 33 EggSwitchConditionDistance::_fade 
2204 11 _switch_out 6 1919 1280 1281 39 EggSwitchConditionDistance::_switch_out 
2205 10 _switch_in 6 1919 1282 1283 38 EggSwitchConditionDistance::_switch_in 
2206 7 _center 2 1920 1284 0 35 EggSwitchConditionDistance::_center 
2207 18 _curves_on_surface 2 1967 1786 0 35 EggNurbsSurface::_curves_on_surface 
2208 6 _trims 2 1968 1787 0 23 EggNurbsSurface::_trims 
17
2209 0 346 16 get_object_types 20 get_num_object_types 15 get_object_type 
2210 0 346 14 get_group_refs 18 get_num_group_refs 13 get_group_ref 
2211 0 681 12 get_textures 16 get_num_textures 11 get_texture 
2212 0 681 12 get_vertices 16 get_num_vertices 10 get_vertex 
2213 0 739 14 get_components 18 get_num_components 13 get_component 
2214 0 838 9 get_knots 13 get_num_knots 8 get_knot 
2215 0 862 11 get_u_knots 15 get_num_u_knots 10 get_u_knot 
2216 0 862 11 get_v_knots 15 get_num_v_knots 10 get_v_knot 
2217 0 942 12 get_textures 16 get_num_textures 11 get_texture 
2218 0 1072 8 get_rows 4 size 7 get_row 
2219 0 1072 8 get_cols 4 size 7 get_col 
2220 0 1072 9 get_row3s 4 size 8 get_row3 
2221 0 1322 15 get_directories 19 get_num_directories 13 get_directory 
2222 0 1425 8 get_rows 4 size 7 get_row 
2223 0 1425 8 get_cols 4 size 7 get_col 
2224 0 1425 9 get_col2s 4 size 8 get_col2 
2225 0 1425 9 get_row2s 4 size 8 get_row2 
