1304332060
2 2
8 libtform 4 yiw5 5 panda 
246
259 13 ButtonThrower 4 505 28 ButtonThrower::ButtonThrower 0 1 1 222
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
ButtonThrower::ButtonThrower(basic_string< char > const &name);

260 21 set_button_down_event 4 505 36 ButtonThrower::set_button_down_event 0 1 2 1356
// Filename: buttonThrower.I
// Created by:  drose (26Dec03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
96
inline void ButtonThrower::set_button_down_event(basic_string< char > const &button_down_event);

261 21 get_button_down_event 4 505 36 ButtonThrower::get_button_down_event 0 1 3 353
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
////////////////////////////////////////////////////////////////////
84
inline basic_string< char > const &ButtonThrower::get_button_down_event(void) const;

262 19 set_button_up_event 4 505 34 ButtonThrower::set_button_up_event 0 1 4 391
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_button_up_event(basic_string< char > const &button_up_event);

263 19 get_button_up_event 4 505 34 ButtonThrower::get_button_up_event 0 1 5 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_button_up_event(void) const;

264 23 set_button_repeat_event 4 505 38 ButtonThrower::set_button_repeat_event 0 1 6 875
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_repeat_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) repeatedly while a key or button is held down.
//               Unlike the specific events that are unique to each
//               key, this same event name is used for *all* button
//               events, and the name of the button pressed (possibly
//               with modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
100
inline void ButtonThrower::set_button_repeat_event(basic_string< char > const &button_repeat_event);

265 23 get_button_repeat_event 4 505 38 ButtonThrower::get_button_repeat_event 0 1 7 359
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_repeat_event
//       Access: Published
//  Description: Returns the button_repeat_event that has been set on
//               this ButtonThrower.  See set_button_repeat_event().
////////////////////////////////////////////////////////////////////
86
inline basic_string< char > const &ButtonThrower::get_button_repeat_event(void) const;

266 19 set_keystroke_event 4 505 34 ButtonThrower::set_keystroke_event 0 1 8 1304
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               If a key is held down, keyrepeat will cause the same
//               keystroke event to be generated repeatedly.  This is
//               different from the corresponding down event, which
//               will only be generated once, followed by a number of
//               button repeat events.
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_keystroke_event(basic_string< char > const &keystroke_event);

267 19 get_keystroke_event 4 505 34 ButtonThrower::get_keystroke_event 0 1 9 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_keystroke_event(void) const;

268 19 set_candidate_event 4 505 34 ButtonThrower::set_candidate_event 0 1 10 1252
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_candidate_event(basic_string< char > const &candidate_event);

269 19 get_candidate_event 4 505 34 ButtonThrower::get_candidate_event 0 1 11 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_candidate_event(void) const;

270 14 set_move_event 4 505 29 ButtonThrower::set_move_event 0 1 12 340
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
////////////////////////////////////////////////////////////////////
82
inline void ButtonThrower::set_move_event(basic_string< char > const &move_event);

271 14 get_move_event 4 505 29 ButtonThrower::get_move_event 0 1 13 332
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &ButtonThrower::get_move_event(void) const;

272 10 set_prefix 4 505 25 ButtonThrower::set_prefix 0 1 14 505
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
////////////////////////////////////////////////////////////////////
74
inline void ButtonThrower::set_prefix(basic_string< char > const &prefix);

273 10 get_prefix 4 505 25 ButtonThrower::get_prefix 0 1 15 320
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &ButtonThrower::get_prefix(void) const;

274 17 set_specific_flag 4 505 32 ButtonThrower::set_specific_flag 0 1 16 604
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
////////////////////////////////////////////////////////////////////
65
inline void ButtonThrower::set_specific_flag(bool specific_flag);

275 17 get_specific_flag 4 505 32 ButtonThrower::get_specific_flag 0 1 17 351
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
////////////////////////////////////////////////////////////////////
57
inline bool ButtonThrower::get_specific_flag(void) const;

276 13 set_time_flag 4 505 28 ButtonThrower::set_time_flag 0 1 18 720
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
////////////////////////////////////////////////////////////////////
57
inline void ButtonThrower::set_time_flag(bool time_flag);

277 13 get_time_flag 4 505 28 ButtonThrower::get_time_flag 0 1 19 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
////////////////////////////////////////////////////////////////////
53
inline bool ButtonThrower::get_time_flag(void) const;

278 13 add_parameter 4 505 28 ButtonThrower::add_parameter 0 1 20 382
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
61
void ButtonThrower::add_parameter(EventParameter const &obj);

279 18 get_num_parameters 4 505 33 ButtonThrower::get_num_parameters 0 1 21 405
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
50
int ButtonThrower::get_num_parameters(void) const;

280 13 get_parameter 4 505 28 ButtonThrower::get_parameter 0 1 22 386
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
////////////////////////////////////////////////////////////////////
57
EventParameter ButtonThrower::get_parameter(int n) const;

281 20 get_modifier_buttons 4 505 35 ButtonThrower::get_modifier_buttons 0 1 23 808
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
////////////////////////////////////////////////////////////////////
78
inline ModifierButtons const &ButtonThrower::get_modifier_buttons(void) const;

282 20 set_modifier_buttons 4 505 35 ButtonThrower::set_modifier_buttons 0 1 24 1054
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
////////////////////////////////////////////////////////////////////
77
inline void ButtonThrower::set_modifier_buttons(ModifierButtons const &mods);

283 24 set_throw_buttons_active 4 505 39 ButtonThrower::set_throw_buttons_active 0 1 25 597
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
////////////////////////////////////////////////////////////////////
63
inline void ButtonThrower::set_throw_buttons_active(bool flag);

284 24 get_throw_buttons_active 4 505 39 ButtonThrower::get_throw_buttons_active 0 1 26 446
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
////////////////////////////////////////////////////////////////////
64
inline bool ButtonThrower::get_throw_buttons_active(void) const;

285 16 add_throw_button 4 505 31 ButtonThrower::add_throw_button 0 1 27 1056
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
////////////////////////////////////////////////////////////////////
94
bool ButtonThrower::add_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

286 19 remove_throw_button 4 505 34 ButtonThrower::remove_throw_button 0 1 28 513
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
////////////////////////////////////////////////////////////////////
97
bool ButtonThrower::remove_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

287 16 has_throw_button 4 505 31 ButtonThrower::has_throw_button 0 2 29 30 1059
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
////////////////////////////////////////////////////////////////////
172
bool ButtonThrower::has_throw_button(ModifierButtons const &mods, ButtonHandle const &button) const;
bool ButtonThrower::has_throw_button(ButtonHandle const &button) const;

288 19 clear_throw_buttons 4 505 34 ButtonThrower::clear_throw_buttons 0 1 31 342
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
////////////////////////////////////////////////////////////////////
46
void ButtonThrower::clear_throw_buttons(void);

289 14 get_class_type 4 505 29 ButtonThrower::get_class_type 0 1 32 0
54
static TypeHandle ButtonThrower::get_class_type(void);

290 14 require_button 4 507 34 MouseInterfaceNode::require_button 0 1 33 589
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
////////////////////////////////////////////////////////////////////
82
void MouseInterfaceNode::require_button(ButtonHandle const &button, bool is_down);

291 12 clear_button 4 507 32 MouseInterfaceNode::clear_button 0 1 34 340
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
////////////////////////////////////////////////////////////////////
66
void MouseInterfaceNode::clear_button(ButtonHandle const &button);

292 17 clear_all_buttons 4 507 37 MouseInterfaceNode::clear_all_buttons 0 1 35 332
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
////////////////////////////////////////////////////////////////////
49
void MouseInterfaceNode::clear_all_buttons(void);

293 14 get_class_type 4 507 34 MouseInterfaceNode::get_class_type 0 1 36 0
59
static TypeHandle MouseInterfaceNode::get_class_type(void);

294 14 DriveInterface 4 508 30 DriveInterface::DriveInterface 0 2 37 38 226
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
DriveInterface::DriveInterface(basic_string< char > const &name = (""));

295 17 set_forward_speed 4 508 33 DriveInterface::set_forward_speed 0 1 39 886
// Filename: driveInterface.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_forward_speed(float speed);

296 17 get_forward_speed 4 508 33 DriveInterface::get_forward_speed 0 1 40 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline float DriveInterface::get_forward_speed(void) const;

297 17 set_reverse_speed 4 508 33 DriveInterface::set_reverse_speed 0 1 41 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_reverse_speed(float speed);

298 17 get_reverse_speed 4 508 33 DriveInterface::get_reverse_speed 0 1 42 402
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline float DriveInterface::get_reverse_speed(void) const;

299 16 set_rotate_speed 4 508 32 DriveInterface::set_rotate_speed 0 1 43 413
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
58
inline void DriveInterface::set_rotate_speed(float speed);

300 16 get_rotate_speed 4 508 32 DriveInterface::get_rotate_speed 0 1 44 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
58
inline float DriveInterface::get_rotate_speed(void) const;

301 22 set_vertical_dead_zone 4 508 38 DriveInterface::set_vertical_dead_zone 0 1 45 603
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
63
inline void DriveInterface::set_vertical_dead_zone(float zone);

302 22 get_vertical_dead_zone 4 508 38 DriveInterface::get_vertical_dead_zone 0 1 46 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
64
inline float DriveInterface::get_vertical_dead_zone(void) const;

303 24 set_horizontal_dead_zone 4 508 40 DriveInterface::set_horizontal_dead_zone 0 1 47 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
65
inline void DriveInterface::set_horizontal_dead_zone(float zone);

304 24 get_horizontal_dead_zone 4 508 40 DriveInterface::get_horizontal_dead_zone 0 1 48 609
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
66
inline float DriveInterface::get_horizontal_dead_zone(void) const;

305 25 set_vertical_ramp_up_time 4 508 41 DriveInterface::set_vertical_ramp_up_time 0 1 49 431
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
////////////////////////////////////////////////////////////////////
74
inline void DriveInterface::set_vertical_ramp_up_time(float ramp_up_time);

306 25 get_vertical_ramp_up_time 4 508 41 DriveInterface::get_vertical_ramp_up_time 0 1 50 451
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
////////////////////////////////////////////////////////////////////
67
inline float DriveInterface::get_vertical_ramp_up_time(void) const;

307 27 set_vertical_ramp_down_time 4 508 43 DriveInterface::set_vertical_ramp_down_time 0 1 51 412
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
78
inline void DriveInterface::set_vertical_ramp_down_time(float ramp_down_time);

308 27 get_vertical_ramp_down_time 4 508 43 DriveInterface::get_vertical_ramp_down_time 0 1 52 415
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
69
inline float DriveInterface::get_vertical_ramp_down_time(void) const;

309 27 set_horizontal_ramp_up_time 4 508 43 DriveInterface::set_horizontal_ramp_up_time 0 1 53 417
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
////////////////////////////////////////////////////////////////////
76
inline void DriveInterface::set_horizontal_ramp_up_time(float ramp_up_time);

310 27 get_horizontal_ramp_up_time 4 508 43 DriveInterface::get_horizontal_ramp_up_time 0 1 54 420
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
////////////////////////////////////////////////////////////////////
69
inline float DriveInterface::get_horizontal_ramp_up_time(void) const;

311 29 set_horizontal_ramp_down_time 4 508 45 DriveInterface::set_horizontal_ramp_down_time 0 1 55 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
80
inline void DriveInterface::set_horizontal_ramp_down_time(float ramp_down_time);

312 29 get_horizontal_ramp_down_time 4 508 45 DriveInterface::get_horizontal_ramp_down_time 0 1 56 419
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
71
inline float DriveInterface::get_horizontal_ramp_down_time(void) const;

313 9 get_speed 4 508 25 DriveInterface::get_speed 0 1 57 278
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
51
inline float DriveInterface::get_speed(void) const;

314 13 get_rot_speed 4 508 29 DriveInterface::get_rot_speed 0 1 58 286
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
55
inline float DriveInterface::get_rot_speed(void) const;

315 5 reset 4 508 21 DriveInterface::reset 0 1 59 332
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
////////////////////////////////////////////////////////////////////
33
void DriveInterface::reset(void);

316 7 get_pos 4 508 23 DriveInterface::get_pos 0 1 60 280
/// **** Translation ****

////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f const &DriveInterface::get_pos(void) const;

317 5 get_x 4 508 21 DriveInterface::get_x 0 1 61 0
47
inline float DriveInterface::get_x(void) const;

318 5 get_y 4 508 21 DriveInterface::get_y 0 1 62 0
47
inline float DriveInterface::get_y(void) const;

319 5 get_z 4 508 21 DriveInterface::get_z 0 1 63 0
47
inline float DriveInterface::get_z(void) const;

320 7 set_pos 4 508 23 DriveInterface::set_pos 0 2 64 65 259
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
////////////////////////////////////////////////////////////////////
123
inline void DriveInterface::set_pos(LVecBase3f const &vec);
inline void DriveInterface::set_pos(float x, float y, float z);

321 5 set_x 4 508 21 DriveInterface::set_x 0 1 66 0
43
inline void DriveInterface::set_x(float x);

322 5 set_y 4 508 21 DriveInterface::set_y 0 1 67 0
43
inline void DriveInterface::set_y(float y);

323 5 set_z 4 508 21 DriveInterface::set_z 0 1 68 0
43
inline void DriveInterface::set_z(float z);

324 7 get_hpr 4 508 23 DriveInterface::get_hpr 0 1 69 280
/// **** Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f const &DriveInterface::get_hpr(void) const;

325 5 get_h 4 508 21 DriveInterface::get_h 0 1 70 0
47
inline float DriveInterface::get_h(void) const;

326 5 get_p 4 508 21 DriveInterface::get_p 0 1 71 0
47
inline float DriveInterface::get_p(void) const;

327 5 get_r 4 508 21 DriveInterface::get_r 0 1 72 0
47
inline float DriveInterface::get_r(void) const;

328 7 set_hpr 4 508 23 DriveInterface::set_hpr 0 2 73 74 262
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
////////////////////////////////////////////////////////////////////
123
inline void DriveInterface::set_hpr(LVecBase3f const &hpr);
inline void DriveInterface::set_hpr(float h, float p, float r);

329 5 set_h 4 508 21 DriveInterface::set_h 0 1 75 0
43
inline void DriveInterface::set_h(float h);

330 5 set_p 4 508 21 DriveInterface::set_p 0 1 76 0
43
inline void DriveInterface::set_p(float p);

331 5 set_r 4 508 21 DriveInterface::set_r 0 1 77 0
43
inline void DriveInterface::set_r(float r);

332 14 set_force_roll 4 508 30 DriveInterface::set_force_roll 0 1 78 322
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
////////////////////////////////////////////////////////////////////
54
void DriveInterface::set_force_roll(float force_roll);

333 16 set_ignore_mouse 4 508 32 DriveInterface::set_ignore_mouse 0 1 79 736
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
////////////////////////////////////////////////////////////////////
64
inline void DriveInterface::set_ignore_mouse(bool ignore_mouse);

334 16 get_ignore_mouse 4 508 32 DriveInterface::get_ignore_mouse 0 1 80 326
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
////////////////////////////////////////////////////////////////////
57
inline bool DriveInterface::get_ignore_mouse(void) const;

335 15 set_force_mouse 4 508 31 DriveInterface::set_force_mouse 0 1 81 406
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
////////////////////////////////////////////////////////////////////
62
inline void DriveInterface::set_force_mouse(bool force_mouse);

336 15 get_force_mouse 4 508 31 DriveInterface::get_force_mouse 0 1 82 323
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
////////////////////////////////////////////////////////////////////
56
inline bool DriveInterface::get_force_mouse(void) const;

337 19 set_stop_this_frame 4 508 35 DriveInterface::set_stop_this_frame 0 1 83 649
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
////////////////////////////////////////////////////////////////////
70
inline void DriveInterface::set_stop_this_frame(bool stop_this_frame);

338 19 get_stop_this_frame 4 508 35 DriveInterface::get_stop_this_frame 0 1 84 336
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
////////////////////////////////////////////////////////////////////
60
inline bool DriveInterface::get_stop_this_frame(void) const;

339 7 set_mat 4 508 23 DriveInterface::set_mat 0 1 85 276
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
////////////////////////////////////////////////////////////////////
51
void DriveInterface::set_mat(LMatrix4f const &mat);

340 7 get_mat 4 508 23 DriveInterface::get_mat 0 1 86 253
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
////////////////////////////////////////////////////////////////////
47
LMatrix4f const &DriveInterface::get_mat(void);

341 12 force_dgraph 4 508 28 DriveInterface::force_dgraph 0 1 87 558
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
////////////////////////////////////////////////////////////////////
40
void DriveInterface::force_dgraph(void);

342 14 get_class_type 4 508 30 DriveInterface::get_class_type 0 1 88 0
55
static TypeHandle DriveInterface::get_class_type(void);

343 14 MouseSubregion 4 509 30 MouseSubregion::MouseSubregion 0 1 89 223
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
MouseSubregion::MouseSubregion(basic_string< char > const &name);

344 8 get_left 4 509 24 MouseSubregion::get_left 0 1 90 869
// Filename: mouseSubregion.I
// Created by:  drose (13May05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
50
inline float MouseSubregion::get_left(void) const;

345 9 get_right 4 509 25 MouseSubregion::get_right 0 1 91 381
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
51
inline float MouseSubregion::get_right(void) const;

346 10 get_bottom 4 509 26 MouseSubregion::get_bottom 0 1 92 384
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
////////////////////////////////////////////////////////////////////
52
inline float MouseSubregion::get_bottom(void) const;

347 7 get_top 4 509 23 MouseSubregion::get_top 0 1 93 377
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
49
inline float MouseSubregion::get_top(void) const;

348 14 set_dimensions 4 509 30 MouseSubregion::set_dimensions 0 1 94 583
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
////////////////////////////////////////////////////////////////////
79
inline void MouseSubregion::set_dimensions(float l, float r, float b, float t);

349 14 get_class_type 4 509 30 MouseSubregion::get_class_type 0 1 95 0
55
static TypeHandle MouseSubregion::get_class_type(void);

350 37 upcast_to_TypedWritableReferenceCount 12 510 57 MouseWatcherRegion::upcast_to_TypedWritableReferenceCount 0 1 114 61
upcast from MouseWatcherRegion to TypedWritableReferenceCount
93
TypedWritableReferenceCount *MouseWatcherRegion::upcast_to_TypedWritableReferenceCount(void);

351 30 downcast_to_MouseWatcherRegion 12 511 59 TypedWritableReferenceCount::downcast_to_MouseWatcherRegion 0 1 115 63
downcast from TypedWritableReferenceCount to MouseWatcherRegion
86
MouseWatcherRegion *TypedWritableReferenceCount::downcast_to_MouseWatcherRegion(void);

352 17 upcast_to_Namable 12 510 37 MouseWatcherRegion::upcast_to_Namable 0 1 116 41
upcast from MouseWatcherRegion to Namable
53
Namable *MouseWatcherRegion::upcast_to_Namable(void);

353 30 downcast_to_MouseWatcherRegion 12 512 39 Namable::downcast_to_MouseWatcherRegion 0 1 117 43
downcast from Namable to MouseWatcherRegion
66
MouseWatcherRegion *Namable::downcast_to_MouseWatcherRegion(void);

354 18 MouseWatcherRegion 4 510 38 MouseWatcherRegion::MouseWatcherRegion 0 2 96 97 956
// Filename: mouseWatcherRegion.I
// Created by:  drose (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
236
inline MouseWatcherRegion::MouseWatcherRegion(basic_string< char > const &name, float left, float right, float bottom, float top);
inline MouseWatcherRegion::MouseWatcherRegion(basic_string< char > const &name, LVecBase4f const &frame);

355 9 set_frame 4 510 29 MouseWatcherRegion::set_frame 0 2 98 99 458
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
160
inline void MouseWatcherRegion::set_frame(float left, float right, float bottom, float top);
inline void MouseWatcherRegion::set_frame(LVecBase4f const &frame);

356 9 get_frame 4 510 29 MouseWatcherRegion::get_frame 0 1 100 228
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase4f const &MouseWatcherRegion::get_frame(void) const;

357 8 get_area 4 510 28 MouseWatcherRegion::get_area 0 1 101 271
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
////////////////////////////////////////////////////////////////////
54
inline float MouseWatcherRegion::get_area(void) const;

358 8 set_sort 4 510 28 MouseWatcherRegion::set_sort 0 1 102 672
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
////////////////////////////////////////////////////////////////////
51
inline void MouseWatcherRegion::set_sort(int sort);

359 8 get_sort 4 510 28 MouseWatcherRegion::get_sort 0 1 103 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
////////////////////////////////////////////////////////////////////
52
inline int MouseWatcherRegion::get_sort(void) const;

360 10 set_active 4 510 30 MouseWatcherRegion::set_active 0 1 104 515
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcherRegion::set_active(bool active);

361 10 get_active 4 510 30 MouseWatcherRegion::get_active 0 1 105 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
////////////////////////////////////////////////////////////////////
55
inline bool MouseWatcherRegion::get_active(void) const;

362 12 set_keyboard 4 510 32 MouseWatcherRegion::set_keyboard 0 1 106 598
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
////////////////////////////////////////////////////////////////////
60
inline void MouseWatcherRegion::set_keyboard(bool keyboard);

363 12 get_keyboard 4 510 32 MouseWatcherRegion::get_keyboard 0 1 107 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherRegion::get_keyboard(void) const;

364 18 set_suppress_flags 4 510 38 MouseWatcherRegion::set_suppress_flags 0 1 108 725
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
////////////////////////////////////////////////////////////////////
71
inline void MouseWatcherRegion::set_suppress_flags(int suppress_flags);

365 18 get_suppress_flags 4 510 38 MouseWatcherRegion::get_suppress_flags 0 1 109 317
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
////////////////////////////////////////////////////////////////////
62
inline int MouseWatcherRegion::get_suppress_flags(void) const;

366 6 output 4 510 26 MouseWatcherRegion::output 0 1 110 225
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
void MouseWatcherRegion::output(ostream &out) const;

367 5 write 4 510 25 MouseWatcherRegion::write 0 2 111 112 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
void MouseWatcherRegion::write(ostream &out, int indent_level = (0)) const;

368 14 get_class_type 4 510 34 MouseWatcherRegion::get_class_type 0 1 113 0
59
static TypeHandle MouseWatcherRegion::get_class_type(void);

369 19 ~MouseWatcherRegion 4 510 39 MouseWatcherRegion::~MouseWatcherRegion 0 0 0
46
MouseWatcherRegion::~MouseWatcherRegion(void);

370 24 upcast_to_ReferenceCount 12 514 43 MouseWatcherGroup::upcast_to_ReferenceCount 0 1 135 47
upcast from MouseWatcherGroup to ReferenceCount
66
ReferenceCount *MouseWatcherGroup::upcast_to_ReferenceCount(void);

371 18 ~MouseWatcherGroup 4 514 37 MouseWatcherGroup::~MouseWatcherGroup 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
52
virtual MouseWatcherGroup::~MouseWatcherGroup(void);

372 10 add_region 4 514 29 MouseWatcherGroup::add_region 0 1 118 390
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
////////////////////////////////////////////////////////////////////
63
void MouseWatcherGroup::add_region(MouseWatcherRegion *region);

373 10 has_region 4 514 29 MouseWatcherGroup::has_region 0 1 119 348
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherGroup, false otherwise.
////////////////////////////////////////////////////////////////////
69
bool MouseWatcherGroup::has_region(MouseWatcherRegion *region) const;

374 13 remove_region 4 514 32 MouseWatcherGroup::remove_region 0 1 120 403
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
66
bool MouseWatcherGroup::remove_region(MouseWatcherRegion *region);

375 11 find_region 4 514 30 MouseWatcherGroup::find_region 0 1 121 417
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
////////////////////////////////////////////////////////////////////
91
MouseWatcherRegion *MouseWatcherGroup::find_region(basic_string< char > const &name) const;

376 13 clear_regions 4 514 32 MouseWatcherGroup::clear_regions 0 1 122 271
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
////////////////////////////////////////////////////////////////////
44
void MouseWatcherGroup::clear_regions(void);

377 12 sort_regions 4 514 31 MouseWatcherGroup::sort_regions 0 1 123 303
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::sort_regions
//       Access: Published
//  Description: Sorts all the regions in this group into pointer
//               order.
////////////////////////////////////////////////////////////////////
43
void MouseWatcherGroup::sort_regions(void);

378 9 is_sorted 4 514 28 MouseWatcherGroup::is_sorted 0 1 124 312
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::is_sorted
//       Access: Published
//  Description: Returns true if the group has already been sorted,
//               false otherwise.
////////////////////////////////////////////////////////////////////
46
bool MouseWatcherGroup::is_sorted(void) const;

379 15 get_num_regions 4 514 34 MouseWatcherGroup::get_num_regions 0 1 125 277
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
////////////////////////////////////////////////////////////////////
51
int MouseWatcherGroup::get_num_regions(void) const;

380 10 get_region 4 514 29 MouseWatcherGroup::get_region 0 1 126 472
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
////////////////////////////////////////////////////////////////////
63
MouseWatcherRegion *MouseWatcherGroup::get_region(int n) const;

381 6 output 4 514 25 MouseWatcherGroup::output 0 1 127 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
void MouseWatcherGroup::output(ostream &out) const;

382 5 write 4 514 24 MouseWatcherGroup::write 0 2 128 129 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
void MouseWatcherGroup::write(ostream &out, int indent_level = (0)) const;

383 12 show_regions 4 514 31 MouseWatcherGroup::show_regions 0 1 130 445
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherGroup.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
////////////////////////////////////////////////////////////////////
117
void MouseWatcherGroup::show_regions(NodePath const &render2d, basic_string< char > const &bin_name, int draw_order);

384 9 set_color 4 514 28 MouseWatcherGroup::set_color 0 1 131 362
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
////////////////////////////////////////////////////////////////////
59
void MouseWatcherGroup::set_color(LVecBase4f const &color);

385 12 hide_regions 4 514 31 MouseWatcherGroup::hide_regions 0 1 132 317
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
////////////////////////////////////////////////////////////////////
43
void MouseWatcherGroup::hide_regions(void);

386 14 update_regions 4 514 33 MouseWatcherGroup::update_regions 0 1 133 304
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::update_regions
//       Access: Published
//  Description: Refreshes the visualization created by
//               show_regions().
////////////////////////////////////////////////////////////////////
45
void MouseWatcherGroup::update_regions(void);

387 14 get_class_type 4 514 33 MouseWatcherGroup::get_class_type 0 1 134 0
58
static TypeHandle MouseWatcherGroup::get_class_type(void);

388 18 upcast_to_DataNode 12 516 32 MouseWatcher::upcast_to_DataNode 0 1 199 36
upcast from MouseWatcher to DataNode
49
DataNode *MouseWatcher::upcast_to_DataNode(void);

389 24 downcast_to_MouseWatcher 12 506 34 DataNode::downcast_to_MouseWatcher 0 1 200 38
downcast from DataNode to MouseWatcher
55
MouseWatcher *DataNode::downcast_to_MouseWatcher(void);

390 27 upcast_to_MouseWatcherGroup 12 516 41 MouseWatcher::upcast_to_MouseWatcherGroup 0 1 201 45
upcast from MouseWatcher to MouseWatcherGroup
67
MouseWatcherGroup *MouseWatcher::upcast_to_MouseWatcherGroup(void);

391 24 downcast_to_MouseWatcher 12 514 43 MouseWatcherGroup::downcast_to_MouseWatcher 0 1 202 47
downcast from MouseWatcherGroup to MouseWatcher
64
MouseWatcher *MouseWatcherGroup::downcast_to_MouseWatcher(void);

392 12 MouseWatcher 4 516 26 MouseWatcher::MouseWatcher 0 2 136 137 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
MouseWatcher::MouseWatcher(basic_string< char > const &name = (""));

393 13 ~MouseWatcher 4 516 27 MouseWatcher::~MouseWatcher 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual MouseWatcher::~MouseWatcher(void);

394 13 remove_region 4 516 27 MouseWatcher::remove_region 0 1 138 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
61
bool MouseWatcher::remove_region(MouseWatcherRegion *region);

395 9 has_mouse 4 516 23 MouseWatcher::has_mouse 0 1 139 828
// Filename: mouseWatcher.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
////////////////////////////////////////////////////////////////////
48
inline bool MouseWatcher::has_mouse(void) const;

396 13 is_mouse_open 4 516 27 MouseWatcher::is_mouse_open 0 1 140 473
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
////////////////////////////////////////////////////////////////////
52
inline bool MouseWatcher::is_mouse_open(void) const;

397 9 get_mouse 4 516 23 MouseWatcher::get_mouse 0 1 141 389
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
59
inline LPoint2f const &MouseWatcher::get_mouse(void) const;

398 11 get_mouse_x 4 516 25 MouseWatcher::get_mouse_x 0 1 142 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
51
inline float MouseWatcher::get_mouse_x(void) const;

399 11 get_mouse_y 4 516 25 MouseWatcher::get_mouse_y 0 1 143 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
51
inline float MouseWatcher::get_mouse_y(void) const;

400 9 set_frame 4 516 23 MouseWatcher::set_frame 0 2 144 145 1273
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  See the next
//               flavor of this method for a more verbose explanation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  This determines
//               the coordinate space in which the MouseWatcherRegions
//               should be expected to live.  Normally, this is left
//               at -1, 1, -1, 1, which is the default setting, and
//               matches the mouse coordinate range.
//
//               Whatever values you specify here indicate the shape
//               of the full screen, and the MouseWatcherRegions will
//               be given in coordinate space matching it.  For
//               instance, if you specify (0, 1, 0, 1), then a
//               MouseWatcherRegion with the frame (0, 1, 0, .5) will
//               cover the lower half of the screen.
////////////////////////////////////////////////////////////////////
148
inline void MouseWatcher::set_frame(float left, float right, float bottom, float top);
inline void MouseWatcher::set_frame(LVecBase4f const &frame);

401 9 get_frame 4 516 23 MouseWatcher::get_frame 0 1 146 296
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_frame
//       Access: Published
//  Description: Returns the frame of the MouseWatcher.  See
//               set_frame().
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f const &MouseWatcher::get_frame(void) const;

402 14 is_over_region 4 516 28 MouseWatcher::is_over_region 0 3 147 148 149 961
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////
188
inline bool MouseWatcher::is_over_region(void) const;
inline bool MouseWatcher::is_over_region(float x, float y) const;
inline bool MouseWatcher::is_over_region(LPoint2f const &pos) const;

403 15 get_over_region 4 516 29 MouseWatcher::get_over_region 0 3 150 151 152 1187
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
////////////////////////////////////////////////////////////////////
229
inline MouseWatcherRegion *MouseWatcher::get_over_region(void) const;
inline MouseWatcherRegion *MouseWatcher::get_over_region(float x, float y) const;
MouseWatcherRegion *MouseWatcher::get_over_region(LPoint2f const &pos) const;

404 14 is_button_down 4 516 28 MouseWatcher::is_button_down 0 1 153 328
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_button_down
//       Access: Published
//  Description: Returns true if the indicated button is currently
//               being held down, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool MouseWatcher::is_button_down(ButtonHandle button) const;

405 23 set_button_down_pattern 4 516 37 MouseWatcher::set_button_down_pattern 0 1 154 762
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
87
inline void MouseWatcher::set_button_down_pattern(basic_string< char > const &pattern);

406 23 get_button_down_pattern 4 516 37 MouseWatcher::get_button_down_pattern 0 1 155 394
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &MouseWatcher::get_button_down_pattern(void) const;

407 21 set_button_up_pattern 4 516 35 MouseWatcher::set_button_up_pattern 0 1 156 400
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
85
inline void MouseWatcher::set_button_up_pattern(basic_string< char > const &pattern);

408 21 get_button_up_pattern 4 516 35 MouseWatcher::get_button_up_pattern 0 1 157 391
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > const &MouseWatcher::get_button_up_pattern(void) const;

409 25 set_button_repeat_pattern 4 516 39 MouseWatcher::set_button_repeat_pattern 0 1 158 827
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_repeat_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  This is
//               a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
89
inline void MouseWatcher::set_button_repeat_pattern(basic_string< char > const &pattern);

410 25 get_button_repeat_pattern 4 516 39 MouseWatcher::get_button_repeat_pattern 0 1 159 471
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_repeat_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  See
//               set_button_repeat_pattern().
////////////////////////////////////////////////////////////////////
87
inline basic_string< char > const &MouseWatcher::get_button_repeat_pattern(void) const;

411 17 set_enter_pattern 4 516 31 MouseWatcher::set_enter_pattern 0 1 160 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
81
inline void MouseWatcher::set_enter_pattern(basic_string< char > const &pattern);

412 17 get_enter_pattern 4 516 31 MouseWatcher::get_enter_pattern 0 1 161 559
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &MouseWatcher::get_enter_pattern(void) const;

413 17 set_leave_pattern 4 516 31 MouseWatcher::set_leave_pattern 0 1 162 585
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
81
inline void MouseWatcher::set_leave_pattern(basic_string< char > const &pattern);

414 17 get_leave_pattern 4 516 31 MouseWatcher::get_leave_pattern 0 1 163 560
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &MouseWatcher::get_leave_pattern(void) const;

415 18 set_within_pattern 4 516 32 MouseWatcher::set_within_pattern 0 1 164 591
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
82
inline void MouseWatcher::set_within_pattern(basic_string< char > const &pattern);

416 18 get_within_pattern 4 516 32 MouseWatcher::get_within_pattern 0 1 165 565
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > const &MouseWatcher::get_within_pattern(void) const;

417 19 set_without_pattern 4 516 33 MouseWatcher::set_without_pattern 0 1 166 594
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
83
inline void MouseWatcher::set_without_pattern(basic_string< char > const &pattern);

418 19 get_without_pattern 4 516 33 MouseWatcher::get_without_pattern 0 1 167 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
////////////////////////////////////////////////////////////////////
81
inline basic_string< char > const &MouseWatcher::get_without_pattern(void) const;

419 12 set_geometry 4 516 26 MouseWatcher::set_geometry 0 1 168 553
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcher::set_geometry(PandaNode *node);

420 12 has_geometry 4 516 26 MouseWatcher::has_geometry 0 1 169 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
////////////////////////////////////////////////////////////////////
51
inline bool MouseWatcher::has_geometry(void) const;

421 12 get_geometry 4 516 26 MouseWatcher::get_geometry 0 1 170 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
////////////////////////////////////////////////////////////////////
57
inline PandaNode *MouseWatcher::get_geometry(void) const;

422 14 clear_geometry 4 516 28 MouseWatcher::clear_geometry 0 1 171 308
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
////////////////////////////////////////////////////////////////////
47
inline void MouseWatcher::clear_geometry(void);

423 17 set_extra_handler 4 516 31 MouseWatcher::set_extra_handler 0 1 172 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
62
inline void MouseWatcher::set_extra_handler(EventHandler *eh);

424 17 get_extra_handler 4 516 31 MouseWatcher::get_extra_handler 0 1 173 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
65
inline EventHandler *MouseWatcher::get_extra_handler(void) const;

425 20 set_modifier_buttons 4 516 34 MouseWatcher::set_modifier_buttons 0 1 174 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
////////////////////////////////////////////////////////////////////
76
inline void MouseWatcher::set_modifier_buttons(ModifierButtons const &mods);

426 20 get_modifier_buttons 4 516 34 MouseWatcher::get_modifier_buttons 0 1 175 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
////////////////////////////////////////////////////////////////////
70
inline ModifierButtons MouseWatcher::get_modifier_buttons(void) const;

427 18 set_display_region 4 516 32 MouseWatcher::set_display_region 0 1 176 743
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
////////////////////////////////////////////////////////////////////
64
inline void MouseWatcher::set_display_region(DisplayRegion *dr);

428 20 clear_display_region 4 516 34 MouseWatcher::clear_display_region 0 1 177 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
////////////////////////////////////////////////////////////////////
53
inline void MouseWatcher::clear_display_region(void);

429 18 get_display_region 4 516 32 MouseWatcher::get_display_region 0 1 178 386
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
////////////////////////////////////////////////////////////////////
67
inline DisplayRegion *MouseWatcher::get_display_region(void) const;

430 18 has_display_region 4 516 32 MouseWatcher::has_display_region 0 1 179 525
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcher::has_display_region(void) const;

431 9 add_group 4 516 23 MouseWatcher::add_group 0 1 180 841
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherGroup, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
////////////////////////////////////////////////////////////////////
55
bool MouseWatcher::add_group(MouseWatcherGroup *group);

432 12 remove_group 4 516 26 MouseWatcher::remove_group 0 1 181 474
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
////////////////////////////////////////////////////////////////////
58
bool MouseWatcher::remove_group(MouseWatcherGroup *group);

433 13 replace_group 4 516 27 MouseWatcher::replace_group 0 1 182 665
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group from the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
////////////////////////////////////////////////////////////////////
93
bool MouseWatcher::replace_group(MouseWatcherGroup *old_group, MouseWatcherGroup *new_group);

434 14 get_num_groups 4 516 28 MouseWatcher::get_num_groups 0 1 183 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
////////////////////////////////////////////////////////////////////
45
int MouseWatcher::get_num_groups(void) const;

435 9 get_group 4 516 23 MouseWatcher::get_group 0 1 184 304
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
////////////////////////////////////////////////////////////////////
56
MouseWatcherGroup *MouseWatcher::get_group(int n) const;

436 22 set_inactivity_timeout 4 516 36 MouseWatcher::set_inactivity_timeout 0 1 185 822
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout
//       Access: Published
//  Description: Sets an inactivity timeout on the mouse activity.
//               When this timeout (in seconds) is exceeded with no
//               keyboard or mouse activity, all currently-held
//               buttons are automatically released.  This is intended
//               to help protect against people who inadvertently (or
//               intentionally) leave a keyboard key stuck down and
//               then wander away from the keyboard.
//
//               Also, when this timeout expires, the event specified
//               by set_inactivity_timeout_event() will be generated.
////////////////////////////////////////////////////////////////////
65
inline void MouseWatcher::set_inactivity_timeout(double timeout);

437 22 has_inactivity_timeout 4 516 36 MouseWatcher::has_inactivity_timeout 0 1 186 321
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_inactivity_timeout
//       Access: Published
//  Description: Returns true if an inactivity timeout has been set,
//               false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcher::has_inactivity_timeout(void) const;

438 22 get_inactivity_timeout 4 516 36 MouseWatcher::get_inactivity_timeout 0 1 187 390
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout
//       Access: Published
//  Description: Returns the inactivity timeout that has been set.
//               It is an error to call this if
//               has_inactivity_timeout() returns false.
////////////////////////////////////////////////////////////////////
63
inline double MouseWatcher::get_inactivity_timeout(void) const;

439 24 clear_inactivity_timeout 4 516 38 MouseWatcher::clear_inactivity_timeout 0 1 188 399
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_inactivity_timeout
//       Access: Published
//  Description: Removes the inactivity timeout and restores the
//               MouseWatcher to its default behavior of allowing a
//               key to be held indefinitely.
////////////////////////////////////////////////////////////////////
57
inline void MouseWatcher::clear_inactivity_timeout(void);

440 28 set_inactivity_timeout_event 4 516 42 MouseWatcher::set_inactivity_timeout_event 0 1 189 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout_event
//       Access: Published
//  Description: Specifies the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
////////////////////////////////////////////////////////////////////
90
inline void MouseWatcher::set_inactivity_timeout_event(basic_string< char > const &event);

441 28 get_inactivity_timeout_event 4 516 42 MouseWatcher::get_inactivity_timeout_event 0 1 190 399
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout_event
//       Access: Published
//  Description: Returns the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
////////////////////////////////////////////////////////////////////
90
inline basic_string< char > const &MouseWatcher::get_inactivity_timeout_event(void) const;

442 13 get_trail_log 4 516 27 MouseWatcher::get_trail_log 0 1 191 713
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_log
//       Access: Published
//  Description: Obtain the mouse trail log.  This is a PointerEventList.
//               Does not make a copy, therefore, this PointerEventList
//               will be updated each time process_events gets called.
//
//               To use trail logging, you need to enable the
//               generation of pointer events in the
//               GraphicsWindowInputDevice and set the trail log
//               duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////
82
inline ConstPointerTo< PointerEventList > MouseWatcher::get_trail_log(void) const;

443 16 num_trail_recent 4 516 30 MouseWatcher::num_trail_recent 0 1 192 440
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::num_trail_recent
//       Access: Published
//  Description: This counter indicates how many events were added
//               to the trail log this frame.  The trail log is
//               updated once per frame, during the process_events
//               operation.  
////////////////////////////////////////////////////////////////////
54
inline int MouseWatcher::num_trail_recent(void) const;

444 22 set_trail_log_duration 4 516 36 MouseWatcher::set_trail_log_duration 0 1 193 468
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_trail_log_duration
//       Access: Published
//  Description: If the duration is nonzero, causes the MouseWatcher
//               to log the mouse's trail.  Events older than the
//               specified duration are discarded.  If the duration is
//               zero, logging is disabled.
////////////////////////////////////////////////////////////////////
59
void MouseWatcher::set_trail_log_duration(double duration);

445 14 get_trail_node 4 516 28 MouseWatcher::get_trail_node 0 1 194 999
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_node
//       Access: Published
//  Description: Returns a GeomNode that represents the mouse trail.
//               The intent is that you should reparent this GeomNode
//               to Render2D, and then forget about it.  The
//               MouseWatcher will continually update the trail node.
//               There is only one trail node, it does not create a
//               new one each time you call get_trail_node.
//
//               This is not a particularly beautiful way to render
//               a mouse trail.  It is intended more for debugging
//               purposes than for finished applications.  Even so,
//               It is suggested that you might want to apply a line
//               thickness and antialias mode to the line --- doing
//               so makes it look a lot better.
////////////////////////////////////////////////////////////////////
57
PointerTo< GeomNode > MouseWatcher::get_trail_node(void);

446 16 clear_trail_node 4 516 30 MouseWatcher::clear_trail_node 0 1 195 533
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_node
//       Access: Published
//  Description: If you have previously fetched the trail node
//               using get_trail_node, then the MouseWatcher is
//               continually updating the trail node every frame.
//               Using clear_trail_node causes the MouseWatcher to
//               forget the trail node and stop updating it.
////////////////////////////////////////////////////////////////////
42
void MouseWatcher::clear_trail_node(void);

447 15 clear_trail_log 4 516 29 MouseWatcher::clear_trail_log 0 1 196 349
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_log
//       Access: Published
//  Description: Clears the mouse trail log.  This does not prevent
//               further accumulation of the log given future events.
////////////////////////////////////////////////////////////////////
48
inline void MouseWatcher::clear_trail_log(void);

448 13 note_activity 4 516 27 MouseWatcher::note_activity 0 1 197 951
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::note_activity
//       Access: Published
//  Description: Can be used in conjunction with the inactivity
//               timeout to inform the MouseWatcher that the user has
//               just performed some action which proves he/she is
//               present.  It may be necessary to call this for
//               external events, such as joystick action, that the
//               MouseWatcher might otherwise not know about.  This
//               will reset the current inactivity timer.  When the
//               inactivity timer reaches the length of time specified
//               by set_inactivity_timeout(), with no keyboard or
//               mouse activity and no calls to note_activity(), then
//               any buttons held will be automatically released.
////////////////////////////////////////////////////////////////////
39
void MouseWatcher::note_activity(void);

449 14 get_class_type 4 516 28 MouseWatcher::get_class_type 0 1 198 0
53
static TypeHandle MouseWatcher::get_class_type(void);

450 22 ~MouseWatcherParameter 4 517 45 MouseWatcherParameter::~MouseWatcherParameter 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline MouseWatcherParameter::~MouseWatcherParameter(void);

451 10 has_button 4 517 33 MouseWatcherParameter::has_button 0 1 203 341
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::has_button(void) const;

452 10 get_button 4 517 33 MouseWatcherParameter::get_button 0 1 204 406
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
66
inline ButtonHandle MouseWatcherParameter::get_button(void) const;

453 12 is_keyrepeat 4 517 35 MouseWatcherParameter::is_keyrepeat 0 1 205 381
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_keyrepeat
//       Access: Published
//  Description: Returns true if the button-down even was generated
//               due to keyrepeat, or false if it was an original
//               button down.
////////////////////////////////////////////////////////////////////
60
inline bool MouseWatcherParameter::is_keyrepeat(void) const;

454 11 has_keycode 4 517 34 MouseWatcherParameter::has_keycode 0 1 206 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool MouseWatcherParameter::has_keycode(void) const;

455 11 get_keycode 4 517 34 MouseWatcherParameter::get_keycode 0 1 207 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
////////////////////////////////////////////////////////////////////
58
inline int MouseWatcherParameter::get_keycode(void) const;

456 13 has_candidate 4 517 36 MouseWatcherParameter::has_candidate 0 1 208 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcherParameter::has_candidate(void) const;

457 28 get_candidate_string_encoded 4 517 51 MouseWatcherParameter::get_candidate_string_encoded 0 2 209 210 832
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////
211
inline basic_string< char > MouseWatcherParameter::get_candidate_string_encoded(void) const;
inline basic_string< char > MouseWatcherParameter::get_candidate_string_encoded(TextEncoder::Encoding encoding) const;

458 19 get_highlight_start 4 517 42 MouseWatcherParameter::get_highlight_start 0 1 211 323
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
////////////////////////////////////////////////////////////////////
75
inline unsigned int MouseWatcherParameter::get_highlight_start(void) const;

459 17 get_highlight_end 4 517 40 MouseWatcherParameter::get_highlight_end 0 1 212 334
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
////////////////////////////////////////////////////////////////////
73
inline unsigned int MouseWatcherParameter::get_highlight_end(void) const;

460 14 get_cursor_pos 4 517 37 MouseWatcherParameter::get_cursor_pos 0 1 213 329
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
////////////////////////////////////////////////////////////////////
70
inline unsigned int MouseWatcherParameter::get_cursor_pos(void) const;

461 20 get_modifier_buttons 4 517 43 MouseWatcherParameter::get_modifier_buttons 0 1 214 352
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
////////////////////////////////////////////////////////////////////
86
inline ModifierButtons const &MouseWatcherParameter::get_modifier_buttons(void) const;

462 9 has_mouse 4 517 32 MouseWatcherParameter::has_mouse 0 1 215 330
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherParameter::has_mouse(void) const;

463 9 get_mouse 4 517 32 MouseWatcherParameter::get_mouse 0 1 216 425
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
////////////////////////////////////////////////////////////////////
68
inline LPoint2f const &MouseWatcherParameter::get_mouse(void) const;

464 10 is_outside 4 517 33 MouseWatcherParameter::is_outside 0 1 217 415
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::is_outside(void) const;

465 6 output 4 517 29 MouseWatcherParameter::output 0 1 218 229
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void MouseWatcherParameter::output(ostream &out) const;

466 9 Trackball 4 518 20 Trackball::Trackball 0 1 219 218
////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
Trackball::Trackball(basic_string< char > const &name);

467 5 reset 4 518 16 Trackball::reset 0 1 220 257
////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
////////////////////////////////////////////////////////////////////
28
void Trackball::reset(void);

468 17 get_forward_scale 4 518 28 Trackball::get_forward_scale 0 1 221 335
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
////////////////////////////////////////////////////////////////////
47
float Trackball::get_forward_scale(void) const;

469 17 set_forward_scale 4 518 28 Trackball::set_forward_scale 0 1 222 435
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
////////////////////////////////////////////////////////////////////
50
void Trackball::set_forward_scale(float fwdscale);

470 7 get_pos 4 518 18 Trackball::get_pos 0 1 223 291
/// **** Translation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
////////////////////////////////////////////////////////////////////
47
LPoint3f const &Trackball::get_pos(void) const;

471 5 get_x 4 518 16 Trackball::get_x 0 1 224 0
35
float Trackball::get_x(void) const;

472 5 get_y 4 518 16 Trackball::get_y 0 1 225 0
35
float Trackball::get_y(void) const;

473 5 get_z 4 518 16 Trackball::get_z 0 1 226 0
35
float Trackball::get_z(void) const;

474 7 set_pos 4 518 18 Trackball::set_pos 0 2 227 228 269
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
////////////////////////////////////////////////////////////////////
99
void Trackball::set_pos(LVecBase3f const &vec);
void Trackball::set_pos(float x, float y, float z);

475 5 set_x 4 518 16 Trackball::set_x 0 1 229 0
31
void Trackball::set_x(float x);

476 5 set_y 4 518 16 Trackball::set_y 0 1 230 0
31
void Trackball::set_y(float y);

477 5 set_z 4 518 16 Trackball::set_z 0 1 231 0
31
void Trackball::set_z(float z);

478 7 get_hpr 4 518 18 Trackball::get_hpr 0 1 232 277
/// **** Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
////////////////////////////////////////////////////////////////////
42
LVecBase3f Trackball::get_hpr(void) const;

479 5 get_h 4 518 16 Trackball::get_h 0 1 233 0
35
float Trackball::get_h(void) const;

480 5 get_p 4 518 16 Trackball::get_p 0 1 234 0
35
float Trackball::get_p(void) const;

481 5 get_r 4 518 16 Trackball::get_r 0 1 235 0
35
float Trackball::get_r(void) const;

482 7 set_hpr 4 518 18 Trackball::set_hpr 0 2 236 237 255
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
////////////////////////////////////////////////////////////////////
99
void Trackball::set_hpr(LVecBase3f const &hpr);
void Trackball::set_hpr(float h, float p, float r);

483 5 set_h 4 518 16 Trackball::set_h 0 1 238 0
31
void Trackball::set_h(float h);

484 5 set_p 4 518 16 Trackball::set_p 0 1 239 0
31
void Trackball::set_p(float p);

485 5 set_r 4 518 16 Trackball::set_r 0 1 240 0
31
void Trackball::set_r(float r);

486 17 reset_origin_here 4 518 28 Trackball::reset_origin_here 0 1 241 430
/// **** Origin of Rotation ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
////////////////////////////////////////////////////////////////////
40
void Trackball::reset_origin_here(void);

487 11 move_origin 4 518 22 Trackball::move_origin 0 1 242 271
////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
////////////////////////////////////////////////////////////////////
55
void Trackball::move_origin(float x, float y, float z);

488 10 get_origin 4 518 21 Trackball::get_origin 0 1 243 260
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
////////////////////////////////////////////////////////////////////
43
LPoint3f Trackball::get_origin(void) const;

489 10 set_origin 4 518 21 Trackball::set_origin 0 1 244 258
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
////////////////////////////////////////////////////////////////////
53
void Trackball::set_origin(LVecBase3f const &origin);

490 10 set_invert 4 518 21 Trackball::set_invert 0 1 245 423
/// **** Misc ****

////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
38
void Trackball::set_invert(bool flag);

491 10 get_invert 4 518 21 Trackball::get_invert 0 1 246 406
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
39
bool Trackball::get_invert(void) const;

492 10 set_rel_to 4 518 21 Trackball::set_rel_to 0 1 247 561
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
////////////////////////////////////////////////////////////////////
51
void Trackball::set_rel_to(NodePath const &rel_to);

493 10 get_rel_to 4 518 21 Trackball::get_rel_to 0 1 248 327
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
////////////////////////////////////////////////////////////////////
50
NodePath const &Trackball::get_rel_to(void) const;

494 21 set_coordinate_system 4 518 32 Trackball::set_coordinate_system 0 1 249 524
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
////////////////////////////////////////////////////////////////////
59
void Trackball::set_coordinate_system(CoordinateSystem cs);

495 21 get_coordinate_system 4 518 32 Trackball::get_coordinate_system 0 1 250 325
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
////////////////////////////////////////////////////////////////////
62
CoordinateSystem Trackball::get_coordinate_system(void) const;

496 7 set_mat 4 518 18 Trackball::set_mat 0 1 251 368
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
////////////////////////////////////////////////////////////////////
46
void Trackball::set_mat(LMatrix4f const &mat);

497 7 get_mat 4 518 18 Trackball::get_mat 0 1 252 292
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
////////////////////////////////////////////////////////////////////
48
LMatrix4f const &Trackball::get_mat(void) const;

498 13 get_trans_mat 4 518 24 Trackball::get_trans_mat 0 1 253 387
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
////////////////////////////////////////////////////////////////////
54
LMatrix4f const &Trackball::get_trans_mat(void) const;

499 14 get_class_type 4 518 25 Trackball::get_class_type 0 1 254 0
50
static TypeHandle Trackball::get_class_type(void);

500 12 Transform2SG 4 519 26 Transform2SG::Transform2SG 0 1 255 221
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
Transform2SG::Transform2SG(basic_string< char > const &name);

501 8 set_node 4 519 22 Transform2SG::set_node 0 1 256 262
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
////////////////////////////////////////////////////////////////////
45
void Transform2SG::set_node(PandaNode *node);

502 8 get_node 4 519 22 Transform2SG::get_node 0 1 257 324
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
////////////////////////////////////////////////////////////////////
46
PandaNode *Transform2SG::get_node(void) const;

503 14 get_class_type 4 519 28 Transform2SG::get_class_type 0 1 258 0
53
static TypeHandle Transform2SG::get_class_type(void);

504 13 ~Transform2SG 4 519 27 Transform2SG::~Transform2SG 0 0 0
34
Transform2SG::~Transform2SG(void);

258
1 14 Dtool_yiw5k4xy 7 3 521 0 14 Dtool_yiw5k4xy 222 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 520  
2 14 Dtool_yiw5gXgW 4 4 522 0 14 Dtool_yiw5gXgW 1356 // Filename: buttonThrower.I
// Created by:  drose (26Dec03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  17 button_down_event 1 520  
3 14 Dtool_yiw5arVA 6 5 520 0 14 Dtool_yiw5arVA 353 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
4 14 Dtool_yiw5I2Hn 4 6 522 0 14 Dtool_yiw5I2Hn 391 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  15 button_up_event 1 520  
5 14 Dtool_yiw5z4X5 6 7 520 0 14 Dtool_yiw5z4X5 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
6 14 Dtool_yiw5rSEu 4 8 522 0 14 Dtool_yiw5rSEu 875 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_repeat_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) repeatedly while a key or button is held down.
//               Unlike the specific events that are unique to each
//               key, this same event name is used for *all* button
//               events, and the name of the button pressed (possibly
//               with modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  19 button_repeat_event 1 520  
7 14 Dtool_yiw5zthZ 6 9 520 0 14 Dtool_yiw5zthZ 359 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_repeat_event
//       Access: Published
//  Description: Returns the button_repeat_event that has been set on
//               this ButtonThrower.  See set_button_repeat_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
8 14 Dtool_yiw5_Oot 4 10 522 0 14 Dtool_yiw5_Oot 1304 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               If a key is held down, keyrepeat will cause the same
//               keystroke event to be generated repeatedly.  This is
//               different from the corresponding down event, which
//               will only be generated once, followed by a number of
//               button repeat events.
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  15 keystroke_event 1 520  
9 14 Dtool_yiw51s5_ 6 11 520 0 14 Dtool_yiw51s5_ 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
10 14 Dtool_yiw5zQU_ 4 12 522 0 14 Dtool_yiw5zQU_ 1252 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  15 candidate_event 1 520  
11 14 Dtool_yiw5tajR 6 13 520 0 14 Dtool_yiw5tajR 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
12 14 Dtool_yiw5n2SG 4 14 522 0 14 Dtool_yiw5n2SG 340 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  10 move_event 1 520  
13 14 Dtool_yiw5sPhu 6 15 520 0 14 Dtool_yiw5sPhu 332 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
14 14 Dtool_yiw58tb8 4 16 522 0 14 Dtool_yiw58tb8 505 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  6 prefix 1 520  
15 14 Dtool_yiw53m_a 6 17 520 0 14 Dtool_yiw53m_a 320 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
16 14 Dtool_yiw5mYQj 4 18 522 0 14 Dtool_yiw5mYQj 604 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  13 specific_flag 1 525  
17 14 Dtool_yiw5pjBE 6 19 525 0 14 Dtool_yiw5pjBE 351 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
18 14 Dtool_yiw5Y3F7 4 20 522 0 14 Dtool_yiw5Y3F7 720 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  9 time_flag 1 525  
19 14 Dtool_yiw5WTVj 6 21 525 0 14 Dtool_yiw5WTVj 346 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
20 14 Dtool_yiw5HaR_ 4 22 522 0 14 Dtool_yiw5HaR_ 382 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  3 obj 1 526  
21 14 Dtool_yiw5bj99 6 23 529 0 14 Dtool_yiw5bj99 405 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
22 14 Dtool_yiw5amFl 7 24 530 0 14 Dtool_yiw5amFl 386 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 2 4 this 3 523  1 n 1 529  
23 14 Dtool_yiw5GlsX 6 25 531 0 14 Dtool_yiw5GlsX 808 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
24 14 Dtool_yiw57l_D 4 26 522 0 14 Dtool_yiw57l_D 1054 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  4 mods 1 531  
25 14 Dtool_yiw5uTqR 4 27 522 0 14 Dtool_yiw5uTqR 597 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
//////////////////////////////////////////////////////////////////// 2 4 this 3 521  4 flag 1 525  
26 14 Dtool_yiw55I8a 6 28 525 0 14 Dtool_yiw55I8a 446 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
27 14 Dtool_yiw5Ji9T 6 29 525 0 14 Dtool_yiw5Ji9T 1056 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 521  4 mods 1 531  6 button 1 534  
28 14 Dtool_yiw5psxI 6 30 525 0 14 Dtool_yiw5psxI 513 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 521  4 mods 1 531  6 button 1 534  
29 14 Dtool_yiw5UvSd 6 31 525 0 14 Dtool_yiw5UvSd 644 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
//////////////////////////////////////////////////////////////////// 2 4 this 3 523  6 button 1 534  
30 14 Dtool_yiw5cX_g 6 31 525 0 14 Dtool_yiw5cX_g 413 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
//////////////////////////////////////////////////////////////////// 3 4 this 3 523  4 mods 1 531  6 button 1 534  
31 14 Dtool_yiw5MSSv 4 32 522 0 14 Dtool_yiw5MSSv 342 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
//////////////////////////////////////////////////////////////////// 1 4 this 3 521  
32 14 Dtool_yiw5mOhU 7 33 538 0 14 Dtool_yiw5mOhU 0 0 
33 14 Dtool_yiw5slm1 4 35 522 0 14 Dtool_yiw5slm1 589 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
//////////////////////////////////////////////////////////////////// 3 4 this 3 539  6 button 1 534  7 is_down 1 525  
34 14 Dtool_yiw5zD5_ 4 36 522 0 14 Dtool_yiw5zD5_ 340 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
//////////////////////////////////////////////////////////////////// 2 4 this 3 539  6 button 1 534  
35 14 Dtool_yiw5P5gT 4 37 522 0 14 Dtool_yiw5P5gT 332 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
//////////////////////////////////////////////////////////////////// 1 4 this 3 539  
36 14 Dtool_yiw523QH 7 38 538 0 14 Dtool_yiw523QH 0 0 
37 14 Dtool_yiw5qXDJ 7 40 540 0 14 Dtool_yiw5qXDJ 226 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 520  
38 14 Dtool_yiw5Iz9n 7 40 540 0 14 Dtool_yiw5Iz9n 226 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
39 14 Dtool_yiw5KTpq 4 41 522 0 14 Dtool_yiw5KTpq 886 // Filename: driveInterface.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  5 speed 1 541  
40 14 Dtool_yiw5fKJb 6 42 541 0 14 Dtool_yiw5fKJb 399 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
41 14 Dtool_yiw5924G 4 43 522 0 14 Dtool_yiw5924G 399 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  5 speed 1 541  
42 14 Dtool_yiw5sNX3 6 44 541 0 14 Dtool_yiw5sNX3 402 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
43 14 Dtool_yiw5MuQt 4 45 522 0 14 Dtool_yiw5MuQt 413 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  5 speed 1 541  
44 14 Dtool_yiw582Ba 6 46 541 0 14 Dtool_yiw582Ba 416 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
45 14 Dtool_yiw5_K6o 4 47 522 0 14 Dtool_yiw5_K6o 603 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  4 zone 1 541  
46 14 Dtool_yiw5WqfE 6 48 541 0 14 Dtool_yiw5WqfE 606 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
47 14 Dtool_yiw5yXFf 4 49 522 0 14 Dtool_yiw5yXFf 606 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  4 zone 1 541  
48 14 Dtool_yiw5h_JJ 6 50 541 0 14 Dtool_yiw5h_JJ 609 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
49 14 Dtool_yiw5aQ8o 4 51 522 0 14 Dtool_yiw5aQ8o 431 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  12 ramp_up_time 1 541  
50 14 Dtool_yiw5q_RD 6 52 541 0 14 Dtool_yiw5q_RD 451 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
51 14 Dtool_yiw5kWik 4 53 522 0 14 Dtool_yiw5kWik 412 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  14 ramp_down_time 1 541  
52 14 Dtool_yiw5i7QW 6 54 541 0 14 Dtool_yiw5i7QW 415 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
53 14 Dtool_yiw561dH 4 55 522 0 14 Dtool_yiw561dH 417 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  12 ramp_up_time 1 541  
54 14 Dtool_yiw5NIM5 6 56 541 0 14 Dtool_yiw5NIM5 420 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
55 14 Dtool_yiw52qn5 4 57 522 0 14 Dtool_yiw52qn5 416 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  14 ramp_down_time 1 541  
56 14 Dtool_yiw5ACXI 6 58 541 0 14 Dtool_yiw5ACXI 419 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
57 14 Dtool_yiw5v7hx 6 59 541 0 14 Dtool_yiw5v7hx 278 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
58 14 Dtool_yiw5QzD6 6 60 541 0 14 Dtool_yiw5QzD6 286 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
59 14 Dtool_yiw5KbcV 4 61 522 0 14 Dtool_yiw5KbcV 332 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
60 14 Dtool_yiw5dmzH 6 62 544 0 14 Dtool_yiw5dmzH 253 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
61 14 Dtool_yiw5BRV2 6 63 541 0 14 Dtool_yiw5BRV2 0 1 4 this 3 542  
62 14 Dtool_yiw5Rvo2 6 64 541 0 14 Dtool_yiw5Rvo2 0 1 4 this 3 542  
63 14 Dtool_yiw5hN82 6 65 541 0 14 Dtool_yiw5hN82 0 1 4 this 3 542  
64 14 Dtool_yiw5Amwj 4 66 522 0 14 Dtool_yiw5Amwj 259 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  3 vec 1 547  
65 14 Dtool_yiw5jVcP 4 66 522 0 14 Dtool_yiw5jVcP 0 4 4 this 3 540  1 x 1 541  1 y 1 541  1 z 1 541  
66 14 Dtool_yiw5pTmn 4 67 522 0 14 Dtool_yiw5pTmn 0 2 4 this 3 540  1 x 1 541  
67 14 Dtool_yiw5Zx6n 4 68 522 0 14 Dtool_yiw5Zx6n 0 2 4 this 3 540  1 y 1 541  
68 14 Dtool_yiw5JXNo 4 69 522 0 14 Dtool_yiw5JXNo 0 2 4 this 3 540  1 z 1 541  
69 14 Dtool_yiw5Y8sW 6 70 547 0 14 Dtool_yiw5Y8sW 256 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
70 14 Dtool_yiw5Btcx 6 71 541 0 14 Dtool_yiw5Btcx 0 1 4 this 3 542  
71 14 Dtool_yiw5Bf5z 6 72 541 0 14 Dtool_yiw5Bf5z 0 1 4 this 3 542  
72 14 Dtool_yiw5hbg0 6 73 541 0 14 Dtool_yiw5hbg0 0 1 4 this 3 542  
73 14 Dtool_yiw5Fcoy 4 74 522 0 14 Dtool_yiw5Fcoy 262 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  3 hpr 1 547  
74 14 Dtool_yiw54DVe 4 74 522 0 14 Dtool_yiw54DVe 0 4 4 this 3 540  1 h 1 541  1 p 1 541  1 r 1 541  
75 14 Dtool_yiw5p3ui 4 75 522 0 14 Dtool_yiw5p3ui 0 2 4 this 3 540  1 h 1 541  
76 14 Dtool_yiw5pBKl 4 76 522 0 14 Dtool_yiw5pBKl 0 2 4 this 3 540  1 p 1 541  
77 14 Dtool_yiw5JFxl 4 77 522 0 14 Dtool_yiw5JFxl 0 2 4 this 3 540  1 r 1 541  
78 14 Dtool_yiw5I1Ry 4 78 522 0 14 Dtool_yiw5I1Ry 322 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  10 force_roll 1 541  
79 14 Dtool_yiw5sn9J 4 79 522 0 14 Dtool_yiw5sn9J 736 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  12 ignore_mouse 1 525  
80 14 Dtool_yiw5HO_x 6 80 525 0 14 Dtool_yiw5HO_x 326 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
81 14 Dtool_yiw5pmA_ 4 81 522 0 14 Dtool_yiw5pmA_ 406 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  11 force_mouse 1 525  
82 14 Dtool_yiw5lWhe 6 82 525 0 14 Dtool_yiw5lWhe 323 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
83 14 Dtool_yiw5xaMx 4 83 522 0 14 Dtool_yiw5xaMx 649 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  15 stop_this_frame 1 525  
84 14 Dtool_yiw5jdTo 6 84 525 0 14 Dtool_yiw5jdTo 336 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
85 14 Dtool_yiw5TToo 4 85 522 0 14 Dtool_yiw5TToo 276 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 540  3 mat 1 550  
86 14 Dtool_yiw5oJtK 6 86 550 0 14 Dtool_yiw5oJtK 253 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
87 14 Dtool_yiw5Q2Wr 4 87 522 0 14 Dtool_yiw5Q2Wr 558 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 540  
88 14 Dtool_yiw50qRB 7 88 538 0 14 Dtool_yiw50qRB 0 0 
89 14 Dtool_yiw5czRD 7 90 553 0 14 Dtool_yiw5czRD 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 520  
90 14 Dtool_yiw5VI_1 6 91 541 0 14 Dtool_yiw5VI_1 869 // Filename: mouseSubregion.I
// Created by:  drose (13May05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 554  
91 14 Dtool_yiw5VfJj 6 92 541 0 14 Dtool_yiw5VfJj 381 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 554  
92 14 Dtool_yiw5aA1U 6 93 541 0 14 Dtool_yiw5aA1U 384 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 554  
93 14 Dtool_yiw5hR06 6 94 541 0 14 Dtool_yiw5hR06 377 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 554  
94 14 Dtool_yiw5lkoB 4 95 522 0 14 Dtool_yiw5lkoB 583 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
//////////////////////////////////////////////////////////////////// 5 4 this 3 553  1 l 1 541  1 r 1 541  1 b 1 541  1 t 1 541  
95 14 Dtool_yiw5yuXc 7 96 538 0 14 Dtool_yiw5yuXc 0 0 
96 14 Dtool_yiw5XN0b 7 104 559 369 14 Dtool_yiw5XN0b 230 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 520  5 frame 1 556  
97 14 Dtool_yiw5VKEG 7 104 559 369 14 Dtool_yiw5VKEG 724 // Filename: mouseWatcherRegion.I
// Created by:  drose (13Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 name 1 520  4 left 1 541  5 right 1 541  6 bottom 1 541  3 top 1 541  
98 14 Dtool_yiw5vRlo 4 105 522 0 14 Dtool_yiw5vRlo 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 559  5 frame 1 556  
99 14 Dtool_yiw5TI04 4 105 522 0 14 Dtool_yiw5TI04 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 559  4 left 1 541  5 right 1 541  6 bottom 1 541  3 top 1 541  
100 14 Dtool_yiw5C2td 6 106 556 0 14 Dtool_yiw5C2td 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 560  
101 14 Dtool_yiw5xwAe 6 107 541 0 14 Dtool_yiw5xwAe 271 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 560  
102 14 Dtool_yiw5uUjJ 4 108 522 0 14 Dtool_yiw5uUjJ 672 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 559  4 sort 1 529  
103 14 Dtool_yiw5wQ_6 6 109 529 0 14 Dtool_yiw5wQ_6 310 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 560  
104 14 Dtool_yiw5H96x 4 110 522 0 14 Dtool_yiw5H96x 515 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 559  6 active 1 525  
105 14 Dtool_yiw5BoGH 6 111 525 0 14 Dtool_yiw5BoGH 310 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 560  
106 14 Dtool_yiw5_wOd 4 112 522 0 14 Dtool_yiw5_wOd 598 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 559  8 keyboard 1 525  
107 14 Dtool_yiw52JK8 6 113 525 0 14 Dtool_yiw52JK8 336 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
//////////////////////////////////////////////////////////////////// 1 4 this 3 560  
108 14 Dtool_yiw5TWvO 4 115 522 0 14 Dtool_yiw5TWvO 725 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 559  14 suppress_flags 1 529  
109 14 Dtool_yiw5yKjf 6 116 529 0 14 Dtool_yiw5yKjf 317 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
//////////////////////////////////////////////////////////////////// 1 4 this 3 560  
110 14 Dtool_yiw5kvVL 4 117 522 0 14 Dtool_yiw5kvVL 225 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 560  3 out 1 562  
111 14 Dtool_yiw5ijOS 4 118 522 0 14 Dtool_yiw5ijOS 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 560  3 out 1 562  12 indent_level 1 529  
112 14 Dtool_yiw51qaj 4 118 522 0 14 Dtool_yiw51qaj 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 560  3 out 1 562  
113 14 Dtool_yiw5et1g 7 119 538 0 14 Dtool_yiw5et1g 0 0 
114 14 Dtool_yiw5S1_F 7 99 564 0 14 Dtool_yiw5S1_F 0 1 4 this 3 559  
115 14 Dtool_yiw576md 7 100 559 369 14 Dtool_yiw576md 0 1 4 this 3 564  
116 14 Dtool_yiw5uEXk 6 102 565 0 14 Dtool_yiw5uEXk 0 1 4 this 3 559  
117 14 Dtool_yiw57Z9h 7 103 559 369 14 Dtool_yiw57Z9h 0 1 4 this 3 565  
118 14 Dtool_yiw5xUMA 4 125 522 0 14 Dtool_yiw5xUMA 390 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
//////////////////////////////////////////////////////////////////// 2 4 this 3 566  6 region 1 559  
119 14 Dtool_yiw575tC 6 126 525 0 14 Dtool_yiw575tC 348 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherGroup, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 567  6 region 1 559  
120 14 Dtool_yiw5nY6C 6 127 525 0 14 Dtool_yiw5nY6C 403 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 566  6 region 1 559  
121 14 Dtool_yiw52SzS 7 128 559 369 14 Dtool_yiw52SzS 417 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 567  4 name 1 520  
122 14 Dtool_yiw59D_y 4 129 522 0 14 Dtool_yiw59D_y 271 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 566  
123 14 Dtool_yiw5hUIB 4 130 522 0 14 Dtool_yiw5hUIB 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::sort_regions
//       Access: Published
//  Description: Sorts all the regions in this group into pointer
//               order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 566  
124 14 Dtool_yiw51L8g 6 131 525 0 14 Dtool_yiw51L8g 312 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::is_sorted
//       Access: Published
//  Description: Returns true if the group has already been sorted,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 567  
125 14 Dtool_yiw5Fnk1 6 132 529 0 14 Dtool_yiw5Fnk1 277 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 567  
126 14 Dtool_yiw5YyXb 7 133 559 369 14 Dtool_yiw5YyXb 472 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
//////////////////////////////////////////////////////////////////// 2 4 this 3 567  1 n 1 529  
127 14 Dtool_yiw5tX2N 4 134 522 0 14 Dtool_yiw5tX2N 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 567  3 out 1 562  
128 14 Dtool_yiw5lVEu 4 135 522 0 14 Dtool_yiw5lVEu 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 567  3 out 1 562  12 indent_level 1 529  
129 14 Dtool_yiw5F5ne 4 135 522 0 14 Dtool_yiw5F5ne 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 567  3 out 1 562  
130 14 Dtool_yiw5jHAN 4 136 522 0 14 Dtool_yiw5jHAN 445 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherGroup.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
//////////////////////////////////////////////////////////////////// 4 4 this 3 566  8 render2d 1 569  8 bin_name 1 520  10 draw_order 1 529  
131 14 Dtool_yiw5kq3J 4 137 522 0 14 Dtool_yiw5kq3J 362 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 566  5 color 1 556  
132 14 Dtool_yiw5sd8H 4 138 522 0 14 Dtool_yiw5sd8H 317 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 566  
133 14 Dtool_yiw5PMXL 4 139 522 0 14 Dtool_yiw5PMXL 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherGroup::update_regions
//       Access: Published
//  Description: Refreshes the visualization created by
//               show_regions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 566  
134 14 Dtool_yiw53_jo 7 140 538 0 14 Dtool_yiw53_jo 0 0 
135 14 Dtool_yiw5XWnS 7 123 572 0 14 Dtool_yiw5XWnS 0 1 4 this 3 566  
136 14 Dtool_yiw5cC1c 7 146 573 393 14 Dtool_yiw5cC1c 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 520  
137 14 Dtool_yiw5a1_K 7 146 573 393 14 Dtool_yiw5a1_K 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
138 14 Dtool_yiw5NVgH 6 148 525 0 14 Dtool_yiw5NVgH 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  6 region 1 559  
139 14 Dtool_yiw5NnfE 6 149 525 0 14 Dtool_yiw5NnfE 828 // Filename: mouseWatcher.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
140 14 Dtool_yiw5Iirl 6 150 525 0 14 Dtool_yiw5Iirl 473 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
141 14 Dtool_yiw5P88Z 6 151 576 0 14 Dtool_yiw5P88Z 389 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
142 14 Dtool_yiw5Y5e7 6 152 541 0 14 Dtool_yiw5Y5e7 393 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
143 14 Dtool_yiw5hnf7 6 153 541 0 14 Dtool_yiw5hnf7 393 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
144 14 Dtool_yiw5HxfL 4 154 522 0 14 Dtool_yiw5HxfL 928 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  This determines
//               the coordinate space in which the MouseWatcherRegions
//               should be expected to live.  Normally, this is left
//               at -1, 1, -1, 1, which is the default setting, and
//               matches the mouse coordinate range.
//
//               Whatever values you specify here indicate the shape
//               of the full screen, and the MouseWatcherRegions will
//               be given in coordinate space matching it.  For
//               instance, if you specify (0, 1, 0, 1), then a
//               MouseWatcherRegion with the frame (0, 1, 0, .5) will
//               cover the lower half of the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  5 frame 1 556  
145 14 Dtool_yiw50bst 4 154 522 0 14 Dtool_yiw50bst 343 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  See the next
//               flavor of this method for a more verbose explanation.
//////////////////////////////////////////////////////////////////// 5 4 this 3 573  4 left 1 541  5 right 1 541  6 bottom 1 541  3 top 1 541  
146 14 Dtool_yiw508UI 6 155 556 0 14 Dtool_yiw508UI 296 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_frame
//       Access: Published
//  Description: Returns the frame of the MouseWatcher.  See
//               set_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
147 14 Dtool_yiw5cWJO 6 156 525 0 14 Dtool_yiw5cWJO 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
148 14 Dtool_yiw5voLV 6 156 525 0 14 Dtool_yiw5voLV 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  3 pos 1 576  
149 14 Dtool_yiw5O62h 6 156 525 0 14 Dtool_yiw5O62h 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 574  1 x 1 541  1 y 1 541  
150 14 Dtool_yiw5eZEz 7 157 559 369 14 Dtool_yiw5eZEz 335 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
151 14 Dtool_yiw5g7zU 7 157 559 369 14 Dtool_yiw5g7zU 513 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  3 pos 1 576  
152 14 Dtool_yiw5wQqr 7 157 559 369 14 Dtool_yiw5wQqr 335 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
//////////////////////////////////////////////////////////////////// 3 4 this 3 574  1 x 1 541  1 y 1 541  
153 14 Dtool_yiw539sY 6 158 525 0 14 Dtool_yiw539sY 328 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_button_down
//       Access: Published
//  Description: Returns true if the indicated button is currently
//               being held down, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  6 button 1 579  
154 14 Dtool_yiw5cEcO 4 159 522 0 14 Dtool_yiw5cEcO 762 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  7 pattern 1 520  
155 14 Dtool_yiw5ht1B 6 160 520 0 14 Dtool_yiw5ht1B 394 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
156 14 Dtool_yiw5m2Gd 4 161 522 0 14 Dtool_yiw5m2Gd 400 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  7 pattern 1 520  
157 14 Dtool_yiw5i4be 6 162 520 0 14 Dtool_yiw5i4be 391 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
158 14 Dtool_yiw5ixkm 4 163 522 0 14 Dtool_yiw5ixkm 827 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_repeat_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  This is
//               a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  7 pattern 1 520  
159 14 Dtool_yiw5LPpO 6 164 520 0 14 Dtool_yiw5LPpO 471 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_repeat_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  See
//               set_button_repeat_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
160 14 Dtool_yiw5Yndk 4 165 522 0 14 Dtool_yiw5Yndk 584 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  7 pattern 1 520  
161 14 Dtool_yiw5AuR6 6 166 520 0 14 Dtool_yiw5AuR6 559 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
162 14 Dtool_yiw5HX33 4 167 522 0 14 Dtool_yiw5HX33 585 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  7 pattern 1 520  
163 14 Dtool_yiw5WyqN 6 168 520 0 14 Dtool_yiw5WyqN 560 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
164 14 Dtool_yiw5lQGQ 4 169 522 0 14 Dtool_yiw5lQGQ 591 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  7 pattern 1 520  
165 14 Dtool_yiw5tUxJ 6 170 520 0 14 Dtool_yiw5tUxJ 565 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
166 14 Dtool_yiw5q8_O 4 171 522 0 14 Dtool_yiw5q8_O 594 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  7 pattern 1 520  
167 14 Dtool_yiw5a5mF 6 172 520 0 14 Dtool_yiw5a5mF 584 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
168 14 Dtool_yiw5CINK 4 173 522 0 14 Dtool_yiw5CINK 553 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  4 node 1 580  
169 14 Dtool_yiw5nnGj 6 174 525 0 14 Dtool_yiw5nnGj 376 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
170 14 Dtool_yiw5gJl4 7 175 580 0 14 Dtool_yiw5gJl4 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
171 14 Dtool_yiw5alHk 4 176 522 0 14 Dtool_yiw5alHk 308 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
172 14 Dtool_yiw5T4a_ 4 177 522 0 14 Dtool_yiw5T4a_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  2 eh 1 582  
173 14 Dtool_yiw5pC6_ 6 178 582 0 14 Dtool_yiw5pC6_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
174 14 Dtool_yiw5tFyZ 4 179 522 0 14 Dtool_yiw5tFyZ 376 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  4 mods 1 531  
175 14 Dtool_yiw5I0bg 7 180 584 0 14 Dtool_yiw5I0bg 355 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
176 14 Dtool_yiw5in8K 4 181 522 0 14 Dtool_yiw5in8K 743 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  2 dr 1 585  
177 14 Dtool_yiw51V8S 4 182 522 0 14 Dtool_yiw51V8S 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
178 14 Dtool_yiw5bAU7 7 183 585 0 14 Dtool_yiw5bAU7 386 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
179 14 Dtool_yiw5Zp2l 6 184 525 0 14 Dtool_yiw5Zp2l 525 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
180 14 Dtool_yiw56Y8I 6 185 525 0 14 Dtool_yiw56Y8I 841 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherGroup, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  5 group 1 566  
181 14 Dtool_yiw5e1yD 6 186 525 0 14 Dtool_yiw5e1yD 474 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  5 group 1 566  
182 14 Dtool_yiw5eayk 6 187 525 0 14 Dtool_yiw5eayk 665 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group from the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
//////////////////////////////////////////////////////////////////// 3 4 this 3 573  9 old_group 1 566  9 new_group 1 566  
183 14 Dtool_yiw5lrMu 6 188 529 0 14 Dtool_yiw5lrMu 325 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
184 14 Dtool_yiw5t9yw 7 189 566 371 14 Dtool_yiw5t9yw 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
//////////////////////////////////////////////////////////////////// 2 4 this 3 574  1 n 1 529  
185 14 Dtool_yiw5Ce2F 4 190 522 0 14 Dtool_yiw5Ce2F 822 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout
//       Access: Published
//  Description: Sets an inactivity timeout on the mouse activity.
//               When this timeout (in seconds) is exceeded with no
//               keyboard or mouse activity, all currently-held
//               buttons are automatically released.  This is intended
//               to help protect against people who inadvertently (or
//               intentionally) leave a keyboard key stuck down and
//               then wander away from the keyboard.
//
//               Also, when this timeout expires, the event specified
//               by set_inactivity_timeout_event() will be generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  7 timeout 1 587  
186 14 Dtool_yiw5mGVJ 6 191 525 0 14 Dtool_yiw5mGVJ 321 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_inactivity_timeout
//       Access: Published
//  Description: Returns true if an inactivity timeout has been set,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
187 14 Dtool_yiw5SYye 6 192 587 0 14 Dtool_yiw5SYye 390 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout
//       Access: Published
//  Description: Returns the inactivity timeout that has been set.
//               It is an error to call this if
//               has_inactivity_timeout() returns false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
188 14 Dtool_yiw52sej 4 193 522 0 14 Dtool_yiw52sej 399 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_inactivity_timeout
//       Access: Published
//  Description: Removes the inactivity timeout and restores the
//               MouseWatcher to its default behavior of allowing a
//               key to be held indefinitely.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
189 14 Dtool_yiw56rZ_ 4 194 522 0 14 Dtool_yiw56rZ_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout_event
//       Access: Published
//  Description: Specifies the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  5 event 1 520  
190 14 Dtool_yiw5emLm 6 195 520 0 14 Dtool_yiw5emLm 399 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout_event
//       Access: Published
//  Description: Returns the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
191 14 Dtool_yiw5LTg_ 7 196 590 0 14 Dtool_yiw5LTg_ 713 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_log
//       Access: Published
//  Description: Obtain the mouse trail log.  This is a PointerEventList.
//               Does not make a copy, therefore, this PointerEventList
//               will be updated each time process_events gets called.
//
//               To use trail logging, you need to enable the
//               generation of pointer events in the
//               GraphicsWindowInputDevice and set the trail log
//               duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
192 14 Dtool_yiw5RetJ 6 197 529 0 14 Dtool_yiw5RetJ 440 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::num_trail_recent
//       Access: Published
//  Description: This counter indicates how many events were added
//               to the trail log this frame.  The trail log is
//               updated once per frame, during the process_events
//               operation.  
//////////////////////////////////////////////////////////////////// 1 4 this 3 574  
193 14 Dtool_yiw5CGVq 4 198 522 0 14 Dtool_yiw5CGVq 468 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_trail_log_duration
//       Access: Published
//  Description: If the duration is nonzero, causes the MouseWatcher
//               to log the mouse's trail.  Events older than the
//               specified duration are discarded.  If the duration is
//               zero, logging is disabled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 573  8 duration 1 587  
194 14 Dtool_yiw5siL0 7 199 592 0 14 Dtool_yiw5siL0 999 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_node
//       Access: Published
//  Description: Returns a GeomNode that represents the mouse trail.
//               The intent is that you should reparent this GeomNode
//               to Render2D, and then forget about it.  The
//               MouseWatcher will continually update the trail node.
//               There is only one trail node, it does not create a
//               new one each time you call get_trail_node.
//
//               This is not a particularly beautiful way to render
//               a mouse trail.  It is intended more for debugging
//               purposes than for finished applications.  Even so,
//               It is suggested that you might want to apply a line
//               thickness and antialias mode to the line --- doing
//               so makes it look a lot better.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
195 14 Dtool_yiw5dIxZ 4 200 522 0 14 Dtool_yiw5dIxZ 533 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_node
//       Access: Published
//  Description: If you have previously fetched the trail node
//               using get_trail_node, then the MouseWatcher is
//               continually updating the trail node every frame.
//               Using clear_trail_node causes the MouseWatcher to
//               forget the trail node and stop updating it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
196 14 Dtool_yiw5bIXE 4 201 522 0 14 Dtool_yiw5bIXE 349 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_log
//       Access: Published
//  Description: Clears the mouse trail log.  This does not prevent
//               further accumulation of the log given future events.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
197 14 Dtool_yiw5YPsS 4 202 522 0 14 Dtool_yiw5YPsS 951 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::note_activity
//       Access: Published
//  Description: Can be used in conjunction with the inactivity
//               timeout to inform the MouseWatcher that the user has
//               just performed some action which proves he/she is
//               present.  It may be necessary to call this for
//               external events, such as joystick action, that the
//               MouseWatcher might otherwise not know about.  This
//               will reset the current inactivity timer.  When the
//               inactivity timer reaches the length of time specified
//               by set_inactivity_timeout(), with no keyboard or
//               mouse activity and no calls to note_activity(), then
//               any buttons held will be automatically released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 573  
198 14 Dtool_yiw5fzXa 7 203 538 0 14 Dtool_yiw5fzXa 0 0 
199 14 Dtool_yiw5Kzc_ 7 142 593 0 14 Dtool_yiw5Kzc_ 0 1 4 this 3 573  
200 14 Dtool_yiw5hM9_ 7 143 573 393 14 Dtool_yiw5hM9_ 0 1 4 this 3 593  
201 14 Dtool_yiw5LdxH 7 144 566 371 14 Dtool_yiw5LdxH 0 1 4 this 3 573  
202 14 Dtool_yiw5k8r2 7 145 573 393 14 Dtool_yiw5k8r2 0 1 4 this 3 566  
203 14 Dtool_yiw5HdBJ 6 206 525 0 14 Dtool_yiw5HdBJ 341 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
204 14 Dtool_yiw5Wbt7 7 207 579 0 14 Dtool_yiw5Wbt7 406 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
205 14 Dtool_yiw5NSyS 6 208 525 0 14 Dtool_yiw5NSyS 381 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_keyrepeat
//       Access: Published
//  Description: Returns true if the button-down even was generated
//               due to keyrepeat, or false if it was an original
//               button down.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
206 14 Dtool_yiw5jsPh 6 209 525 0 14 Dtool_yiw5jsPh 325 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
207 14 Dtool_yiw5Lr7T 6 210 529 0 14 Dtool_yiw5Lr7T 355 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
208 14 Dtool_yiw5m3E2 6 211 525 0 14 Dtool_yiw5m3E2 336 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
209 14 Dtool_yiw5JON1 6 212 520 0 14 Dtool_yiw5JON1 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
210 14 Dtool_yiw5ggbz 6 212 520 0 14 Dtool_yiw5ggbz 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  8 encoding 1 596  
211 14 Dtool_yiw52Qq_ 6 213 598 0 14 Dtool_yiw52Qq_ 323 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
212 14 Dtool_yiw5wcQ5 6 214 598 0 14 Dtool_yiw5wcQ5 334 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
213 14 Dtool_yiw55fsc 6 215 598 0 14 Dtool_yiw55fsc 329 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
214 14 Dtool_yiw5D2au 6 216 531 0 14 Dtool_yiw5D2au 352 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
215 14 Dtool_yiw53Y9y 6 217 525 0 14 Dtool_yiw53Y9y 330 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
216 14 Dtool_yiw5nFpl 6 218 576 0 14 Dtool_yiw5nFpl 425 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
217 14 Dtool_yiw5CuZd 6 219 525 0 14 Dtool_yiw5CuZd 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
//////////////////////////////////////////////////////////////////// 1 4 this 3 594  
218 14 Dtool_yiw5P1BE 4 220 522 0 14 Dtool_yiw5P1BE 229 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 594  3 out 1 562  
219 14 Dtool_yiw5FM2w 7 222 599 0 14 Dtool_yiw5FM2w 218 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 520  
220 14 Dtool_yiw5QM3x 4 223 522 0 14 Dtool_yiw5QM3x 257 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
221 14 Dtool_yiw5ylhr 6 224 541 0 14 Dtool_yiw5ylhr 335 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
222 14 Dtool_yiw5eGTT 4 225 522 0 14 Dtool_yiw5eGTT 435 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  8 fwdscale 1 541  
223 14 Dtool_yiw5AeAL 6 226 544 0 14 Dtool_yiw5AeAL 264 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
224 14 Dtool_yiw52VRC 6 227 541 0 14 Dtool_yiw52VRC 0 1 4 this 3 600  
225 14 Dtool_yiw5_EbC 6 228 541 0 14 Dtool_yiw5_EbC 0 1 4 this 3 600  
226 14 Dtool_yiw5m3kC 6 229 541 0 14 Dtool_yiw5m3kC 0 1 4 this 3 600  
227 14 Dtool_yiw52sA5 4 230 522 0 14 Dtool_yiw52sA5 269 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  3 vec 1 547  
228 14 Dtool_yiw5Sryu 4 230 522 0 14 Dtool_yiw5Sryu 0 4 4 this 3 599  1 x 1 541  1 y 1 541  1 z 1 541  
229 14 Dtool_yiw5CF66 4 231 522 0 14 Dtool_yiw5CF66 0 2 4 this 3 599  1 x 1 541  
230 14 Dtool_yiw5a0E7 4 232 522 0 14 Dtool_yiw5a0E7 0 2 4 this 3 599  1 y 1 541  
231 14 Dtool_yiw5SnO7 4 233 522 0 14 Dtool_yiw5SnO7 0 2 4 this 3 599  1 z 1 541  
232 14 Dtool_yiw59kcy 7 234 602 0 14 Dtool_yiw59kcy 253 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
233 14 Dtool_yiw51H1_ 6 235 541 0 14 Dtool_yiw51H1_ 0 1 4 this 3 600  
234 14 Dtool_yiw52MDB 6 236 541 0 14 Dtool_yiw52MDB 0 1 4 this 3 600  
235 14 Dtool_yiw5muWB 6 237 541 0 14 Dtool_yiw5muWB 0 1 4 this 3 600  
236 14 Dtool_yiw5w7cg 4 238 522 0 14 Dtool_yiw5w7cg 255 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  3 hpr 1 547  
237 14 Dtool_yiw5QARW 4 238 522 0 14 Dtool_yiw5QARW 0 4 4 this 3 599  1 h 1 541  1 p 1 541  1 r 1 541  
238 14 Dtool_yiw5C3e4 4 239 522 0 14 Dtool_yiw5C3e4 0 2 4 this 3 599  1 h 1 541  
239 14 Dtool_yiw5CMs5 4 240 522 0 14 Dtool_yiw5CMs5 0 2 4 this 3 599  1 p 1 541  
240 14 Dtool_yiw5SuA6 4 241 522 0 14 Dtool_yiw5SuA6 0 2 4 this 3 599  1 r 1 541  
241 14 Dtool_yiw5QuKj 4 242 522 0 14 Dtool_yiw5QuKj 396 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
//////////////////////////////////////////////////////////////////// 1 4 this 3 599  
242 14 Dtool_yiw5gy67 4 243 522 0 14 Dtool_yiw5gy67 271 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
//////////////////////////////////////////////////////////////////// 4 4 this 3 599  1 x 1 541  1 y 1 541  1 z 1 541  
243 14 Dtool_yiw58Sdj 7 244 603 0 14 Dtool_yiw58Sdj 260 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
244 14 Dtool_yiw5szQ3 4 245 522 0 14 Dtool_yiw5szQ3 258 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  6 origin 1 547  
245 14 Dtool_yiw5UESo 4 246 522 0 14 Dtool_yiw5UESo 403 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  4 flag 1 525  
246 14 Dtool_yiw5P3xR 6 247 525 0 14 Dtool_yiw5P3xR 406 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
247 14 Dtool_yiw5lgYv 4 248 522 0 14 Dtool_yiw5lgYv 561 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  6 rel_to 1 569  
248 14 Dtool_yiw5Mggh 6 249 569 0 14 Dtool_yiw5Mggh 327 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
249 14 Dtool_yiw52veS 4 250 522 0 14 Dtool_yiw52veS 524 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  2 cs 1 604  
250 14 Dtool_yiw55ZF5 6 251 604 0 14 Dtool_yiw55ZF5 325 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
251 14 Dtool_yiw5inab 4 252 522 0 14 Dtool_yiw5inab 368 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 599  3 mat 1 550  
252 14 Dtool_yiw5Z1ai 6 253 550 0 14 Dtool_yiw5Z1ai 292 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
253 14 Dtool_yiw5WvGL 6 254 550 0 14 Dtool_yiw5WvGL 387 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 600  
254 14 Dtool_yiw5ATvH 7 255 538 0 14 Dtool_yiw5ATvH 0 0 
255 14 Dtool_yiw5DG5A 7 257 605 504 14 Dtool_yiw5DG5A 221 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 520  
256 14 Dtool_yiw5dpGS 4 258 522 0 14 Dtool_yiw5dpGS 262 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
//////////////////////////////////////////////////////////////////// 2 4 this 3 605  4 node 1 580  
257 14 Dtool_yiw5Czs4 7 259 580 0 14 Dtool_yiw5Czs4 324 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 606  
258 14 Dtool_yiw5DfAE 7 260 538 0 14 Dtool_yiw5DfAE 0 0 
103
505 13 ButtonThrower 75777 13 ButtonThrower 13 ButtonThrower 0 0 0 1 259 0 0 30 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 1 608 0 1 0 506 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : ButtonThrower
// Description : Throws Panda Events for button down/up events
//               generated within the data graph.
//
//               This is a DataNode which is intended to be parented
//               to the data graph below a device which is generating
//               a sequence of button events, like a MouseAndKeyboard
//               device.  It simply takes each button it finds and
//               throws a corresponding event based on the button name
//               via the throw_event() call.
////////////////////////////////////////////////////////////////////

506 8 DataNode 2049 8 DataNode 8 DataNode 0 0 0 0 0 0 0 0 0 0 0 0 695
////////////////////////////////////////////////////////////////////
//       Class : DataNode
// Description : The fundamental type of node for the data graph.  The
//               DataNode class is itself primarily intended as an
//               abstract class; it defines no inputs and no outputs.
//               Most kinds of data nodes will derive from this to
//               specify the inputs and outputs in the constructor.
//
//               DataNode does not attempt to cycle its data with a
//               PipelineCycler.  The data graph is intended to be
//               used only within a single thread.
////////////////////////////////////////////////////////////////////

507 18 MouseInterfaceNode 75777 18 MouseInterfaceNode 18 MouseInterfaceNode 0 0 0 0 0 0 4 290 291 292 293 0 0 1 0 506 0 0 0 0 488
////////////////////////////////////////////////////////////////////
//       Class : MouseInterfaceNode
// Description : This is the base class for some classes that monitor
//               the mouse and keyboard input and perform some action
//               due to their state.
//
//               It collects together some common interface; in
//               particular, the require_button() and related methods.
////////////////////////////////////////////////////////////////////

508 14 DriveInterface 75777 14 DriveInterface 14 DriveInterface 0 0 0 1 294 0 0 48 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 0 0 1 0 507 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : DriveInterface
// Description : This is a TFormer, similar to Trackball, that moves
//               around a transform matrix in response to mouse input.
//               The basic motion is on a horizontal plane, as if
//               driving a vehicle.
////////////////////////////////////////////////////////////////////

509 14 MouseSubregion 75777 14 MouseSubregion 14 MouseSubregion 0 0 0 1 343 0 0 6 344 345 346 347 348 349 0 0 1 0 507 0 0 0 0 587
////////////////////////////////////////////////////////////////////
//       Class : MouseSubregion
// Description : The MouseSubregion object scales the mouse inputs
//               from within a rectangular region of the screen, as if
//               they were the full-screen inputs.
//
//               If you choose your MouseSubregion coordinates to
//               exactly match a DisplayRegion within your window, you
//               end up with a virtual mouse within your
//               DisplayRegion.
////////////////////////////////////////////////////////////////////

510 18 MouseWatcherRegion 141313 18 MouseWatcherRegion 18 MouseWatcherRegion 0 0 0 1 354 369 0 14 355 356 357 358 359 360 361 362 363 364 365 366 367 368 0 0 2 3 511 350 351 3 512 352 353 0 1 513 295
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherRegion
// Description : This is the class that defines a rectangular region
//               on the screen for the MouseWatcher.
////////////////////////////////////////////////////////////////////

511 27 TypedWritableReferenceCount 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

512 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

513 13 SuppressFlags 794624 33 MouseWatcherRegion::SuppressFlags 33 MouseWatcherRegion::SuppressFlags 510 0 0 0 0 0 0 0 0 0 4 15 SF_mouse_button 35 MouseWatcherRegion::SF_mouse_button 1 15 SF_other_button 35 MouseWatcherRegion::SF_other_button 2 13 SF_any_button 33 MouseWatcherRegion::SF_any_button 3 17 SF_mouse_position 37 MouseWatcherRegion::SF_mouse_position 4 0 0

514 17 MouseWatcherGroup 26625 17 MouseWatcherGroup 17 MouseWatcherGroup 0 0 0 0 371 0 16 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 1 609 0 1 5 515 370 0 0 0 290
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherGroup
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.
////////////////////////////////////////////////////////////////////

515 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

516 12 MouseWatcher 26625 12 MouseWatcher 12 MouseWatcher 0 0 0 1 392 393 0 56 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 1 610 0 2 3 506 388 389 3 514 390 391 0 0 1626
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcher
// Description : This TFormer maintains a list of rectangular regions
//               on the screen that are considered special mouse
//               regions; typically these will be click buttons.  When
//               the mouse passes in or out of one of these regions,
//               or when a button is clicked while the mouse is in one
//               of these regions, an event is thrown.
//
//               Mouse events may also be suppressed from the rest of
//               the datagraph in these special regions.
//
//               This class can also implement a software mouse
//               pointer by automatically generating a transform to
//               apply to a piece of geometry placed under the 2-d
//               scene graph.  It will move the geometry around
//               according to the mouse's known position.
//
//               Finally, this class can keep a record of the mouse
//               trail.  This is useful if you want to know, not just
//               where the mouse is, but the exact sequence of movements
//               it took to get there.  This information is mainly useful
//               for gesture-recognition code.  To use trail logging,
//               you need to enable the generation of pointer events
//               in the GraphicsWindowInputDevice and set the trail 
//               log duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////

517 21 MouseWatcherParameter 26625 21 MouseWatcherParameter 21 MouseWatcherParameter 0 0 0 0 450 0 15 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 0 0 0 0 0 353
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherParameter
// Description : This is sent along as a parameter to most events
//               generated for a region to indicate the mouse and
//               button state for the event.
////////////////////////////////////////////////////////////////////

518 9 Trackball 75777 9 Trackball 9 Trackball 0 0 0 1 466 0 0 33 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 0 0 1 0 507 0 0 0 0 702
////////////////////////////////////////////////////////////////////
//       Class : Trackball
// Description : Trackball acts like Performer in trackball mode.  It
//               can either spin around a piece of geometry directly,
//               or it can spin around a camera with the inverse
//               transform to make it appear that the whole world is
//               spinning.
//
//               The Trackball object actually just places a transform
//               in the data graph; parent a Transform2SG node under
//               it to actually transform objects (or cameras) in the
//               world.
////////////////////////////////////////////////////////////////////

519 12 Transform2SG 141313 12 Transform2SG 12 Transform2SG 0 0 0 1 500 504 0 3 501 502 503 0 0 1 0 506 0 0 0 0 348
////////////////////////////////////////////////////////////////////
//       Class : Transform2SG
// Description : input: Transform (matrix)
//
//               output: none, but applies the matrix as the transform
//               transition for a given arc of the scene graph.
////////////////////////////////////////////////////////////////////

520 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

521 15 ButtonThrower * 8576 15 ButtonThrower * 15 ButtonThrower * 0 0 505 0 0 0 0 0 0 0 0 0 0

522 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

523 21 ButtonThrower const * 8576 21 ButtonThrower const * 21 ButtonThrower const * 0 0 524 0 0 0 0 0 0 0 0 0 0

524 19 ButtonThrower const 8832 19 ButtonThrower const 19 ButtonThrower const 0 0 505 0 0 0 0 0 0 0 0 0 0

525 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

526 22 EventParameter const * 8576 22 EventParameter const * 22 EventParameter const * 0 0 527 0 0 0 0 0 0 0 0 0 0

527 20 EventParameter const 8832 20 EventParameter const 20 EventParameter const 0 0 528 0 0 0 0 0 0 0 0 0 0

528 14 EventParameter 2048 14 EventParameter 14 EventParameter 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : EventParameter
// Description : An optional parameter associated with an event.  Each
//               event may have zero or more of these.  Each parameter
//               stores a pointer to a TypedWritableReferenceCount
//               object, which of course could be pretty much
//               anything.  To store a simple value like a double or a
//               string, the EventParameter constructors transparently
//               use the EventStoreValue template class, defined
//               below.
////////////////////////////////////////////////////////////////////

529 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

530 16 EventParameter * 8576 16 EventParameter * 16 EventParameter * 0 0 528 0 0 0 0 0 0 0 0 0 0

531 23 ModifierButtons const * 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 532 0 0 0 0 0 0 0 0 0 0

532 21 ModifierButtons const 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 533 0 0 0 0 0 0 0 0 0 0

533 15 ModifierButtons 2048 15 ModifierButtons 15 ModifierButtons 0 0 0 0 0 0 0 1 611 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

534 20 ButtonHandle const * 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 535 0 0 0 0 0 0 0 0 0 0

535 18 ButtonHandle const 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 536 0 0 0 0 0 0 0 0 0 0

536 12 ButtonHandle 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

537 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

538 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 537 0 0 0 0 0 0 0 0 0 0

539 20 MouseInterfaceNode * 8576 20 MouseInterfaceNode * 20 MouseInterfaceNode * 0 0 507 0 0 0 0 0 0 0 0 0 0

540 16 DriveInterface * 8576 16 DriveInterface * 16 DriveInterface * 0 0 508 0 0 0 0 0 0 0 0 0 0

541 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

542 22 DriveInterface const * 8576 22 DriveInterface const * 22 DriveInterface const * 0 0 543 0 0 0 0 0 0 0 0 0 0

543 20 DriveInterface const 8832 20 DriveInterface const 20 DriveInterface const 0 0 508 0 0 0 0 0 0 0 0 0 0

544 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 545 0 0 0 0 0 0 0 0 0 0

545 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 546 0 0 0 0 0 0 0 0 0 0

546 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

547 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 548 0 0 0 0 0 0 0 0 0 0

548 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 549 0 0 0 0 0 0 0 0 0 0

549 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

550 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 551 0 0 0 0 0 0 0 0 0 0

551 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 552 0 0 0 0 0 0 0 0 0 0

552 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 612 613 614 0 0 0 0 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

553 16 MouseSubregion * 8576 16 MouseSubregion * 16 MouseSubregion * 0 0 509 0 0 0 0 0 0 0 0 0 0

554 22 MouseSubregion const * 8576 22 MouseSubregion const * 22 MouseSubregion const * 0 0 555 0 0 0 0 0 0 0 0 0 0

555 20 MouseSubregion const 8832 20 MouseSubregion const 20 MouseSubregion const 0 0 509 0 0 0 0 0 0 0 0 0 0

556 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 557 0 0 0 0 0 0 0 0 0 0

557 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 558 0 0 0 0 0 0 0 0 0 0

558 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

559 20 MouseWatcherRegion * 8576 20 MouseWatcherRegion * 20 MouseWatcherRegion * 0 0 510 0 0 0 0 0 0 0 0 0 0

560 26 MouseWatcherRegion const * 8576 26 MouseWatcherRegion const * 26 MouseWatcherRegion const * 0 0 561 0 0 0 0 0 0 0 0 0 0

561 24 MouseWatcherRegion const 8832 24 MouseWatcherRegion const 24 MouseWatcherRegion const 0 0 510 0 0 0 0 0 0 0 0 0 0

562 9 ostream * 8576 9 ostream * 9 ostream * 0 0 563 0 0 0 0 0 0 0 0 0 0

563 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

564 29 TypedWritableReferenceCount * 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 511 0 0 0 0 0 0 0 0 0 0

565 9 Namable * 8576 9 Namable * 9 Namable * 0 0 512 0 0 0 0 0 0 0 0 0 0

566 19 MouseWatcherGroup * 8576 19 MouseWatcherGroup * 19 MouseWatcherGroup * 0 0 514 0 0 0 0 0 0 0 0 0 0

567 25 MouseWatcherGroup const * 8576 25 MouseWatcherGroup const * 25 MouseWatcherGroup const * 0 0 568 0 0 0 0 0 0 0 0 0 0

568 23 MouseWatcherGroup const 8832 23 MouseWatcherGroup const 23 MouseWatcherGroup const 0 0 514 0 0 0 0 0 0 0 0 0 0

569 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 570 0 0 0 0 0 0 0 0 0 0

570 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 571 0 0 0 0 0 0 0 0 0 0

571 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 615 616 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

572 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 515 0 0 0 0 0 0 0 0 0 0

573 14 MouseWatcher * 8576 14 MouseWatcher * 14 MouseWatcher * 0 0 516 0 0 0 0 0 0 0 0 0 0

574 20 MouseWatcher const * 8576 20 MouseWatcher const * 20 MouseWatcher const * 0 0 575 0 0 0 0 0 0 0 0 0 0

575 18 MouseWatcher const 8832 18 MouseWatcher const 18 MouseWatcher const 0 0 516 0 0 0 0 0 0 0 0 0 0

576 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 577 0 0 0 0 0 0 0 0 0 0

577 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 578 0 0 0 0 0 0 0 0 0 0

578 9 TexCoordf 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

579 14 ButtonHandle * 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 536 0 0 0 0 0 0 0 0 0 0

580 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 581 0 0 0 0 0 0 0 0 0 0

581 9 PandaNode 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

582 14 EventHandler * 8576 14 EventHandler * 14 EventHandler * 0 0 583 0 0 0 0 0 0 0 0 0 0

583 12 EventHandler 2048 12 EventHandler 12 EventHandler 0 0 0 0 0 0 0 0 0 0 0 0 678
////////////////////////////////////////////////////////////////////
//       Class : EventHandler
// Description : A class to monitor events from the C++ side of
//               things.  It maintains a set of "hooks", function
//               pointers assigned to event names, and calls the
//               appropriate hooks when the matching event is
//               detected.
//
//               This class is not necessary when the hooks are
//               detected and processed entirely by the scripting
//               language, e.g. via Scheme hooks or the messenger
//               in Python.
////////////////////////////////////////////////////////////////////

584 17 ModifierButtons * 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 533 0 0 0 0 0 0 0 0 0 0

585 15 DisplayRegion * 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 586 0 0 0 0 0 0 0 0 0 0

586 13 DisplayRegion 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

587 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

588 22 PointerEventList const 8832 22 PointerEventList const 22 PointerEventList const 0 0 589 0 0 0 0 0 0 0 0 0 0

589 16 PointerEventList 2048 16 PointerEventList 16 PointerEventList 0 0 0 0 0 0 0 0 0 0 0 0 468
////////////////////////////////////////////////////////////////////
//       Class : PointerEventList
// Description : Records a set of pointer events that happened
//               recently.  This class is usually used only in the
//               data graph, to transmit the recent pointer presses,
//               but it may be used anywhere a list of PointerEvents
//               is desired.
////////////////////////////////////////////////////////////////////

590 24 PointerEventList const * 8576 24 PointerEventList const * 24 PointerEventList const * 0 0 588 0 0 0 0 0 0 0 0 0 0

591 8 GeomNode 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 2 617 618 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

592 10 GeomNode * 8576 10 GeomNode * 10 GeomNode * 0 0 591 0 0 0 0 0 0 0 0 0 0

593 10 DataNode * 8576 10 DataNode * 10 DataNode * 0 0 506 0 0 0 0 0 0 0 0 0 0

594 29 MouseWatcherParameter const * 8576 29 MouseWatcherParameter const * 29 MouseWatcherParameter const * 0 0 595 0 0 0 0 0 0 0 0 0 0

595 27 MouseWatcherParameter const 8832 27 MouseWatcherParameter const 27 MouseWatcherParameter const 0 0 517 0 0 0 0 0 0 0 0 0 0

596 8 Encoding 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 597 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0 6 E_utf8 19 TextEncoder::E_utf8 1 9 E_unicode 22 TextEncoder::E_unicode 2 0 0

597 11 TextEncoder 2048 11 TextEncoder 11 TextEncoder 0 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

598 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

599 11 Trackball * 8576 11 Trackball * 11 Trackball * 0 0 518 0 0 0 0 0 0 0 0 0 0

600 17 Trackball const * 8576 17 Trackball const * 17 Trackball const * 0 0 601 0 0 0 0 0 0 0 0 0 0

601 15 Trackball const 8832 15 Trackball const 15 Trackball const 0 0 518 0 0 0 0 0 0 0 0 0 0

602 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 549 0 0 0 0 0 0 0 0 0 0

603 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 546 0 0 0 0 0 0 0 0 0 0

604 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

605 14 Transform2SG * 8576 14 Transform2SG * 14 Transform2SG * 0 0 519 0 0 0 0 0 0 0 0 0 0

606 20 Transform2SG const * 8576 20 Transform2SG const * 20 Transform2SG const * 0 0 607 0 0 0 0 0 0 0 0 0 0

607 18 Transform2SG const 8832 18 Transform2SG const 18 Transform2SG const 0 0 519 0 0 0 0 0 0 0 0 0 0

0
0
11
608 0 1 14 get_parameters 18 get_num_parameters 13 get_parameter 
609 0 121 11 get_regions 15 get_num_regions 10 get_region 
610 0 141 10 get_groups 14 get_num_groups 9 get_group 
611 0 298 11 get_buttons 15 get_num_buttons 10 get_button 
612 0 380 8 get_rows 4 size 7 get_row 
613 0 380 8 get_cols 4 size 7 get_col 
614 0 380 9 get_row3s 4 size 8 get_row3 
615 0 444 9 get_nodes 13 get_num_nodes 8 get_node 
616 0 444 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
617 0 528 9 get_geoms 13 get_num_geoms 8 get_geom 
618 0 528 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
