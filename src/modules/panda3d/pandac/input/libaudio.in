1304331533
2 2
8 libaudio 4 MC2_ 5 panda 
85
113 16 FilterProperties 4 198 34 FilterProperties::FilterProperties 0 1 1 0
41
FilterProperties::FilterProperties(void);

114 5 clear 4 198 23 FilterProperties::clear 0 1 2 745
// Filename: filterProperties.I
// Created by: jyelon (01Aug2007)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::clear
//      Access: Published
// Description: Removes all DSP postprocessing.
////////////////////////////////////////////////////////////////////
42
inline void FilterProperties::clear(void);

115 11 add_lowpass 4 198 29 FilterProperties::add_lowpass 0 1 3 277
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::apply_lowpass
//      Access: Published
// Description: Add a lowpass filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
80
inline void FilterProperties::add_lowpass(float cutoff_freq, float resonance_q);

116 12 add_highpass 4 198 30 FilterProperties::add_highpass 0 1 4 277
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_highpass
//      Access: Published
// Description: Add a highpass filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
81
inline void FilterProperties::add_highpass(float cutoff_freq, float resonance_q);

117 8 add_echo 4 198 26 FilterProperties::add_echo 0 1 5 269
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_echo
//      Access: Published
// Description: Add a echo filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
98
inline void FilterProperties::add_echo(float drymix, float wetmix, float delay, float decayratio);

118 10 add_flange 4 198 28 FilterProperties::add_flange 0 1 6 273
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_flange
//      Access: Published
// Description: Add a flange filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
94
inline void FilterProperties::add_flange(float drymix, float wetmix, float depth, float rate);

119 11 add_distort 4 198 29 FilterProperties::add_distort 0 1 7 275
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_distort
//      Access: Published
// Description: Add a distort filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
55
inline void FilterProperties::add_distort(float level);

120 13 add_normalize 4 198 31 FilterProperties::add_normalize 0 1 8 279
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_normalize
//      Access: Published
// Description: Add a normalize filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
91
inline void FilterProperties::add_normalize(float fadetime, float threshold, float maxamp);

121 11 add_parameq 4 198 29 FilterProperties::add_parameq 0 1 9 275
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_parameq
//      Access: Published
// Description: Add a parameq filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
90
inline void FilterProperties::add_parameq(float center_freq, float bandwidth, float gain);

122 14 add_pitchshift 4 198 32 FilterProperties::add_pitchshift 0 1 10 281
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_pitchshift
//      Access: Published
// Description: Add a pitchshift filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
88
inline void FilterProperties::add_pitchshift(float pitch, float fftsize, float overlap);

123 10 add_chorus 4 198 28 FilterProperties::add_chorus 0 1 11 273
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_chorus
//      Access: Published
// Description: Add a chorus filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
145
inline void FilterProperties::add_chorus(float drymix, float wet1, float wet2, float wet3, float delay, float rate, float depth, float feedback);

124 10 add_reverb 4 198 28 FilterProperties::add_reverb 0 1 12 273
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_reverb
//      Access: Published
// Description: Add a reverb filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
110
inline void FilterProperties::add_reverb(float drymix, float wetmix, float roomsize, float damp, float width);

125 12 add_compress 4 198 30 FilterProperties::add_compress 0 1 13 277
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_compress
//      Access: Published
// Description: Add a compress filter to the end of the DSP chain.
////////////////////////////////////////////////////////////////////
107
inline void FilterProperties::add_compress(float threshold, float attack, float release, float gainmakeup);

126 14 get_class_type 4 198 32 FilterProperties::get_class_type 0 1 14 0
57
static TypeHandle FilterProperties::get_class_type(void);

127 4 play 4 200 16 AudioSound::play 0 1 15 359
// For best compatibility, set the loop_count,
// volume, and balance, prior to calling play().  You may
// set them while they're playing, but it's implementation
// specific whether you get the results.
// - Calling play() a second time on the same sound before it is
//   finished will start the sound again (creating a skipping or
//   stuttering effect).
40
virtual void AudioSound::play(void) = 0;

128 4 stop 4 200 16 AudioSound::stop 0 1 16 359
// For best compatibility, set the loop_count,
// volume, and balance, prior to calling play().  You may
// set them while they're playing, but it's implementation
// specific whether you get the results.
// - Calling play() a second time on the same sound before it is
//   finished will start the sound again (creating a skipping or
//   stuttering effect).
40
virtual void AudioSound::stop(void) = 0;

129 8 set_loop 4 200 20 AudioSound::set_loop 0 2 17 18 67
// loop: false = play once; true = play forever.
// inits to false.
55
virtual void AudioSound::set_loop(bool loop = (1)) = 0;

130 8 get_loop 4 200 20 AudioSound::get_loop 0 1 19 67
// loop: false = play once; true = play forever.
// inits to false.
50
virtual bool AudioSound::get_loop(void) const = 0;

131 14 set_loop_count 4 200 26 AudioSound::set_loop_count 0 2 20 21 75
// loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1.
80
virtual void AudioSound::set_loop_count(unsigned long int loop_count = (1)) = 0;

132 14 get_loop_count 4 200 26 AudioSound::get_loop_count 0 1 22 75
// loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1.
69
virtual unsigned long int AudioSound::get_loop_count(void) const = 0;

133 8 set_time 4 200 20 AudioSound::set_time 0 2 23 24 682
// Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   float percent_complete = s.get_time() / s.length();
62
virtual void AudioSound::set_time(float start_time = (0)) = 0;

134 8 get_time 4 200 20 AudioSound::get_time 0 1 25 682
// Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   float percent_complete = s.get_time() / s.length();
51
virtual float AudioSound::get_time(void) const = 0;

135 10 set_volume 4 200 22 AudioSound::set_volume 0 2 26 27 47
// 0 = minimum; 1.0 = maximum.
// inits to 1.0.
60
virtual void AudioSound::set_volume(float volume = (1)) = 0;

136 10 get_volume 4 200 22 AudioSound::get_volume 0 1 28 47
// 0 = minimum; 1.0 = maximum.
// inits to 1.0.
53
virtual float AudioSound::get_volume(void) const = 0;

137 11 set_balance 4 200 23 AudioSound::set_balance 0 2 29 30 77
// -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0.
68
virtual void AudioSound::set_balance(float balance_right = (0)) = 0;

138 11 get_balance 4 200 23 AudioSound::get_balance 0 1 31 77
// -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0.
54
virtual float AudioSound::get_balance(void) const = 0;

139 13 set_play_rate 4 200 25 AudioSound::set_play_rate 0 2 32 33 58
// play_rate is any positive float value.
// inits to 1.0.
66
virtual void AudioSound::set_play_rate(float play_rate = (1)) = 0;

140 13 get_play_rate 4 200 25 AudioSound::get_play_rate 0 1 34 58
// play_rate is any positive float value.
// inits to 1.0.
56
virtual float AudioSound::get_play_rate(void) const = 0;

141 10 set_active 4 200 22 AudioSound::set_active 0 2 35 36 28
// inits to manager's state.
57
virtual void AudioSound::set_active(bool flag = (1)) = 0;

142 10 get_active 4 200 22 AudioSound::get_active 0 1 37 28
// inits to manager's state.
52
virtual bool AudioSound::get_active(void) const = 0;

143 18 set_finished_event 4 200 30 AudioSound::set_finished_event 0 1 38 126
// Set (or clear) the event that will be thrown when the sound
// finishes playing.  To clear the event, pass an empty string.
83
virtual void AudioSound::set_finished_event(basic_string< char > const &event) = 0;

144 18 get_finished_event 4 200 30 AudioSound::get_finished_event 0 1 39 126
// Set (or clear) the event that will be thrown when the sound
// finishes playing.  To clear the event, pass an empty string.
83
virtual basic_string< char > const &AudioSound::get_finished_event(void) const = 0;

145 8 get_name 4 200 20 AudioSound::get_name 0 1 40 47
// There is no set_name(), this is intentional.
73
virtual basic_string< char > const &AudioSound::get_name(void) const = 0;

146 6 length 4 200 18 AudioSound::length 0 1 41 35
// return: playing time in seconds.
49
virtual float AudioSound::length(void) const = 0;

147 17 set_3d_attributes 4 200 29 AudioSound::set_3d_attributes 0 1 42 177
// Controls the position of this sound's emitter.
// px, py and pz are the emitter's position.
// vx, vy and vz are the emitter's velocity in UNITS PER SECOND (default: meters).
103
virtual void AudioSound::set_3d_attributes(float px, float py, float pz, float vx, float vy, float vz);

148 17 get_3d_attributes 4 200 29 AudioSound::get_3d_attributes 0 0 0
109
virtual void AudioSound::get_3d_attributes(float *px, float *py, float *pz, float *vx, float *vy, float *vz);

149 19 set_3d_min_distance 4 200 31 AudioSound::set_3d_min_distance 0 1 43 175
// Controls the distance (in units) that this sound begins to fall off.
// Also affects the rate it falls off.
// Default is 1.0
// Closer/Faster, <1.0
// Farther/Slower, >1.0
57
virtual void AudioSound::set_3d_min_distance(float dist);

150 19 get_3d_min_distance 4 200 31 AudioSound::get_3d_min_distance 0 1 44 175
// Controls the distance (in units) that this sound begins to fall off.
// Also affects the rate it falls off.
// Default is 1.0
// Closer/Faster, <1.0
// Farther/Slower, >1.0
58
virtual float AudioSound::get_3d_min_distance(void) const;

151 19 set_3d_max_distance 4 200 31 AudioSound::set_3d_max_distance 0 1 45 222
// Controls the maximum distance (in units) that this sound stops falling off.
// The sound does not stop at that point, it just doesn't get any quieter.
// You should rarely need to adjust this.
// Default is 1000000000.0
57
virtual void AudioSound::set_3d_max_distance(float dist);

152 19 get_3d_max_distance 4 200 31 AudioSound::get_3d_max_distance 0 1 46 222
// Controls the maximum distance (in units) that this sound stops falling off.
// The sound does not stop at that point, it just doesn't get any quieter.
// You should rarely need to adjust this.
// Default is 1000000000.0
58
virtual float AudioSound::get_3d_max_distance(void) const;

153 15 get_speaker_mix 4 200 27 AudioSound::get_speaker_mix 0 1 47 314
// *_speaker_mix and *_speaker_level(s) serve the same purpose.
// *_speaker_mix is for use with FMOD.
// *_speaker_level(s) is for use with Miles.
// Both interfaces exist because of a significant difference in the
// two APIs.  Hopefully the difference can be reconciled into a single
// interface at some point.
55
virtual float AudioSound::get_speaker_mix(int speaker);

154 15 set_speaker_mix 4 200 27 AudioSound::set_speaker_mix 0 1 48 314
// *_speaker_mix and *_speaker_level(s) serve the same purpose.
// *_speaker_mix is for use with FMOD.
// *_speaker_level(s) is for use with Miles.
// Both interfaces exist because of a significant difference in the
// two APIs.  Hopefully the difference can be reconciled into a single
// interface at some point.
167
virtual void AudioSound::set_speaker_mix(float frontleft, float frontright, float center, float sub, float backleft, float backright, float sideleft, float sideright);

155 17 get_speaker_level 4 200 29 AudioSound::get_speaker_level 0 1 49 0
55
virtual float AudioSound::get_speaker_level(int index);

156 18 set_speaker_levels 4 200 30 AudioSound::set_speaker_levels 0 9 50 51 52 53 54 55 56 57 58 0
226
virtual void AudioSound::set_speaker_levels(float level1, float level2 = (-1), float level3 = (-1), float level4 = (-1), float level5 = (-1), float level6 = (-1), float level7 = (-1), float level8 = (-1), float level9 = (-1));

157 12 get_priority 4 200 24 AudioSound::get_priority 0 1 59 0
43
virtual int AudioSound::get_priority(void);

158 12 set_priority 4 200 24 AudioSound::set_priority 0 1 60 0
52
virtual void AudioSound::set_priority(int priority);

159 17 configure_filters 4 200 29 AudioSound::configure_filters 0 1 61 0
69
virtual bool AudioSound::configure_filters(FilterProperties *config);

160 6 status 4 200 18 AudioSound::status 0 1 62 0
67
virtual AudioSound::SoundStatus AudioSound::status(void) const = 0;

161 6 output 4 200 18 AudioSound::output 0 1 63 0
52
virtual void AudioSound::output(ostream &out) const;

162 5 write 4 200 17 AudioSound::write 0 1 64 0
51
virtual void AudioSound::write(ostream &out) const;

163 14 get_class_type 4 200 26 AudioSound::get_class_type 0 1 65 0
51
static TypeHandle AudioSound::get_class_type(void);

164 15 getSpeakerSetup 4 202 29 AudioManager::getSpeakerSetup 0 1 66 0
48
virtual int AudioManager::getSpeakerSetup(void);

165 15 setSpeakerSetup 4 202 29 AudioManager::setSpeakerSetup 0 1 67 0
82
virtual void AudioManager::setSpeakerSetup(AudioManager::SpeakerModeCategory cat);

166 17 configure_filters 4 202 31 AudioManager::configure_filters 0 1 68 0
71
virtual bool AudioManager::configure_filters(FilterProperties *config);

167 19 create_AudioManager 4 202 33 AudioManager::create_AudioManager 0 1 69 315
// Create an AudioManager for each category of sounds you have.
// E.g.
//   MySoundEffects = create_AudioManager::AudioManager();
//   MyMusicManager = create_AudioManager::AudioManager();
//   ...
//   my_sound = MySoundEffects.get_sound("neatSfx.mp3");
//   my_music = MyMusicManager.get_sound("introTheme.mid");
73
static PointerTo< AudioManager > AudioManager::create_AudioManager(void);

168 8 shutdown 4 202 22 AudioManager::shutdown 0 1 70 0
42
virtual void AudioManager::shutdown(void);

169 8 is_valid 4 202 22 AudioManager::is_valid 0 1 71 411
// If you're interested in knowing whether this audio manager
// is valid, here's the call to do it.  It is not necessary
// to check whether the audio manager is valid before making other
// calls.  You are free to use an invalid sound manager, you
// may get silent sounds from it though.  The sound manager and
// the sounds it creates should not crash the application even
// when the objects are not valid.
46
virtual bool AudioManager::is_valid(void) = 0;

170 9 get_sound 4 202 23 AudioManager::get_sound 0 6 72 73 74 75 76 77 32
// Get a sound:

// Get a sound:
280
virtual PointerTo< AudioSound > AudioManager::get_sound(basic_string< char > const &file_name, bool positional = (0), int mode = (SM_heuristic)) = 0;
virtual PointerTo< AudioSound > AudioManager::get_sound(MovieAudio *source, bool positional = (0), int mode = (SM_heuristic)) = 0;

171 14 get_null_sound 4 202 28 AudioManager::get_null_sound 0 1 78 0
59
PointerTo< AudioSound > AudioManager::get_null_sound(void);

172 13 uncache_sound 4 202 27 AudioManager::uncache_sound 0 1 79 281
// Tell the AudioManager there is no need to keep this one cached.
// This doesn't break any connection between AudioSounds that have
// already given by get_sound() from this manager.  It's
// only affecting whether the AudioManager keeps a copy of the sound
// in its pool/cache.
84
virtual void AudioManager::uncache_sound(basic_string< char > const &file_name) = 0;

173 11 clear_cache 4 202 25 AudioManager::clear_cache 0 1 80 281
// Tell the AudioManager there is no need to keep this one cached.
// This doesn't break any connection between AudioSounds that have
// already given by get_sound() from this manager.  It's
// only affecting whether the AudioManager keeps a copy of the sound
// in its pool/cache.
49
virtual void AudioManager::clear_cache(void) = 0;

174 15 set_cache_limit 4 202 29 AudioManager::set_cache_limit 0 1 81 0
67
virtual void AudioManager::set_cache_limit(unsigned int count) = 0;

175 15 get_cache_limit 4 202 29 AudioManager::get_cache_limit 0 1 82 0
67
virtual unsigned int AudioManager::get_cache_limit(void) const = 0;

176 10 set_volume 4 202 24 AudioManager::set_volume 0 1 83 206
// Control volume:
// FYI:
//   If you start a sound with the volume off and turn the volume 
//   up later, you'll hear the sound playing at that late point.
// 0 = minimum; 1.0 = maximum.
// inits to 1.0.
56
virtual void AudioManager::set_volume(float volume) = 0;

177 10 get_volume 4 202 24 AudioManager::get_volume 0 1 84 206
// Control volume:
// FYI:
//   If you start a sound with the volume off and turn the volume 
//   up later, you'll hear the sound playing at that late point.
// 0 = minimum; 1.0 = maximum.
// inits to 1.0.
55
virtual float AudioManager::get_volume(void) const = 0;

178 10 set_active 4 202 24 AudioManager::set_active 0 1 85 362
// Turn the manager on or off.
// If you play a sound while the manager is inactive, it won't start.
// If you deactivate the manager while sounds are playing, they'll
// stop.
// If you activate the manager while looping sounds are playing
// (those that have a loop_count of zero),
// they will start playing from the beginning of their loop.
// inits to true.
53
virtual void AudioManager::set_active(bool flag) = 0;

179 10 get_active 4 202 24 AudioManager::get_active 0 1 86 362
// Turn the manager on or off.
// If you play a sound while the manager is inactive, it won't start.
// If you deactivate the manager while sounds are playing, they'll
// stop.
// If you activate the manager while looping sounds are playing
// (those that have a loop_count of zero),
// they will start playing from the beginning of their loop.
// inits to true.
54
virtual bool AudioManager::get_active(void) const = 0;

180 26 set_concurrent_sound_limit 4 202 40 AudioManager::set_concurrent_sound_limit 0 2 87 88 347
// This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time.
84
virtual void AudioManager::set_concurrent_sound_limit(unsigned int limit = (0)) = 0;

181 26 get_concurrent_sound_limit 4 202 40 AudioManager::get_concurrent_sound_limit 0 1 89 347
// This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time.
78
virtual unsigned int AudioManager::get_concurrent_sound_limit(void) const = 0;

182 24 reduce_sounds_playing_to 4 202 38 AudioManager::reduce_sounds_playing_to 0 1 90 371
// This is likely to be a utility function for the concurrent_sound_limit
// options.  It is exposed as an API, because it's reasonable that it
// may be useful to be here.  It reduces the number of concurrently
// playing sounds to count by some implementation specific means.
// If the number of sounds currently playing is at or below count then
// there is no effect.
76
virtual void AudioManager::reduce_sounds_playing_to(unsigned int count) = 0;

183 15 stop_all_sounds 4 202 29 AudioManager::stop_all_sounds 0 1 91 182
// Stop playback on all sounds managed by this manager.
// This is effectively the same as reduce_sounds_playing_to(0), but
// this call may be for efficient on some implementations.
53
virtual void AudioManager::stop_all_sounds(void) = 0;

184 6 update 4 202 20 AudioManager::update 0 1 92 79
// This should be called every frame.  Failure to call could
// cause problems.
40
virtual void AudioManager::update(void);

185 32 audio_3d_set_listener_attributes 4 202 46 AudioManager::audio_3d_set_listener_attributes 0 1 93 327
// This controls the "set of ears" that listens to 3D spacialized sound
// px, py, pz are position coordinates. 
// vx, vy, vz are a velocity vector in UNITS PER SECOND (default: meters). 
// fx, fy and fz are the respective components of a unit forward-vector
// ux, uy and uz are the respective components of a unit up-vector
180
virtual void AudioManager::audio_3d_set_listener_attributes(float px, float py, float pz, float vx, float vy, float vz, float fx, float fy, float fz, float ux, float uy, float uz);

186 32 audio_3d_get_listener_attributes 4 202 46 AudioManager::audio_3d_get_listener_attributes 0 0 0
192
virtual void AudioManager::audio_3d_get_listener_attributes(float *px, float *py, float *pz, float *vx, float *vy, float *vz, float *fx, float *fy, float *fz, float *ux, float *uy, float *uz);

187 28 audio_3d_set_distance_factor 4 202 42 AudioManager::audio_3d_set_distance_factor 0 1 94 261
// Control the "relative scale that sets the distance factor" units for 3D spacialized audio. Default is 1.0
// Fmod uses meters internally, so give a float in Units-per meter
// Don't know what Miles uses.
// Default is 1.0 which is adjust in panda to be feet.
70
virtual void AudioManager::audio_3d_set_distance_factor(float factor);

188 28 audio_3d_get_distance_factor 4 202 42 AudioManager::audio_3d_get_distance_factor 0 1 95 261
// Control the "relative scale that sets the distance factor" units for 3D spacialized audio. Default is 1.0
// Fmod uses meters internally, so give a float in Units-per meter
// Don't know what Miles uses.
// Default is 1.0 which is adjust in panda to be feet.
69
virtual float AudioManager::audio_3d_get_distance_factor(void) const;

189 27 audio_3d_set_doppler_factor 4 202 41 AudioManager::audio_3d_set_doppler_factor 0 1 96 125
// Control the presence of the Doppler effect. Default is 1.0
// Exaggerated Doppler, use >1.0
// Diminshed Doppler, use <1.0
69
virtual void AudioManager::audio_3d_set_doppler_factor(float factor);

190 27 audio_3d_get_doppler_factor 4 202 41 AudioManager::audio_3d_get_doppler_factor 0 1 97 125
// Control the presence of the Doppler effect. Default is 1.0
// Exaggerated Doppler, use >1.0
// Diminshed Doppler, use <1.0
68
virtual float AudioManager::audio_3d_get_doppler_factor(void) const;

191 28 audio_3d_set_drop_off_factor 4 202 42 AudioManager::audio_3d_set_drop_off_factor 0 1 98 157
// Exaggerate or diminish the effect of distance on sound. Default is 1.0
// Valid range is 0 to 10
// Faster drop off, use >1.0
// Slower drop off, use <1.0
70
virtual void AudioManager::audio_3d_set_drop_off_factor(float factor);

192 28 audio_3d_get_drop_off_factor 4 202 42 AudioManager::audio_3d_get_drop_off_factor 0 1 99 157
// Exaggerate or diminish the effect of distance on sound. Default is 1.0
// Valid range is 0 to 10
// Faster drop off, use >1.0
// Slower drop off, use <1.0
69
virtual float AudioManager::audio_3d_get_drop_off_factor(void) const;

193 16 get_dls_pathname 4 202 30 AudioManager::get_dls_pathname 0 1 100 0
53
static Filename AudioManager::get_dls_pathname(void);

194 6 output 4 202 20 AudioManager::output 0 1 101 0
54
virtual void AudioManager::output(ostream &out) const;

195 5 write 4 202 19 AudioManager::write 0 1 102 0
53
virtual void AudioManager::write(ostream &out) const;

196 25 set_speaker_configuration 4 202 39 AudioManager::set_speaker_configuration 0 9 103 104 105 106 107 108 109 110 111 52
// set_speaker_configuration is a Miles only method.
379
virtual void AudioManager::set_speaker_configuration(LVecBase3f *speaker1, LVecBase3f *speaker2 = ((void *)(0)), LVecBase3f *speaker3 = ((void *)(0)), LVecBase3f *speaker4 = ((void *)(0)), LVecBase3f *speaker5 = ((void *)(0)), LVecBase3f *speaker6 = ((void *)(0)), LVecBase3f *speaker7 = ((void *)(0)), LVecBase3f *speaker8 = ((void *)(0)), LVecBase3f *speaker9 = ((void *)(0)));

197 14 get_class_type 4 202 28 AudioManager::get_class_type 0 1 112 0
53
static TypeHandle AudioManager::get_class_type(void);

112
1 14 Dtool_MC2_ijEN 7 3 206 0 14 Dtool_MC2_ijEN 0 0 
2 14 Dtool_MC2_k3Vr 4 4 207 0 14 Dtool_MC2_k3Vr 745 // Filename: filterProperties.I
// Created by: jyelon (01Aug2007)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::clear
//      Access: Published
// Description: Removes all DSP postprocessing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 206  
3 14 Dtool_MC2_B4GQ 4 5 207 0 14 Dtool_MC2_B4GQ 277 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::apply_lowpass
//      Access: Published
// Description: Add a lowpass filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 3 4 this 3 206  11 cutoff_freq 1 208  11 resonance_q 1 208  
4 14 Dtool_MC2__Crd 4 6 207 0 14 Dtool_MC2__Crd 277 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_highpass
//      Access: Published
// Description: Add a highpass filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 3 4 this 3 206  11 cutoff_freq 1 208  11 resonance_q 1 208  
5 14 Dtool_MC2_Dehi 4 7 207 0 14 Dtool_MC2_Dehi 269 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_echo
//      Access: Published
// Description: Add a echo filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 5 4 this 3 206  6 drymix 1 208  6 wetmix 1 208  5 delay 1 208  10 decayratio 1 208  
6 14 Dtool_MC2_ssQI 4 8 207 0 14 Dtool_MC2_ssQI 273 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_flange
//      Access: Published
// Description: Add a flange filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 5 4 this 3 206  6 drymix 1 208  6 wetmix 1 208  5 depth 1 208  4 rate 1 208  
7 14 Dtool_MC2_RVS0 4 9 207 0 14 Dtool_MC2_RVS0 275 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_distort
//      Access: Published
// Description: Add a distort filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 2 4 this 3 206  5 level 1 208  
8 14 Dtool_MC2_S5bH 4 10 207 0 14 Dtool_MC2_S5bH 279 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_normalize
//      Access: Published
// Description: Add a normalize filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 4 4 this 3 206  8 fadetime 1 208  9 threshold 1 208  6 maxamp 1 208  
9 14 Dtool_MC2_r_bf 4 11 207 0 14 Dtool_MC2_r_bf 275 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_parameq
//      Access: Published
// Description: Add a parameq filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 4 4 this 3 206  11 center_freq 1 208  9 bandwidth 1 208  4 gain 1 208  
10 14 Dtool_MC2_SrBA 4 12 207 0 14 Dtool_MC2_SrBA 281 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_pitchshift
//      Access: Published
// Description: Add a pitchshift filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 4 4 this 3 206  5 pitch 1 208  7 fftsize 1 208  7 overlap 1 208  
11 14 Dtool_MC2_ENnG 4 13 207 0 14 Dtool_MC2_ENnG 273 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_chorus
//      Access: Published
// Description: Add a chorus filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 9 4 this 3 206  6 drymix 1 208  4 wet1 1 208  4 wet2 1 208  4 wet3 1 208  5 delay 1 208  4 rate 1 208  5 depth 1 208  8 feedback 1 208  
12 14 Dtool_MC2__I99 4 14 207 0 14 Dtool_MC2__I99 273 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_reverb
//      Access: Published
// Description: Add a reverb filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 6 4 this 3 206  6 drymix 1 208  6 wetmix 1 208  8 roomsize 1 208  4 damp 1 208  5 width 1 208  
13 14 Dtool_MC2_F294 4 15 207 0 14 Dtool_MC2_F294 277 ////////////////////////////////////////////////////////////////////
//    Function: FilterProperties::add_compress
//      Access: Published
// Description: Add a compress filter to the end of the DSP chain.
//////////////////////////////////////////////////////////////////// 5 4 this 3 206  9 threshold 1 208  6 attack 1 208  7 release 1 208  10 gainmakeup 1 208  
14 14 Dtool_MC2_Ap3V 7 16 210 0 14 Dtool_MC2_Ap3V 0 0 
15 14 Dtool_MC2__vhh 4 18 207 0 14 Dtool_MC2__vhh 359 // For best compatibility, set the loop_count,
// volume, and balance, prior to calling play().  You may
// set them while they're playing, but it's implementation
// specific whether you get the results.
// - Calling play() a second time on the same sound before it is
//   finished will start the sound again (creating a skipping or
//   stuttering effect). 1 4 this 3 211  
16 14 Dtool_MC2_dOiG 4 19 207 0 14 Dtool_MC2_dOiG 359 // For best compatibility, set the loop_count,
// volume, and balance, prior to calling play().  You may
// set them while they're playing, but it's implementation
// specific whether you get the results.
// - Calling play() a second time on the same sound before it is
//   finished will start the sound again (creating a skipping or
//   stuttering effect). 1 4 this 3 211  
17 14 Dtool_MC2_sQm7 4 20 207 0 14 Dtool_MC2_sQm7 67 // loop: false = play once; true = play forever.
// inits to false. 2 4 this 3 211  4 loop 1 212  
18 14 Dtool_MC2_epXp 4 20 207 0 14 Dtool_MC2_epXp 67 // loop: false = play once; true = play forever.
// inits to false. 1 4 this 3 211  
19 14 Dtool_MC2_k9fo 6 21 212 0 14 Dtool_MC2_k9fo 67 // loop: false = play once; true = play forever.
// inits to false. 1 4 this 3 213  
20 14 Dtool_MC2_ZahU 4 22 207 0 14 Dtool_MC2_ZahU 75 // loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1. 2 4 this 3 211  10 loop_count 1 215  
21 14 Dtool_MC2_VL64 4 22 207 0 14 Dtool_MC2_VL64 75 // loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1. 1 4 this 3 211  
22 14 Dtool_MC2_UTas 6 23 215 0 14 Dtool_MC2_UTas 75 // loop_count: 0 = forever; 1 = play once; n = play n times.
// inits to 1. 1 4 this 3 213  
23 14 Dtool_MC2_sxJX 4 24 207 0 14 Dtool_MC2_sxJX 682 // Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   float percent_complete = s.get_time() / s.length(); 2 4 this 3 211  10 start_time 1 208  
24 14 Dtool_MC2_2n_4 4 24 207 0 14 Dtool_MC2_2n_4 682 // Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   float percent_complete = s.get_time() / s.length(); 1 4 this 3 211  
25 14 Dtool_MC2_hsI4 6 25 208 0 14 Dtool_MC2_hsI4 682 // Control time position within the sound.
// This is similar (in concept) to the seek position within
// a file.
// time in seconds: 0 = beginning; length() = end.
// inits to 0.0.
// - The current time position will not change while the sound is
//   playing; you must call play() again to effect the change.  To
//   play the same sound from a time offset a second time,
//   explicitly set the time position again.  When looping, the
//   second and later loops will start from the beginning of the
//   sound.
// - If a sound is playing, calling get_time() repeatedly will
//   return different results over time.  e.g.:
//   float percent_complete = s.get_time() / s.length(); 1 4 this 3 213  
26 14 Dtool_MC2_e1I3 4 26 207 0 14 Dtool_MC2_e1I3 47 // 0 = minimum; 1.0 = maximum.
// inits to 1.0. 2 4 this 3 211  6 volume 1 208  
27 14 Dtool_MC2_7_nT 4 26 207 0 14 Dtool_MC2_7_nT 47 // 0 = minimum; 1.0 = maximum.
// inits to 1.0. 1 4 this 3 211  
28 14 Dtool_MC2_zxr3 6 27 208 0 14 Dtool_MC2_zxr3 47 // 0 = minimum; 1.0 = maximum.
// inits to 1.0. 1 4 this 3 213  
29 14 Dtool_MC2_npIq 4 28 207 0 14 Dtool_MC2_npIq 77 // -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0. 2 4 this 3 211  13 balance_right 1 208  
30 14 Dtool_MC2_J3_4 4 28 207 0 14 Dtool_MC2_J3_4 77 // -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0. 1 4 this 3 211  
31 14 Dtool_MC2_wRl7 6 29 208 0 14 Dtool_MC2_wRl7 77 // -1.0 is hard left
// 0.0 is centered
// 1.0 is hard right
// inits to 0.0. 1 4 this 3 213  
32 14 Dtool_MC2_E6kx 4 30 207 0 14 Dtool_MC2_E6kx 58 // play_rate is any positive float value.
// inits to 1.0. 2 4 this 3 211  9 play_rate 1 208  
33 14 Dtool_MC2_gAS1 4 30 207 0 14 Dtool_MC2_gAS1 58 // play_rate is any positive float value.
// inits to 1.0. 1 4 this 3 211  
34 14 Dtool_MC2_SK3c 6 31 208 0 14 Dtool_MC2_SK3c 58 // play_rate is any positive float value.
// inits to 1.0. 1 4 this 3 213  
35 14 Dtool_MC2__M0J 4 32 207 0 14 Dtool_MC2__M0J 28 // inits to manager's state. 2 4 this 3 211  4 flag 1 212  
36 14 Dtool_MC2_THGV 4 32 207 0 14 Dtool_MC2_THGV 28 // inits to manager's state. 1 4 this 3 211  
37 14 Dtool_MC2_yDK5 6 33 212 0 14 Dtool_MC2_yDK5 28 // inits to manager's state. 1 4 this 3 213  
38 14 Dtool_MC2_kLpd 4 34 207 0 14 Dtool_MC2_kLpd 126 // Set (or clear) the event that will be thrown when the sound
// finishes playing.  To clear the event, pass an empty string. 2 4 this 3 211  5 event 1 216  
39 14 Dtool_MC2_yGD1 6 35 216 0 14 Dtool_MC2_yGD1 126 // Set (or clear) the event that will be thrown when the sound
// finishes playing.  To clear the event, pass an empty string. 1 4 this 3 213  
40 14 Dtool_MC2_10F5 6 36 216 0 14 Dtool_MC2_10F5 47 // There is no set_name(), this is intentional. 1 4 this 3 213  
41 14 Dtool_MC2_1TDx 6 37 208 0 14 Dtool_MC2_1TDx 35 // return: playing time in seconds. 1 4 this 3 213  
42 14 Dtool_MC2_OwRY 4 38 207 0 14 Dtool_MC2_OwRY 177 // Controls the position of this sound's emitter.
// px, py and pz are the emitter's position.
// vx, vy and vz are the emitter's velocity in UNITS PER SECOND (default: meters). 7 4 this 3 211  2 px 1 208  2 py 1 208  2 pz 1 208  2 vx 1 208  2 vy 1 208  2 vz 1 208  
43 14 Dtool_MC2_kQiv 4 40 207 0 14 Dtool_MC2_kQiv 175 // Controls the distance (in units) that this sound begins to fall off.
// Also affects the rate it falls off.
// Default is 1.0
// Closer/Faster, <1.0
// Farther/Slower, >1.0 2 4 this 3 211  4 dist 1 208  
44 14 Dtool_MC2_O2dr 6 41 208 0 14 Dtool_MC2_O2dr 175 // Controls the distance (in units) that this sound begins to fall off.
// Also affects the rate it falls off.
// Default is 1.0
// Closer/Faster, <1.0
// Farther/Slower, >1.0 1 4 this 3 213  
45 14 Dtool_MC2_q_vO 4 42 207 0 14 Dtool_MC2_q_vO 222 // Controls the maximum distance (in units) that this sound stops falling off.
// The sound does not stop at that point, it just doesn't get any quieter.
// You should rarely need to adjust this.
// Default is 1000000000.0 2 4 this 3 211  4 dist 1 208  
46 14 Dtool_MC2_MIqK 6 43 208 0 14 Dtool_MC2_MIqK 222 // Controls the maximum distance (in units) that this sound stops falling off.
// The sound does not stop at that point, it just doesn't get any quieter.
// You should rarely need to adjust this.
// Default is 1000000000.0 1 4 this 3 213  
47 14 Dtool_MC2_gKBm 6 44 208 0 14 Dtool_MC2_gKBm 314 // *_speaker_mix and *_speaker_level(s) serve the same purpose.
// *_speaker_mix is for use with FMOD.
// *_speaker_level(s) is for use with Miles.
// Both interfaces exist because of a significant difference in the
// two APIs.  Hopefully the difference can be reconciled into a single
// interface at some point. 2 4 this 3 211  7 speaker 1 217  
48 14 Dtool_MC2_7IMU 4 45 207 0 14 Dtool_MC2_7IMU 314 // *_speaker_mix and *_speaker_level(s) serve the same purpose.
// *_speaker_mix is for use with FMOD.
// *_speaker_level(s) is for use with Miles.
// Both interfaces exist because of a significant difference in the
// two APIs.  Hopefully the difference can be reconciled into a single
// interface at some point. 9 4 this 3 211  9 frontleft 1 208  10 frontright 1 208  6 center 1 208  3 sub 1 208  8 backleft 1 208  9 backright 1 208  8 sideleft 1 208  9 sideright 1 208  
49 14 Dtool_MC2_Boqv 6 46 208 0 14 Dtool_MC2_Boqv 0 2 4 this 3 211  5 index 1 217  
50 14 Dtool_MC2_ny4l 4 47 207 0 14 Dtool_MC2_ny4l 0 10 4 this 3 211  6 level1 1 208  6 level2 1 208  6 level3 1 208  6 level4 1 208  6 level5 1 208  6 level6 1 208  6 level7 1 208  6 level8 1 208  6 level9 1 208  
51 14 Dtool_MC2_7xhL 4 47 207 0 14 Dtool_MC2_7xhL 0 9 4 this 3 211  6 level1 1 208  6 level2 1 208  6 level3 1 208  6 level4 1 208  6 level5 1 208  6 level6 1 208  6 level7 1 208  6 level8 1 208  
52 14 Dtool_MC2_RQ7p 4 47 207 0 14 Dtool_MC2_RQ7p 0 8 4 this 3 211  6 level1 1 208  6 level2 1 208  6 level3 1 208  6 level4 1 208  6 level5 1 208  6 level6 1 208  6 level7 1 208  
53 14 Dtool_MC2_6fbA 4 47 207 0 14 Dtool_MC2_6fbA 0 7 4 this 3 211  6 level1 1 208  6 level2 1 208  6 level3 1 208  6 level4 1 208  6 level5 1 208  6 level6 1 208  
54 14 Dtool_MC2_mEB6 4 47 207 0 14 Dtool_MC2_mEB6 0 6 4 this 3 211  6 level1 1 208  6 level2 1 208  6 level3 1 208  6 level4 1 208  6 level5 1 208  
55 14 Dtool_MC2_eJ_T 4 47 207 0 14 Dtool_MC2_eJ_T 0 5 4 this 3 211  6 level1 1 208  6 level2 1 208  6 level3 1 208  6 level4 1 208  
56 14 Dtool_MC2_eTS6 4 47 207 0 14 Dtool_MC2_eTS6 0 4 4 this 3 211  6 level1 1 208  6 level2 1 208  6 level3 1 208  
57 14 Dtool_MC2_k4Ci 4 47 207 0 14 Dtool_MC2_k4Ci 0 3 4 this 3 211  6 level1 1 208  6 level2 1 208  
58 14 Dtool_MC2_saQ7 4 47 207 0 14 Dtool_MC2_saQ7 0 2 4 this 3 211  6 level1 1 208  
59 14 Dtool_MC2_cxQw 6 48 217 0 14 Dtool_MC2_cxQw 0 1 4 this 3 211  
60 14 Dtool_MC2_wzLG 4 49 207 0 14 Dtool_MC2_wzLG 0 2 4 this 3 211  8 priority 1 217  
61 14 Dtool_MC2_hoiO 6 50 212 0 14 Dtool_MC2_hoiO 0 2 4 this 3 211  6 config 1 206  
62 14 Dtool_MC2_mGiV 6 52 201 0 14 Dtool_MC2_mGiV 0 1 4 this 3 213  
63 14 Dtool_MC2_hT27 4 53 207 0 14 Dtool_MC2_hT27 0 2 4 this 3 213  3 out 1 218  
64 14 Dtool_MC2_85SL 4 54 207 0 14 Dtool_MC2_85SL 0 2 4 this 3 213  3 out 1 218  
65 14 Dtool_MC2_wXI1 7 55 210 0 14 Dtool_MC2_wXI1 0 0 
66 14 Dtool_MC2_30SK 6 60 217 0 14 Dtool_MC2_30SK 0 1 4 this 3 220  
67 14 Dtool_MC2_WsSe 4 61 207 0 14 Dtool_MC2_WsSe 0 2 4 this 3 220  3 cat 1 203  
68 14 Dtool_MC2_hUR_ 6 62 212 0 14 Dtool_MC2_hUR_ 0 2 4 this 3 220  6 config 1 206  
69 14 Dtool_MC2_vL8W 7 63 220 0 14 Dtool_MC2_vL8W 315 // Create an AudioManager for each category of sounds you have.
// E.g.
//   MySoundEffects = create_AudioManager::AudioManager();
//   MyMusicManager = create_AudioManager::AudioManager();
//   ...
//   my_sound = MySoundEffects.get_sound("neatSfx.mp3");
//   my_music = MyMusicManager.get_sound("introTheme.mid"); 0 
70 14 Dtool_MC2_Hh1v 4 64 207 0 14 Dtool_MC2_Hh1v 0 1 4 this 3 220  
71 14 Dtool_MC2_YnlD 6 65 212 0 14 Dtool_MC2_YnlD 411 // If you're interested in knowing whether this audio manager
// is valid, here's the call to do it.  It is not necessary
// to check whether the audio manager is valid before making other
// calls.  You are free to use an invalid sound manager, you
// may get silent sounds from it though.  The sound manager and
// the sounds it creates should not crash the application even
// when the objects are not valid. 1 4 this 3 220  
72 14 Dtool_MC2_A0bS 7 66 211 0 14 Dtool_MC2_A0bS 15 // Get a sound: 4 4 this 3 220  6 source 1 221  10 positional 1 212  4 mode 1 217  
73 14 Dtool_MC2_C3Ua 7 66 211 0 14 Dtool_MC2_C3Ua 15 // Get a sound: 3 4 this 3 220  6 source 1 221  10 positional 1 212  
74 14 Dtool_MC2_P8Fq 7 66 211 0 14 Dtool_MC2_P8Fq 15 // Get a sound: 2 4 this 3 220  6 source 1 221  
75 14 Dtool_MC2_02J_ 7 66 211 0 14 Dtool_MC2_02J_ 15 // Get a sound: 4 4 this 3 220  9 file_name 1 216  10 positional 1 212  4 mode 1 217  
76 14 Dtool_MC2_z8cY 7 66 211 0 14 Dtool_MC2_z8cY 15 // Get a sound: 3 4 this 3 220  9 file_name 1 216  10 positional 1 212  
77 14 Dtool_MC2_yCgN 7 66 211 0 14 Dtool_MC2_yCgN 15 // Get a sound: 2 4 this 3 220  9 file_name 1 216  
78 14 Dtool_MC2_o8vb 7 67 211 0 14 Dtool_MC2_o8vb 0 1 4 this 3 220  
79 14 Dtool_MC2_PTiB 4 68 207 0 14 Dtool_MC2_PTiB 281 // Tell the AudioManager there is no need to keep this one cached.
// This doesn't break any connection between AudioSounds that have
// already given by get_sound() from this manager.  It's
// only affecting whether the AudioManager keeps a copy of the sound
// in its pool/cache. 2 4 this 3 220  9 file_name 1 216  
80 14 Dtool_MC2_V3uV 4 69 207 0 14 Dtool_MC2_V3uV 281 // Tell the AudioManager there is no need to keep this one cached.
// This doesn't break any connection between AudioSounds that have
// already given by get_sound() from this manager.  It's
// only affecting whether the AudioManager keeps a copy of the sound
// in its pool/cache. 1 4 this 3 220  
81 14 Dtool_MC2_JsMW 4 70 207 0 14 Dtool_MC2_JsMW 0 2 4 this 3 220  5 count 1 223  
82 14 Dtool_MC2_Zu93 6 71 223 0 14 Dtool_MC2_Zu93 0 1 4 this 3 224  
83 14 Dtool_MC2_qSxW 4 72 207 0 14 Dtool_MC2_qSxW 206 // Control volume:
// FYI:
//   If you start a sound with the volume off and turn the volume 
//   up later, you'll hear the sound playing at that late point.
// 0 = minimum; 1.0 = maximum.
// inits to 1.0. 2 4 this 3 220  6 volume 1 208  
84 14 Dtool_MC2_r_Wv 6 73 208 0 14 Dtool_MC2_r_Wv 206 // Control volume:
// FYI:
//   If you start a sound with the volume off and turn the volume 
//   up later, you'll hear the sound playing at that late point.
// 0 = minimum; 1.0 = maximum.
// inits to 1.0. 1 4 this 3 224  
85 14 Dtool_MC2_J_GE 4 74 207 0 14 Dtool_MC2_J_GE 362 // Turn the manager on or off.
// If you play a sound while the manager is inactive, it won't start.
// If you deactivate the manager while sounds are playing, they'll
// stop.
// If you activate the manager while looping sounds are playing
// (those that have a loop_count of zero),
// they will start playing from the beginning of their loop.
// inits to true. 2 4 this 3 220  4 flag 1 212  
86 14 Dtool_MC2_b_cl 6 75 212 0 14 Dtool_MC2_b_cl 362 // Turn the manager on or off.
// If you play a sound while the manager is inactive, it won't start.
// If you deactivate the manager while sounds are playing, they'll
// stop.
// If you activate the manager while looping sounds are playing
// (those that have a loop_count of zero),
// they will start playing from the beginning of their loop.
// inits to true. 1 4 this 3 224  
87 14 Dtool_MC2_0VhR 4 76 207 0 14 Dtool_MC2_0VhR 347 // This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time. 2 4 this 3 220  5 limit 1 223  
88 14 Dtool_MC2_RuKw 4 76 207 0 14 Dtool_MC2_RuKw 347 // This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time. 1 4 this 3 220  
89 14 Dtool_MC2_4gS3 6 77 223 0 14 Dtool_MC2_4gS3 347 // This controls the number of sounds that you allow at once.  This
// is more of a user choice -- it avoids talk over and the creation
// of a cacophony.
// It can also be used to help performance.
// 0 == unlimited.
// 1 == mutually exclusive (one sound at a time).  Which is an example of:
// n == allow n sounds to be playing at the same time. 1 4 this 3 224  
90 14 Dtool_MC2_UjBl 4 78 207 0 14 Dtool_MC2_UjBl 371 // This is likely to be a utility function for the concurrent_sound_limit
// options.  It is exposed as an API, because it's reasonable that it
// may be useful to be here.  It reduces the number of concurrently
// playing sounds to count by some implementation specific means.
// If the number of sounds currently playing is at or below count then
// there is no effect. 2 4 this 3 220  5 count 1 223  
91 14 Dtool_MC2_BZTi 4 79 207 0 14 Dtool_MC2_BZTi 182 // Stop playback on all sounds managed by this manager.
// This is effectively the same as reduce_sounds_playing_to(0), but
// this call may be for efficient on some implementations. 1 4 this 3 220  
92 14 Dtool_MC2_gvhM 4 80 207 0 14 Dtool_MC2_gvhM 79 // This should be called every frame.  Failure to call could
// cause problems. 1 4 this 3 220  
93 14 Dtool_MC2_BiqK 4 81 207 0 14 Dtool_MC2_BiqK 327 // This controls the "set of ears" that listens to 3D spacialized sound
// px, py, pz are position coordinates. 
// vx, vy, vz are a velocity vector in UNITS PER SECOND (default: meters). 
// fx, fy and fz are the respective components of a unit forward-vector
// ux, uy and uz are the respective components of a unit up-vector 13 4 this 3 220  2 px 1 208  2 py 1 208  2 pz 1 208  2 vx 1 208  2 vy 1 208  2 vz 1 208  2 fx 1 208  2 fy 1 208  2 fz 1 208  2 ux 1 208  2 uy 1 208  2 uz 1 208  
94 14 Dtool_MC2_BlhR 4 83 207 0 14 Dtool_MC2_BlhR 261 // Control the "relative scale that sets the distance factor" units for 3D spacialized audio. Default is 1.0
// Fmod uses meters internally, so give a float in Units-per meter
// Don't know what Miles uses.
// Default is 1.0 which is adjust in panda to be feet. 2 4 this 3 220  6 factor 1 208  
95 14 Dtool_MC2_hJ5G 6 84 208 0 14 Dtool_MC2_hJ5G 261 // Control the "relative scale that sets the distance factor" units for 3D spacialized audio. Default is 1.0
// Fmod uses meters internally, so give a float in Units-per meter
// Don't know what Miles uses.
// Default is 1.0 which is adjust in panda to be feet. 1 4 this 3 224  
96 14 Dtool_MC2_R8Fh 4 85 207 0 14 Dtool_MC2_R8Fh 125 // Control the presence of the Doppler effect. Default is 1.0
// Exaggerated Doppler, use >1.0
// Diminshed Doppler, use <1.0 2 4 this 3 220  6 factor 1 208  
97 14 Dtool_MC2_hs_N 6 86 208 0 14 Dtool_MC2_hs_N 125 // Control the presence of the Doppler effect. Default is 1.0
// Exaggerated Doppler, use >1.0
// Diminshed Doppler, use <1.0 1 4 this 3 224  
98 14 Dtool_MC2_QhOE 4 87 207 0 14 Dtool_MC2_QhOE 157 // Exaggerate or diminish the effect of distance on sound. Default is 1.0
// Valid range is 0 to 10
// Faster drop off, use >1.0
// Slower drop off, use <1.0 2 4 this 3 220  6 factor 1 208  
99 14 Dtool_MC2_V1m5 6 88 208 0 14 Dtool_MC2_V1m5 157 // Exaggerate or diminish the effect of distance on sound. Default is 1.0
// Valid range is 0 to 10
// Faster drop off, use >1.0
// Slower drop off, use <1.0 1 4 this 3 224  
100 14 Dtool_MC2_vzRi 7 89 227 0 14 Dtool_MC2_vzRi 0 0 
101 14 Dtool_MC2_vvgN 4 90 207 0 14 Dtool_MC2_vvgN 0 2 4 this 3 224  3 out 1 218  
102 14 Dtool_MC2_1L41 4 91 207 0 14 Dtool_MC2_1L41 0 2 4 this 3 224  3 out 1 218  
103 14 Dtool_MC2_0kBi 4 92 207 0 14 Dtool_MC2_0kBi 52 // set_speaker_configuration is a Miles only method. 10 4 this 3 220  8 speaker1 1 228  8 speaker2 1 228  8 speaker3 1 228  8 speaker4 1 228  8 speaker5 1 228  8 speaker6 1 228  8 speaker7 1 228  8 speaker8 1 228  8 speaker9 1 228  
104 14 Dtool_MC2_arNz 4 92 207 0 14 Dtool_MC2_arNz 52 // set_speaker_configuration is a Miles only method. 9 4 this 3 220  8 speaker1 1 228  8 speaker2 1 228  8 speaker3 1 228  8 speaker4 1 228  8 speaker5 1 228  8 speaker6 1 228  8 speaker7 1 228  8 speaker8 1 228  
105 14 Dtool_MC2_uJu3 4 92 207 0 14 Dtool_MC2_uJu3 52 // set_speaker_configuration is a Miles only method. 8 4 this 3 220  8 speaker1 1 228  8 speaker2 1 228  8 speaker3 1 228  8 speaker4 1 228  8 speaker5 1 228  8 speaker6 1 228  8 speaker7 1 228  
106 14 Dtool_MC2_zuyJ 4 92 207 0 14 Dtool_MC2_zuyJ 52 // set_speaker_configuration is a Miles only method. 7 4 this 3 220  8 speaker1 1 228  8 speaker2 1 228  8 speaker3 1 228  8 speaker4 1 228  8 speaker5 1 228  8 speaker6 1 228  
107 14 Dtool_MC2_r_3R 4 92 207 0 14 Dtool_MC2_r_3R 52 // set_speaker_configuration is a Miles only method. 6 4 this 3 220  8 speaker1 1 228  8 speaker2 1 228  8 speaker3 1 228  8 speaker4 1 228  8 speaker5 1 228  
108 14 Dtool_MC2_kCJy 4 92 207 0 14 Dtool_MC2_kCJy 52 // set_speaker_configuration is a Miles only method. 5 4 this 3 220  8 speaker1 1 228  8 speaker2 1 228  8 speaker3 1 228  8 speaker4 1 228  
109 14 Dtool_MC2_9hNz 4 92 207 0 14 Dtool_MC2_9hNz 52 // set_speaker_configuration is a Miles only method. 4 4 this 3 220  8 speaker1 1 228  8 speaker2 1 228  8 speaker3 1 228  
110 14 Dtool_MC2_FzQ3 4 92 207 0 14 Dtool_MC2_FzQ3 52 // set_speaker_configuration is a Miles only method. 3 4 this 3 220  8 speaker1 1 228  8 speaker2 1 228  
111 14 Dtool_MC2_63gH 4 92 207 0 14 Dtool_MC2_63gH 52 // set_speaker_configuration is a Miles only method. 2 4 this 3 220  8 speaker1 1 228  
112 14 Dtool_MC2_bs2a 7 93 210 0 14 Dtool_MC2_bs2a 0 0 
33
198 16 FilterProperties 75777 16 FilterProperties 16 FilterProperties 0 0 0 1 113 0 0 13 114 115 116 117 118 119 120 121 122 123 124 125 126 0 0 1 0 199 0 0 0 0 243
////////////////////////////////////////////////////////////////////
//       Class : FilterProperties
// Description : Stores a configuration for a set of audio DSP filters.
////////////////////////////////////////////////////////////////////

199 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

200 10 AudioSound 75777 10 AudioSound 10 AudioSound 0 0 0 0 0 0 37 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 0 0 1 0 199 0 0 0 1 201 0

201 11 SoundStatus 794624 23 AudioSound::SoundStatus 23 AudioSound::SoundStatus 200 0 0 0 0 0 0 0 0 0 3 3 BAD 15 AudioSound::BAD 0 5 READY 17 AudioSound::READY 1 7 PLAYING 19 AudioSound::PLAYING 2 0 0

202 12 AudioManager 75777 12 AudioManager 12 AudioManager 0 0 0 0 0 0 34 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 0 0 1 0 199 0 0 0 3 203 204 205 0

203 19 SpeakerModeCategory 794624 33 AudioManager::SpeakerModeCategory 33 AudioManager::SpeakerModeCategory 202 0 0 0 0 0 0 0 0 0 10 15 SPEAKERMODE_raw 29 AudioManager::SPEAKERMODE_raw 0 16 SPEAKERMODE_mono 30 AudioManager::SPEAKERMODE_mono 1 18 SPEAKERMODE_stereo 32 AudioManager::SPEAKERMODE_stereo 2 16 SPEAKERMODE_quad 30 AudioManager::SPEAKERMODE_quad 3 20 SPEAKERMODE_surround 34 AudioManager::SPEAKERMODE_surround 4 19 SPEAKERMODE_5point1 33 AudioManager::SPEAKERMODE_5point1 5 19 SPEAKERMODE_7point1 33 AudioManager::SPEAKERMODE_7point1 6 20 SPEAKERMODE_prologic 34 AudioManager::SPEAKERMODE_prologic 7 15 SPEAKERMODE_max 29 AudioManager::SPEAKERMODE_max 8 17 SPEAKERMODE_COUNT 31 AudioManager::SPEAKERMODE_COUNT 9 0 0

204 9 SpeakerId 794624 23 AudioManager::SpeakerId 23 AudioManager::SpeakerId 202 0 0 0 0 0 0 0 0 0 10 8 SPK_none 22 AudioManager::SPK_none 0 13 SPK_frontleft 27 AudioManager::SPK_frontleft 1 14 SPK_frontright 28 AudioManager::SPK_frontright 2 10 SPK_center 24 AudioManager::SPK_center 3 7 SPK_sub 21 AudioManager::SPK_sub 4 12 SPK_backleft 26 AudioManager::SPK_backleft 5 13 SPK_backright 27 AudioManager::SPK_backright 6 12 SPK_sideleft 26 AudioManager::SPK_sideleft 7 13 SPK_sideright 27 AudioManager::SPK_sideright 8 9 SPK_COUNT 23 AudioManager::SPK_COUNT 9 0 0

205 10 StreamMode 794624 24 AudioManager::StreamMode 24 AudioManager::StreamMode 202 0 0 0 0 0 0 0 0 0 3 12 SM_heuristic 26 AudioManager::SM_heuristic 0 9 SM_sample 23 AudioManager::SM_sample 1 9 SM_stream 23 AudioManager::SM_stream 2 0 0

206 18 FilterProperties * 8576 18 FilterProperties * 18 FilterProperties * 0 0 198 0 0 0 0 0 0 0 0 0 0

207 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

208 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

209 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

210 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 209 0 0 0 0 0 0 0 0 0 0

211 12 AudioSound * 8576 12 AudioSound * 12 AudioSound * 0 0 200 0 0 0 0 0 0 0 0 0 0

212 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

213 18 AudioSound const * 8576 18 AudioSound const * 18 AudioSound const * 0 0 214 0 0 0 0 0 0 0 0 0 0

214 16 AudioSound const 8832 16 AudioSound const 16 AudioSound const 0 0 200 0 0 0 0 0 0 0 0 0 0

215 17 unsigned long int 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

216 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

217 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

218 9 ostream * 8576 9 ostream * 9 ostream * 0 0 219 0 0 0 0 0 0 0 0 0 0

219 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

220 14 AudioManager * 8576 14 AudioManager * 14 AudioManager * 0 0 202 0 0 0 0 0 0 0 0 0 0

221 12 MovieAudio * 8576 12 MovieAudio * 12 MovieAudio * 0 0 222 0 0 0 0 0 0 0 0 0 0

222 10 MovieAudio 2048 10 MovieAudio 10 MovieAudio 0 0 0 0 0 0 0 0 0 0 0 0 673
////////////////////////////////////////////////////////////////////
//       Class : MovieAudio
// Description : A MovieAudio is actually any source that provides
//               a sequence of audio samples.  That could include an
//               AVI file, a microphone, or an internet TV station.
//
//               The difference between a MovieAudio and a
//               MovieAudioCursor is like the difference between a
//               filename and a file handle.  The MovieAudio just
//               indicates a particular movie.  The MovieAudioCursor
//               is what allows access.
////////////////////////////////////////////////////////////////////

223 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

224 20 AudioManager const * 8576 20 AudioManager const * 20 AudioManager const * 0 0 225 0 0 0 0 0 0 0 0 0 0

225 18 AudioManager const 8832 18 AudioManager const 18 AudioManager const 0 0 202 0 0 0 0 0 0 0 0 0 0

226 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

227 10 Filename * 8576 10 Filename * 10 Filename * 0 0 226 0 0 0 0 0 0 0 0 0 0

228 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 229 0 0 0 0 0 0 0 0 0 0

229 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

230 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
0
