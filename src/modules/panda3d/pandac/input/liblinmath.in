1304331555
2 2
10 liblinmath 4 VZN3 5 panda 
1053
1444 12 ~MathNumbers 4 2497 25 MathNumbers::~MathNumbers 0 0 0
32
MathNumbers::~MathNumbers(void);

1445 9 deg_2_rad 1 0 9 deg_2_rad 0 2 1337 1338 0
67
inline double deg_2_rad(double f);
inline float deg_2_rad(float f);

1446 9 rad_2_deg 1 0 9 rad_2_deg 0 2 1339 1340 0
67
inline double rad_2_deg(double f);
inline float rad_2_deg(float f);

1447 10 LVecBase2f 4 2498 22 LVecBase2f::LVecBase2f 0 4 1 2 3 4 1380
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
189
inline LVecBase2f::LVecBase2f(void);
inline LVecBase2f::LVecBase2f(LVecBase2f const &copy);
inline LVecBase2f::LVecBase2f(float fill_value);
inline LVecBase2f::LVecBase2f(float x, float y);

1448 10 operator = 4 2498 22 LVecBase2f::operator = 0 2 5 6 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase2f &LVecBase2f::operator =(LVecBase2f const &copy);
inline LVecBase2f &LVecBase2f::operator =(float fill_value);

1449 12 operator new 4 2498 24 LVecBase2f::operator new 0 1 7 0
126
inline void *LVecBase2f::operator new(unsigned int size);
inline void *LVecBase2f::operator new(unsigned int size, void *ptr);

1450 15 operator delete 4 2498 27 LVecBase2f::operator delete 0 0 0
108
inline void LVecBase2f::operator delete(void *ptr);
inline void LVecBase2f::operator delete(void *, void *);

1451 12 validate_ptr 4 2498 24 LVecBase2f::validate_ptr 0 0 0
61
static inline bool LVecBase2f::validate_ptr(void const *ptr);

1452 4 zero 4 2498 16 LVecBase2f::zero 0 1 8 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2f const &LVecBase2f::zero(void);

1453 6 unit_x 4 2498 18 LVecBase2f::unit_x 0 1 9 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_x(void);

1454 6 unit_y 4 2498 18 LVecBase2f::unit_y 0 1 10 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_y(void);

1455 11 ~LVecBase2f 4 2498 23 LVecBase2f::~LVecBase2f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2f::~LVecBase2f(void);

1456 10 __reduce__ 4 2498 22 LVecBase2f::__reduce__ 0 1 11 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase2f::__reduce__(PyObject *self) const;

1457 11 __getattr__ 4 2498 23 LVecBase2f::__getattr__ 0 1 12 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase2f::__getattr__(basic_string< char > const &attr_name) const;

1458 11 __setattr__ 4 2498 23 LVecBase2f::__setattr__ 0 1 13 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1459 11 operator [] 4 2498 23 LVecBase2f::operator [] 0 2 14 15 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase2f::operator [](int i) const;
inline float &LVecBase2f::operator [](int i);

1460 11 __setitem__ 4 2498 23 LVecBase2f::__setitem__ 0 1 16 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase2f::__setitem__(int i, float v);

1461 4 size 4 2498 16 LVecBase2f::size 0 1 17 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2f::size(void);

1462 6 is_nan 4 2498 18 LVecBase2f::is_nan 0 1 18 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2f::is_nan(void) const;

1463 8 get_cell 4 2498 20 LVecBase2f::get_cell 0 1 19 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase2f::get_cell(int i) const;

1464 5 get_x 4 2498 17 LVecBase2f::get_x 0 1 20 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_x(void) const;

1465 5 get_y 4 2498 17 LVecBase2f::get_y 0 1 21 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_y(void) const;

1466 8 set_cell 4 2498 20 LVecBase2f::set_cell 0 1 22 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2f::set_cell(int i, float value);

1467 5 set_x 4 2498 17 LVecBase2f::set_x 0 1 23 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_x(float value);

1468 5 set_y 4 2498 17 LVecBase2f::set_y 0 1 24 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_y(float value);

1469 11 add_to_cell 4 2498 23 LVecBase2f::add_to_cell 0 1 25 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase2f::add_to_cell(int i, float value);

1470 5 add_x 4 2498 17 LVecBase2f::add_x 0 1 26 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_x(float value);

1471 5 add_y 4 2498 17 LVecBase2f::add_y 0 1 27 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_y(float value);

1472 8 get_data 4 2498 20 LVecBase2f::get_data 0 1 28 392
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase2f::get_data(void) const;

1473 18 get_num_components 4 2498 30 LVecBase2f::get_num_components 0 1 29 276
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2f::get_num_components(void) const;

1474 4 fill 4 2498 16 LVecBase2f::fill 0 1 30 361
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase2f::fill(float fill_value);

1475 3 set 4 2498 15 LVecBase2f::set 0 1 31 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void LVecBase2f::set(float x, float y);

1476 6 length 4 2498 18 LVecBase2f::length 0 1 32 292
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase2f::length(void) const;

1477 14 length_squared 4 2498 26 LVecBase2f::length_squared 0 1 33 297
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase2f::length_squared(void) const;

1478 9 normalize 4 2498 21 LVecBase2f::normalize 0 1 34 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2f::normalize(void);

1479 3 dot 4 2498 15 LVecBase2f::dot 0 1 35 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase2f::dot(LVecBase2f const &other) const;

1480 7 project 4 2498 19 LVecBase2f::project 0 1 36 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LVecBase2f::project(LVecBase2f const &onto) const;

1481 10 operator < 4 2498 22 LVecBase2f::operator < 0 1 37 495
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2f::operator <(LVecBase2f const &other) const;

1482 11 operator == 4 2498 23 LVecBase2f::operator == 0 1 38 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator ==(LVecBase2f const &other) const;

1483 11 operator != 4 2498 23 LVecBase2f::operator != 0 1 39 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator !=(LVecBase2f const &other) const;

1484 10 compare_to 4 2498 22 LVecBase2f::compare_to 0 2 40 41 821
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase2f::compare_to(LVecBase2f const &other) const;
inline int LVecBase2f::compare_to(LVecBase2f const &other, float threshold) const;

1485 8 get_hash 4 2498 20 LVecBase2f::get_hash 0 2 42 43 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase2f::get_hash(void) const;
inline unsigned int LVecBase2f::get_hash(float threshold) const;

1486 8 add_hash 4 2498 20 LVecBase2f::add_hash 0 2 44 45 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase2f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2f::add_hash(unsigned int hash, float threshold) const;

1487 10 operator - 68 2498 22 LVecBase2f::operator - 0 1 46 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LVecBase2f::operator -(void) const;

1488 10 operator + 4 2498 22 LVecBase2f::operator + 0 1 47 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator +(LVecBase2f const &other) const;

1489 10 operator - 4 2498 22 LVecBase2f::operator - 0 1 48 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator -(LVecBase2f const &other) const;

1490 10 operator * 4 2498 22 LVecBase2f::operator * 0 1 49 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator *(float scalar) const;

1491 10 operator / 4 2498 22 LVecBase2f::operator / 0 1 50 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator /(float scalar) const;

1492 11 operator += 4 2498 23 LVecBase2f::operator += 0 1 51 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator +=(LVecBase2f const &other);

1493 11 operator -= 4 2498 23 LVecBase2f::operator -= 0 1 52 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator -=(LVecBase2f const &other);

1494 11 operator *= 4 2498 23 LVecBase2f::operator *= 0 1 53 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator *=(float scalar);

1495 11 operator /= 4 2498 23 LVecBase2f::operator /= 0 1 54 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator /=(float scalar);

1496 4 fmax 4 2498 16 LVecBase2f::fmax 0 1 55 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmax(LVecBase2f const &other);

1497 4 fmin 4 2498 16 LVecBase2f::fmin 0 1 56 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmin(LVecBase2f const &other);

1498 12 almost_equal 4 2498 24 LVecBase2f::almost_equal 0 2 57 58 656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase2f::almost_equal(LVecBase2f const &other, float threshold) const;
inline bool LVecBase2f::almost_equal(LVecBase2f const &other) const;

1499 6 output 4 2498 18 LVecBase2f::output 0 1 59 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2f::output(ostream &out) const;

1500 11 python_repr 4 2498 23 LVecBase2f::python_repr 0 1 60 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1501 14 get_class_type 4 2498 26 LVecBase2f::get_class_type 0 1 61 0
51
static TypeHandle LVecBase2f::get_class_type(void);

1502 10 LVecBase2d 4 2499 22 LVecBase2d::LVecBase2d 0 4 62 63 64 65 2762
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
192
inline LVecBase2d::LVecBase2d(void);
inline LVecBase2d::LVecBase2d(LVecBase2d const &copy);
inline LVecBase2d::LVecBase2d(double fill_value);
inline LVecBase2d::LVecBase2d(double x, double y);

1503 10 operator = 4 2499 22 LVecBase2d::operator = 0 2 66 67 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase2d &LVecBase2d::operator =(LVecBase2d const &copy);
inline LVecBase2d &LVecBase2d::operator =(double fill_value);

1504 12 operator new 4 2499 24 LVecBase2d::operator new 0 1 68 0
126
inline void *LVecBase2d::operator new(unsigned int size);
inline void *LVecBase2d::operator new(unsigned int size, void *ptr);

1505 15 operator delete 4 2499 27 LVecBase2d::operator delete 0 0 0
108
inline void LVecBase2d::operator delete(void *ptr);
inline void LVecBase2d::operator delete(void *, void *);

1506 12 validate_ptr 4 2499 24 LVecBase2d::validate_ptr 0 0 0
61
static inline bool LVecBase2d::validate_ptr(void const *ptr);

1507 4 zero 4 2499 16 LVecBase2d::zero 0 1 69 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2d const &LVecBase2d::zero(void);

1508 6 unit_x 4 2499 18 LVecBase2d::unit_x 0 1 70 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_x(void);

1509 6 unit_y 4 2499 18 LVecBase2d::unit_y 0 1 71 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_y(void);

1510 11 ~LVecBase2d 4 2499 23 LVecBase2d::~LVecBase2d 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2d::~LVecBase2d(void);

1511 10 __reduce__ 4 2499 22 LVecBase2d::__reduce__ 0 1 72 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase2d::__reduce__(PyObject *self) const;

1512 11 __getattr__ 4 2499 23 LVecBase2d::__getattr__ 0 1 73 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase2d::__getattr__(basic_string< char > const &attr_name) const;

1513 11 __setattr__ 4 2499 23 LVecBase2d::__setattr__ 0 1 74 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1514 11 operator [] 4 2499 23 LVecBase2d::operator [] 0 2 75 76 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase2d::operator [](int i) const;
inline double &LVecBase2d::operator [](int i);

1515 11 __setitem__ 4 2499 23 LVecBase2d::__setitem__ 0 1 77 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2d::__setitem__(int i, double v);

1516 4 size 4 2499 16 LVecBase2d::size 0 1 78 574
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2d::size(void);

1517 6 is_nan 4 2499 18 LVecBase2d::is_nan 0 1 79 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2d::is_nan(void) const;

1518 8 get_cell 4 2499 20 LVecBase2d::get_cell 0 1 80 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase2d::get_cell(int i) const;

1519 5 get_x 4 2499 17 LVecBase2d::get_x 0 1 81 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_x(void) const;

1520 5 get_y 4 2499 17 LVecBase2d::get_y 0 1 82 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_y(void) const;

1521 8 set_cell 4 2499 20 LVecBase2d::set_cell 0 1 83 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2d::set_cell(int i, double value);

1522 5 set_x 4 2499 17 LVecBase2d::set_x 0 1 84 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_x(double value);

1523 5 set_y 4 2499 17 LVecBase2d::set_y 0 1 85 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_y(double value);

1524 11 add_to_cell 4 2499 23 LVecBase2d::add_to_cell 0 1 86 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase2d::add_to_cell(int i, double value);

1525 5 add_x 4 2499 17 LVecBase2d::add_x 0 1 87 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_x(double value);

1526 5 add_y 4 2499 17 LVecBase2d::add_y 0 1 88 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_y(double value);

1527 8 get_data 4 2499 20 LVecBase2d::get_data 0 1 89 786
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase2d::get_data(void) const;

1528 18 get_num_components 4 2499 30 LVecBase2d::get_num_components 0 1 90 554
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2d::get_num_components(void) const;

1529 4 fill 4 2499 16 LVecBase2d::fill 0 1 91 724
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::fill(double fill_value);

1530 3 set 4 2499 15 LVecBase2d::set 0 1 92 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::set(double x, double y);

1531 6 length 4 2499 18 LVecBase2d::length 0 1 93 586
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase2d::length(void) const;

1532 14 length_squared 4 2499 26 LVecBase2d::length_squared 0 1 94 596
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase2d::length_squared(void) const;

1533 9 normalize 4 2499 21 LVecBase2d::normalize 0 1 95 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2d::normalize(void);

1534 3 dot 4 2499 15 LVecBase2d::dot 0 1 96 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase2d::dot(LVecBase2d const &other) const;

1535 7 project 4 2499 19 LVecBase2d::project 0 1 97 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LVecBase2d::project(LVecBase2d const &onto) const;

1536 10 operator < 4 2499 22 LVecBase2d::operator < 0 1 98 992
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2d::operator <(LVecBase2d const &other) const;

1537 11 operator == 4 2499 23 LVecBase2d::operator == 0 1 99 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator ==(LVecBase2d const &other) const;

1538 11 operator != 4 2499 23 LVecBase2d::operator != 0 1 100 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator !=(LVecBase2d const &other) const;

1539 10 compare_to 4 2499 22 LVecBase2d::compare_to 0 2 101 102 1644
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase2d::compare_to(LVecBase2d const &other) const;
inline int LVecBase2d::compare_to(LVecBase2d const &other, double threshold) const;

1540 8 get_hash 4 2499 20 LVecBase2d::get_hash 0 2 103 104 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase2d::get_hash(void) const;
inline unsigned int LVecBase2d::get_hash(double threshold) const;

1541 8 add_hash 4 2499 20 LVecBase2d::add_hash 0 2 105 106 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase2d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2d::add_hash(unsigned int hash, double threshold) const;

1542 10 operator - 68 2499 22 LVecBase2d::operator - 0 1 107 430
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LVecBase2d::operator -(void) const;

1543 10 operator + 4 2499 22 LVecBase2d::operator + 0 1 108 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator +(LVecBase2d const &other) const;

1544 10 operator - 4 2499 22 LVecBase2d::operator - 0 1 109 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator -(LVecBase2d const &other) const;

1545 10 operator * 4 2499 22 LVecBase2d::operator * 0 1 110 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator *(double scalar) const;

1546 10 operator / 4 2499 22 LVecBase2d::operator / 0 1 111 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator /(double scalar) const;

1547 11 operator += 4 2499 23 LVecBase2d::operator += 0 1 112 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator +=(LVecBase2d const &other);

1548 11 operator -= 4 2499 23 LVecBase2d::operator -= 0 1 113 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator -=(LVecBase2d const &other);

1549 11 operator *= 4 2499 23 LVecBase2d::operator *= 0 1 114 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator *=(double scalar);

1550 11 operator /= 4 2499 23 LVecBase2d::operator /= 0 1 115 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator /=(double scalar);

1551 4 fmax 4 2499 16 LVecBase2d::fmax 0 1 116 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmax(LVecBase2d const &other);

1552 4 fmin 4 2499 16 LVecBase2d::fmin 0 1 117 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmin(LVecBase2d const &other);

1553 12 almost_equal 4 2499 24 LVecBase2d::almost_equal 0 2 118 119 1314
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase2d::almost_equal(LVecBase2d const &other, double threshold) const;
inline bool LVecBase2d::almost_equal(LVecBase2d const &other) const;

1554 6 output 4 2499 18 LVecBase2d::output 0 1 120 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::output(ostream &out) const;

1555 11 python_repr 4 2499 23 LVecBase2d::python_repr 0 1 121 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1556 14 get_class_type 4 2499 26 LVecBase2d::get_class_type 0 1 122 0
51
static TypeHandle LVecBase2d::get_class_type(void);

1557 9 LVector2f 4 2500 20 LVector2f::LVector2f 0 4 123 124 125 126 1375
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
181
inline LVector2f::LVector2f(void);
inline LVector2f::LVector2f(LVecBase2f const &copy);
inline LVector2f::LVector2f(float fill_value);
inline LVector2f::LVector2f(float x, float y);

1558 10 operator = 4 2500 21 LVector2f::operator = 0 2 127 128 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector2f &LVector2f::operator =(LVecBase2f const &copy);
inline LVector2f &LVector2f::operator =(float fill_value);

1559 11 __getattr__ 4 2500 22 LVector2f::__getattr__ 0 1 129 261
////////////////////////////////////////////////////////////////////
//     Function: LVector2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector2f::__getattr__(basic_string< char > const &attr_name) const;

1560 11 __setattr__ 4 2500 22 LVector2f::__setattr__ 0 1 130 259
////////////////////////////////////////////////////////////////////
//     Function: LVector2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1561 4 zero 4 2500 15 LVector2f::zero 0 1 131 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2f const &LVector2f::zero(void);

1562 6 unit_x 4 2500 17 LVector2f::unit_x 0 1 132 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_x(void);

1563 6 unit_y 4 2500 17 LVector2f::unit_y 0 1 133 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_y(void);

1564 10 operator - 68 2500 21 LVector2f::operator - 0 1 134 213
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector2f LVector2f::operator -(void) const;

1565 10 operator + 4 2500 21 LVector2f::operator + 0 2 135 136 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2f LVector2f::operator +(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator +(LVector2f const &other) const;

1566 10 operator - 4 2500 21 LVector2f::operator - 0 2 137 138 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2f LVector2f::operator -(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator -(LVector2f const &other) const;

1567 10 operator * 4 2500 21 LVector2f::operator * 0 1 139 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator *(float scalar) const;

1568 10 operator / 4 2500 21 LVector2f::operator / 0 1 140 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator /(float scalar) const;

1569 7 project 4 2500 18 LVector2f::project 0 1 141 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2f LVector2f::project(LVecBase2f const &onto) const;

1570 16 signed_angle_rad 4 2500 27 LVector2f::signed_angle_rad 0 1 142 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_rad(LVector2f const &other) const;

1571 16 signed_angle_deg 4 2500 27 LVector2f::signed_angle_deg 0 1 143 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_deg(LVector2f const &other) const;

1572 11 python_repr 4 2500 22 LVector2f::python_repr 0 1 144 220
////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1573 14 get_class_type 4 2500 25 LVector2f::get_class_type 0 1 145 0
50
static TypeHandle LVector2f::get_class_type(void);

1574 10 ~LVector2f 4 2500 21 LVector2f::~LVector2f 0 0 0
28
LVector2f::~LVector2f(void);

1575 9 LVector2d 4 2501 20 LVector2d::LVector2d 0 4 146 147 148 149 2752
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
184
inline LVector2d::LVector2d(void);
inline LVector2d::LVector2d(LVecBase2d const &copy);
inline LVector2d::LVector2d(double fill_value);
inline LVector2d::LVector2d(double x, double y);

1576 10 operator = 4 2501 21 LVector2d::operator = 0 2 150 151 914
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector2d &LVector2d::operator =(LVecBase2d const &copy);
inline LVector2d &LVector2d::operator =(double fill_value);

1577 11 __getattr__ 4 2501 22 LVector2d::__getattr__ 0 1 152 261
////////////////////////////////////////////////////////////////////
//     Function: LVector2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector2d::__getattr__(basic_string< char > const &attr_name) const;

1578 11 __setattr__ 4 2501 22 LVector2d::__setattr__ 0 1 153 259
////////////////////////////////////////////////////////////////////
//     Function: LVector2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1579 4 zero 4 2501 15 LVector2d::zero 0 1 154 518
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2d const &LVector2d::zero(void);

1580 6 unit_x 4 2501 17 LVector2d::unit_x 0 1 155 512
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_x(void);

1581 6 unit_y 4 2501 17 LVector2d::unit_y 0 1 156 512
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_y(void);

1582 10 operator - 68 2501 21 LVector2d::operator - 0 1 157 428
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector2d LVector2d::operator -(void) const;

1583 10 operator + 4 2501 21 LVector2d::operator + 0 2 158 159 892
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2d LVector2d::operator +(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator +(LVector2d const &other) const;

1584 10 operator - 4 2501 21 LVector2d::operator - 0 2 160 161 892
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2d LVector2d::operator -(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator -(LVector2d const &other) const;

1585 10 operator * 4 2501 21 LVector2d::operator * 0 1 162 448
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator *(double scalar) const;

1586 10 operator / 4 2501 21 LVector2d::operator / 0 1 163 448
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator /(double scalar) const;

1587 7 project 4 2501 18 LVector2d::project 0 1 164 780
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2d LVector2d::project(LVecBase2d const &onto) const;

1588 16 signed_angle_rad 4 2501 27 LVector2d::signed_angle_rad 0 1 165 644
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_rad(LVector2d const &other) const;

1589 16 signed_angle_deg 4 2501 27 LVector2d::signed_angle_deg 0 1 166 644
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_deg(LVector2d const &other) const;

1590 11 python_repr 4 2501 22 LVector2d::python_repr 0 1 167 442
////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1591 14 get_class_type 4 2501 25 LVector2d::get_class_type 0 1 168 0
50
static TypeHandle LVector2d::get_class_type(void);

1592 10 ~LVector2d 4 2501 21 LVector2d::~LVector2d 0 0 0
28
LVector2d::~LVector2d(void);

1593 8 LPoint2f 4 2502 18 LPoint2f::LPoint2f 0 4 169 170 171 172 1370
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
173
inline LPoint2f::LPoint2f(void);
inline LPoint2f::LPoint2f(LVecBase2f const &copy);
inline LPoint2f::LPoint2f(float fill_value);
inline LPoint2f::LPoint2f(float x, float y);

1594 10 operator = 4 2502 20 LPoint2f::operator = 0 2 173 174 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint2f &LPoint2f::operator =(LVecBase2f const &copy);
inline LPoint2f &LPoint2f::operator =(float fill_value);

1595 11 __getattr__ 4 2502 21 LPoint2f::__getattr__ 0 1 175 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint2f::__getattr__(basic_string< char > const &attr_name) const;

1596 11 __setattr__ 4 2502 21 LPoint2f::__setattr__ 0 1 176 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint2f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1597 4 zero 4 2502 14 LPoint2f::zero 0 1 177 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2f const &LPoint2f::zero(void);

1598 6 unit_x 4 2502 16 LPoint2f::unit_x 0 1 178 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_x(void);

1599 6 unit_y 4 2502 16 LPoint2f::unit_y 0 1 179 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_y(void);

1600 10 operator - 68 2502 20 LPoint2f::operator - 0 1 180 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint2f LPoint2f::operator -(void) const;

1601 10 operator + 4 2502 20 LPoint2f::operator + 0 2 181 182 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase2f LPoint2f::operator +(LVecBase2f const &other) const;
inline LPoint2f LPoint2f::operator +(LVector2f const &other) const;

1602 10 operator - 4 2502 20 LPoint2f::operator - 0 3 183 184 185 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase2f LPoint2f::operator -(LVecBase2f const &other) const;
inline LVector2f LPoint2f::operator -(LPoint2f const &other) const;
inline LPoint2f LPoint2f::operator -(LVector2f const &other) const;

1603 10 operator * 4 2502 20 LPoint2f::operator * 0 1 186 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator *(float scalar) const;

1604 10 operator / 4 2502 20 LPoint2f::operator / 0 1 187 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator /(float scalar) const;

1605 7 project 4 2502 17 LPoint2f::project 0 1 188 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2f LPoint2f::project(LVecBase2f const &onto) const;

1606 11 python_repr 4 2502 21 LPoint2f::python_repr 0 1 189 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1607 14 get_class_type 4 2502 24 LPoint2f::get_class_type 0 1 190 0
49
static TypeHandle LPoint2f::get_class_type(void);

1608 9 ~LPoint2f 4 2502 19 LPoint2f::~LPoint2f 0 0 0
26
LPoint2f::~LPoint2f(void);

1609 8 LPoint2d 4 2503 18 LPoint2d::LPoint2d 0 4 191 192 193 194 2742
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
176
inline LPoint2d::LPoint2d(void);
inline LPoint2d::LPoint2d(LVecBase2d const &copy);
inline LPoint2d::LPoint2d(double fill_value);
inline LPoint2d::LPoint2d(double x, double y);

1610 10 operator = 4 2503 20 LPoint2d::operator = 0 2 195 196 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint2d &LPoint2d::operator =(LVecBase2d const &copy);
inline LPoint2d &LPoint2d::operator =(double fill_value);

1611 11 __getattr__ 4 2503 21 LPoint2d::__getattr__ 0 1 197 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint2d::__getattr__(basic_string< char > const &attr_name) const;

1612 11 __setattr__ 4 2503 21 LPoint2d::__setattr__ 0 1 198 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint2d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1613 4 zero 4 2503 14 LPoint2d::zero 0 1 199 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2d const &LPoint2d::zero(void);

1614 6 unit_x 4 2503 16 LPoint2d::unit_x 0 1 200 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_x(void);

1615 6 unit_y 4 2503 16 LPoint2d::unit_y 0 1 201 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_y(void);

1616 10 operator - 68 2503 20 LPoint2d::operator - 0 1 202 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint2d LPoint2d::operator -(void) const;

1617 10 operator + 4 2503 20 LPoint2d::operator + 0 2 203 204 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase2d LPoint2d::operator +(LVecBase2d const &other) const;
inline LPoint2d LPoint2d::operator +(LVector2d const &other) const;

1618 10 operator - 4 2503 20 LPoint2d::operator - 0 3 205 206 207 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase2d LPoint2d::operator -(LVecBase2d const &other) const;
inline LVector2d LPoint2d::operator -(LPoint2d const &other) const;
inline LPoint2d LPoint2d::operator -(LVector2d const &other) const;

1619 10 operator * 4 2503 20 LPoint2d::operator * 0 1 208 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator *(double scalar) const;

1620 10 operator / 4 2503 20 LPoint2d::operator / 0 1 209 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator /(double scalar) const;

1621 7 project 4 2503 17 LPoint2d::project 0 1 210 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2d LPoint2d::project(LVecBase2d const &onto) const;

1622 11 python_repr 4 2503 21 LPoint2d::python_repr 0 1 211 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1623 14 get_class_type 4 2503 24 LPoint2d::get_class_type 0 1 212 0
49
static TypeHandle LPoint2d::get_class_type(void);

1624 9 ~LPoint2d 4 2503 19 LPoint2d::~LPoint2d 0 0 0
26
LPoint2d::~LPoint2d(void);

1625 10 LVecBase3f 4 2504 22 LVecBase3f::LVecBase3f 0 4 213 214 215 216 1380
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LVecBase3f::LVecBase3f(void);
inline LVecBase3f::LVecBase3f(LVecBase3f const &copy);
inline LVecBase3f::LVecBase3f(float fill_value);
inline LVecBase3f::LVecBase3f(float x, float y, float z);

1626 10 operator = 4 2504 22 LVecBase3f::operator = 0 2 217 218 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase3f &LVecBase3f::operator =(LVecBase3f const &copy);
inline LVecBase3f &LVecBase3f::operator =(float fill_value);

1627 12 operator new 4 2504 24 LVecBase3f::operator new 0 1 219 0
126
inline void *LVecBase3f::operator new(unsigned int size);
inline void *LVecBase3f::operator new(unsigned int size, void *ptr);

1628 15 operator delete 4 2504 27 LVecBase3f::operator delete 0 0 0
108
inline void LVecBase3f::operator delete(void *ptr);
inline void LVecBase3f::operator delete(void *, void *);

1629 12 validate_ptr 4 2504 24 LVecBase3f::validate_ptr 0 0 0
61
static inline bool LVecBase3f::validate_ptr(void const *ptr);

1630 4 zero 4 2504 16 LVecBase3f::zero 0 1 220 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3f const &LVecBase3f::zero(void);

1631 6 unit_x 4 2504 18 LVecBase3f::unit_x 0 1 221 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_x(void);

1632 6 unit_y 4 2504 18 LVecBase3f::unit_y 0 1 222 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_y(void);

1633 6 unit_z 4 2504 18 LVecBase3f::unit_z 0 1 223 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_z(void);

1634 11 ~LVecBase3f 4 2504 23 LVecBase3f::~LVecBase3f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3f::~LVecBase3f(void);

1635 10 __reduce__ 4 2504 22 LVecBase3f::__reduce__ 0 1 224 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase3f::__reduce__(PyObject *self) const;

1636 11 __getattr__ 4 2504 23 LVecBase3f::__getattr__ 0 1 225 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase3f::__getattr__(basic_string< char > const &attr_name) const;

1637 11 __setattr__ 4 2504 23 LVecBase3f::__setattr__ 0 1 226 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1638 11 operator [] 4 2504 23 LVecBase3f::operator [] 0 2 227 228 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase3f::operator [](int i) const;
inline float &LVecBase3f::operator [](int i);

1639 11 __setitem__ 4 2504 23 LVecBase3f::__setitem__ 0 1 229 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase3f::__setitem__(int i, float v);

1640 4 size 4 2504 16 LVecBase3f::size 0 1 230 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3f::size(void);

1641 6 is_nan 4 2504 18 LVecBase3f::is_nan 0 1 231 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3f::is_nan(void) const;

1642 8 get_cell 4 2504 20 LVecBase3f::get_cell 0 1 232 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase3f::get_cell(int i) const;

1643 5 get_x 4 2504 17 LVecBase3f::get_x 0 1 233 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_x(void) const;

1644 5 get_y 4 2504 17 LVecBase3f::get_y 0 1 234 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_y(void) const;

1645 5 get_z 4 2504 17 LVecBase3f::get_z 0 1 235 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_z(void) const;

1646 8 set_cell 4 2504 20 LVecBase3f::set_cell 0 1 236 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3f::set_cell(int i, float value);

1647 5 set_x 4 2504 17 LVecBase3f::set_x 0 1 237 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_x(float value);

1648 5 set_y 4 2504 17 LVecBase3f::set_y 0 1 238 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_y(float value);

1649 5 set_z 4 2504 17 LVecBase3f::set_z 0 1 239 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_z(float value);

1650 6 get_xy 4 2504 18 LVecBase3f::get_xy 0 1 240 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xy(void) const;

1651 6 get_xz 4 2504 18 LVecBase3f::get_xz 0 1 241 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xz(void) const;

1652 6 get_yz 4 2504 18 LVecBase3f::get_yz 0 1 242 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_yz(void) const;

1653 11 add_to_cell 4 2504 23 LVecBase3f::add_to_cell 0 1 243 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase3f::add_to_cell(int i, float value);

1654 5 add_x 4 2504 17 LVecBase3f::add_x 0 1 244 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_x(float value);

1655 5 add_y 4 2504 17 LVecBase3f::add_y 0 1 245 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_y(float value);

1656 5 add_z 4 2504 17 LVecBase3f::add_z 0 1 246 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_z(float value);

1657 8 get_data 4 2504 20 LVecBase3f::get_data 0 1 247 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase3f::get_data(void) const;

1658 18 get_num_components 4 2504 30 LVecBase3f::get_num_components 0 1 248 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3f::get_num_components(void) const;

1659 4 fill 4 2504 16 LVecBase3f::fill 0 1 249 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase3f::fill(float fill_value);

1660 3 set 4 2504 15 LVecBase3f::set 0 1 250 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void LVecBase3f::set(float x, float y, float z);

1661 6 length 4 2504 18 LVecBase3f::length 0 1 251 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase3f::length(void) const;

1662 14 length_squared 4 2504 26 LVecBase3f::length_squared 0 1 252 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase3f::length_squared(void) const;

1663 9 normalize 4 2504 21 LVecBase3f::normalize 0 1 253 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3f::normalize(void);

1664 3 dot 4 2504 15 LVecBase3f::dot 0 1 254 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase3f::dot(LVecBase3f const &other) const;

1665 5 cross 4 2504 17 LVecBase3f::cross 0 1 255 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const;

1666 7 project 4 2504 19 LVecBase3f::project 0 1 256 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LVecBase3f::project(LVecBase3f const &onto) const;

1667 10 operator < 4 2504 22 LVecBase3f::operator < 0 1 257 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3f::operator <(LVecBase3f const &other) const;

1668 11 operator == 4 2504 23 LVecBase3f::operator == 0 1 258 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator ==(LVecBase3f const &other) const;

1669 11 operator != 4 2504 23 LVecBase3f::operator != 0 1 259 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator !=(LVecBase3f const &other) const;

1670 20 get_standardized_hpr 4 2504 32 LVecBase3f::get_standardized_hpr 0 1 260 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const;

1671 10 compare_to 4 2504 22 LVecBase3f::compare_to 0 2 261 262 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase3f::compare_to(LVecBase3f const &other) const;
inline int LVecBase3f::compare_to(LVecBase3f const &other, float threshold) const;

1672 8 get_hash 4 2504 20 LVecBase3f::get_hash 0 2 263 264 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase3f::get_hash(void) const;
inline unsigned int LVecBase3f::get_hash(float threshold) const;

1673 8 add_hash 4 2504 20 LVecBase3f::add_hash 0 2 265 266 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase3f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3f::add_hash(unsigned int hash, float threshold) const;

1674 10 operator - 68 2504 22 LVecBase3f::operator - 0 1 267 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LVecBase3f::operator -(void) const;

1675 10 operator + 4 2504 22 LVecBase3f::operator + 0 1 268 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const;

1676 10 operator - 4 2504 22 LVecBase3f::operator - 0 1 269 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const;

1677 10 operator * 4 2504 22 LVecBase3f::operator * 0 1 270 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator *(float scalar) const;

1678 10 operator / 4 2504 22 LVecBase3f::operator / 0 1 271 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator /(float scalar) const;

1679 11 operator += 4 2504 23 LVecBase3f::operator += 0 1 272 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator +=(LVecBase3f const &other);

1680 11 operator -= 4 2504 23 LVecBase3f::operator -= 0 1 273 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator -=(LVecBase3f const &other);

1681 11 operator *= 4 2504 23 LVecBase3f::operator *= 0 1 274 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator *=(float scalar);

1682 11 operator /= 4 2504 23 LVecBase3f::operator /= 0 1 275 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator /=(float scalar);

1683 4 fmax 4 2504 16 LVecBase3f::fmax 0 1 276 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other);

1684 4 fmin 4 2504 16 LVecBase3f::fmin 0 1 277 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other);

1685 10 cross_into 4 2504 22 LVecBase3f::cross_into 0 1 278 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3f::cross_into(LVecBase3f const &other);

1686 12 almost_equal 4 2504 24 LVecBase3f::almost_equal 0 2 279 280 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const;
inline bool LVecBase3f::almost_equal(LVecBase3f const &other) const;

1687 6 output 4 2504 18 LVecBase3f::output 0 1 281 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3f::output(ostream &out) const;

1688 11 python_repr 4 2504 23 LVecBase3f::python_repr 0 1 282 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1689 14 get_class_type 4 2504 26 LVecBase3f::get_class_type 0 1 283 0
51
static TypeHandle LVecBase3f::get_class_type(void);

1690 10 LVecBase3d 4 2505 22 LVecBase3d::LVecBase3d 0 4 284 285 286 287 2762
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
202
inline LVecBase3d::LVecBase3d(void);
inline LVecBase3d::LVecBase3d(LVecBase3d const &copy);
inline LVecBase3d::LVecBase3d(double fill_value);
inline LVecBase3d::LVecBase3d(double x, double y, double z);

1691 10 operator = 4 2505 22 LVecBase3d::operator = 0 2 288 289 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase3d &LVecBase3d::operator =(LVecBase3d const &copy);
inline LVecBase3d &LVecBase3d::operator =(double fill_value);

1692 12 operator new 4 2505 24 LVecBase3d::operator new 0 1 290 0
126
inline void *LVecBase3d::operator new(unsigned int size);
inline void *LVecBase3d::operator new(unsigned int size, void *ptr);

1693 15 operator delete 4 2505 27 LVecBase3d::operator delete 0 0 0
108
inline void LVecBase3d::operator delete(void *ptr);
inline void LVecBase3d::operator delete(void *, void *);

1694 12 validate_ptr 4 2505 24 LVecBase3d::validate_ptr 0 0 0
61
static inline bool LVecBase3d::validate_ptr(void const *ptr);

1695 4 zero 4 2505 16 LVecBase3d::zero 0 1 291 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3d const &LVecBase3d::zero(void);

1696 6 unit_x 4 2505 18 LVecBase3d::unit_x 0 1 292 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_x(void);

1697 6 unit_y 4 2505 18 LVecBase3d::unit_y 0 1 293 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_y(void);

1698 6 unit_z 4 2505 18 LVecBase3d::unit_z 0 1 294 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_z(void);

1699 11 ~LVecBase3d 4 2505 23 LVecBase3d::~LVecBase3d 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3d::~LVecBase3d(void);

1700 10 __reduce__ 4 2505 22 LVecBase3d::__reduce__ 0 1 295 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase3d::__reduce__(PyObject *self) const;

1701 11 __getattr__ 4 2505 23 LVecBase3d::__getattr__ 0 1 296 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase3d::__getattr__(basic_string< char > const &attr_name) const;

1702 11 __setattr__ 4 2505 23 LVecBase3d::__setattr__ 0 1 297 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1703 11 operator [] 4 2505 23 LVecBase3d::operator [] 0 2 298 299 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase3d::operator [](int i) const;
inline double &LVecBase3d::operator [](int i);

1704 11 __setitem__ 4 2505 23 LVecBase3d::__setitem__ 0 1 300 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3d::__setitem__(int i, double v);

1705 4 size 4 2505 16 LVecBase3d::size 0 1 301 574
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3d::size(void);

1706 6 is_nan 4 2505 18 LVecBase3d::is_nan 0 1 302 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3d::is_nan(void) const;

1707 8 get_cell 4 2505 20 LVecBase3d::get_cell 0 1 303 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase3d::get_cell(int i) const;

1708 5 get_x 4 2505 17 LVecBase3d::get_x 0 1 304 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_x(void) const;

1709 5 get_y 4 2505 17 LVecBase3d::get_y 0 1 305 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_y(void) const;

1710 5 get_z 4 2505 17 LVecBase3d::get_z 0 1 306 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_z(void) const;

1711 8 set_cell 4 2505 20 LVecBase3d::set_cell 0 1 307 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3d::set_cell(int i, double value);

1712 5 set_x 4 2505 17 LVecBase3d::set_x 0 1 308 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_x(double value);

1713 5 set_y 4 2505 17 LVecBase3d::set_y 0 1 309 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_y(double value);

1714 5 set_z 4 2505 17 LVecBase3d::set_z 0 1 310 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_z(double value);

1715 6 get_xy 4 2505 18 LVecBase3d::get_xy 0 1 311 636
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xy(void) const;

1716 6 get_xz 4 2505 18 LVecBase3d::get_xz 0 1 312 646
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xz(void) const;

1717 6 get_yz 4 2505 18 LVecBase3d::get_yz 0 1 313 634
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_yz(void) const;

1718 11 add_to_cell 4 2505 23 LVecBase3d::add_to_cell 0 1 314 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase3d::add_to_cell(int i, double value);

1719 5 add_x 4 2505 17 LVecBase3d::add_x 0 1 315 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_x(double value);

1720 5 add_y 4 2505 17 LVecBase3d::add_y 0 1 316 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_y(double value);

1721 5 add_z 4 2505 17 LVecBase3d::add_z 0 1 317 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_z(double value);

1722 8 get_data 4 2505 20 LVecBase3d::get_data 0 1 318 800
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase3d::get_data(void) const;

1723 18 get_num_components 4 2505 30 LVecBase3d::get_num_components 0 1 319 558
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3d::get_num_components(void) const;

1724 4 fill 4 2505 16 LVecBase3d::fill 0 1 320 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase3d::fill(double fill_value);

1725 3 set 4 2505 15 LVecBase3d::set 0 1 321 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void LVecBase3d::set(double x, double y, double z);

1726 6 length 4 2505 18 LVecBase3d::length 0 1 322 592
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase3d::length(void) const;

1727 14 length_squared 4 2505 26 LVecBase3d::length_squared 0 1 323 602
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase3d::length_squared(void) const;

1728 9 normalize 4 2505 21 LVecBase3d::normalize 0 1 324 736
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3d::normalize(void);

1729 3 dot 4 2505 15 LVecBase3d::dot 0 1 325 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase3d::dot(LVecBase3d const &other) const;

1730 5 cross 4 2505 17 LVecBase3d::cross 0 1 326 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3d LVecBase3d::cross(LVecBase3d const &other) const;

1731 7 project 4 2505 19 LVecBase3d::project 0 1 327 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LVecBase3d::project(LVecBase3d const &onto) const;

1732 10 operator < 4 2505 22 LVecBase3d::operator < 0 1 328 998
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3d::operator <(LVecBase3d const &other) const;

1733 11 operator == 4 2505 23 LVecBase3d::operator == 0 1 329 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator ==(LVecBase3d const &other) const;

1734 11 operator != 4 2505 23 LVecBase3d::operator != 0 1 330 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator !=(LVecBase3d const &other) const;

1735 20 get_standardized_hpr 4 2505 32 LVecBase3d::get_standardized_hpr 0 1 331 2062
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3d LVecBase3d::get_standardized_hpr(void) const;

1736 10 compare_to 4 2505 22 LVecBase3d::compare_to 0 2 332 333 1656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase3d::compare_to(LVecBase3d const &other) const;
inline int LVecBase3d::compare_to(LVecBase3d const &other, double threshold) const;

1737 8 get_hash 4 2505 20 LVecBase3d::get_hash 0 2 334 335 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase3d::get_hash(void) const;
inline unsigned int LVecBase3d::get_hash(double threshold) const;

1738 8 add_hash 4 2505 20 LVecBase3d::add_hash 0 2 336 337 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase3d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3d::add_hash(unsigned int hash, double threshold) const;

1739 10 operator - 68 2505 22 LVecBase3d::operator - 0 1 338 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LVecBase3d::operator -(void) const;

1740 10 operator + 4 2505 22 LVecBase3d::operator + 0 1 339 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator +(LVecBase3d const &other) const;

1741 10 operator - 4 2505 22 LVecBase3d::operator - 0 1 340 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator -(LVecBase3d const &other) const;

1742 10 operator * 4 2505 22 LVecBase3d::operator * 0 1 341 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator *(double scalar) const;

1743 10 operator / 4 2505 22 LVecBase3d::operator / 0 1 342 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator /(double scalar) const;

1744 11 operator += 4 2505 23 LVecBase3d::operator += 0 1 343 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator +=(LVecBase3d const &other);

1745 11 operator -= 4 2505 23 LVecBase3d::operator -= 0 1 344 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator -=(LVecBase3d const &other);

1746 11 operator *= 4 2505 23 LVecBase3d::operator *= 0 1 345 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator *=(double scalar);

1747 11 operator /= 4 2505 23 LVecBase3d::operator /= 0 1 346 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator /=(double scalar);

1748 4 fmax 4 2505 16 LVecBase3d::fmax 0 1 347 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmax(LVecBase3d const &other);

1749 4 fmin 4 2505 16 LVecBase3d::fmin 0 1 348 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmin(LVecBase3d const &other);

1750 10 cross_into 4 2505 22 LVecBase3d::cross_into 0 1 349 484
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3d::cross_into(LVecBase3d const &other);

1751 12 almost_equal 4 2505 24 LVecBase3d::almost_equal 0 2 350 351 1326
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase3d::almost_equal(LVecBase3d const &other, double threshold) const;
inline bool LVecBase3d::almost_equal(LVecBase3d const &other) const;

1752 6 output 4 2505 18 LVecBase3d::output 0 1 352 434
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::output(ostream &out) const;

1753 11 python_repr 4 2505 23 LVecBase3d::python_repr 0 1 353 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1754 14 get_class_type 4 2505 26 LVecBase3d::get_class_type 0 1 354 0
51
static TypeHandle LVecBase3d::get_class_type(void);

1755 29 get_default_coordinate_system 1 0 29 get_default_coordinate_system 0 1 1341 0
53
CoordinateSystem get_default_coordinate_system(void);

1756 9 LVector3f 4 2507 20 LVector3f::LVector3f 0 4 355 356 357 358 1387
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
190
inline LVector3f::LVector3f(void);
inline LVector3f::LVector3f(LVecBase3f const &copy);
inline LVector3f::LVector3f(float fill_value);
inline LVector3f::LVector3f(float x, float y, float z);

1757 10 operator = 4 2507 21 LVector3f::operator = 0 2 359 360 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector3f &LVector3f::operator =(LVecBase3f const &copy);
inline LVector3f &LVector3f::operator =(float fill_value);

1758 11 __getattr__ 4 2507 22 LVector3f::__getattr__ 0 1 361 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector3f::__getattr__(basic_string< char > const &attr_name) const;

1759 11 __setattr__ 4 2507 22 LVector3f::__setattr__ 0 1 362 259
////////////////////////////////////////////////////////////////////
//     Function: LVector3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1760 4 zero 4 2507 15 LVector3f::zero 0 1 363 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3f const &LVector3f::zero(void);

1761 6 unit_x 4 2507 17 LVector3f::unit_x 0 1 364 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_x(void);

1762 6 unit_y 4 2507 17 LVector3f::unit_y 0 1 365 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_y(void);

1763 6 unit_z 4 2507 17 LVector3f::unit_z 0 1 366 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_z(void);

1764 6 get_xy 4 2507 17 LVector3f::get_xy 0 1 367 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xy(void) const;

1765 6 get_xz 4 2507 17 LVector3f::get_xz 0 1 368 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xz(void) const;

1766 6 get_yz 4 2507 17 LVector3f::get_yz 0 1 369 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_yz(void) const;

1767 10 operator - 68 2507 21 LVector3f::operator - 0 1 370 216
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector3f LVector3f::operator -(void) const;

1768 10 operator + 4 2507 21 LVector3f::operator + 0 2 371 372 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3f LVector3f::operator +(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator +(LVector3f const &other) const;

1769 10 operator - 4 2507 21 LVector3f::operator - 0 2 373 374 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3f LVector3f::operator -(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator -(LVector3f const &other) const;

1770 5 cross 4 2507 16 LVector3f::cross 0 1 375 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3f LVector3f::cross(LVecBase3f const &other) const;

1771 7 project 4 2507 18 LVector3f::project 0 1 376 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3f LVector3f::project(LVecBase3f const &onto) const;

1772 9 angle_rad 4 2507 20 LVector3f::angle_rad 0 1 377 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_rad(LVector3f const &other) const;

1773 9 angle_deg 4 2507 20 LVector3f::angle_deg 0 1 378 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_deg(LVector3f const &other) const;

1774 16 signed_angle_rad 4 2507 27 LVector3f::signed_angle_rad 0 1 379 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_rad(LVector3f const &other, LVector3f const &ref) const;

1775 16 signed_angle_deg 4 2507 27 LVector3f::signed_angle_deg 0 1 380 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_deg(LVector3f const &other, LVector3f const &ref) const;

1776 18 relative_angle_rad 4 2507 29 LVector3f::relative_angle_rad 0 1 381 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_rad(LVector3f const &other) const;

1777 18 relative_angle_deg 4 2507 29 LVector3f::relative_angle_deg 0 1 382 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_deg(LVector3f const &other) const;

1778 10 operator * 4 2507 21 LVector3f::operator * 0 1 383 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator *(float scalar) const;

1779 10 operator / 4 2507 21 LVector3f::operator / 0 1 384 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator /(float scalar) const;

1780 2 up 4 2507 13 LVector3f::up 0 2 385 386 341
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3f LVector3f::up(CoordinateSystem cs = (CS_default));

1781 5 right 4 2507 16 LVector3f::right 0 2 387 388 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3f LVector3f::right(CoordinateSystem cs = (CS_default));

1782 7 forward 4 2507 18 LVector3f::forward 0 2 389 390 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3f LVector3f::forward(CoordinateSystem cs = (CS_default));

1783 4 down 4 2507 15 LVector3f::down 0 2 391 392 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::down(CoordinateSystem cs = (CS_default));

1784 4 left 4 2507 15 LVector3f::left 0 2 393 394 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::left(CoordinateSystem cs = (CS_default));

1785 4 back 4 2507 15 LVector3f::back 0 2 395 396 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::back(CoordinateSystem cs = (CS_default));

1786 3 rfu 4 2507 14 LVector3f::rfu 0 2 397 398 524
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
109
static inline LVector3f LVector3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

1787 11 python_repr 4 2507 22 LVector3f::python_repr 0 1 399 220
////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1788 14 get_class_type 4 2507 25 LVector3f::get_class_type 0 1 400 0
50
static TypeHandle LVector3f::get_class_type(void);

1789 10 ~LVector3f 4 2507 21 LVector3f::~LVector3f 0 0 0
28
LVector3f::~LVector3f(void);

1790 9 LVector3d 4 2508 20 LVector3d::LVector3d 0 4 401 402 403 404 2776
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
194
inline LVector3d::LVector3d(void);
inline LVector3d::LVector3d(LVecBase3d const &copy);
inline LVector3d::LVector3d(double fill_value);
inline LVector3d::LVector3d(double x, double y, double z);

1791 10 operator = 4 2508 21 LVector3d::operator = 0 2 405 406 926
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector3d &LVector3d::operator =(LVecBase3d const &copy);
inline LVector3d &LVector3d::operator =(double fill_value);

1792 11 __getattr__ 4 2508 22 LVector3d::__getattr__ 0 1 407 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector3d::__getattr__(basic_string< char > const &attr_name) const;

1793 11 __setattr__ 4 2508 22 LVector3d::__setattr__ 0 1 408 259
////////////////////////////////////////////////////////////////////
//     Function: LVector3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1794 4 zero 4 2508 15 LVector3d::zero 0 1 409 524
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3d const &LVector3d::zero(void);

1795 6 unit_x 4 2508 17 LVector3d::unit_x 0 1 410 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_x(void);

1796 6 unit_y 4 2508 17 LVector3d::unit_y 0 1 411 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_y(void);

1797 6 unit_z 4 2508 17 LVector3d::unit_z 0 1 412 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_z(void);

1798 6 get_xy 4 2508 17 LVector3d::get_xy 0 1 413 634
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xy(void) const;

1799 6 get_xz 4 2508 17 LVector3d::get_xz 0 1 414 644
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xz(void) const;

1800 6 get_yz 4 2508 17 LVector3d::get_yz 0 1 415 632
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_yz(void) const;

1801 10 operator - 68 2508 21 LVector3d::operator - 0 1 416 434
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector3d LVector3d::operator -(void) const;

1802 10 operator + 4 2508 21 LVector3d::operator + 0 2 417 418 904
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3d LVector3d::operator +(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator +(LVector3d const &other) const;

1803 10 operator - 4 2508 21 LVector3d::operator - 0 2 419 420 904
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3d LVector3d::operator -(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator -(LVector3d const &other) const;

1804 5 cross 4 2508 16 LVector3d::cross 0 1 421 430
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3d LVector3d::cross(LVecBase3d const &other) const;

1805 7 project 4 2508 18 LVector3d::project 0 1 422 780
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3d LVector3d::project(LVecBase3d const &onto) const;

1806 9 angle_rad 4 2508 20 LVector3d::angle_rad 0 1 423 772
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_rad(LVector3d const &other) const;

1807 9 angle_deg 4 2508 20 LVector3d::angle_deg 0 1 424 754
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_deg(LVector3d const &other) const;

1808 16 signed_angle_rad 4 2508 27 LVector3d::signed_angle_rad 0 1 425 1098
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_rad(LVector3d const &other, LVector3d const &ref) const;

1809 16 signed_angle_deg 4 2508 27 LVector3d::signed_angle_deg 0 1 426 1100
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_deg(LVector3d const &other, LVector3d const &ref) const;

1810 18 relative_angle_rad 4 2508 29 LVector3d::relative_angle_rad 0 1 427 534
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_rad(LVector3d const &other) const;

1811 18 relative_angle_deg 4 2508 29 LVector3d::relative_angle_deg 0 1 428 534
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_deg(LVector3d const &other) const;

1812 10 operator * 4 2508 21 LVector3d::operator * 0 1 429 454
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator *(double scalar) const;

1813 10 operator / 4 2508 21 LVector3d::operator / 0 1 430 454
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator /(double scalar) const;

1814 2 up 4 2508 13 LVector3d::up 0 2 431 432 634
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3d LVector3d::up(CoordinateSystem cs = (CS_default));

1815 5 right 4 2508 16 LVector3d::right 0 2 433 434 596
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3d LVector3d::right(CoordinateSystem cs = (CS_default));

1816 7 forward 4 2508 18 LVector3d::forward 0 2 435 436 604
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3d LVector3d::forward(CoordinateSystem cs = (CS_default));

1817 4 down 4 2508 15 LVector3d::down 0 2 437 438 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::down(CoordinateSystem cs = (CS_default));

1818 4 left 4 2508 15 LVector3d::left 0 2 439 440 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::left(CoordinateSystem cs = (CS_default));

1819 4 back 4 2508 15 LVector3d::back 0 2 441 442 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::back(CoordinateSystem cs = (CS_default));

1820 3 rfu 4 2508 14 LVector3d::rfu 0 2 443 444 980
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
112
static inline LVector3d LVector3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

1821 11 python_repr 4 2508 22 LVector3d::python_repr 0 1 445 442
////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1822 14 get_class_type 4 2508 25 LVector3d::get_class_type 0 1 446 0
50
static TypeHandle LVector3d::get_class_type(void);

1823 10 ~LVector3d 4 2508 21 LVector3d::~LVector3d 0 0 0
28
LVector3d::~LVector3d(void);

1824 8 LPoint3f 4 2509 18 LPoint3f::LPoint3f 0 4 447 448 449 450 1370
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
182
inline LPoint3f::LPoint3f(void);
inline LPoint3f::LPoint3f(LVecBase3f const &copy);
inline LPoint3f::LPoint3f(float fill_value);
inline LPoint3f::LPoint3f(float x, float y, float z);

1825 10 operator = 4 2509 20 LPoint3f::operator = 0 2 451 452 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint3f &LPoint3f::operator =(LVecBase3f const &copy);
inline LPoint3f &LPoint3f::operator =(float fill_value);

1826 11 __getattr__ 4 2509 21 LPoint3f::__getattr__ 0 1 453 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint3f::__getattr__(basic_string< char > const &attr_name) const;

1827 11 __setattr__ 4 2509 21 LPoint3f::__setattr__ 0 1 454 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint3f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1828 4 zero 4 2509 14 LPoint3f::zero 0 1 455 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3f const &LPoint3f::zero(void);

1829 6 unit_x 4 2509 16 LPoint3f::unit_x 0 1 456 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_x(void);

1830 6 unit_y 4 2509 16 LPoint3f::unit_y 0 1 457 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_y(void);

1831 6 unit_z 4 2509 16 LPoint3f::unit_z 0 1 458 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_z(void);

1832 6 get_xy 4 2509 16 LPoint3f::get_xy 0 1 459 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xy(void) const;

1833 6 get_xz 4 2509 16 LPoint3f::get_xz 0 1 460 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xz(void) const;

1834 6 get_yz 4 2509 16 LPoint3f::get_yz 0 1 461 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_yz(void) const;

1835 10 operator - 68 2509 20 LPoint3f::operator - 0 1 462 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint3f LPoint3f::operator -(void) const;

1836 10 operator + 4 2509 20 LPoint3f::operator + 0 2 463 464 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase3f LPoint3f::operator +(LVecBase3f const &other) const;
inline LPoint3f LPoint3f::operator +(LVector3f const &other) const;

1837 10 operator - 4 2509 20 LPoint3f::operator - 0 3 465 466 467 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase3f LPoint3f::operator -(LVecBase3f const &other) const;
inline LVector3f LPoint3f::operator -(LPoint3f const &other) const;
inline LPoint3f LPoint3f::operator -(LVector3f const &other) const;

1838 5 cross 4 2509 15 LPoint3f::cross 0 1 468 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f LPoint3f::cross(LVecBase3f const &other) const;

1839 7 project 4 2509 17 LPoint3f::project 0 1 469 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f LPoint3f::project(LVecBase3f const &onto) const;

1840 10 operator * 4 2509 20 LPoint3f::operator * 0 1 470 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator *(float scalar) const;

1841 10 operator / 4 2509 20 LPoint3f::operator / 0 1 471 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator /(float scalar) const;

1842 6 origin 4 2509 16 LPoint3f::origin 0 2 472 473 489
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3f LPoint3f::origin(CoordinateSystem cs = (CS_default));

1843 3 rfu 4 2509 13 LPoint3f::rfu 0 2 474 475 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
107
static inline LPoint3f LPoint3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

1844 11 python_repr 4 2509 21 LPoint3f::python_repr 0 1 476 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1845 14 get_class_type 4 2509 24 LPoint3f::get_class_type 0 1 477 0
49
static TypeHandle LPoint3f::get_class_type(void);

1846 9 ~LPoint3f 4 2509 19 LPoint3f::~LPoint3f 0 0 0
26
LPoint3f::~LPoint3f(void);

1847 8 LPoint3d 4 2510 18 LPoint3d::LPoint3d 0 4 478 479 480 481 2742
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
186
inline LPoint3d::LPoint3d(void);
inline LPoint3d::LPoint3d(LVecBase3d const &copy);
inline LPoint3d::LPoint3d(double fill_value);
inline LPoint3d::LPoint3d(double x, double y, double z);

1848 10 operator = 4 2510 20 LPoint3d::operator = 0 2 482 483 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint3d &LPoint3d::operator =(LVecBase3d const &copy);
inline LPoint3d &LPoint3d::operator =(double fill_value);

1849 11 __getattr__ 4 2510 21 LPoint3d::__getattr__ 0 1 484 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint3d::__getattr__(basic_string< char > const &attr_name) const;

1850 11 __setattr__ 4 2510 21 LPoint3d::__setattr__ 0 1 485 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint3d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1851 4 zero 4 2510 14 LPoint3d::zero 0 1 486 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3d const &LPoint3d::zero(void);

1852 6 unit_x 4 2510 16 LPoint3d::unit_x 0 1 487 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_x(void);

1853 6 unit_y 4 2510 16 LPoint3d::unit_y 0 1 488 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_y(void);

1854 6 unit_z 4 2510 16 LPoint3d::unit_z 0 1 489 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_z(void);

1855 6 get_xy 4 2510 16 LPoint3d::get_xy 0 1 490 632
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xy(void) const;

1856 6 get_xz 4 2510 16 LPoint3d::get_xz 0 1 491 642
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xz(void) const;

1857 6 get_yz 4 2510 16 LPoint3d::get_yz 0 1 492 630
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_yz(void) const;

1858 10 operator - 68 2510 20 LPoint3d::operator - 0 1 493 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint3d LPoint3d::operator -(void) const;

1859 10 operator + 4 2510 20 LPoint3d::operator + 0 2 494 495 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase3d LPoint3d::operator +(LVecBase3d const &other) const;
inline LPoint3d LPoint3d::operator +(LVector3d const &other) const;

1860 10 operator - 4 2510 20 LPoint3d::operator - 0 3 496 497 498 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase3d LPoint3d::operator -(LVecBase3d const &other) const;
inline LVector3d LPoint3d::operator -(LPoint3d const &other) const;
inline LPoint3d LPoint3d::operator -(LVector3d const &other) const;

1861 5 cross 4 2510 15 LPoint3d::cross 0 1 499 422
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3d LPoint3d::cross(LVecBase3d const &other) const;

1862 7 project 4 2510 17 LPoint3d::project 0 1 500 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3d LPoint3d::project(LVecBase3d const &onto) const;

1863 10 operator * 4 2510 20 LPoint3d::operator * 0 1 501 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator *(double scalar) const;

1864 10 operator / 4 2510 20 LPoint3d::operator / 0 1 502 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator /(double scalar) const;

1865 6 origin 4 2510 16 LPoint3d::origin 0 2 503 504 931
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3d LPoint3d::origin(CoordinateSystem cs = (CS_default));

1866 3 rfu 4 2510 13 LPoint3d::rfu 0 2 505 506 768
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
110
static inline LPoint3d LPoint3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

1867 11 python_repr 4 2510 21 LPoint3d::python_repr 0 1 507 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1868 14 get_class_type 4 2510 24 LPoint3d::get_class_type 0 1 508 0
49
static TypeHandle LPoint3d::get_class_type(void);

1869 9 ~LPoint3d 4 2510 19 LPoint3d::~LPoint3d 0 0 0
26
LPoint3d::~LPoint3d(void);

1870 10 LVecBase4f 4 2511 22 LVecBase4f::LVecBase4f 0 4 509 510 511 512 1380
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
207
inline LVecBase4f::LVecBase4f(void);
inline LVecBase4f::LVecBase4f(LVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(float fill_value);
inline LVecBase4f::LVecBase4f(float x, float y, float z, float w);

1871 10 operator = 4 2511 22 LVecBase4f::operator = 0 2 513 514 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase4f &LVecBase4f::operator =(LVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(float fill_value);

1872 12 operator new 4 2511 24 LVecBase4f::operator new 0 1 515 0
126
inline void *LVecBase4f::operator new(unsigned int size);
inline void *LVecBase4f::operator new(unsigned int size, void *ptr);

1873 15 operator delete 4 2511 27 LVecBase4f::operator delete 0 0 0
108
inline void LVecBase4f::operator delete(void *ptr);
inline void LVecBase4f::operator delete(void *, void *);

1874 12 validate_ptr 4 2511 24 LVecBase4f::validate_ptr 0 0 0
61
static inline bool LVecBase4f::validate_ptr(void const *ptr);

1875 4 zero 4 2511 16 LVecBase4f::zero 0 1 516 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4f const &LVecBase4f::zero(void);

1876 6 unit_x 4 2511 18 LVecBase4f::unit_x 0 1 517 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_x(void);

1877 6 unit_y 4 2511 18 LVecBase4f::unit_y 0 1 518 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_y(void);

1878 6 unit_z 4 2511 18 LVecBase4f::unit_z 0 1 519 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_z(void);

1879 6 unit_w 4 2511 18 LVecBase4f::unit_w 0 1 520 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_w(void);

1880 11 ~LVecBase4f 4 2511 23 LVecBase4f::~LVecBase4f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4f::~LVecBase4f(void);

1881 10 __reduce__ 4 2511 22 LVecBase4f::__reduce__ 0 1 521 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase4f::__reduce__(PyObject *self) const;

1882 11 __getattr__ 4 2511 23 LVecBase4f::__getattr__ 0 1 522 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase4f::__getattr__(basic_string< char > const &attr_name) const;

1883 11 __setattr__ 4 2511 23 LVecBase4f::__setattr__ 0 1 523 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1884 11 operator [] 4 2511 23 LVecBase4f::operator [] 0 2 524 525 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase4f::operator [](int i) const;
inline float &LVecBase4f::operator [](int i);

1885 11 __setitem__ 4 2511 23 LVecBase4f::__setitem__ 0 1 526 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase4f::__setitem__(int i, float v);

1886 4 size 4 2511 16 LVecBase4f::size 0 1 527 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4f::size(void);

1887 6 is_nan 4 2511 18 LVecBase4f::is_nan 0 1 528 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4f::is_nan(void) const;

1888 8 get_cell 4 2511 20 LVecBase4f::get_cell 0 1 529 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase4f::get_cell(int i) const;

1889 5 get_x 4 2511 17 LVecBase4f::get_x 0 1 530 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_x(void) const;

1890 5 get_y 4 2511 17 LVecBase4f::get_y 0 1 531 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_y(void) const;

1891 5 get_z 4 2511 17 LVecBase4f::get_z 0 1 532 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_z(void) const;

1892 5 get_w 4 2511 17 LVecBase4f::get_w 0 1 533 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_w(void) const;

1893 8 set_cell 4 2511 20 LVecBase4f::set_cell 0 1 534 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4f::set_cell(int i, float value);

1894 5 set_x 4 2511 17 LVecBase4f::set_x 0 1 535 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_x(float value);

1895 5 set_y 4 2511 17 LVecBase4f::set_y 0 1 536 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_y(float value);

1896 5 set_z 4 2511 17 LVecBase4f::set_z 0 1 537 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_z(float value);

1897 5 set_w 4 2511 17 LVecBase4f::set_w 0 1 538 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_w(float value);

1898 11 add_to_cell 4 2511 23 LVecBase4f::add_to_cell 0 1 539 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4f::add_to_cell(int i, float value);

1899 5 add_x 4 2511 17 LVecBase4f::add_x 0 1 540 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_x(float value);

1900 5 add_y 4 2511 17 LVecBase4f::add_y 0 1 541 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_y(float value);

1901 5 add_z 4 2511 17 LVecBase4f::add_z 0 1 542 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_z(float value);

1902 5 add_w 4 2511 17 LVecBase4f::add_w 0 1 543 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_w(float value);

1903 8 get_data 4 2511 20 LVecBase4f::get_data 0 1 544 398
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase4f::get_data(void) const;

1904 18 get_num_components 4 2511 30 LVecBase4f::get_num_components 0 1 545 277
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4f::get_num_components(void) const;

1905 4 fill 4 2511 16 LVecBase4f::fill 0 1 546 361
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase4f::fill(float fill_value);

1906 3 set 4 2511 15 LVecBase4f::set 0 1 547 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::set(float x, float y, float z, float w);

1907 6 length 4 2511 18 LVecBase4f::length 0 1 548 292
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase4f::length(void) const;

1908 14 length_squared 4 2511 26 LVecBase4f::length_squared 0 1 549 297
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase4f::length_squared(void) const;

1909 9 normalize 4 2511 21 LVecBase4f::normalize 0 1 550 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4f::normalize(void);

1910 3 dot 4 2511 15 LVecBase4f::dot 0 1 551 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase4f::dot(LVecBase4f const &other) const;

1911 7 project 4 2511 19 LVecBase4f::project 0 1 552 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f LVecBase4f::project(LVecBase4f const &onto) const;

1912 10 operator < 4 2511 22 LVecBase4f::operator < 0 1 553 495
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4f::operator <(LVecBase4f const &other) const;

1913 11 operator == 4 2511 23 LVecBase4f::operator == 0 1 554 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator ==(LVecBase4f const &other) const;

1914 11 operator != 4 2511 23 LVecBase4f::operator != 0 1 555 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator !=(LVecBase4f const &other) const;

1915 10 compare_to 4 2511 22 LVecBase4f::compare_to 0 2 556 557 821
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase4f::compare_to(LVecBase4f const &other) const;
inline int LVecBase4f::compare_to(LVecBase4f const &other, float threshold) const;

1916 8 get_hash 4 2511 20 LVecBase4f::get_hash 0 2 558 559 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase4f::get_hash(void) const;
inline unsigned int LVecBase4f::get_hash(float threshold) const;

1917 8 add_hash 4 2511 20 LVecBase4f::add_hash 0 2 560 561 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase4f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4f::add_hash(unsigned int hash, float threshold) const;

1918 10 operator - 68 2511 22 LVecBase4f::operator - 0 1 562 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase4f LVecBase4f::operator -(void) const;

1919 10 operator + 4 2511 22 LVecBase4f::operator + 0 1 563 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator +(LVecBase4f const &other) const;

1920 10 operator - 4 2511 22 LVecBase4f::operator - 0 1 564 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator -(LVecBase4f const &other) const;

1921 10 operator * 4 2511 22 LVecBase4f::operator * 0 1 565 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator *(float scalar) const;

1922 10 operator / 4 2511 22 LVecBase4f::operator / 0 1 566 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator /(float scalar) const;

1923 11 operator += 4 2511 23 LVecBase4f::operator += 0 1 567 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator +=(LVecBase4f const &other);

1924 11 operator -= 4 2511 23 LVecBase4f::operator -= 0 1 568 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator -=(LVecBase4f const &other);

1925 11 operator *= 4 2511 23 LVecBase4f::operator *= 0 1 569 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator *=(float scalar);

1926 11 operator /= 4 2511 23 LVecBase4f::operator /= 0 1 570 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator /=(float scalar);

1927 4 fmax 4 2511 16 LVecBase4f::fmax 0 1 571 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmax(LVecBase4f const &other);

1928 4 fmin 4 2511 16 LVecBase4f::fmin 0 1 572 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmin(LVecBase4f const &other);

1929 12 almost_equal 4 2511 24 LVecBase4f::almost_equal 0 2 573 574 656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase4f::almost_equal(LVecBase4f const &other, float threshold) const;
inline bool LVecBase4f::almost_equal(LVecBase4f const &other) const;

1930 6 output 4 2511 18 LVecBase4f::output 0 1 575 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4f::output(ostream &out) const;

1931 11 python_repr 4 2511 23 LVecBase4f::python_repr 0 1 576 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1932 14 get_class_type 4 2511 26 LVecBase4f::get_class_type 0 1 577 0
51
static TypeHandle LVecBase4f::get_class_type(void);

1933 10 LVecBase4d 4 2512 22 LVecBase4d::LVecBase4d 0 4 578 579 580 581 2762
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
212
inline LVecBase4d::LVecBase4d(void);
inline LVecBase4d::LVecBase4d(LVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(double fill_value);
inline LVecBase4d::LVecBase4d(double x, double y, double z, double w);

1934 10 operator = 4 2512 22 LVecBase4d::operator = 0 2 582 583 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase4d &LVecBase4d::operator =(LVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(double fill_value);

1935 12 operator new 4 2512 24 LVecBase4d::operator new 0 1 584 0
126
inline void *LVecBase4d::operator new(unsigned int size);
inline void *LVecBase4d::operator new(unsigned int size, void *ptr);

1936 15 operator delete 4 2512 27 LVecBase4d::operator delete 0 0 0
108
inline void LVecBase4d::operator delete(void *ptr);
inline void LVecBase4d::operator delete(void *, void *);

1937 12 validate_ptr 4 2512 24 LVecBase4d::validate_ptr 0 0 0
61
static inline bool LVecBase4d::validate_ptr(void const *ptr);

1938 4 zero 4 2512 16 LVecBase4d::zero 0 1 585 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4d const &LVecBase4d::zero(void);

1939 6 unit_x 4 2512 18 LVecBase4d::unit_x 0 1 586 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_x(void);

1940 6 unit_y 4 2512 18 LVecBase4d::unit_y 0 1 587 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_y(void);

1941 6 unit_z 4 2512 18 LVecBase4d::unit_z 0 1 588 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_z(void);

1942 6 unit_w 4 2512 18 LVecBase4d::unit_w 0 1 589 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_w(void);

1943 11 ~LVecBase4d 4 2512 23 LVecBase4d::~LVecBase4d 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4d::~LVecBase4d(void);

1944 10 __reduce__ 4 2512 22 LVecBase4d::__reduce__ 0 1 590 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase4d::__reduce__(PyObject *self) const;

1945 11 __getattr__ 4 2512 23 LVecBase4d::__getattr__ 0 1 591 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
79
PyObject *LVecBase4d::__getattr__(basic_string< char > const &attr_name) const;

1946 11 __setattr__ 4 2512 23 LVecBase4d::__setattr__ 0 1 592 260
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
101
int LVecBase4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

1947 11 operator [] 4 2512 23 LVecBase4d::operator [] 0 2 593 594 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase4d::operator [](int i) const;
inline double &LVecBase4d::operator [](int i);

1948 11 __setitem__ 4 2512 23 LVecBase4d::__setitem__ 0 1 595 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4d::__setitem__(int i, double v);

1949 4 size 4 2512 16 LVecBase4d::size 0 1 596 574
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4d::size(void);

1950 6 is_nan 4 2512 18 LVecBase4d::is_nan 0 1 597 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4d::is_nan(void) const;

1951 8 get_cell 4 2512 20 LVecBase4d::get_cell 0 1 598 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase4d::get_cell(int i) const;

1952 5 get_x 4 2512 17 LVecBase4d::get_x 0 1 599 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_x(void) const;

1953 5 get_y 4 2512 17 LVecBase4d::get_y 0 1 600 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_y(void) const;

1954 5 get_z 4 2512 17 LVecBase4d::get_z 0 1 601 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_z(void) const;

1955 5 get_w 4 2512 17 LVecBase4d::get_w 0 1 602 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_w(void) const;

1956 8 set_cell 4 2512 20 LVecBase4d::set_cell 0 1 603 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4d::set_cell(int i, double value);

1957 5 set_x 4 2512 17 LVecBase4d::set_x 0 1 604 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_x(double value);

1958 5 set_y 4 2512 17 LVecBase4d::set_y 0 1 605 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_y(double value);

1959 5 set_z 4 2512 17 LVecBase4d::set_z 0 1 606 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_z(double value);

1960 5 set_w 4 2512 17 LVecBase4d::set_w 0 1 607 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_w(double value);

1961 11 add_to_cell 4 2512 23 LVecBase4d::add_to_cell 0 1 608 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase4d::add_to_cell(int i, double value);

1962 5 add_x 4 2512 17 LVecBase4d::add_x 0 1 609 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_x(double value);

1963 5 add_y 4 2512 17 LVecBase4d::add_y 0 1 610 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_y(double value);

1964 5 add_z 4 2512 17 LVecBase4d::add_z 0 1 611 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_z(double value);

1965 5 add_w 4 2512 17 LVecBase4d::add_w 0 1 612 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_w(double value);

1966 8 get_data 4 2512 20 LVecBase4d::get_data 0 1 613 798
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase4d::get_data(void) const;

1967 18 get_num_components 4 2512 30 LVecBase4d::get_num_components 0 1 614 556
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4d::get_num_components(void) const;

1968 4 fill 4 2512 16 LVecBase4d::fill 0 1 615 724
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase4d::fill(double fill_value);

1969 3 set 4 2512 15 LVecBase4d::set 0 1 616 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::set(double x, double y, double z, double w);

1970 6 length 4 2512 18 LVecBase4d::length 0 1 617 586
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase4d::length(void) const;

1971 14 length_squared 4 2512 26 LVecBase4d::length_squared 0 1 618 596
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase4d::length_squared(void) const;

1972 9 normalize 4 2512 21 LVecBase4d::normalize 0 1 619 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4d::normalize(void);

1973 3 dot 4 2512 15 LVecBase4d::dot 0 1 620 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase4d::dot(LVecBase4d const &other) const;

1974 7 project 4 2512 19 LVecBase4d::project 0 1 621 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4d LVecBase4d::project(LVecBase4d const &onto) const;

1975 10 operator < 4 2512 22 LVecBase4d::operator < 0 1 622 992
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4d::operator <(LVecBase4d const &other) const;

1976 11 operator == 4 2512 23 LVecBase4d::operator == 0 1 623 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator ==(LVecBase4d const &other) const;

1977 11 operator != 4 2512 23 LVecBase4d::operator != 0 1 624 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator !=(LVecBase4d const &other) const;

1978 10 compare_to 4 2512 22 LVecBase4d::compare_to 0 2 625 626 1644
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase4d::compare_to(LVecBase4d const &other) const;
inline int LVecBase4d::compare_to(LVecBase4d const &other, double threshold) const;

1979 8 get_hash 4 2512 20 LVecBase4d::get_hash 0 2 627 628 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase4d::get_hash(void) const;
inline unsigned int LVecBase4d::get_hash(double threshold) const;

1980 8 add_hash 4 2512 20 LVecBase4d::add_hash 0 2 629 630 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase4d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4d::add_hash(unsigned int hash, double threshold) const;

1981 10 operator - 68 2512 22 LVecBase4d::operator - 0 1 631 430
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase4d LVecBase4d::operator -(void) const;

1982 10 operator + 4 2512 22 LVecBase4d::operator + 0 1 632 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator +(LVecBase4d const &other) const;

1983 10 operator - 4 2512 22 LVecBase4d::operator - 0 1 633 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator -(LVecBase4d const &other) const;

1984 10 operator * 4 2512 22 LVecBase4d::operator * 0 1 634 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator *(double scalar) const;

1985 10 operator / 4 2512 22 LVecBase4d::operator / 0 1 635 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator /(double scalar) const;

1986 11 operator += 4 2512 23 LVecBase4d::operator += 0 1 636 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator +=(LVecBase4d const &other);

1987 11 operator -= 4 2512 23 LVecBase4d::operator -= 0 1 637 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator -=(LVecBase4d const &other);

1988 11 operator *= 4 2512 23 LVecBase4d::operator *= 0 1 638 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator *=(double scalar);

1989 11 operator /= 4 2512 23 LVecBase4d::operator /= 0 1 639 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator /=(double scalar);

1990 4 fmax 4 2512 16 LVecBase4d::fmax 0 1 640 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmax(LVecBase4d const &other);

1991 4 fmin 4 2512 16 LVecBase4d::fmin 0 1 641 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmin(LVecBase4d const &other);

1992 12 almost_equal 4 2512 24 LVecBase4d::almost_equal 0 2 642 643 1314
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase4d::almost_equal(LVecBase4d const &other, double threshold) const;
inline bool LVecBase4d::almost_equal(LVecBase4d const &other) const;

1993 6 output 4 2512 18 LVecBase4d::output 0 1 644 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::output(ostream &out) const;

1994 11 python_repr 4 2512 23 LVecBase4d::python_repr 0 1 645 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1995 14 get_class_type 4 2512 26 LVecBase4d::get_class_type 0 1 646 0
51
static TypeHandle LVecBase4d::get_class_type(void);

1996 9 LVector4f 4 2513 20 LVector4f::LVector4f 0 4 647 648 649 650 1375
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
199
inline LVector4f::LVector4f(void);
inline LVector4f::LVector4f(LVecBase4f const &copy);
inline LVector4f::LVector4f(float fill_value);
inline LVector4f::LVector4f(float x, float y, float z, float w);

1997 10 operator = 4 2513 21 LVector4f::operator = 0 2 651 652 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector4f &LVector4f::operator =(LVecBase4f const &copy);
inline LVector4f &LVector4f::operator =(float fill_value);

1998 11 __getattr__ 4 2513 22 LVector4f::__getattr__ 0 1 653 261
////////////////////////////////////////////////////////////////////
//     Function: LVector4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector4f::__getattr__(basic_string< char > const &attr_name) const;

1999 11 __setattr__ 4 2513 22 LVector4f::__setattr__ 0 1 654 259
////////////////////////////////////////////////////////////////////
//     Function: LVector4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2000 4 zero 4 2513 15 LVector4f::zero 0 1 655 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4f const &LVector4f::zero(void);

2001 6 unit_x 4 2513 17 LVector4f::unit_x 0 1 656 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_x(void);

2002 6 unit_y 4 2513 17 LVector4f::unit_y 0 1 657 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_y(void);

2003 6 unit_z 4 2513 17 LVector4f::unit_z 0 1 658 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_z(void);

2004 6 unit_w 4 2513 17 LVector4f::unit_w 0 1 659 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_w(void);

2005 10 operator - 68 2513 21 LVector4f::operator - 0 1 660 213
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector4f LVector4f::operator -(void) const;

2006 10 operator + 4 2513 21 LVector4f::operator + 0 2 661 662 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4f LVector4f::operator +(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator +(LVector4f const &other) const;

2007 10 operator - 4 2513 21 LVector4f::operator - 0 2 663 664 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4f LVector4f::operator -(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator -(LVector4f const &other) const;

2008 10 operator * 4 2513 21 LVector4f::operator * 0 1 665 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator *(float scalar) const;

2009 10 operator / 4 2513 21 LVector4f::operator / 0 1 666 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator /(float scalar) const;

2010 7 project 4 2513 18 LVector4f::project 0 1 667 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4f LVector4f::project(LVecBase4f const &onto) const;

2011 11 python_repr 4 2513 22 LVector4f::python_repr 0 1 668 220
////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2012 14 get_class_type 4 2513 25 LVector4f::get_class_type 0 1 669 0
50
static TypeHandle LVector4f::get_class_type(void);

2013 10 ~LVector4f 4 2513 21 LVector4f::~LVector4f 0 0 0
28
LVector4f::~LVector4f(void);

2014 9 LVector4d 4 2514 20 LVector4d::LVector4d 0 4 670 671 672 673 2752
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVector4d::LVector4d(void);
inline LVector4d::LVector4d(LVecBase4d const &copy);
inline LVector4d::LVector4d(double fill_value);
inline LVector4d::LVector4d(double x, double y, double z, double w);

2015 10 operator = 4 2514 21 LVector4d::operator = 0 2 674 675 914
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector4d &LVector4d::operator =(LVecBase4d const &copy);
inline LVector4d &LVector4d::operator =(double fill_value);

2016 11 __getattr__ 4 2514 22 LVector4d::__getattr__ 0 1 676 261
////////////////////////////////////////////////////////////////////
//     Function: LVector4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
78
PyObject *LVector4d::__getattr__(basic_string< char > const &attr_name) const;

2017 11 __setattr__ 4 2514 22 LVector4d::__setattr__ 0 1 677 259
////////////////////////////////////////////////////////////////////
//     Function: LVector4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
100
int LVector4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2018 4 zero 4 2514 15 LVector4d::zero 0 1 678 518
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4d const &LVector4d::zero(void);

2019 6 unit_x 4 2514 17 LVector4d::unit_x 0 1 679 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_x(void);

2020 6 unit_y 4 2514 17 LVector4d::unit_y 0 1 680 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_y(void);

2021 6 unit_z 4 2514 17 LVector4d::unit_z 0 1 681 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_z(void);

2022 6 unit_w 4 2514 17 LVector4d::unit_w 0 1 682 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_w(void);

2023 10 operator - 68 2514 21 LVector4d::operator - 0 1 683 428
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector4d LVector4d::operator -(void) const;

2024 10 operator + 4 2514 21 LVector4d::operator + 0 2 684 685 892
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4d LVector4d::operator +(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator +(LVector4d const &other) const;

2025 10 operator - 4 2514 21 LVector4d::operator - 0 2 686 687 892
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4d LVector4d::operator -(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator -(LVector4d const &other) const;

2026 10 operator * 4 2514 21 LVector4d::operator * 0 1 688 448
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator *(double scalar) const;

2027 10 operator / 4 2514 21 LVector4d::operator / 0 1 689 448
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator /(double scalar) const;

2028 7 project 4 2514 18 LVector4d::project 0 1 690 780
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4d LVector4d::project(LVecBase4d const &onto) const;

2029 11 python_repr 4 2514 22 LVector4d::python_repr 0 1 691 442
////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2030 14 get_class_type 4 2514 25 LVector4d::get_class_type 0 1 692 0
50
static TypeHandle LVector4d::get_class_type(void);

2031 10 ~LVector4d 4 2514 21 LVector4d::~LVector4d 0 0 0
28
LVector4d::~LVector4d(void);

2032 8 LPoint4f 4 2515 18 LPoint4f::LPoint4f 0 4 693 694 695 696 1370
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
191
inline LPoint4f::LPoint4f(void);
inline LPoint4f::LPoint4f(LVecBase4f const &copy);
inline LPoint4f::LPoint4f(float fill_value);
inline LPoint4f::LPoint4f(float x, float y, float z, float w);

2033 10 operator = 4 2515 20 LPoint4f::operator = 0 2 697 698 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint4f &LPoint4f::operator =(LVecBase4f const &copy);
inline LPoint4f &LPoint4f::operator =(float fill_value);

2034 11 __getattr__ 4 2515 21 LPoint4f::__getattr__ 0 1 699 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint4f::__getattr__(basic_string< char > const &attr_name) const;

2035 11 __setattr__ 4 2515 21 LPoint4f::__setattr__ 0 1 700 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint4f::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2036 4 zero 4 2515 14 LPoint4f::zero 0 1 701 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4f const &LPoint4f::zero(void);

2037 6 unit_x 4 2515 16 LPoint4f::unit_x 0 1 702 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_x(void);

2038 6 unit_y 4 2515 16 LPoint4f::unit_y 0 1 703 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_y(void);

2039 6 unit_z 4 2515 16 LPoint4f::unit_z 0 1 704 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_z(void);

2040 6 unit_w 4 2515 16 LPoint4f::unit_w 0 1 705 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_w(void);

2041 10 operator - 68 2515 20 LPoint4f::operator - 0 1 706 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint4f LPoint4f::operator -(void) const;

2042 10 operator + 4 2515 20 LPoint4f::operator + 0 2 707 708 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase4f LPoint4f::operator +(LVecBase4f const &other) const;
inline LPoint4f LPoint4f::operator +(LVector4f const &other) const;

2043 10 operator - 4 2515 20 LPoint4f::operator - 0 3 709 710 711 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase4f LPoint4f::operator -(LVecBase4f const &other) const;
inline LVector4f LPoint4f::operator -(LPoint4f const &other) const;
inline LPoint4f LPoint4f::operator -(LVector4f const &other) const;

2044 10 operator * 4 2515 20 LPoint4f::operator * 0 1 712 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator *(float scalar) const;

2045 10 operator / 4 2515 20 LPoint4f::operator / 0 1 713 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator /(float scalar) const;

2046 7 project 4 2515 17 LPoint4f::project 0 1 714 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4f LPoint4f::project(LVecBase4f const &onto) const;

2047 11 python_repr 4 2515 21 LPoint4f::python_repr 0 1 715 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2048 14 get_class_type 4 2515 24 LPoint4f::get_class_type 0 1 716 0
49
static TypeHandle LPoint4f::get_class_type(void);

2049 9 ~LPoint4f 4 2515 19 LPoint4f::~LPoint4f 0 0 0
26
LPoint4f::~LPoint4f(void);

2050 8 LPoint4d 4 2516 18 LPoint4d::LPoint4d 0 4 717 718 719 720 2742
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
196
inline LPoint4d::LPoint4d(void);
inline LPoint4d::LPoint4d(LVecBase4d const &copy);
inline LPoint4d::LPoint4d(double fill_value);
inline LPoint4d::LPoint4d(double x, double y, double z, double w);

2051 10 operator = 4 2516 20 LPoint4d::operator = 0 2 721 722 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint4d &LPoint4d::operator =(LVecBase4d const &copy);
inline LPoint4d &LPoint4d::operator =(double fill_value);

2052 11 __getattr__ 4 2516 21 LPoint4d::__getattr__ 0 1 723 260
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
////////////////////////////////////////////////////////////////////
77
PyObject *LPoint4d::__getattr__(basic_string< char > const &attr_name) const;

2053 11 __setattr__ 4 2516 21 LPoint4d::__setattr__ 0 1 724 258
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
////////////////////////////////////////////////////////////////////
99
int LPoint4d::__setattr__(PyObject *self, basic_string< char > const &attr_name, PyObject *assign);

2054 4 zero 4 2516 14 LPoint4d::zero 0 1 725 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4d const &LPoint4d::zero(void);

2055 6 unit_x 4 2516 16 LPoint4d::unit_x 0 1 726 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_x(void);

2056 6 unit_y 4 2516 16 LPoint4d::unit_y 0 1 727 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_y(void);

2057 6 unit_z 4 2516 16 LPoint4d::unit_z 0 1 728 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_z(void);

2058 6 unit_w 4 2516 16 LPoint4d::unit_w 0 1 729 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_w(void);

2059 10 operator - 68 2516 20 LPoint4d::operator - 0 1 730 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint4d LPoint4d::operator -(void) const;

2060 10 operator + 4 2516 20 LPoint4d::operator + 0 2 731 732 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase4d LPoint4d::operator +(LVecBase4d const &other) const;
inline LPoint4d LPoint4d::operator +(LVector4d const &other) const;

2061 10 operator - 4 2516 20 LPoint4d::operator - 0 3 733 734 735 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase4d LPoint4d::operator -(LVecBase4d const &other) const;
inline LVector4d LPoint4d::operator -(LPoint4d const &other) const;
inline LPoint4d LPoint4d::operator -(LVector4d const &other) const;

2062 10 operator * 4 2516 20 LPoint4d::operator * 0 1 736 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator *(double scalar) const;

2063 10 operator / 4 2516 20 LPoint4d::operator / 0 1 737 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator /(double scalar) const;

2064 7 project 4 2516 17 LPoint4d::project 0 1 738 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4d LPoint4d::project(LVecBase4d const &onto) const;

2065 11 python_repr 4 2516 21 LPoint4d::python_repr 0 1 739 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2066 14 get_class_type 4 2516 24 LPoint4d::get_class_type 0 1 740 0
49
static TypeHandle LPoint4d::get_class_type(void);

2067 9 ~LPoint4d 4 2516 19 LPoint4d::~LPoint4d 0 0 0
26
LPoint4d::~LPoint4d(void);

2068 11 operator [] 4 2518 27 LMatrix3f::Row::operator [] 0 2 839 840 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline float LMatrix3f::Row::operator [](int i) const;
inline float &LMatrix3f::Row::operator [](int i);

2069 11 __setitem__ 4 2518 27 LMatrix3f::Row::__setitem__ 0 1 841 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LMatrix3f::Row::__setitem__(int i, float v);

2070 4 size 4 2518 20 LMatrix3f::Row::size 0 1 842 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3f::Row::size(void);

2071 4 ~Row 4 2518 20 LMatrix3f::Row::~Row 0 0 0
27
LMatrix3f::Row::~Row(void);

2072 11 operator [] 4 2519 28 LMatrix3f::CRow::operator [] 0 1 843 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline float LMatrix3f::CRow::operator [](int i) const;

2073 4 size 4 2519 21 LMatrix3f::CRow::size 0 1 844 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3f::CRow::size(void);

2074 5 ~CRow 4 2519 22 LMatrix3f::CRow::~CRow 0 0 0
29
LMatrix3f::CRow::~CRow(void);

2075 9 LMatrix3f 4 2517 20 LMatrix3f::LMatrix3f 0 3 741 742 743 668
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
215
inline LMatrix3f::LMatrix3f(void);
inline LMatrix3f::LMatrix3f(LMatrix3f const &other);
inline LMatrix3f::LMatrix3f(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2076 10 operator = 4 2517 21 LMatrix3f::operator = 0 2 744 745 462
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix3f &LMatrix3f::operator =(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator =(float fill_value);

2077 12 operator new 4 2517 23 LMatrix3f::operator new 0 1 746 0
124
inline void *LMatrix3f::operator new(unsigned int size);
inline void *LMatrix3f::operator new(unsigned int size, void *ptr);

2078 15 operator delete 4 2517 26 LMatrix3f::operator delete 0 0 0
106
inline void LMatrix3f::operator delete(void *ptr);
inline void LMatrix3f::operator delete(void *, void *);

2079 12 validate_ptr 4 2517 23 LMatrix3f::validate_ptr 0 0 0
60
static inline bool LMatrix3f::validate_ptr(void const *ptr);

2080 10 __reduce__ 4 2517 21 LMatrix3f::__reduce__ 0 1 747 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix3f::__reduce__(PyObject *self) const;

2081 4 fill 4 2517 15 LMatrix3f::fill 0 1 748 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
39
void LMatrix3f::fill(float fill_value);

2082 3 set 4 2517 14 LMatrix3f::set 0 1 749 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
126
inline void LMatrix3f::set(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2083 7 set_row 4 2517 18 LMatrix3f::set_row 0 2 750 751 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_row(int row, LVecBase3f const &v);
inline void LMatrix3f::set_row(int row, LVecBase2f const &v);

2084 7 set_col 4 2517 18 LMatrix3f::set_col 0 2 752 753 639
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_col(int col, LVecBase3f const &v);
inline void LMatrix3f::set_col(int col, LVecBase2f const &v);

2085 7 get_row 4 2517 18 LMatrix3f::get_row 0 2 754 755 332
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3f LMatrix3f::get_row(int row) const;
inline void LMatrix3f::get_row(LVecBase3f &result_vec, int row) const;

2086 7 get_col 4 2517 18 LMatrix3f::get_col 0 1 756 302
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_col(int col) const;

2087 8 get_row2 4 2517 19 LMatrix3f::get_row2 0 1 757 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_row2(int row) const;

2088 8 get_col2 4 2517 19 LMatrix3f::get_col2 0 1 758 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_col2(int col) const;

2089 11 operator () 4 2517 22 LMatrix3f::operator () 0 2 759 760 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix3f::operator ()(int row, int col);
inline float LMatrix3f::operator ()(int row, int col) const;

2090 11 operator [] 4 2517 22 LMatrix3f::operator [] 0 2 761 762 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix3f::CRow LMatrix3f::operator [](int i) const;
inline LMatrix3f::Row LMatrix3f::operator [](int i);

2091 4 size 4 2517 15 LMatrix3f::size 0 1 763 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3f::size(void);

2092 6 is_nan 4 2517 17 LMatrix3f::is_nan 0 1 764 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3f::is_nan(void) const;

2093 8 get_cell 4 2517 19 LMatrix3f::get_cell 0 1 765 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix3f::get_cell(int row, int col) const;

2094 8 set_cell 4 2517 19 LMatrix3f::set_cell 0 1 766 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix3f::set_cell(int row, int col, float value);

2095 8 get_data 4 2517 19 LMatrix3f::get_data 0 1 767 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix3f::get_data(void) const;

2096 18 get_num_components 4 2517 29 LMatrix3f::get_num_components 0 1 768 276
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3f::get_num_components(void) const;

2097 10 operator < 4 2517 21 LMatrix3f::operator < 0 1 769 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3f::operator <(LMatrix3f const &other) const;

2098 11 operator == 4 2517 22 LMatrix3f::operator == 0 1 770 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator ==(LMatrix3f const &other) const;

2099 11 operator != 4 2517 22 LMatrix3f::operator != 0 1 771 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator !=(LMatrix3f const &other) const;

2100 10 compare_to 4 2517 21 LMatrix3f::compare_to 0 2 772 773 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix3f::compare_to(LMatrix3f const &other) const;
int LMatrix3f::compare_to(LMatrix3f const &other, float threshold) const;

2101 8 get_hash 4 2517 19 LMatrix3f::get_hash 0 2 774 775 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix3f::get_hash(void) const;
inline unsigned int LMatrix3f::get_hash(float threshold) const;

2102 8 add_hash 4 2517 19 LMatrix3f::add_hash 0 2 776 777 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix3f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3f::add_hash(unsigned int hash, float threshold) const;

2103 5 xform 4 2517 16 LMatrix3f::xform 0 1 778 253
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3f LMatrix3f::xform(LVecBase3f const &v) const;

2104 11 xform_point 4 2517 22 LMatrix3f::xform_point 0 1 779 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LMatrix3f::xform_point(LVecBase2f const &v) const;

2105 9 xform_vec 4 2517 20 LMatrix3f::xform_vec 0 2 780 781 843
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2f LMatrix3f::xform_vec(LVecBase2f const &v) const;
inline LVecBase3f LMatrix3f::xform_vec(LVecBase3f const &v) const;

2106 17 xform_vec_general 4 2517 28 LMatrix3f::xform_vec_general 0 1 782 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix3f::xform_vec_general(LVecBase3f const &v) const;

2107 8 multiply 4 2517 19 LMatrix3f::multiply 0 1 783 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3f::multiply(LMatrix3f const &other1, LMatrix3f const &other2);

2108 10 operator * 4 2517 21 LMatrix3f::operator * 0 2 784 785 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
129
inline LMatrix3f LMatrix3f::operator *(LMatrix3f const &other) const;
inline LMatrix3f LMatrix3f::operator *(float scalar) const;

2109 10 operator / 4 2517 21 LMatrix3f::operator / 0 1 786 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix3f LMatrix3f::operator /(float scalar) const;

2110 11 operator += 4 2517 22 LMatrix3f::operator += 0 1 787 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator +=(LMatrix3f const &other);

2111 11 operator -= 4 2517 22 LMatrix3f::operator -= 0 1 788 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator -=(LMatrix3f const &other);

2112 11 operator *= 4 2517 22 LMatrix3f::operator *= 0 2 789 790 475
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
121
inline LMatrix3f &LMatrix3f::operator *=(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator *=(float scalar);

2113 11 operator /= 4 2517 22 LMatrix3f::operator /= 0 1 791 251
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
55
inline LMatrix3f &LMatrix3f::operator /=(float scalar);

2114 11 determinant 4 2517 22 LMatrix3f::determinant 0 1 792 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
48
inline float LMatrix3f::determinant(void) const;

2115 14 transpose_from 4 2517 25 LMatrix3f::transpose_from 0 1 793 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3f::transpose_from(LMatrix3f const &other);

2116 18 transpose_in_place 4 2517 29 LMatrix3f::transpose_in_place 0 1 794 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3f::transpose_in_place(void);

2117 11 invert_from 4 2517 22 LMatrix3f::invert_from 0 1 795 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3f::invert_from(LMatrix3f const &other);

2118 15 invert_in_place 4 2517 26 LMatrix3f::invert_in_place 0 1 796 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3f::invert_in_place(void);

2119 21 invert_transpose_from 4 2517 32 LMatrix3f::invert_transpose_from 0 2 797 798 692
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3f::invert_transpose_from(LMatrix3f const &other);
inline bool LMatrix3f::invert_transpose_from(LMatrix4f const &other);

2120 9 ident_mat 4 2517 20 LMatrix3f::ident_mat 0 1 799 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3f const &LMatrix3f::ident_mat(void);

2121 17 set_translate_mat 4 2517 28 LMatrix3f::set_translate_mat 0 1 800 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::set_translate_mat(LVecBase2f const &trans);

2122 14 set_rotate_mat 4 2517 25 LMatrix3f::set_rotate_mat 0 3 801 802 803 810
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
149
inline void LMatrix3f::set_rotate_mat(float angle);
void LMatrix3f::set_rotate_mat(float angle, LVecBase3f axis, CoordinateSystem cs = (CS_default));

2123 13 set_scale_mat 4 2517 24 LMatrix3f::set_scale_mat 0 2 804 805 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3f::set_scale_mat(LVecBase2f const &scale);
inline void LMatrix3f::set_scale_mat(LVecBase3f const &scale);

2124 13 translate_mat 4 2517 24 LMatrix3f::translate_mat 0 2 806 807 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
144
static inline LMatrix3f LMatrix3f::translate_mat(LVecBase2f const &trans);
static inline LMatrix3f LMatrix3f::translate_mat(float tx, float ty);

2125 10 rotate_mat 4 2517 21 LMatrix3f::rotate_mat 0 3 808 809 810 665
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
172
static inline LMatrix3f LMatrix3f::rotate_mat(float angle);
static inline LMatrix3f LMatrix3f::rotate_mat(float angle, LVecBase3f axis, CoordinateSystem cs = (CS_default));

2126 9 scale_mat 4 2517 20 LMatrix3f::scale_mat 0 4 811 812 813 814 1266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
283
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase2f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy);
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase3f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy, float sz);

2127 23 set_rotate_mat_normaxis 4 2517 34 LMatrix3f::set_rotate_mat_normaxis 0 2 815 816 409
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix3f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2128 19 rotate_mat_normaxis 4 2517 30 LMatrix3f::rotate_mat_normaxis 0 2 817 818 405
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix3f LMatrix3f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2129 13 set_shear_mat 4 2517 24 LMatrix3f::set_shear_mat 0 2 819 820 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2130 9 shear_mat 4 2517 20 LMatrix3f::shear_mat 0 4 821 822 823 824 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix3f LMatrix3f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3f LMatrix3f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2131 19 set_scale_shear_mat 4 2517 30 LMatrix3f::set_scale_shear_mat 0 2 825 826 324
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2132 15 scale_shear_mat 4 2517 26 LMatrix3f::scale_shear_mat 0 4 827 828 829 830 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix3f LMatrix3f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3f LMatrix3f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2133 11 convert_mat 4 2517 22 LMatrix3f::convert_mat 0 1 831 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3f const &LMatrix3f::convert_mat(CoordinateSystem from, CoordinateSystem to);

2134 12 almost_equal 4 2517 23 LMatrix3f::almost_equal 0 2 832 833 807
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix3f::almost_equal(LMatrix3f const &other, float threshold) const;
inline bool LMatrix3f::almost_equal(LMatrix3f const &other) const;

2135 6 output 4 2517 17 LMatrix3f::output 0 1 834 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3f::output(ostream &out) const;

2136 5 write 4 2517 16 LMatrix3f::write 0 2 835 836 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write(ostream &out, int indent_level = (0)) const;

2137 11 python_repr 4 2517 22 LMatrix3f::python_repr 0 1 837 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2138 14 get_class_type 4 2517 25 LMatrix3f::get_class_type 0 1 838 0
50
static TypeHandle LMatrix3f::get_class_type(void);

2139 10 ~LMatrix3f 4 2517 21 LMatrix3f::~LMatrix3f 0 0 0
28
LMatrix3f::~LMatrix3f(void);

2140 9 transpose 1 0 9 transpose 0 4 1342 1343 1344 1345 0
191
inline LMatrix3f transpose(LMatrix3f const &a);
inline LMatrix4f transpose(LMatrix4f const &a);
inline LMatrix3d transpose(LMatrix3d const &a);
inline LMatrix4d transpose(LMatrix4d const &a);

2141 6 invert 1 0 6 invert 0 6 1346 1347 1348 1349 1350 1351 0
281
inline LMatrix3f invert(LMatrix3f const &a);
inline LMatrix4f invert(LMatrix4f const &a);
inline LMatrix3d invert(LMatrix3d const &a);
inline LMatrix4d invert(LMatrix4d const &a);
inline LQuaternionf invert(LQuaternionf const &a);
inline LQuaterniond invert(LQuaterniond const &a);

2142 11 operator [] 4 2521 27 LMatrix4f::Row::operator [] 0 2 949 950 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline float LMatrix4f::Row::operator [](int i) const;
inline float &LMatrix4f::Row::operator [](int i);

2143 11 __setitem__ 4 2521 27 LMatrix4f::Row::__setitem__ 0 1 951 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LMatrix4f::Row::__setitem__(int i, float v);

2144 4 size 4 2521 20 LMatrix4f::Row::size 0 1 952 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4f::Row::size(void);

2145 4 ~Row 4 2521 20 LMatrix4f::Row::~Row 0 0 0
27
LMatrix4f::Row::~Row(void);

2146 11 operator [] 4 2522 28 LMatrix4f::CRow::operator [] 0 1 953 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline float LMatrix4f::CRow::operator [](int i) const;

2147 4 size 4 2522 21 LMatrix4f::CRow::size 0 1 954 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4f::CRow::size(void);

2148 5 ~CRow 4 2522 22 LMatrix4f::CRow::~CRow 0 0 0
29
LMatrix4f::CRow::~CRow(void);

2149 9 LMatrix4f 4 2520 20 LMatrix4f::LMatrix4f 0 5 845 846 847 848 849 1339
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
425
inline LMatrix4f::LMatrix4f(void);
inline LMatrix4f::LMatrix4f(LMatrix4f const &other);
inline LMatrix4f::LMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3, LVecBase3f const &trans);

2150 10 operator = 4 2520 21 LMatrix4f::operator = 0 2 850 851 462
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix4f &LMatrix4f::operator =(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(float fill_value);

2151 12 operator new 4 2520 23 LMatrix4f::operator new 0 1 852 0
124
inline void *LMatrix4f::operator new(unsigned int size);
inline void *LMatrix4f::operator new(unsigned int size, void *ptr);

2152 15 operator delete 4 2520 26 LMatrix4f::operator delete 0 0 0
106
inline void LMatrix4f::operator delete(void *ptr);
inline void LMatrix4f::operator delete(void *, void *);

2153 12 validate_ptr 4 2520 23 LMatrix4f::validate_ptr 0 0 0
60
static inline bool LMatrix4f::validate_ptr(void const *ptr);

2154 10 __reduce__ 4 2520 21 LMatrix4f::__reduce__ 0 1 853 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix4f::__reduce__(PyObject *self) const;

2155 4 fill 4 2520 15 LMatrix4f::fill 0 1 854 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
46
inline void LMatrix4f::fill(float fill_value);

2156 3 set 4 2520 14 LMatrix4f::set 0 1 855 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
203
inline void LMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

2157 11 set_upper_3 4 2520 22 LMatrix4f::set_upper_3 0 1 856 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4f::set_upper_3(LMatrix3f const &upper3);

2158 11 get_upper_3 4 2520 22 LMatrix4f::get_upper_3 0 1 857 299
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3f LMatrix4f::get_upper_3(void) const;

2159 7 set_row 4 2520 18 LMatrix4f::set_row 0 2 858 859 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_row(int row, LVecBase4f const &v);
inline void LMatrix4f::set_row(int row, LVecBase3f const &v);

2160 7 set_col 4 2520 18 LMatrix4f::set_col 0 2 860 861 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_col(int col, LVecBase4f const &v);
inline void LMatrix4f::set_col(int col, LVecBase3f const &v);

2161 7 get_row 4 2520 18 LMatrix4f::get_row 0 2 862 863 330
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4f LMatrix4f::get_row(int row) const;
inline void LMatrix4f::get_row(LVecBase4f &result_vec, int row) const;

2162 7 get_col 4 2520 18 LMatrix4f::get_col 0 1 864 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_col(int col) const;

2163 8 get_row3 4 2520 19 LMatrix4f::get_row3 0 2 865 866 354
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3f LMatrix4f::get_row3(int row) const;
inline void LMatrix4f::get_row3(LVecBase3f &result_vec, int row) const;

2164 8 get_col3 4 2520 19 LMatrix4f::get_col3 0 1 867 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_col3(int col) const;

2165 11 operator () 4 2520 22 LMatrix4f::operator () 0 2 868 869 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix4f::operator ()(int row, int col);
inline float LMatrix4f::operator ()(int row, int col) const;

2166 11 operator [] 4 2520 22 LMatrix4f::operator [] 0 2 870 871 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix4f::CRow LMatrix4f::operator [](int i) const;
inline LMatrix4f::Row LMatrix4f::operator [](int i);

2167 4 size 4 2520 15 LMatrix4f::size 0 1 872 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4f::size(void);

2168 6 is_nan 4 2520 17 LMatrix4f::is_nan 0 1 873 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4f::is_nan(void) const;

2169 8 get_cell 4 2520 19 LMatrix4f::get_cell 0 1 874 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix4f::get_cell(int row, int col) const;

2170 8 set_cell 4 2520 19 LMatrix4f::set_cell 0 1 875 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::set_cell(int row, int col, float value);

2171 8 get_data 4 2520 19 LMatrix4f::get_data 0 1 876 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix4f::get_data(void) const;

2172 18 get_num_components 4 2520 29 LMatrix4f::get_num_components 0 1 877 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4f::get_num_components(void) const;

2173 5 begin 4 2520 16 LMatrix4f::begin 0 2 878 879 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
93
inline float const *LMatrix4f::begin(void);
inline float const *LMatrix4f::begin(void) const;

2174 3 end 4 2520 14 LMatrix4f::end 0 2 880 881 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
89
inline float const *LMatrix4f::end(void);
inline float const *LMatrix4f::end(void) const;

2175 10 operator < 4 2520 21 LMatrix4f::operator < 0 1 882 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4f::operator <(LMatrix4f const &other) const;

2176 11 operator == 4 2520 22 LMatrix4f::operator == 0 1 883 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator ==(LMatrix4f const &other) const;

2177 11 operator != 4 2520 22 LMatrix4f::operator != 0 1 884 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator !=(LMatrix4f const &other) const;

2178 10 compare_to 4 2520 21 LMatrix4f::compare_to 0 2 885 886 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix4f::compare_to(LMatrix4f const &other) const;
int LMatrix4f::compare_to(LMatrix4f const &other, float threshold) const;

2179 8 get_hash 4 2520 19 LMatrix4f::get_hash 0 2 887 888 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix4f::get_hash(void) const;
inline unsigned int LMatrix4f::get_hash(float threshold) const;

2180 8 add_hash 4 2520 19 LMatrix4f::add_hash 0 2 889 890 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix4f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4f::add_hash(unsigned int hash, float threshold) const;

2181 5 xform 4 2520 16 LMatrix4f::xform 0 1 891 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f LMatrix4f::xform(LVecBase4f const &v) const;

2182 11 xform_point 4 2520 22 LMatrix4f::xform_point 0 1 892 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LMatrix4f::xform_point(LVecBase3f const &v) const;

2183 9 xform_vec 4 2520 20 LMatrix4f::xform_vec 0 1 893 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LMatrix4f::xform_vec(LVecBase3f const &v) const;

2184 17 xform_vec_general 4 2520 28 LMatrix4f::xform_vec_general 0 1 894 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix4f::xform_vec_general(LVecBase3f const &v) const;

2185 8 multiply 4 2520 19 LMatrix4f::multiply 0 1 895 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4f::multiply(LMatrix4f const &other1, LMatrix4f const &other2);

2186 10 operator * 4 2520 21 LMatrix4f::operator * 0 2 896 897 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
129
inline LMatrix4f LMatrix4f::operator *(LMatrix4f const &other) const;
inline LMatrix4f LMatrix4f::operator *(float scalar) const;

2187 10 operator / 4 2520 21 LMatrix4f::operator / 0 1 898 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix4f LMatrix4f::operator /(float scalar) const;

2188 11 operator += 4 2520 22 LMatrix4f::operator += 0 1 899 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator +=(LMatrix4f const &other);

2189 11 operator -= 4 2520 22 LMatrix4f::operator -= 0 1 900 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator -=(LMatrix4f const &other);

2190 11 operator *= 4 2520 22 LMatrix4f::operator *= 0 2 901 902 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LMatrix4f &LMatrix4f::operator *=(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator *=(float scalar);

2191 11 operator /= 4 2520 22 LMatrix4f::operator /= 0 1 903 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f &LMatrix4f::operator /=(float scalar);

2192 14 transpose_from 4 2520 25 LMatrix4f::transpose_from 0 1 904 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::transpose_from(LMatrix4f const &other);

2193 18 transpose_in_place 4 2520 29 LMatrix4f::transpose_in_place 0 1 905 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4f::transpose_in_place(void);

2194 11 invert_from 4 2520 22 LMatrix4f::invert_from 0 1 906 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4f::invert_from(LMatrix4f const &other);

2195 18 invert_affine_from 4 2520 29 LMatrix4f::invert_affine_from 0 1 907 929
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4f::invert_affine_from(LMatrix4f const &other);

2196 15 invert_in_place 4 2520 26 LMatrix4f::invert_in_place 0 1 908 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4f::invert_in_place(void);

2197 9 ident_mat 4 2520 20 LMatrix4f::ident_mat 0 1 909 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::ident_mat(void);

2198 8 ones_mat 4 2520 19 LMatrix4f::ones_mat 0 1 910 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4f const &LMatrix4f::ones_mat(void);

2199 9 zeros_mat 4 2520 20 LMatrix4f::zeros_mat 0 1 911 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::zeros_mat(void);

2200 17 set_translate_mat 4 2520 28 LMatrix4f::set_translate_mat 0 1 912 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::set_translate_mat(LVecBase3f const &trans);

2201 14 set_rotate_mat 4 2520 25 LMatrix4f::set_rotate_mat 0 2 913 914 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
104
void LMatrix4f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2202 23 set_rotate_mat_normaxis 4 2520 34 LMatrix4f::set_rotate_mat_normaxis 0 2 915 916 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix4f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2203 13 set_scale_mat 4 2520 24 LMatrix4f::set_scale_mat 0 1 917 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::set_scale_mat(LVecBase3f const &scale);

2204 13 set_shear_mat 4 2520 24 LMatrix4f::set_shear_mat 0 2 918 919 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2205 19 set_scale_shear_mat 4 2520 30 LMatrix4f::set_scale_shear_mat 0 2 920 921 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2206 13 translate_mat 4 2520 24 LMatrix4f::translate_mat 0 2 922 923 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
154
static inline LMatrix4f LMatrix4f::translate_mat(LVecBase3f const &trans);
static inline LMatrix4f LMatrix4f::translate_mat(float tx, float ty, float tz);

2207 10 rotate_mat 4 2520 21 LMatrix4f::rotate_mat 0 2 924 925 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix4f LMatrix4f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2208 19 rotate_mat_normaxis 4 2520 30 LMatrix4f::rotate_mat_normaxis 0 2 926 927 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix4f LMatrix4f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2209 9 scale_mat 4 2520 20 LMatrix4f::scale_mat 0 3 928 929 930 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
205
static inline LMatrix4f LMatrix4f::scale_mat(LVecBase3f const &scale);
static inline LMatrix4f LMatrix4f::scale_mat(float sx, float sy, float sz);
static inline LMatrix4f LMatrix4f::scale_mat(float scale);

2210 9 shear_mat 4 2520 20 LMatrix4f::shear_mat 0 4 931 932 933 934 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix4f LMatrix4f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4f LMatrix4f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2211 15 scale_shear_mat 4 2520 26 LMatrix4f::scale_shear_mat 0 4 935 936 937 938 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix4f LMatrix4f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4f LMatrix4f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2212 13 y_to_z_up_mat 4 2520 24 LMatrix4f::y_to_z_up_mat 0 1 939 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::y_to_z_up_mat(void);

2213 13 z_to_y_up_mat 4 2520 24 LMatrix4f::z_to_y_up_mat 0 1 940 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::z_to_y_up_mat(void);

2214 11 convert_mat 4 2520 22 LMatrix4f::convert_mat 0 1 941 362
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4f const &LMatrix4f::convert_mat(CoordinateSystem from, CoordinateSystem to);

2215 12 almost_equal 4 2520 23 LMatrix4f::almost_equal 0 2 942 943 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix4f::almost_equal(LMatrix4f const &other, float threshold) const;
inline bool LMatrix4f::almost_equal(LMatrix4f const &other) const;

2216 6 output 4 2520 17 LMatrix4f::output 0 1 944 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4f::output(ostream &out) const;

2217 5 write 4 2520 16 LMatrix4f::write 0 2 945 946 226
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write(ostream &out, int indent_level = (0)) const;

2218 11 python_repr 4 2520 22 LMatrix4f::python_repr 0 1 947 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2219 14 get_class_type 4 2520 25 LMatrix4f::get_class_type 0 1 948 0
50
static TypeHandle LMatrix4f::get_class_type(void);

2220 10 ~LMatrix4f 4 2520 21 LMatrix4f::~LMatrix4f 0 0 0
28
LMatrix4f::~LMatrix4f(void);

2221 11 operator [] 4 2524 27 LMatrix3d::Row::operator [] 0 2 1053 1054 910
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline double LMatrix3d::Row::operator [](int i) const;
inline double &LMatrix3d::Row::operator [](int i);

2222 11 __setitem__ 4 2524 27 LMatrix3d::Row::__setitem__ 0 1 1055 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LMatrix3d::Row::__setitem__(int i, double v);

2223 4 size 4 2524 20 LMatrix3d::Row::size 0 1 1056 574
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3d::Row::size(void);

2224 4 ~Row 4 2524 20 LMatrix3d::Row::~Row 0 0 0
27
LMatrix3d::Row::~Row(void);

2225 11 operator [] 4 2525 28 LMatrix3d::CRow::operator [] 0 1 1057 456
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline double LMatrix3d::CRow::operator [](int i) const;

2226 4 size 4 2525 21 LMatrix3d::CRow::size 0 1 1058 546
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3d::CRow::size(void);

2227 5 ~CRow 4 2525 22 LMatrix3d::CRow::~CRow 0 0 0
29
LMatrix3d::CRow::~CRow(void);

2228 9 LMatrix3d 4 2523 20 LMatrix3d::LMatrix3d 0 3 955 956 957 1338
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
224
inline LMatrix3d::LMatrix3d(void);
inline LMatrix3d::LMatrix3d(LMatrix3d const &other);
inline LMatrix3d::LMatrix3d(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

2229 10 operator = 4 2523 21 LMatrix3d::operator = 0 2 958 959 926
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix3d &LMatrix3d::operator =(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator =(double fill_value);

2230 12 operator new 4 2523 23 LMatrix3d::operator new 0 1 960 0
124
inline void *LMatrix3d::operator new(unsigned int size);
inline void *LMatrix3d::operator new(unsigned int size, void *ptr);

2231 15 operator delete 4 2523 26 LMatrix3d::operator delete 0 0 0
106
inline void LMatrix3d::operator delete(void *ptr);
inline void LMatrix3d::operator delete(void *, void *);

2232 12 validate_ptr 4 2523 23 LMatrix3d::validate_ptr 0 0 0
60
static inline bool LMatrix3d::validate_ptr(void const *ptr);

2233 10 __reduce__ 4 2523 21 LMatrix3d::__reduce__ 0 1 961 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix3d::__reduce__(PyObject *self) const;

2234 4 fill 4 2523 15 LMatrix3d::fill 0 1 962 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
40
void LMatrix3d::fill(double fill_value);

2235 3 set 4 2523 14 LMatrix3d::set 0 1 963 420
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
135
inline void LMatrix3d::set(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

2236 7 set_row 4 2523 18 LMatrix3d::set_row 0 2 964 965 1262
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_row(int row, LVecBase3d const &v);
inline void LMatrix3d::set_row(int row, LVecBase2d const &v);

2237 7 set_col 4 2523 18 LMatrix3d::set_col 0 2 966 967 1280
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_col(int col, LVecBase3d const &v);
inline void LMatrix3d::set_col(int col, LVecBase2d const &v);

2238 7 get_row 4 2523 18 LMatrix3d::get_row 0 2 968 969 633
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3d LMatrix3d::get_row(int row) const;
inline void LMatrix3d::get_row(LVecBase3d &result_vec, int row) const;

2239 7 get_col 4 2523 18 LMatrix3d::get_col 0 1 970 606
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_col(int col) const;

2240 8 get_row2 4 2523 19 LMatrix3d::get_row2 0 1 971 650
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_row2(int row) const;

2241 8 get_col2 4 2523 19 LMatrix3d::get_col2 0 1 972 650
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_col2(int col) const;

2242 11 operator () 4 2523 22 LMatrix3d::operator () 0 2 973 974 898
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix3d::operator ()(int row, int col);
inline double LMatrix3d::operator ()(int row, int col) const;

2243 11 operator [] 4 2523 22 LMatrix3d::operator [] 0 2 975 976 898
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix3d::CRow LMatrix3d::operator [](int i) const;
inline LMatrix3d::Row LMatrix3d::operator [](int i);

2244 4 size 4 2523 15 LMatrix3d::size 0 1 977 528
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3d::size(void);

2245 6 is_nan 4 2523 17 LMatrix3d::is_nan 0 1 978 616
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3d::is_nan(void) const;

2246 8 get_cell 4 2523 19 LMatrix3d::get_cell 0 1 979 518
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix3d::get_cell(int row, int col) const;

2247 8 set_cell 4 2523 19 LMatrix3d::set_cell 0 1 980 518
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix3d::set_cell(int row, int col, double value);

2248 8 get_data 4 2523 19 LMatrix3d::get_data 0 1 981 798
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix3d::get_data(void) const;

2249 18 get_num_components 4 2523 29 LMatrix3d::get_num_components 0 1 982 554
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3d::get_num_components(void) const;

2250 10 operator < 4 2523 21 LMatrix3d::operator < 0 1 983 1004
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3d::operator <(LMatrix3d const &other) const;

2251 11 operator == 4 2523 22 LMatrix3d::operator == 0 1 984 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator ==(LMatrix3d const &other) const;

2252 11 operator != 4 2523 22 LMatrix3d::operator != 0 1 985 452
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator !=(LMatrix3d const &other) const;

2253 10 compare_to 4 2523 21 LMatrix3d::compare_to 0 2 986 987 1139
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
138
inline int LMatrix3d::compare_to(LMatrix3d const &other) const;
int LMatrix3d::compare_to(LMatrix3d const &other, double threshold) const;

2254 8 get_hash 4 2523 19 LMatrix3d::get_hash 0 2 988 989 1018
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix3d::get_hash(void) const;
inline unsigned int LMatrix3d::get_hash(double threshold) const;

2255 8 add_hash 4 2523 19 LMatrix3d::add_hash 0 2 990 991 1018
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix3d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3d::add_hash(unsigned int hash, double threshold) const;

2256 5 xform 4 2523 16 LMatrix3d::xform 0 1 992 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LMatrix3d::xform(LVecBase3d const &v) const;

2257 11 xform_point 4 2523 22 LMatrix3d::xform_point 0 1 993 802
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LMatrix3d::xform_point(LVecBase2d const &v) const;

2258 9 xform_vec 4 2523 20 LMatrix3d::xform_vec 0 2 994 995 1688
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2d LMatrix3d::xform_vec(LVecBase2d const &v) const;
inline LVecBase3d LMatrix3d::xform_vec(LVecBase3d const &v) const;

2259 17 xform_vec_general 4 2523 28 LMatrix3d::xform_vec_general 0 1 996 774
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix3d::xform_vec_general(LVecBase3d const &v) const;

2260 8 multiply 4 2523 19 LMatrix3d::multiply 0 1 997 79
// this = other1 * other2

// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3d::multiply(LMatrix3d const &other1, LMatrix3d const &other2);

2261 10 operator * 4 2523 21 LMatrix3d::operator * 0 2 998 999 890
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline LMatrix3d LMatrix3d::operator *(LMatrix3d const &other) const;
inline LMatrix3d LMatrix3d::operator *(double scalar) const;

2262 10 operator / 4 2523 21 LMatrix3d::operator / 0 1 1000 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix3d LMatrix3d::operator /(double scalar) const;

2263 11 operator += 4 2523 22 LMatrix3d::operator += 0 1 1001 552
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator +=(LMatrix3d const &other);

2264 11 operator -= 4 2523 22 LMatrix3d::operator -= 0 1 1002 558
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator -=(LMatrix3d const &other);

2265 11 operator *= 4 2523 22 LMatrix3d::operator *= 0 2 1003 1004 952
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
122
inline LMatrix3d &LMatrix3d::operator *=(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator *=(double scalar);

2266 11 operator /= 4 2523 22 LMatrix3d::operator /= 0 1 1005 504
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
56
inline LMatrix3d &LMatrix3d::operator /=(double scalar);

2267 11 determinant 4 2523 22 LMatrix3d::determinant 0 1 1006 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
49
inline double LMatrix3d::determinant(void) const;

2268 14 transpose_from 4 2523 25 LMatrix3d::transpose_from 0 1 1007 442
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3d::transpose_from(LMatrix3d const &other);

2269 18 transpose_in_place 4 2523 29 LMatrix3d::transpose_in_place 0 1 1008 450
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3d::transpose_in_place(void);

2270 11 invert_from 4 2523 22 LMatrix3d::invert_from 0 1 1009 1608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3d::invert_from(LMatrix3d const &other);

2271 15 invert_in_place 4 2523 26 LMatrix3d::invert_in_place 0 1 1010 724
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3d::invert_in_place(void);

2272 21 invert_transpose_from 4 2523 32 LMatrix3d::invert_transpose_from 0 2 1011 1012 1386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3d::invert_transpose_from(LMatrix3d const &other);
inline bool LMatrix3d::invert_transpose_from(LMatrix4d const &other);

2273 9 ident_mat 4 2523 20 LMatrix3d::ident_mat 0 1 1013 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3d const &LMatrix3d::ident_mat(void);

2274 17 set_translate_mat 4 2523 28 LMatrix3d::set_translate_mat 0 1 1014 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::set_translate_mat(LVecBase2d const &trans);

2275 14 set_rotate_mat 4 2523 25 LMatrix3d::set_rotate_mat 0 3 1015 1016 1017 1133
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////
151
inline void LMatrix3d::set_rotate_mat(double angle);
void LMatrix3d::set_rotate_mat(double angle, LVecBase3d axis, CoordinateSystem cs = (CS_default));

2276 13 set_scale_mat 4 2523 24 LMatrix3d::set_scale_mat 0 2 1018 1019 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3d::set_scale_mat(LVecBase2d const &scale);
inline void LMatrix3d::set_scale_mat(LVecBase3d const &scale);

2277 13 translate_mat 4 2523 24 LMatrix3d::translate_mat 0 2 1020 1021 1206
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
146
static inline LMatrix3d LMatrix3d::translate_mat(LVecBase2d const &trans);
static inline LMatrix3d LMatrix3d::translate_mat(double tx, double ty);

2278 10 rotate_mat 4 2523 21 LMatrix3d::rotate_mat 0 3 1022 1023 1024 1332
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
174
static inline LMatrix3d LMatrix3d::rotate_mat(double angle);
static inline LMatrix3d LMatrix3d::rotate_mat(double angle, LVecBase3d axis, CoordinateSystem cs = (CS_default));

2279 9 scale_mat 4 2523 20 LMatrix3d::scale_mat 0 4 1025 1026 1027 1028 2534
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
288
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase2d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy);
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase3d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy, double sz);

2280 23 set_rotate_mat_normaxis 4 2523 34 LMatrix3d::set_rotate_mat_normaxis 0 2 1029 1030 409
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix3d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2281 19 rotate_mat_normaxis 4 2523 30 LMatrix3d::rotate_mat_normaxis 0 2 1031 1032 812
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix3d LMatrix3d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2282 13 set_shear_mat 4 2523 24 LMatrix3d::set_shear_mat 0 2 1033 1034 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2283 9 shear_mat 4 2523 20 LMatrix3d::shear_mat 0 4 1035 1036 1037 1038 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix3d LMatrix3d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3d LMatrix3d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2284 19 set_scale_shear_mat 4 2523 30 LMatrix3d::set_scale_shear_mat 0 2 1039 1040 324
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2285 15 scale_shear_mat 4 2523 26 LMatrix3d::scale_shear_mat 0 4 1041 1042 1043 1044 1230
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix3d LMatrix3d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3d LMatrix3d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2286 11 convert_mat 4 2523 22 LMatrix3d::convert_mat 0 1 1045 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3d const &LMatrix3d::convert_mat(CoordinateSystem from, CoordinateSystem to);

2287 12 almost_equal 4 2523 23 LMatrix3d::almost_equal 0 2 1046 1047 1148
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
144
bool LMatrix3d::almost_equal(LMatrix3d const &other, double threshold) const;
inline bool LMatrix3d::almost_equal(LMatrix3d const &other) const;

2288 6 output 4 2523 17 LMatrix3d::output 0 1 1048 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3d::output(ostream &out) const;

2289 5 write 4 2523 16 LMatrix3d::write 0 2 1049 1050 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write(ostream &out, int indent_level = (0)) const;

2290 11 python_repr 4 2523 22 LMatrix3d::python_repr 0 1 1051 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2291 14 get_class_type 4 2523 25 LMatrix3d::get_class_type 0 1 1052 0
50
static TypeHandle LMatrix3d::get_class_type(void);

2292 10 ~LMatrix3d 4 2523 21 LMatrix3d::~LMatrix3d 0 0 0
28
LMatrix3d::~LMatrix3d(void);

2293 11 operator [] 4 2527 27 LMatrix4d::Row::operator [] 0 2 1163 1164 1366
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline double LMatrix4d::Row::operator [](int i) const;
inline double &LMatrix4d::Row::operator [](int i);

2294 11 __setitem__ 4 2527 27 LMatrix4d::Row::__setitem__ 0 1 1165 670
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LMatrix4d::Row::__setitem__(int i, double v);

2295 4 size 4 2527 20 LMatrix4d::Row::size 0 1 1166 862
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4d::Row::size(void);

2296 4 ~Row 4 2527 20 LMatrix4d::Row::~Row 0 0 0
27
LMatrix4d::Row::~Row(void);

2297 11 operator [] 4 2528 28 LMatrix4d::CRow::operator [] 0 1 1167 685
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline double LMatrix4d::CRow::operator [](int i) const;

2298 4 size 4 2528 21 LMatrix4d::CRow::size 0 1 1168 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4d::CRow::size(void);

2299 5 ~CRow 4 2528 22 LMatrix4d::CRow::~CRow 0 0 0
29
LMatrix4d::CRow::~CRow(void);

2300 9 LMatrix4d 4 2526 20 LMatrix4d::LMatrix4d 0 5 1059 1060 1061 1062 1063 3633
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
441
inline LMatrix4d::LMatrix4d(void);
inline LMatrix4d::LMatrix4d(LMatrix4d const &other);
inline LMatrix4d::LMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3, LVecBase3d const &trans);

2301 10 operator = 4 2526 21 LMatrix4d::operator = 0 2 1064 1065 1390
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix4d &LMatrix4d::operator =(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(double fill_value);

2302 12 operator new 4 2526 23 LMatrix4d::operator new 0 1 1066 0
124
inline void *LMatrix4d::operator new(unsigned int size);
inline void *LMatrix4d::operator new(unsigned int size, void *ptr);

2303 15 operator delete 4 2526 26 LMatrix4d::operator delete 0 0 0
106
inline void LMatrix4d::operator delete(void *ptr);
inline void LMatrix4d::operator delete(void *, void *);

2304 12 validate_ptr 4 2526 23 LMatrix4d::validate_ptr 0 0 0
60
static inline bool LMatrix4d::validate_ptr(void const *ptr);

2305 10 __reduce__ 4 2526 21 LMatrix4d::__reduce__ 0 1 1067 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix4d::__reduce__(PyObject *self) const;

2306 4 fill 4 2526 15 LMatrix4d::fill 0 1 1068 1168
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LMatrix4d::fill(double fill_value);

2307 3 set 4 2526 14 LMatrix4d::set 0 1 1069 631
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
219
inline void LMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

2308 11 set_upper_3 4 2526 22 LMatrix4d::set_upper_3 0 1 1070 792
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4d::set_upper_3(LMatrix3d const &upper3);

2309 11 get_upper_3 4 2526 22 LMatrix4d::get_upper_3 0 1 1071 807
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3d LMatrix4d::get_upper_3(void) const;

2310 7 set_row 4 2526 18 LMatrix4d::set_row 0 2 1072 1073 1834
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_row(int row, LVecBase4d const &v);
inline void LMatrix4d::set_row(int row, LVecBase3d const &v);

2311 7 set_col 4 2526 18 LMatrix4d::set_col 0 2 1074 1075 1843
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_col(int col, LVecBase4d const &v);
inline void LMatrix4d::set_col(int col, LVecBase3d const &v);

2312 7 get_row 4 2526 18 LMatrix4d::get_row 0 2 1076 1077 928
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4d LMatrix4d::get_row(int row) const;
inline void LMatrix4d::get_row(LVecBase4d &result_vec, int row) const;

2313 7 get_col 4 2526 18 LMatrix4d::get_col 0 1 1078 904
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_col(int col) const;

2314 8 get_row3 4 2526 19 LMatrix4d::get_row3 0 2 1079 1080 1000
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3d LMatrix4d::get_row3(int row) const;
inline void LMatrix4d::get_row3(LVecBase3d &result_vec, int row) const;

2315 8 get_col3 4 2526 19 LMatrix4d::get_col3 0 1 1081 976
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_col3(int col) const;

2316 11 operator () 4 2526 22 LMatrix4d::operator () 0 2 1082 1083 1348
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix4d::operator ()(int row, int col);
inline double LMatrix4d::operator ()(int row, int col) const;

2317 11 operator [] 4 2526 22 LMatrix4d::operator [] 0 2 1084 1085 1348
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix4d::CRow LMatrix4d::operator [](int i) const;
inline LMatrix4d::Row LMatrix4d::operator [](int i);

2318 4 size 4 2526 15 LMatrix4d::size 0 1 1086 793
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4d::size(void);

2319 6 is_nan 4 2526 17 LMatrix4d::is_nan 0 1 1087 925
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4d::is_nan(void) const;

2320 8 get_cell 4 2526 19 LMatrix4d::get_cell 0 1 1088 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix4d::get_cell(int row, int col) const;

2321 8 set_cell 4 2526 19 LMatrix4d::set_cell 0 1 1089 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix4d::set_cell(int row, int col, double value);

2322 8 get_data 4 2526 19 LMatrix4d::get_data 0 1 1090 1198
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix4d::get_data(void) const;

2323 18 get_num_components 4 2526 29 LMatrix4d::get_num_components 0 1 1091 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4d::get_num_components(void) const;

2324 5 begin 4 2526 16 LMatrix4d::begin 0 2 1092 1093 1906
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
95
inline double const *LMatrix4d::begin(void);
inline double const *LMatrix4d::begin(void) const;

2325 3 end 4 2526 14 LMatrix4d::end 0 2 1094 1095 1894
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
91
inline double const *LMatrix4d::end(void);
inline double const *LMatrix4d::end(void) const;

2326 10 operator < 4 2526 21 LMatrix4d::operator < 0 1 1096 1507
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4d::operator <(LMatrix4d const &other) const;

2327 11 operator == 4 2526 22 LMatrix4d::operator == 0 1 1097 673
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator ==(LMatrix4d const &other) const;

2328 11 operator != 4 2526 22 LMatrix4d::operator != 0 1 1098 679
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator !=(LMatrix4d const &other) const;

2329 10 compare_to 4 2526 21 LMatrix4d::compare_to 0 2 1099 1100 1458
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
138
inline int LMatrix4d::compare_to(LMatrix4d const &other) const;
int LMatrix4d::compare_to(LMatrix4d const &other, double threshold) const;

2330 8 get_hash 4 2526 19 LMatrix4d::get_hash 0 2 1101 1102 1528
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix4d::get_hash(void) const;
inline unsigned int LMatrix4d::get_hash(double threshold) const;

2331 8 add_hash 4 2526 19 LMatrix4d::add_hash 0 2 1103 1104 1528
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix4d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4d::add_hash(unsigned int hash, double threshold) const;

2332 5 xform 4 2526 16 LMatrix4d::xform 0 1 1105 922
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LMatrix4d::xform(LVecBase4d const &v) const;

2333 11 xform_point 4 2526 22 LMatrix4d::xform_point 0 1 1106 1204
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LMatrix4d::xform_point(LVecBase3d const &v) const;

2334 9 xform_vec 4 2526 20 LMatrix4d::xform_vec 0 1 1107 1210
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LMatrix4d::xform_vec(LVecBase3d const &v) const;

2335 17 xform_vec_general 4 2526 28 LMatrix4d::xform_vec_general 0 1 1108 1162
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix4d::xform_vec_general(LVecBase3d const &v) const;

2336 8 multiply 4 2526 19 LMatrix4d::multiply 0 1 1109 106
// this = other1 * other2

// this = other1 * other2

// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4d::multiply(LMatrix4d const &other1, LMatrix4d const &other2);

2337 10 operator * 4 2526 21 LMatrix4d::operator * 0 2 1110 1111 1336
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline LMatrix4d LMatrix4d::operator *(LMatrix4d const &other) const;
inline LMatrix4d LMatrix4d::operator *(double scalar) const;

2338 10 operator / 4 2526 21 LMatrix4d::operator / 0 1 1112 667
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d LMatrix4d::operator /(double scalar) const;

2339 11 operator += 4 2526 22 LMatrix4d::operator += 0 1 1113 829
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator +=(LMatrix4d const &other);

2340 11 operator -= 4 2526 22 LMatrix4d::operator -= 0 1 1114 829
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator -=(LMatrix4d const &other);

2341 11 operator *= 4 2526 22 LMatrix4d::operator *= 0 2 1115 1116 1342
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
122
inline LMatrix4d &LMatrix4d::operator *=(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator *=(double scalar);

2342 11 operator /= 4 2526 22 LMatrix4d::operator /= 0 1 1117 670
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LMatrix4d &LMatrix4d::operator /=(double scalar);

2343 14 transpose_from 4 2526 25 LMatrix4d::transpose_from 0 1 1118 664
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::transpose_from(LMatrix4d const &other);

2344 18 transpose_in_place 4 2526 29 LMatrix4d::transpose_in_place 0 1 1119 676
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4d::transpose_in_place(void);

2345 11 invert_from 4 2526 22 LMatrix4d::invert_from 0 1 1120 2413
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4d::invert_from(LMatrix4d const &other);

2346 18 invert_affine_from 4 2526 29 LMatrix4d::invert_affine_from 0 1 1121 2791
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4d::invert_affine_from(LMatrix4d const &other);

2347 15 invert_in_place 4 2526 26 LMatrix4d::invert_in_place 0 1 1122 1087
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4d::invert_in_place(void);

2348 9 ident_mat 4 2526 20 LMatrix4d::ident_mat 0 1 1123 1168
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::ident_mat(void);

2349 8 ones_mat 4 2526 19 LMatrix4d::ones_mat 0 1 1124 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4d const &LMatrix4d::ones_mat(void);

2350 9 zeros_mat 4 2526 20 LMatrix4d::zeros_mat 0 1 1125 784
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::zeros_mat(void);

2351 17 set_translate_mat 4 2526 28 LMatrix4d::set_translate_mat 0 1 1126 913
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::set_translate_mat(LVecBase3d const &trans);

2352 14 set_rotate_mat 4 2526 25 LMatrix4d::set_rotate_mat 0 2 1127 1128 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
105
void LMatrix4d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2353 23 set_rotate_mat_normaxis 4 2526 34 LMatrix4d::set_rotate_mat_normaxis 0 2 1129 1130 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix4d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2354 13 set_scale_mat 4 2526 24 LMatrix4d::set_scale_mat 0 1 1131 961
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::set_scale_mat(LVecBase3d const &scale);

2355 13 set_shear_mat 4 2526 24 LMatrix4d::set_shear_mat 0 2 1132 1133 967
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2356 19 set_scale_shear_mat 4 2526 30 LMatrix4d::set_scale_shear_mat 0 2 1134 1135 955
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2357 13 translate_mat 4 2526 24 LMatrix4d::translate_mat 0 2 1136 1137 1810
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
157
static inline LMatrix4d LMatrix4d::translate_mat(LVecBase3d const &trans);
static inline LMatrix4d LMatrix4d::translate_mat(double tx, double ty, double tz);

2358 10 rotate_mat 4 2526 21 LMatrix4d::rotate_mat 0 2 1138 1139 1039
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix4d LMatrix4d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2359 19 rotate_mat_normaxis 4 2526 30 LMatrix4d::rotate_mat_normaxis 0 2 1140 1141 1228
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix4d LMatrix4d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2360 9 scale_mat 4 2526 20 LMatrix4d::scale_mat 0 3 1142 1143 1144 2806
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::scale_mat(LVecBase3d const &scale);
static inline LMatrix4d LMatrix4d::scale_mat(double sx, double sy, double sz);
static inline LMatrix4d LMatrix4d::scale_mat(double scale);

2361 9 shear_mat 4 2526 20 LMatrix4d::shear_mat 0 4 1145 1146 1147 1148 1918
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix4d LMatrix4d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4d LMatrix4d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2362 15 scale_shear_mat 4 2526 26 LMatrix4d::scale_shear_mat 0 4 1149 1150 1151 1152 1846
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix4d LMatrix4d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4d LMatrix4d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2363 13 y_to_z_up_mat 4 2526 24 LMatrix4d::y_to_z_up_mat 0 1 1153 1021
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::y_to_z_up_mat(void);

2364 13 z_to_y_up_mat 4 2526 24 LMatrix4d::z_to_y_up_mat 0 1 1154 1021
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::z_to_y_up_mat(void);

2365 11 convert_mat 4 2526 22 LMatrix4d::convert_mat 0 1 1155 362
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4d const &LMatrix4d::convert_mat(CoordinateSystem from, CoordinateSystem to);

2366 12 almost_equal 4 2526 23 LMatrix4d::almost_equal 0 2 1156 1157 1338
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
144
bool LMatrix4d::almost_equal(LMatrix4d const &other, double threshold) const;
inline bool LMatrix4d::almost_equal(LMatrix4d const &other) const;

2367 6 output 4 2526 17 LMatrix4d::output 0 1 1158 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4d::output(ostream &out) const;

2368 5 write 4 2526 16 LMatrix4d::write 0 2 1159 1160 226
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write(ostream &out, int indent_level = (0)) const;

2369 11 python_repr 4 2526 22 LMatrix4d::python_repr 0 1 1161 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2370 14 get_class_type 4 2526 25 LMatrix4d::get_class_type 0 1 1162 0
50
static TypeHandle LMatrix4d::get_class_type(void);

2371 10 ~LMatrix4d 4 2526 21 LMatrix4d::~LMatrix4d 0 0 0
28
LMatrix4d::~LMatrix4d(void);

2372 10 operator * 1 0 10 operator * 0 16 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 0
1115
inline LVecBase3f operator *(LVecBase3f const &v, LMatrix3f const &m);
inline LVector2f operator *(LVector2f const &v, LMatrix3f const &m);
inline LPoint2f operator *(LPoint2f const &v, LMatrix3f const &m);
inline LVecBase4f operator *(LVecBase4f const &v, LMatrix4f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix4f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix4f const &m);
inline LVecBase3d operator *(LVecBase3d const &v, LMatrix3d const &m);
inline LVector2d operator *(LVector2d const &v, LMatrix3d const &m);
inline LPoint2d operator *(LPoint2d const &v, LMatrix3d const &m);
inline LVecBase4d operator *(LVecBase4d const &v, LMatrix4d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix4d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix4d const &m);
inline LMatrix3f operator *(LMatrix3f const &m, LQuaternionf const &q);
inline LMatrix4f operator *(LMatrix4f const &m, LQuaternionf const &q);
inline LMatrix3d operator *(LMatrix3d const &m, LQuaterniond const &q);
inline LMatrix4d operator *(LMatrix4d const &m, LQuaterniond const &q);

2373 22 generic_write_datagram 1 0 22 generic_write_datagram 0 4 1368 1369 1370 1371 0
303
inline void generic_write_datagram(Datagram &dest, LMatrix3f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix3d const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4d const &value);

2374 21 generic_read_datagram 1 0 21 generic_read_datagram 0 4 1372 1373 1374 1375 0
319
inline void generic_read_datagram(LMatrix3f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix3d &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4d &result, DatagramIterator &source);

2375 14 compose_matrix 1 0 14 compose_matrix 0 16 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 0
1494
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));

2376 16 decompose_matrix 1 0 16 decompose_matrix 0 16 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 0
1418
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));

2377 22 compose_matrix_old_hpr 1 0 22 compose_matrix_old_hpr 0 8 1408 1409 1410 1411 1412 1413 1414 1415 1530
// Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////

// Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////
958
void compose_matrix_old_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
void compose_matrix_old_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));

2378 24 decompose_matrix_old_hpr 1 0 24 decompose_matrix_old_hpr 0 8 1416 1417 1418 1419 1420 1421 1422 1423 1050
////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////
910
bool decompose_matrix_old_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
bool decompose_matrix_old_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));

2379 22 compose_matrix_new_hpr 1 0 22 compose_matrix_new_hpr 0 8 1424 1425 1426 1427 1428 1429 1430 1431 538
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////
958
void compose_matrix_new_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
void compose_matrix_new_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));

2380 24 decompose_matrix_new_hpr 1 0 24 decompose_matrix_new_hpr 0 8 1432 1433 1434 1435 1436 1437 1438 1439 1050
////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////
910
bool decompose_matrix_new_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
bool decompose_matrix_new_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));

2381 14 old_to_new_hpr 1 0 14 old_to_new_hpr 0 2 1440 1441 1012
////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////
107
LVecBase3f old_to_new_hpr(LVecBase3f const &old_hpr);
LVecBase3d old_to_new_hpr(LVecBase3d const &old_hpr);

2382 14 new_to_old_hpr 1 0 14 new_to_old_hpr 0 2 1442 1443 1072
////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////
107
LVecBase3f new_to_old_hpr(LVecBase3f const &new_hpr);
LVecBase3d new_to_old_hpr(LVecBase3d const &new_hpr);

2383 12 LQuaternionf 4 2529 26 LQuaternionf::LQuaternionf 0 4 1169 1170 1171 1172 1395
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
233
inline LQuaternionf::LQuaternionf(void);
inline LQuaternionf::LQuaternionf(LVecBase4f const &copy);
inline LQuaternionf::LQuaternionf(float , LVecBase3f const &copy);
inline LQuaternionf::LQuaternionf(float , float , float , float );

2384 14 pure_imaginary 4 2529 28 LQuaternionf::pure_imaginary 0 1 1173 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaternionf LQuaternionf::pure_imaginary(LVector3f const &);

2385 9 conjugate 4 2529 23 LQuaternionf::conjugate 0 1 1174 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaternionf LQuaternionf::conjugate(void) const;

2386 5 xform 4 2529 19 LQuaternionf::xform 0 2 1175 1176 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3f LQuaternionf::xform(LVecBase3f const &v) const;
inline LVecBase4f LQuaternionf::xform(LVecBase4f const &v) const;

2387 8 multiply 4 2529 22 LQuaternionf::multiply 0 1 1177 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaternionf LQuaternionf::multiply(LQuaternionf const &rhs) const;

2388 10 operator - 68 2529 24 LQuaternionf::operator - 0 1 1178 216
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LQuaternionf LQuaternionf::operator -(void) const;

2389 10 operator + 4 2529 24 LQuaternionf::operator + 0 1 1179 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator +(LQuaternionf const &other) const;

2390 10 operator - 4 2529 24 LQuaternionf::operator - 0 1 1180 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator -(LQuaternionf const &other) const;

2391 9 angle_rad 4 2529 23 LQuaternionf::angle_rad 0 1 1181 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_rad(LQuaternionf const &other) const;

2392 9 angle_deg 4 2529 23 LQuaternionf::angle_deg 0 1 1182 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_deg(LQuaternionf const &other) const;

2393 10 operator * 4 2529 24 LQuaternionf::operator * 0 4 1183 1184 1185 1186 958
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
263
inline LQuaternionf LQuaternionf::operator *(float scalar) const;
inline LQuaternionf LQuaternionf::operator *(LQuaternionf const &) const;
inline LMatrix3f LQuaternionf::operator *(LMatrix3f const &);
inline LMatrix4f LQuaternionf::operator *(LMatrix4f const &);

2394 10 operator / 4 2529 24 LQuaternionf::operator / 0 1 1187 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LQuaternionf LQuaternionf::operator /(float scalar) const;

2395 11 operator *= 4 2529 25 LQuaternionf::operator *= 0 1 1188 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf &LQuaternionf::operator *=(LQuaternionf const &);

2396 12 almost_equal 4 2529 26 LQuaternionf::almost_equal 0 2 1189 1190 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
162
inline bool LQuaternionf::almost_equal(LQuaternionf const &other) const;
inline bool LQuaternionf::almost_equal(LQuaternionf const &other, float threshold) const;

2397 17 is_same_direction 4 2529 31 LQuaternionf::is_same_direction 0 1 1191 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaternionf::is_same_direction(LQuaternionf const &other) const;

2398 21 almost_same_direction 4 2529 35 LQuaternionf::almost_same_direction 0 1 1192 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
98
inline bool LQuaternionf::almost_same_direction(LQuaternionf const &other, float threshold) const;

2399 6 output 4 2529 20 LQuaternionf::output 0 1 1193 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaternionf::output(ostream &) const;

2400 17 extract_to_matrix 4 2529 31 LQuaternionf::extract_to_matrix 0 2 1194 1195 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaternionf::extract_to_matrix(LMatrix3f &m) const;
void LQuaternionf::extract_to_matrix(LMatrix4f &m) const;

2401 15 set_from_matrix 4 2529 29 LQuaternionf::set_from_matrix 0 2 1196 1197 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaternionf::set_from_matrix(LMatrix3f const &m);
inline void LQuaternionf::set_from_matrix(LMatrix4f const &m);

2402 7 set_hpr 4 2529 21 LQuaternionf::set_hpr 0 2 1198 1199 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaternionf::set_hpr(LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));

2403 7 get_hpr 4 2529 21 LQuaternionf::get_hpr 0 2 1200 1201 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3f LQuaternionf::get_hpr(CoordinateSystem cs = (CS_default)) const;

2404 8 get_axis 4 2529 22 LQuaternionf::get_axis 0 1 1202 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3f LQuaternionf::get_axis(void) const;

2405 19 get_axis_normalized 4 2529 33 LQuaternionf::get_axis_normalized 0 1 1203 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3f LQuaternionf::get_axis_normalized(void) const;

2406 13 get_angle_rad 4 2529 27 LQuaternionf::get_angle_rad 0 1 1204 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
53
inline float LQuaternionf::get_angle_rad(void) const;

2407 9 get_angle 4 2529 23 LQuaternionf::get_angle 0 1 1205 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
49
inline float LQuaternionf::get_angle(void) const;

2408 23 set_from_axis_angle_rad 4 2529 37 LQuaternionf::set_from_axis_angle_rad 0 1 1206 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
90
inline void LQuaternionf::set_from_axis_angle_rad(float angle_rad, LVector3f const &axis);

2409 19 set_from_axis_angle 4 2529 33 LQuaternionf::set_from_axis_angle 0 1 1207 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
86
inline void LQuaternionf::set_from_axis_angle(float angle_deg, LVector3f const &axis);

2410 6 get_up 4 2529 20 LQuaternionf::get_up 0 2 1208 1209 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3f LQuaternionf::get_up(CoordinateSystem cs = (CS_default)) const;

2411 9 get_right 4 2529 23 LQuaternionf::get_right 0 2 1210 1211 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3f LQuaternionf::get_right(CoordinateSystem cs = (CS_default)) const;

2412 11 get_forward 4 2529 25 LQuaternionf::get_forward 0 2 1212 1213 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3f LQuaternionf::get_forward(CoordinateSystem cs = (CS_default)) const;

2413 5 get_r 4 2529 19 LQuaternionf::get_r 0 1 1214 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_r(void) const;

2414 5 get_i 4 2529 19 LQuaternionf::get_i 0 1 1215 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_i(void) const;

2415 5 get_j 4 2529 19 LQuaternionf::get_j 0 1 1216 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_j(void) const;

2416 5 get_k 4 2529 19 LQuaternionf::get_k 0 1 1217 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_k(void) const;

2417 5 set_r 4 2529 19 LQuaternionf::set_r 0 1 1218 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_r(float r);

2418 5 set_i 4 2529 19 LQuaternionf::set_i 0 1 1219 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_i(float i);

2419 5 set_j 4 2529 19 LQuaternionf::set_j 0 1 1220 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_j(float j);

2420 5 set_k 4 2529 19 LQuaternionf::set_k 0 1 1221 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_k(float k);

2421 9 normalize 4 2529 23 LQuaternionf::normalize 0 1 1222 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaternionf::normalize(void);

2422 14 conjugate_from 4 2529 28 LQuaternionf::conjugate_from 0 1 1223 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::conjugate_from(LQuaternionf const &other);

2423 18 conjugate_in_place 4 2529 32 LQuaternionf::conjugate_in_place 0 1 1224 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaternionf::conjugate_in_place(void);

2424 11 invert_from 4 2529 25 LQuaternionf::invert_from 0 1 1225 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaternionf::invert_from(LQuaternionf const &other);

2425 15 invert_in_place 4 2529 29 LQuaternionf::invert_in_place 0 1 1226 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaternionf::invert_in_place(void);

2426 11 is_identity 4 2529 25 LQuaternionf::is_identity 0 1 1227 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaternionf::is_identity(void) const;

2427 18 is_almost_identity 4 2529 32 LQuaternionf::is_almost_identity 0 1 1228 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::is_almost_identity(float tolerance) const;

2428 10 ident_quat 4 2529 24 LQuaternionf::ident_quat 0 1 1229 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaternionf const &LQuaternionf::ident_quat(void);

2429 14 get_class_type 4 2529 28 LQuaternionf::get_class_type 0 1 1230 0
53
static TypeHandle LQuaternionf::get_class_type(void);

2430 13 ~LQuaternionf 4 2529 27 LQuaternionf::~LQuaternionf 0 0 0
34
LQuaternionf::~LQuaternionf(void);

2431 12 LQuaterniond 4 2530 26 LQuaterniond::LQuaterniond 0 4 1231 1232 1233 1234 2792
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
238
inline LQuaterniond::LQuaterniond(void);
inline LQuaterniond::LQuaterniond(LVecBase4d const &copy);
inline LQuaterniond::LQuaterniond(double , LVecBase3d const &copy);
inline LQuaterniond::LQuaterniond(double , double , double , double );

2432 14 pure_imaginary 4 2530 28 LQuaterniond::pure_imaginary 0 1 1235 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaterniond LQuaterniond::pure_imaginary(LVector3d const &);

2433 9 conjugate 4 2530 23 LQuaterniond::conjugate 0 1 1236 532
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaterniond LQuaterniond::conjugate(void) const;

2434 5 xform 4 2530 19 LQuaterniond::xform 0 2 1237 1238 1074
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3d LQuaterniond::xform(LVecBase3d const &v) const;
inline LVecBase4d LQuaterniond::xform(LVecBase4d const &v) const;

2435 8 multiply 4 2530 22 LQuaterniond::multiply 0 1 1239 512
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaterniond LQuaterniond::multiply(LQuaterniond const &rhs) const;

2436 10 operator - 68 2530 24 LQuaterniond::operator - 0 1 1240 434
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LQuaterniond LQuaterniond::operator -(void) const;

2437 10 operator + 4 2530 24 LQuaterniond::operator + 0 1 1241 466
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator +(LQuaterniond const &other) const;

2438 10 operator - 4 2530 24 LQuaterniond::operator - 0 1 1242 466
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator -(LQuaterniond const &other) const;

2439 9 angle_rad 4 2530 23 LQuaterniond::angle_rad 0 1 1243 740
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_rad(LQuaterniond const &other) const;

2440 9 angle_deg 4 2530 23 LQuaterniond::angle_deg 0 1 1244 740
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_deg(LQuaterniond const &other) const;

2441 10 operator * 4 2530 24 LQuaterniond::operator * 0 4 1245 1246 1247 1248 1918
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
264
inline LQuaterniond LQuaterniond::operator *(double scalar) const;
inline LQuaterniond LQuaterniond::operator *(LQuaterniond const &) const;
inline LMatrix3d LQuaterniond::operator *(LMatrix3d const &);
inline LMatrix4d LQuaterniond::operator *(LMatrix4d const &);

2442 10 operator / 4 2530 24 LQuaterniond::operator / 0 1 1249 458
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LQuaterniond LQuaterniond::operator /(double scalar) const;

2443 11 operator *= 4 2530 25 LQuaterniond::operator *= 0 1 1250 476
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaterniond &LQuaterniond::operator *=(LQuaterniond const &);

2444 12 almost_equal 4 2530 26 LQuaterniond::almost_equal 0 2 1251 1252 1338
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
163
inline bool LQuaterniond::almost_equal(LQuaterniond const &other) const;
inline bool LQuaterniond::almost_equal(LQuaterniond const &other, double threshold) const;

2445 17 is_same_direction 4 2530 31 LQuaterniond::is_same_direction 0 1 1253 750
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaterniond::is_same_direction(LQuaterniond const &other) const;

2446 21 almost_same_direction 4 2530 35 LQuaterniond::almost_same_direction 0 1 1254 676
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
99
inline bool LQuaterniond::almost_same_direction(LQuaterniond const &other, double threshold) const;

2447 6 output 4 2530 20 LQuaterniond::output 0 1 1255 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaterniond::output(ostream &) const;

2448 17 extract_to_matrix 4 2530 31 LQuaterniond::extract_to_matrix 0 2 1256 1257 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaterniond::extract_to_matrix(LMatrix3d &m) const;
void LQuaterniond::extract_to_matrix(LMatrix4d &m) const;

2449 15 set_from_matrix 4 2530 29 LQuaterniond::set_from_matrix 0 2 1258 1259 955
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
void LQuaterniond::set_from_matrix(LMatrix3d const &m);
inline void LQuaterniond::set_from_matrix(LMatrix4d const &m);

2450 7 set_hpr 4 2530 21 LQuaterniond::set_hpr 0 2 1260 1261 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaterniond::set_hpr(LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));

2451 7 get_hpr 4 2530 21 LQuaterniond::get_hpr 0 2 1262 1263 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3d LQuaterniond::get_hpr(CoordinateSystem cs = (CS_default)) const;

2452 8 get_axis 4 2530 22 LQuaterniond::get_axis 0 1 1264 866
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3d LQuaterniond::get_axis(void) const;

2453 19 get_axis_normalized 4 2530 33 LQuaterniond::get_axis_normalized 0 1 1265 832
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3d LQuaterniond::get_axis_normalized(void) const;

2454 13 get_angle_rad 4 2530 27 LQuaterniond::get_angle_rad 0 1 1266 1292
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
54
inline double LQuaterniond::get_angle_rad(void) const;

2455 9 get_angle 4 2530 23 LQuaterniond::get_angle 0 1 1267 1284
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
50
inline double LQuaterniond::get_angle(void) const;

2456 23 set_from_axis_angle_rad 4 2530 37 LQuaterniond::set_from_axis_angle_rad 0 1 1268 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
91
inline void LQuaterniond::set_from_axis_angle_rad(double angle_rad, LVector3d const &axis);

2457 19 set_from_axis_angle 4 2530 33 LQuaterniond::set_from_axis_angle 0 1 1269 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
87
inline void LQuaterniond::set_from_axis_angle(double angle_deg, LVector3d const &axis);

2458 6 get_up 4 2530 20 LQuaterniond::get_up 0 2 1270 1271 632
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3d LQuaterniond::get_up(CoordinateSystem cs = (CS_default)) const;

2459 9 get_right 4 2530 23 LQuaterniond::get_right 0 2 1272 1273 642
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3d LQuaterniond::get_right(CoordinateSystem cs = (CS_default)) const;

2460 11 get_forward 4 2530 25 LQuaterniond::get_forward 0 2 1274 1275 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3d LQuaterniond::get_forward(CoordinateSystem cs = (CS_default)) const;

2461 5 get_r 4 2530 19 LQuaterniond::get_r 0 1 1276 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_r(void) const;

2462 5 get_i 4 2530 19 LQuaterniond::get_i 0 1 1277 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_i(void) const;

2463 5 get_j 4 2530 19 LQuaterniond::get_j 0 1 1278 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_j(void) const;

2464 5 get_k 4 2530 19 LQuaterniond::get_k 0 1 1279 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_k(void) const;

2465 5 set_r 4 2530 19 LQuaterniond::set_r 0 1 1280 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_r(double r);

2466 5 set_i 4 2530 19 LQuaterniond::set_i 0 1 1281 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_i(double i);

2467 5 set_j 4 2530 19 LQuaterniond::set_j 0 1 1282 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_j(double j);

2468 5 set_k 4 2530 19 LQuaterniond::set_k 0 1 1283 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_k(double k);

2469 9 normalize 4 2530 23 LQuaterniond::normalize 0 1 1284 438
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaterniond::normalize(void);

2470 14 conjugate_from 4 2530 28 LQuaterniond::conjugate_from 0 1 1285 1636
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaterniond::conjugate_from(LQuaterniond const &other);

2471 18 conjugate_in_place 4 2530 32 LQuaterniond::conjugate_in_place 0 1 1286 760
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaterniond::conjugate_in_place(void);

2472 11 invert_from 4 2530 25 LQuaterniond::invert_from 0 1 1287 1590
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaterniond::invert_from(LQuaterniond const &other);

2473 15 invert_in_place 4 2530 29 LQuaterniond::invert_in_place 0 1 1288 722
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaterniond::invert_in_place(void);

2474 11 is_identity 4 2530 25 LQuaterniond::is_identity 0 1 1289 646
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaterniond::is_identity(void) const;

2475 18 is_almost_identity 4 2530 32 LQuaterniond::is_almost_identity 0 1 1290 684
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
69
inline bool LQuaterniond::is_almost_identity(double tolerance) const;

2476 10 ident_quat 4 2530 24 LQuaterniond::ident_quat 0 1 1291 520
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaterniond const &LQuaterniond::ident_quat(void);

2477 14 get_class_type 4 2530 28 LQuaterniond::get_class_type 0 1 1292 0
53
static TypeHandle LQuaterniond::get_class_type(void);

2478 13 ~LQuaterniond 4 2530 27 LQuaterniond::~LQuaterniond 0 0 0
34
LQuaterniond::~LQuaterniond(void);

2479 10 LRotationf 4 2531 22 LRotationf::LRotationf 0 8 1293 1294 1295 1296 1297 1298 1299 1300 2365
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
420
inline LRotationf::LRotationf(void);
inline LRotationf::LRotationf(LQuaternionf const &);
inline LRotationf::LRotationf(LVecBase4f const &copy);
inline LRotationf::LRotationf(float , float , float , float );
inline LRotationf::LRotationf(LVector3f const &, float );
inline LRotationf::LRotationf(LMatrix3f const &);
inline LRotationf::LRotationf(LMatrix4f const &);
inline LRotationf::LRotationf(float , float , float );

2480 10 operator * 4 2531 22 LRotationf::operator * 0 3 1301 1302 1303 853
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
211
inline LRotationf LRotationf::operator *(float scalar) const;
inline LRotationf LRotationf::operator *(LRotationf const &other) const;
inline LQuaternionf LRotationf::operator *(LQuaternionf const &other) const;

2481 10 operator / 4 2531 22 LRotationf::operator / 0 1 1304 224
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LRotationf LRotationf::operator /(float scalar) const;

2482 14 get_class_type 4 2531 26 LRotationf::get_class_type 0 1 1305 0
51
static TypeHandle LRotationf::get_class_type(void);

2483 11 ~LRotationf 4 2531 23 LRotationf::~LRotationf 0 0 0
30
LRotationf::~LRotationf(void);

2484 10 LRotationd 4 2532 22 LRotationd::LRotationd 0 8 1306 1307 1308 1309 1310 1311 1312 1313 4732
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////

// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
428
inline LRotationd::LRotationd(void);
inline LRotationd::LRotationd(LQuaterniond const &);
inline LRotationd::LRotationd(LVecBase4d const &copy);
inline LRotationd::LRotationd(double , double , double , double );
inline LRotationd::LRotationd(LVector3d const &, double );
inline LRotationd::LRotationd(LMatrix3d const &);
inline LRotationd::LRotationd(LMatrix4d const &);
inline LRotationd::LRotationd(double , double , double );

2485 10 operator * 4 2532 22 LRotationd::operator * 0 3 1314 1315 1316 1708
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
212
inline LRotationd LRotationd::operator *(double scalar) const;
inline LRotationd LRotationd::operator *(LRotationd const &other) const;
inline LQuaterniond LRotationd::operator *(LQuaterniond const &other) const;

2486 10 operator / 4 2532 22 LRotationd::operator / 0 1 1317 450
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LRotationd LRotationd::operator /(double scalar) const;

2487 14 get_class_type 4 2532 26 LRotationd::get_class_type 0 1 1318 0
51
static TypeHandle LRotationd::get_class_type(void);

2488 11 ~LRotationd 4 2532 23 LRotationd::~LRotationd 0 0 0
30
LRotationd::~LRotationd(void);

2489 13 LOrientationf 4 2533 28 LOrientationf::LOrientationf 0 6 1319 1320 1321 1322 1323 1324 1881
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
346
inline LOrientationf::LOrientationf(void);
inline LOrientationf::LOrientationf(LQuaternionf const &);
inline LOrientationf::LOrientationf(float , float , float , float );
inline LOrientationf::LOrientationf(LVector3f const &, float );
inline LOrientationf::LOrientationf(LMatrix3f const &);
inline LOrientationf::LOrientationf(LMatrix4f const &);

2490 10 operator * 4 2533 25 LOrientationf::operator * 0 2 1325 1326 666
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
159
inline LOrientationf LOrientationf::operator *(LRotationf const &other) const;
inline LOrientationf LOrientationf::operator *(LQuaternionf const &other) const;

2491 14 get_class_type 4 2533 29 LOrientationf::get_class_type 0 1 1327 0
54
static TypeHandle LOrientationf::get_class_type(void);

2492 14 ~LOrientationf 4 2533 29 LOrientationf::~LOrientationf 0 0 0
36
LOrientationf::~LOrientationf(void);

2493 13 LOrientationd 4 2534 28 LOrientationd::LOrientationd 0 6 1328 1329 1330 1331 1332 1333 3764
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////

// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
350
inline LOrientationd::LOrientationd(void);
inline LOrientationd::LOrientationd(LQuaterniond const &);
inline LOrientationd::LOrientationd(double , double , double , double );
inline LOrientationd::LOrientationd(LVector3d const &, float );
inline LOrientationd::LOrientationd(LMatrix3d const &);
inline LOrientationd::LOrientationd(LMatrix4d const &);

2494 10 operator * 4 2534 25 LOrientationd::operator * 0 2 1334 1335 1334
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
159
inline LOrientationd LOrientationd::operator *(LRotationd const &other) const;
inline LOrientationd LOrientationd::operator *(LQuaterniond const &other) const;

2495 14 get_class_type 4 2534 29 LOrientationd::get_class_type 0 1 1336 0
54
static TypeHandle LOrientationd::get_class_type(void);

2496 14 ~LOrientationd 4 2534 29 LOrientationd::~LOrientationd 0 0 0
36
LOrientationd::~LOrientationd(void);

1443
1 14 Dtool_VZN3gaIU 7 6 2535 1455 14 Dtool_VZN3gaIU 715 // Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_VZN3VQfL 7 6 2535 1455 14 Dtool_VZN3VQfL 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2536  
3 14 Dtool_VZN3lRq3 7 6 2535 1455 14 Dtool_VZN3lRq3 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
4 14 Dtool_VZN3oQsK 7 6 2535 1455 14 Dtool_VZN3oQsK 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2538  1 y 1 2538  
5 14 Dtool_VZN3_ub0 6 7 2535 0 14 Dtool_VZN3_ub0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  4 copy 1 2536  
6 14 Dtool_VZN3_fng 6 7 2535 0 14 Dtool_VZN3_fng 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  10 fill_value 1 2538  
7 14 Dtool_VZN3xPnZ 4 8 2540 0 14 Dtool_VZN3xPnZ 0 2 4 this 3 2535  4 size 1 2539  
8 14 Dtool_VZN3fGvP 6 11 2536 0 14 Dtool_VZN3fGvP 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
9 14 Dtool_VZN3aClz 6 12 2536 0 14 Dtool_VZN3aClz 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
10 14 Dtool_VZN3VCzP 6 13 2536 0 14 Dtool_VZN3VCzP 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
11 14 Dtool_VZN3tjEl 6 15 2541 0 14 Dtool_VZN3tjEl 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  4 self 1 2541  
12 14 Dtool_VZN3HRz6 6 16 2541 0 14 Dtool_VZN3HRz6 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  9 attr_name 1 2543  
13 14 Dtool_VZN3HRo3 6 17 2544 0 14 Dtool_VZN3HRo3 260 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2535  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
14 14 Dtool_VZN3Y1X1 4 18 2540 0 14 Dtool_VZN3Y1X1 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  1 i 1 2544  
15 14 Dtool_VZN36qLS 6 18 2538 0 14 Dtool_VZN36qLS 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  1 i 1 2544  
16 14 Dtool_VZN3xNZF 4 19 2540 0 14 Dtool_VZN3xNZF 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  1 i 1 2544  1 v 1 2538  
17 14 Dtool_VZN3oYf5 6 20 2544 0 14 Dtool_VZN3oYf5 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
18 14 Dtool_VZN3I5WA 6 21 2545 0 14 Dtool_VZN3I5WA 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
19 14 Dtool_VZN3y_vl 6 22 2538 0 14 Dtool_VZN3y_vl 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  1 i 1 2544  
20 14 Dtool_VZN3uYPR 6 23 2538 0 14 Dtool_VZN3uYPR 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
21 14 Dtool_VZN3u8IW 6 24 2538 0 14 Dtool_VZN3u8IW 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
22 14 Dtool_VZN3nQnT 4 25 2540 0 14 Dtool_VZN3nQnT 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  1 i 1 2544  5 value 1 2538  
23 14 Dtool_VZN3gvpl 4 26 2540 0 14 Dtool_VZN3gvpl 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 value 1 2538  
24 14 Dtool_VZN3gLiq 4 27 2540 0 14 Dtool_VZN3gLiq 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 value 1 2538  
25 14 Dtool_VZN3qznS 4 28 2540 0 14 Dtool_VZN3qznS 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  1 i 1 2544  5 value 1 2538  
26 14 Dtool_VZN3BpGk 4 29 2540 0 14 Dtool_VZN3BpGk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 value 1 2538  
27 14 Dtool_VZN3BN_o 4 30 2540 0 14 Dtool_VZN3BN_o 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 value 1 2538  
28 14 Dtool_VZN3MuTE 4 31 2540 0 14 Dtool_VZN3MuTE 392 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
29 14 Dtool_VZN3dEX3 6 32 2544 0 14 Dtool_VZN3dEX3 276 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
30 14 Dtool_VZN391nF 4 33 2540 0 14 Dtool_VZN391nF 361 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  10 fill_value 1 2538  
31 14 Dtool_VZN3mT_9 4 34 2540 0 14 Dtool_VZN3mT_9 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  1 x 1 2538  1 y 1 2538  
32 14 Dtool_VZN3vbI8 6 35 2538 0 14 Dtool_VZN3vbI8 292 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
33 14 Dtool_VZN3IV8b 6 36 2538 0 14 Dtool_VZN3IV8b 297 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
34 14 Dtool_VZN37siR 6 37 2545 0 14 Dtool_VZN37siR 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2535  
35 14 Dtool_VZN39RXz 6 38 2538 0 14 Dtool_VZN39RXz 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  5 other 1 2536  
36 14 Dtool_VZN3km2c 7 39 2535 1455 14 Dtool_VZN3km2c 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  4 onto 1 2536  
37 14 Dtool_VZN3JkIg 6 40 2545 0 14 Dtool_VZN3JkIg 495 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  5 other 1 2536  
38 14 Dtool_VZN3ssYs 6 41 2545 0 14 Dtool_VZN3ssYs 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  5 other 1 2536  
39 14 Dtool_VZN3oMAb 6 42 2545 0 14 Dtool_VZN3oMAb 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  5 other 1 2536  
40 14 Dtool_VZN3VWAg 6 43 2544 0 14 Dtool_VZN3VWAg 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  5 other 1 2536  
41 14 Dtool_VZN3gmxE 6 43 2544 0 14 Dtool_VZN3gmxE 501 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2536  5 other 1 2536  9 threshold 1 2538  
42 14 Dtool_VZN3it5w 6 44 2539 0 14 Dtool_VZN3it5w 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
43 14 Dtool_VZN3cmf3 6 44 2539 0 14 Dtool_VZN3cmf3 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  9 threshold 1 2538  
44 14 Dtool_VZN3T3v_ 6 45 2539 0 14 Dtool_VZN3T3v_ 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  4 hash 1 2539  
45 14 Dtool_VZN3kEhk 6 45 2539 0 14 Dtool_VZN3kEhk 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2536  4 hash 1 2539  9 threshold 1 2538  
46 14 Dtool_VZN3WPOu 7 46 2535 1455 14 Dtool_VZN3WPOu 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2536  
47 14 Dtool_VZN3KsJ6 7 47 2535 1455 14 Dtool_VZN3KsJ6 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  5 other 1 2536  
48 14 Dtool_VZN3LcrN 7 48 2535 1455 14 Dtool_VZN3LcrN 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  5 other 1 2536  
49 14 Dtool_VZN30d1B 7 49 2535 1455 14 Dtool_VZN30d1B 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  6 scalar 1 2538  
50 14 Dtool_VZN301py 7 50 2535 1455 14 Dtool_VZN301py 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  6 scalar 1 2538  
51 14 Dtool_VZN3_q3M 6 51 2535 0 14 Dtool_VZN3_q3M 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2536  
52 14 Dtool_VZN3_aZg 6 52 2535 0 14 Dtool_VZN3_aZg 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2536  
53 14 Dtool_VZN3iYvI 6 53 2535 0 14 Dtool_VZN3iYvI 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  6 scalar 1 2538  
54 14 Dtool_VZN3igj5 6 54 2535 0 14 Dtool_VZN3igj5 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  6 scalar 1 2538  
55 14 Dtool_VZN3KIsE 7 55 2535 1455 14 Dtool_VZN3KIsE 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2536  
56 14 Dtool_VZN3oFND 7 56 2535 1455 14 Dtool_VZN3oFND 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2536  
57 14 Dtool_VZN3NeTt 6 57 2545 0 14 Dtool_VZN3NeTt 339 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  5 other 1 2536  
58 14 Dtool_VZN3nTFd 6 57 2545 0 14 Dtool_VZN3nTFd 315 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2536  5 other 1 2536  9 threshold 1 2538  
59 14 Dtool_VZN3pO8G 4 58 2540 0 14 Dtool_VZN3pO8G 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2536  3 out 1 2546  
60 14 Dtool_VZN3iNXa 4 59 2540 0 14 Dtool_VZN3iNXa 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2536  3 out 1 2546  10 class_name 1 2543  
61 14 Dtool_VZN3KNOA 7 60 2549 0 14 Dtool_VZN3KNOA 0 0 
62 14 Dtool_VZN3GdnQ 7 62 2550 1510 14 Dtool_VZN3GdnQ 715 // Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
63 14 Dtool_VZN3CUdE 7 62 2550 1510 14 Dtool_VZN3CUdE 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2551  
64 14 Dtool_VZN3i9B6 7 62 2550 1510 14 Dtool_VZN3i9B6 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
65 14 Dtool_VZN3CY0M 7 62 2550 1510 14 Dtool_VZN3CY0M 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2553  1 y 1 2553  
66 14 Dtool_VZN3G77A 6 63 2550 0 14 Dtool_VZN3G77A 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  4 copy 1 2551  
67 14 Dtool_VZN3jNf2 6 63 2550 0 14 Dtool_VZN3jNf2 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  10 fill_value 1 2553  
68 14 Dtool_VZN3v7np 4 64 2540 0 14 Dtool_VZN3v7np 0 2 4 this 3 2550  4 size 1 2539  
69 14 Dtool_VZN3xrvf 6 67 2551 0 14 Dtool_VZN3xrvf 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
70 14 Dtool_VZN352lD 6 68 2551 0 14 Dtool_VZN352lD 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
71 14 Dtool_VZN372zf 6 69 2551 0 14 Dtool_VZN372zf 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
72 14 Dtool_VZN3POE1 6 71 2541 0 14 Dtool_VZN3POE1 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  4 self 1 2541  
73 14 Dtool_VZN35eyK 6 72 2541 0 14 Dtool_VZN35eyK 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  9 attr_name 1 2543  
74 14 Dtool_VZN3pLpH 6 73 2544 0 14 Dtool_VZN3pLpH 260 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2550  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
75 14 Dtool_VZN35ZXF 4 74 2540 0 14 Dtool_VZN35ZXF 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  1 i 1 2544  
76 14 Dtool_VZN3cHLi 6 74 2553 0 14 Dtool_VZN3cHLi 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  1 i 1 2544  
77 14 Dtool_VZN3JisN 4 75 2540 0 14 Dtool_VZN3JisN 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2550  1 i 1 2544  1 v 1 2553  
78 14 Dtool_VZN3P1fJ 6 76 2544 0 14 Dtool_VZN3P1fJ 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
79 14 Dtool_VZN3muWQ 6 77 2545 0 14 Dtool_VZN3muWQ 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
80 14 Dtool_VZN3Urv1 6 78 2553 0 14 Dtool_VZN3Urv1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  1 i 1 2544  
81 14 Dtool_VZN3QsPh 6 79 2553 0 14 Dtool_VZN3QsPh 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
82 14 Dtool_VZN3QIIm 6 80 2553 0 14 Dtool_VZN3QIIm 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
83 14 Dtool_VZN33_g8 4 81 2540 0 14 Dtool_VZN33_g8 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2550  1 i 1 2544  5 value 1 2553  
84 14 Dtool_VZN3KZlY 4 82 2540 0 14 Dtool_VZN3KZlY 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  5 value 1 2553  
85 14 Dtool_VZN3K9dd 4 83 2540 0 14 Dtool_VZN3K9dd 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  5 value 1 2553  
86 14 Dtool_VZN30P6a 4 84 2540 0 14 Dtool_VZN30P6a 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2550  1 i 1 2544  5 value 1 2553  
87 14 Dtool_VZN3rQCX 4 85 2540 0 14 Dtool_VZN3rQCX 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  5 value 1 2553  
88 14 Dtool_VZN3r06b 4 86 2540 0 14 Dtool_VZN3r06b 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  5 value 1 2553  
89 14 Dtool_VZN3u9TU 4 87 2540 0 14 Dtool_VZN3u9TU 392 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
90 14 Dtool_VZN38xWH 6 88 2544 0 14 Dtool_VZN38xWH 276 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
91 14 Dtool_VZN3sasc 4 89 2540 0 14 Dtool_VZN3sasc 361 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  10 fill_value 1 2553  
92 14 Dtool_VZN3bAy_ 4 90 2540 0 14 Dtool_VZN3bAy_ 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2550  1 x 1 2553  1 y 1 2553  
93 14 Dtool_VZN3MHIM 6 91 2553 0 14 Dtool_VZN3MHIM 292 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
94 14 Dtool_VZN3qI8r 6 92 2553 0 14 Dtool_VZN3qI8r 297 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
95 14 Dtool_VZN3ZAih 6 93 2545 0 14 Dtool_VZN3ZAih 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2550  
96 14 Dtool_VZN3cCJC 6 94 2553 0 14 Dtool_VZN3cCJC 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  5 other 1 2551  
97 14 Dtool_VZN3mCxs 7 95 2550 1510 14 Dtool_VZN3mCxs 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  4 onto 1 2551  
98 14 Dtool_VZN3Leos 6 96 2545 0 14 Dtool_VZN3Leos 495 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  5 other 1 2551  
99 14 Dtool_VZN3gLYM 6 97 2545 0 14 Dtool_VZN3gLYM 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  5 other 1 2551  
100 14 Dtool_VZN3trA7 6 98 2545 0 14 Dtool_VZN3trA7 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  5 other 1 2551  
101 14 Dtool_VZN3cKgs 6 99 2544 0 14 Dtool_VZN3cKgs 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  5 other 1 2551  
102 14 Dtool_VZN3e1W3 6 99 2544 0 14 Dtool_VZN3e1W3 501 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2551  5 other 1 2551  9 threshold 1 2553  
103 14 Dtool_VZN3F_5A 6 100 2539 0 14 Dtool_VZN3F_5A 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
104 14 Dtool_VZN31_3f 6 100 2539 0 14 Dtool_VZN31_3f 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  9 threshold 1 2553  
105 14 Dtool_VZN3wrvP 6 101 2539 0 14 Dtool_VZN3wrvP 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  4 hash 1 2539  
106 14 Dtool_VZN3_Zma 6 101 2539 0 14 Dtool_VZN3_Zma 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2551  4 hash 1 2539  9 threshold 1 2553  
107 14 Dtool_VZN34yP_ 7 102 2550 1510 14 Dtool_VZN34yP_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2551  
108 14 Dtool_VZN3FWpG 7 103 2550 1510 14 Dtool_VZN3FWpG 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  5 other 1 2551  
109 14 Dtool_VZN3FmLa 7 104 2550 1510 14 Dtool_VZN3FmLa 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  5 other 1 2551  
110 14 Dtool_VZN3P52U 7 105 2550 1510 14 Dtool_VZN3P52U 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  6 scalar 1 2553  
111 14 Dtool_VZN3IRtF 7 106 2550 1510 14 Dtool_VZN3IRtF 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  6 scalar 1 2553  
112 14 Dtool_VZN3zz2s 6 107 2550 0 14 Dtool_VZN3zz2s 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  5 other 1 2551  
113 14 Dtool_VZN38DYA 6 108 2550 0 14 Dtool_VZN38DYA 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  5 other 1 2551  
114 14 Dtool_VZN3WC3U 6 109 2550 0 14 Dtool_VZN3WC3U 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  6 scalar 1 2553  
115 14 Dtool_VZN3X6rF 6 110 2550 0 14 Dtool_VZN3X6rF 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  6 scalar 1 2553  
116 14 Dtool_VZN3mSot 7 111 2550 1510 14 Dtool_VZN3mSot 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  5 other 1 2551  
117 14 Dtool_VZN3EfJs 7 112 2550 1510 14 Dtool_VZN3EfJs 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2550  5 other 1 2551  
118 14 Dtool_VZN3nTK9 6 113 2545 0 14 Dtool_VZN3nTK9 339 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  5 other 1 2551  
119 14 Dtool_VZN3_OqN 6 113 2545 0 14 Dtool_VZN3_OqN 315 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2551  5 other 1 2551  9 threshold 1 2553  
120 14 Dtool_VZN3SB9W 4 114 2540 0 14 Dtool_VZN3SB9W 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  3 out 1 2546  
121 14 Dtool_VZN3HCWq 4 115 2540 0 14 Dtool_VZN3HCWq 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2551  3 out 1 2546  10 class_name 1 2543  
122 14 Dtool_VZN3vAPQ 7 116 2549 0 14 Dtool_VZN3vAPQ 0 0 
123 14 Dtool_VZN3Qv_8 7 118 2554 1574 14 Dtool_VZN3Qv_8 713 // Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
124 14 Dtool_VZN3_wFf 7 118 2554 1574 14 Dtool_VZN3_wFf 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2536  
125 14 Dtool_VZN3tvIb 7 118 2554 1574 14 Dtool_VZN3tvIb 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
126 14 Dtool_VZN3Os00 7 118 2554 1574 14 Dtool_VZN3Os00 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2538  1 y 1 2538  
127 14 Dtool_VZN3rg1b 6 119 2554 0 14 Dtool_VZN3rg1b 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2554  4 copy 1 2536  
128 14 Dtool_VZN3OfPd 6 119 2554 0 14 Dtool_VZN3OfPd 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2554  10 fill_value 1 2538  
129 14 Dtool_VZN3s393 6 120 2541 0 14 Dtool_VZN3s393 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  9 attr_name 1 2543  
130 14 Dtool_VZN3rq0B 6 121 2544 0 14 Dtool_VZN3rq0B 259 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2554  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
131 14 Dtool_VZN3MCtA 6 122 2555 0 14 Dtool_VZN3MCtA 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
132 14 Dtool_VZN3yI1V 6 123 2555 0 14 Dtool_VZN3yI1V 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
133 14 Dtool_VZN3ykua 6 124 2555 0 14 Dtool_VZN3ykua 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
134 14 Dtool_VZN3VMph 7 125 2554 1574 14 Dtool_VZN3VMph 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2555  
135 14 Dtool_VZN3JC_P 7 126 2535 1455 14 Dtool_VZN3JC_P 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  5 other 1 2536  
136 14 Dtool_VZN3jfKg 7 126 2554 1574 14 Dtool_VZN3jfKg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  5 other 1 2555  
137 14 Dtool_VZN3pPmQ 7 127 2535 1455 14 Dtool_VZN3pPmQ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  5 other 1 2536  
138 14 Dtool_VZN3Dbxg 7 127 2554 1574 14 Dtool_VZN3Dbxg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  5 other 1 2555  
139 14 Dtool_VZN3dPP0 7 128 2554 1574 14 Dtool_VZN3dPP0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  6 scalar 1 2538  
140 14 Dtool_VZN3tnx1 7 129 2554 1574 14 Dtool_VZN3tnx1 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  6 scalar 1 2538  
141 14 Dtool_VZN3piFZ 7 130 2554 1574 14 Dtool_VZN3piFZ 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  4 onto 1 2536  
142 14 Dtool_VZN3e9_x 6 131 2538 0 14 Dtool_VZN3e9_x 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  5 other 1 2555  
143 14 Dtool_VZN3_avu 6 132 2538 0 14 Dtool_VZN3_avu 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  5 other 1 2555  
144 14 Dtool_VZN3fA9I 4 133 2540 0 14 Dtool_VZN3fA9I 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2555  3 out 1 2546  10 class_name 1 2543  
145 14 Dtool_VZN3hYMy 7 134 2549 0 14 Dtool_VZN3hYMy 0 0 
146 14 Dtool_VZN3wcd5 7 137 2557 1592 14 Dtool_VZN3wcd5 713 // Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
147 14 Dtool_VZN3qdIZ 7 137 2557 1592 14 Dtool_VZN3qdIZ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2551  
148 14 Dtool_VZN3eGDk 7 137 2557 1592 14 Dtool_VZN3eGDk 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
149 14 Dtool_VZN3Ay7S 7 137 2557 1592 14 Dtool_VZN3Ay7S 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2553  1 y 1 2553  
150 14 Dtool_VZN3zhOK 6 138 2557 0 14 Dtool_VZN3zhOK 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2557  4 copy 1 2551  
151 14 Dtool_VZN32_5n 6 138 2557 0 14 Dtool_VZN32_5n 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2557  10 fill_value 1 2553  
152 14 Dtool_VZN3H0d0 6 139 2541 0 14 Dtool_VZN3H0d0 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  9 attr_name 1 2543  
153 14 Dtool_VZN3zrU_ 6 140 2544 0 14 Dtool_VZN3zrU_ 259 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2557  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
154 14 Dtool_VZN30FN9 6 141 2558 0 14 Dtool_VZN30FN9 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
155 14 Dtool_VZN3pXVS 6 142 2558 0 14 Dtool_VZN3pXVS 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
156 14 Dtool_VZN3p7OX 6 143 2558 0 14 Dtool_VZN3p7OX 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
157 14 Dtool_VZN3ONJe 7 144 2557 1592 14 Dtool_VZN3ONJe 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2558  
158 14 Dtool_VZN3gDY_ 7 145 2550 1510 14 Dtool_VZN3gDY_ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  5 other 1 2551  
159 14 Dtool_VZN3KsOa 7 145 2557 1592 14 Dtool_VZN3KsOa 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  5 other 1 2558  
160 14 Dtool_VZN3AO__ 7 146 2550 1510 14 Dtool_VZN3AO__ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  5 other 1 2551  
161 14 Dtool_VZN3qo1a 7 146 2557 1592 14 Dtool_VZN3qo1a 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  5 other 1 2558  
162 14 Dtool_VZN3_Z18 7 147 2557 1592 14 Dtool_VZN3_Z18 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  6 scalar 1 2553  
163 14 Dtool_VZN3vwW_ 7 148 2557 1592 14 Dtool_VZN3vwW_ 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  6 scalar 1 2553  
164 14 Dtool_VZN3Ymkd 7 149 2557 1592 14 Dtool_VZN3Ymkd 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  4 onto 1 2551  
165 14 Dtool_VZN3H_RS 6 150 2553 0 14 Dtool_VZN3H_RS 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  5 other 1 2558  
166 14 Dtool_VZN3oZBP 6 151 2553 0 14 Dtool_VZN3oZBP 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2558  5 other 1 2558  
167 14 Dtool_VZN32DdF 4 152 2540 0 14 Dtool_VZN32DdF 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2558  3 out 1 2546  10 class_name 1 2543  
168 14 Dtool_VZN34Zsu 7 153 2549 0 14 Dtool_VZN34Zsu 0 0 
169 14 Dtool_VZN3zKKY 7 156 2560 1608 14 Dtool_VZN3zKKY 711 // Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
170 14 Dtool_VZN3tY8N 7 156 2560 1608 14 Dtool_VZN3tY8N 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2536  
171 14 Dtool_VZN3CtvQ 7 156 2560 1608 14 Dtool_VZN3CtvQ 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
172 14 Dtool_VZN3qlQB 7 156 2560 1608 14 Dtool_VZN3qlQB 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2538  1 y 1 2538  
173 14 Dtool_VZN3_egO 6 157 2560 0 14 Dtool_VZN3_egO 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2560  4 copy 1 2536  
174 14 Dtool_VZN3qvjK 6 157 2560 0 14 Dtool_VZN3qvjK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2560  10 fill_value 1 2538  
175 14 Dtool_VZN3P_UN 6 158 2541 0 14 Dtool_VZN3P_UN 260 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  9 attr_name 1 2543  
176 14 Dtool_VZN3bAlh 6 159 2544 0 14 Dtool_VZN3bAlh 258 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2560  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
177 14 Dtool_VZN3qnt3 6 160 2561 0 14 Dtool_VZN3qnt3 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
178 14 Dtool_VZN3CGWE 6 161 2561 0 14 Dtool_VZN3CGWE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
179 14 Dtool_VZN3aRgE 6 162 2561 0 14 Dtool_VZN3aRgE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
180 14 Dtool_VZN301sU 7 163 2560 1608 14 Dtool_VZN301sU 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2561  
181 14 Dtool_VZN3sVHw 7 164 2535 1455 14 Dtool_VZN3sVHw 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  5 other 1 2536  
182 14 Dtool_VZN3f_os 7 164 2560 1608 14 Dtool_VZN3f_os 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  5 other 1 2555  
183 14 Dtool_VZN3YCqi 7 165 2554 1574 14 Dtool_VZN3YCqi 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  5 other 1 2561  
184 14 Dtool_VZN33nIw 7 165 2535 1455 14 Dtool_VZN33nIw 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  5 other 1 2536  
185 14 Dtool_VZN3ggps 7 165 2560 1608 14 Dtool_VZN3ggps 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  5 other 1 2555  
186 14 Dtool_VZN3ULR7 7 166 2560 1608 14 Dtool_VZN3ULR7 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  6 scalar 1 2538  
187 14 Dtool_VZN3rFUb 7 167 2560 1608 14 Dtool_VZN3rFUb 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  6 scalar 1 2538  
188 14 Dtool_VZN3P_bo 7 168 2560 1608 14 Dtool_VZN3P_bo 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2561  4 onto 1 2536  
189 14 Dtool_VZN3Fi0t 4 169 2540 0 14 Dtool_VZN3Fi0t 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2561  3 out 1 2546  10 class_name 1 2543  
190 14 Dtool_VZN3ntNT 7 170 2549 0 14 Dtool_VZN3ntNT 0 0 
191 14 Dtool_VZN3tKnR 7 173 2563 1624 14 Dtool_VZN3tKnR 711 // Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
192 14 Dtool_VZN3kCZP 7 173 2563 1624 14 Dtool_VZN3kCZP 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2551  
193 14 Dtool_VZN338Ro 7 173 2563 1624 14 Dtool_VZN338Ro 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
194 14 Dtool_VZN3VLaV 7 173 2563 1624 14 Dtool_VZN3VLaV 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2553  1 y 1 2553  
195 14 Dtool_VZN39M99 6 174 2563 0 14 Dtool_VZN39M99 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2563  4 copy 1 2551  
196 14 Dtool_VZN3MH4I 6 174 2563 0 14 Dtool_VZN3MH4I 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2563  10 fill_value 1 2553  
197 14 Dtool_VZN3x_N_ 6 175 2541 0 14 Dtool_VZN3x_N_ 260 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  9 attr_name 1 2543  
198 14 Dtool_VZN3aAeT 6 176 2544 0 14 Dtool_VZN3aAeT 258 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2563  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
199 14 Dtool_VZN3rnmp 6 177 2564 0 14 Dtool_VZN3rnmp 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
200 14 Dtool_VZN3AGP2 6 178 2564 0 14 Dtool_VZN3AGP2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
201 14 Dtool_VZN3YRZ2 6 179 2564 0 14 Dtool_VZN3YRZ2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
202 14 Dtool_VZN311lG 7 180 2563 1624 14 Dtool_VZN311lG 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2564  
203 14 Dtool_VZN3vLkf 7 181 2550 1510 14 Dtool_VZN3vLkf 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  5 other 1 2551  
204 14 Dtool_VZN3Cmce 7 181 2563 1624 14 Dtool_VZN3Cmce 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  5 other 1 2558  
205 14 Dtool_VZN3NGic 7 182 2557 1592 14 Dtool_VZN3NGic 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  5 other 1 2564  
206 14 Dtool_VZN30Vlf 7 182 2550 1510 14 Dtool_VZN30Vlf 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  5 other 1 2551  
207 14 Dtool_VZN3Fode 7 182 2563 1624 14 Dtool_VZN3Fode 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  5 other 1 2558  
208 14 Dtool_VZN3rAiF 7 183 2563 1624 14 Dtool_VZN3rAiF 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  6 scalar 1 2553  
209 14 Dtool_VZN36Vkl 7 184 2563 1624 14 Dtool_VZN36Vkl 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  6 scalar 1 2553  
210 14 Dtool_VZN3i_k4 7 185 2563 1624 14 Dtool_VZN3i_k4 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  4 onto 1 2551  
211 14 Dtool_VZN3Eitf 4 186 2540 0 14 Dtool_VZN3Eitf 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2564  3 out 1 2546  10 class_name 1 2543  
212 14 Dtool_VZN3mtGF 7 187 2549 0 14 Dtool_VZN3mtGF 0 0 
213 14 Dtool_VZN39GM2 7 190 2566 1634 14 Dtool_VZN39GM2 715 // Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
214 14 Dtool_VZN3RRmU 7 190 2566 1634 14 Dtool_VZN3RRmU 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2567  
215 14 Dtool_VZN3BPuZ 7 190 2566 1634 14 Dtool_VZN3BPuZ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
216 14 Dtool_VZN3nj6v 7 190 2566 1634 14 Dtool_VZN3nj6v 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2538  1 y 1 2538  1 z 1 2538  
217 14 Dtool_VZN3qOP9 6 191 2566 0 14 Dtool_VZN3qOP9 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  4 copy 1 2567  
218 14 Dtool_VZN3rfXC 6 191 2566 0 14 Dtool_VZN3rfXC 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  10 fill_value 1 2538  
219 14 Dtool_VZN3kPX7 4 192 2540 0 14 Dtool_VZN3kPX7 0 2 4 this 3 2566  4 size 1 2539  
220 14 Dtool_VZN3KGfx 6 195 2567 0 14 Dtool_VZN3KGfx 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
221 14 Dtool_VZN3mCVV 6 196 2567 0 14 Dtool_VZN3mCVV 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
222 14 Dtool_VZN3gCjx 6 197 2567 0 14 Dtool_VZN3gCjx 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
223 14 Dtool_VZN3jCxN 6 198 2567 0 14 Dtool_VZN3jCxN 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
224 14 Dtool_VZN3Bi0G 6 200 2541 0 14 Dtool_VZN3Bi0G 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  4 self 1 2541  
225 14 Dtool_VZN3rQjc 6 201 2541 0 14 Dtool_VZN3rQjc 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  9 attr_name 1 2543  
226 14 Dtool_VZN3bRYZ 6 202 2544 0 14 Dtool_VZN3bRYZ 260 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2566  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
227 14 Dtool_VZN301HX 4 203 2540 0 14 Dtool_VZN301HX 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  1 i 1 2544  
228 14 Dtool_VZN3nq7z 6 203 2538 0 14 Dtool_VZN3nq7z 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  1 i 1 2544  
229 14 Dtool_VZN3CMJn 4 204 2540 0 14 Dtool_VZN3CMJn 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2566  1 i 1 2544  1 v 1 2538  
230 14 Dtool_VZN3EZPb 6 205 2544 0 14 Dtool_VZN3EZPb 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
231 14 Dtool_VZN3d5Gi 6 206 2545 0 14 Dtool_VZN3d5Gi 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
232 14 Dtool_VZN3O_fH 6 207 2538 0 14 Dtool_VZN3O_fH 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  1 i 1 2544  
233 14 Dtool_VZN3dY_y 6 208 2538 0 14 Dtool_VZN3dY_y 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
234 14 Dtool_VZN3d843 6 209 2538 0 14 Dtool_VZN3d843 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
235 14 Dtool_VZN3dQw8 6 210 2538 0 14 Dtool_VZN3dQw8 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
236 14 Dtool_VZN3UQX1 4 211 2540 0 14 Dtool_VZN3UQX1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2566  1 i 1 2544  5 value 1 2538  
237 14 Dtool_VZN3cuZH 4 212 2540 0 14 Dtool_VZN3cuZH 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 value 1 2538  
238 14 Dtool_VZN3cKSM 4 213 2540 0 14 Dtool_VZN3cKSM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 value 1 2538  
239 14 Dtool_VZN3cWKR 4 214 2540 0 14 Dtool_VZN3cWKR 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 value 1 2538  
240 14 Dtool_VZN3WJYp 7 215 2535 1455 14 Dtool_VZN3WJYp 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
241 14 Dtool_VZN3bJmF 7 216 2535 1455 14 Dtool_VZN3bJmF 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
242 14 Dtool_VZN3bleK 7 217 2535 1455 14 Dtool_VZN3bleK 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
243 14 Dtool_VZN3HyX0 4 218 2540 0 14 Dtool_VZN3HyX0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2566  1 i 1 2544  5 value 1 2538  
244 14 Dtool_VZN31m2F 4 219 2540 0 14 Dtool_VZN31m2F 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 value 1 2538  
245 14 Dtool_VZN31CvK 4 220 2540 0 14 Dtool_VZN31CvK 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 value 1 2538  
246 14 Dtool_VZN31unP 4 221 2540 0 14 Dtool_VZN31unP 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 value 1 2538  
247 14 Dtool_VZN3jRCm 4 222 2540 0 14 Dtool_VZN3jRCm 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
248 14 Dtool_VZN3pFHZ 6 223 2544 0 14 Dtool_VZN3pFHZ 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
249 14 Dtool_VZN3q1Xn 4 224 2540 0 14 Dtool_VZN3q1Xn 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  10 fill_value 1 2538  
250 14 Dtool_VZN3Oavy 4 225 2540 0 14 Dtool_VZN3Oavy 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2566  1 x 1 2538  1 y 1 2538  1 z 1 2538  
251 14 Dtool_VZN3bb4d 6 226 2538 0 14 Dtool_VZN3bb4d 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
252 14 Dtool_VZN3lUs9 6 227 2538 0 14 Dtool_VZN3lUs9 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
253 14 Dtool_VZN3OsSz 6 228 2545 0 14 Dtool_VZN3OsSz 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2566  
254 14 Dtool_VZN3aDIV 6 229 2538 0 14 Dtool_VZN3aDIV 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
255 14 Dtool_VZN3aJ6l 7 230 2566 1634 14 Dtool_VZN3aJ6l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
256 14 Dtool_VZN3Qhma 7 231 2566 1634 14 Dtool_VZN3Qhma 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  4 onto 1 2567  
257 14 Dtool_VZN3dE8o 6 232 2545 0 14 Dtool_VZN3dE8o 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
258 14 Dtool_VZN3Ft4v 6 233 2545 0 14 Dtool_VZN3Ft4v 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
259 14 Dtool_VZN3BNge 6 234 2545 0 14 Dtool_VZN3BNge 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
260 14 Dtool_VZN3W_5p 7 235 2566 1634 14 Dtool_VZN3W_5p 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
261 14 Dtool_VZN353zo 6 236 2544 0 14 Dtool_VZN353zo 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
262 14 Dtool_VZN38GlN 6 236 2544 0 14 Dtool_VZN38GlN 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2567  5 other 1 2567  9 threshold 1 2538  
263 14 Dtool_VZN3OipS 6 237 2539 0 14 Dtool_VZN3OipS 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
264 14 Dtool_VZN3gnPZ 6 237 2539 0 14 Dtool_VZN3gnPZ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  9 threshold 1 2538  
265 14 Dtool_VZN3H3fh 6 238 2539 0 14 Dtool_VZN3H3fh 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  4 hash 1 2539  
266 14 Dtool_VZN3wERG 6 238 2539 0 14 Dtool_VZN3wERG 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2567  4 hash 1 2539  9 threshold 1 2538  
267 14 Dtool_VZN3iO_P 7 239 2566 1634 14 Dtool_VZN3iO_P 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
268 14 Dtool_VZN3fM9C 7 240 2566 1634 14 Dtool_VZN3fM9C 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
269 14 Dtool_VZN3f8eW 7 241 2566 1634 14 Dtool_VZN3f8eW 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
270 14 Dtool_VZN3Hdlj 7 242 2566 1634 14 Dtool_VZN3Hdlj 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  6 scalar 1 2538  
271 14 Dtool_VZN3Y1ZU 7 243 2566 1634 14 Dtool_VZN3Y1ZU 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  6 scalar 1 2538  
272 14 Dtool_VZN3GqXQ 6 244 2566 0 14 Dtool_VZN3GqXQ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 other 1 2567  
273 14 Dtool_VZN3Ga5j 6 245 2566 0 14 Dtool_VZN3Ga5j 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 other 1 2567  
274 14 Dtool_VZN3PZfq 6 246 2566 0 14 Dtool_VZN3PZfq 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  6 scalar 1 2538  
275 14 Dtool_VZN3OhTb 6 247 2566 0 14 Dtool_VZN3OhTb 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  6 scalar 1 2538  
276 14 Dtool_VZN3XVDn 7 248 2566 1634 14 Dtool_VZN3XVDn 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 other 1 2567  
277 14 Dtool_VZN31Bkl 7 249 2566 1634 14 Dtool_VZN31Bkl 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 other 1 2567  
278 14 Dtool_VZN3vCKa 4 250 2540 0 14 Dtool_VZN3vCKa 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 other 1 2567  
279 14 Dtool_VZN32ADH 6 251 2545 0 14 Dtool_VZN32ADH 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
280 14 Dtool_VZN3jJ12 6 251 2545 0 14 Dtool_VZN3jJ12 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2567  5 other 1 2567  9 threshold 1 2538  
281 14 Dtool_VZN38Oso 4 252 2540 0 14 Dtool_VZN38Oso 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  3 out 1 2546  
282 14 Dtool_VZN3RMH8 4 253 2540 0 14 Dtool_VZN3RMH8 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2567  3 out 1 2546  10 class_name 1 2543  
283 14 Dtool_VZN3dN_h 7 254 2549 0 14 Dtool_VZN3dN_h 0 0 
284 14 Dtool_VZN3jiry 7 256 2569 1699 14 Dtool_VZN3jiry 715 // Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
285 14 Dtool_VZN3uakN 7 256 2569 1699 14 Dtool_VZN3uakN 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2570  
286 14 Dtool_VZN3_fFc 7 256 2569 1699 14 Dtool_VZN3_fFc 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
287 14 Dtool_VZN3pccq 7 256 2569 1699 14 Dtool_VZN3pccq 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2553  1 y 1 2553  1 z 1 2553  
288 14 Dtool_VZN3yavJ 6 257 2569 0 14 Dtool_VZN3yavJ 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  4 copy 1 2570  
289 14 Dtool_VZN3_NPY 6 257 2569 0 14 Dtool_VZN3_NPY 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  10 fill_value 1 2553  
290 14 Dtool_VZN3D6XL 4 258 2540 0 14 Dtool_VZN3D6XL 0 2 4 this 3 2569  4 size 1 2539  
291 14 Dtool_VZN3trfB 6 261 2570 0 14 Dtool_VZN3trfB 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
292 14 Dtool_VZN3ExVl 6 262 2570 0 14 Dtool_VZN3ExVl 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
293 14 Dtool_VZN3HxjB 6 263 2570 0 14 Dtool_VZN3HxjB 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
294 14 Dtool_VZN3Bxxd 6 264 2570 0 14 Dtool_VZN3Bxxd 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
295 14 Dtool_VZN3jO0W 6 266 2541 0 14 Dtool_VZN3jO0W 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  4 self 1 2541  
296 14 Dtool_VZN3Meis 6 267 2541 0 14 Dtool_VZN3Meis 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  9 attr_name 1 2543  
297 14 Dtool_VZN38LZp 6 268 2544 0 14 Dtool_VZN38LZp 260 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2569  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
298 14 Dtool_VZN3KmHn 4 269 2540 0 14 Dtool_VZN3KmHn 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  1 i 1 2544  
299 14 Dtool_VZN3IH7D 6 269 2553 0 14 Dtool_VZN3IH7D 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  1 i 1 2544  
300 14 Dtool_VZN3Uicv 4 270 2540 0 14 Dtool_VZN3Uicv 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2569  1 i 1 2544  1 v 1 2553  
301 14 Dtool_VZN361Pr 6 271 2544 0 14 Dtool_VZN361Pr 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
302 14 Dtool_VZN37uGy 6 272 2545 0 14 Dtool_VZN37uGy 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
303 14 Dtool_VZN3gqfX 6 273 2553 0 14 Dtool_VZN3gqfX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  1 i 1 2544  
304 14 Dtool_VZN38t_C 6 274 2553 0 14 Dtool_VZN38t_C 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
305 14 Dtool_VZN38J4H 6 275 2553 0 14 Dtool_VZN38J4H 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
306 14 Dtool_VZN38lwM 6 276 2553 0 14 Dtool_VZN38lwM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
307 14 Dtool_VZN3j_Qe 4 277 2540 0 14 Dtool_VZN3j_Qe 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2569  1 i 1 2544  5 value 1 2553  
308 14 Dtool_VZN3fZV6 4 278 2540 0 14 Dtool_VZN3fZV6 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 value 1 2553  
309 14 Dtool_VZN3f9N_ 4 279 2540 0 14 Dtool_VZN3f9N_ 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 value 1 2553  
310 14 Dtool_VZN3eBGE 4 280 2540 0 14 Dtool_VZN3eBGE 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 value 1 2553  
311 14 Dtool_VZN3wlZ5 7 281 2550 1510 14 Dtool_VZN3wlZ5 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
312 14 Dtool_VZN31lnV 7 282 2550 1510 14 Dtool_VZN31lnV 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
313 14 Dtool_VZN31Jfa 7 283 2550 1510 14 Dtool_VZN31Jfa 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
314 14 Dtool_VZN3LMq8 4 284 2540 0 14 Dtool_VZN3LMq8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2569  1 i 1 2544  5 value 1 2553  
315 14 Dtool_VZN30Qy4 4 285 2540 0 14 Dtool_VZN30Qy4 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 value 1 2553  
316 14 Dtool_VZN300q9 4 286 2540 0 14 Dtool_VZN300q9 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 value 1 2553  
317 14 Dtool_VZN33YjC 4 287 2540 0 14 Dtool_VZN33YjC 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 value 1 2553  
318 14 Dtool_VZN3d9D2 4 288 2540 0 14 Dtool_VZN3d9D2 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
319 14 Dtool_VZN3LxGp 6 289 2544 0 14 Dtool_VZN3LxGp 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
320 14 Dtool_VZN3xac_ 4 290 2540 0 14 Dtool_VZN3xac_ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  10 fill_value 1 2553  
321 14 Dtool_VZN3L816 4 291 2540 0 14 Dtool_VZN3L816 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2569  1 x 1 2553  1 y 1 2553  1 z 1 2553  
322 14 Dtool_VZN35E4t 6 292 2553 0 14 Dtool_VZN35E4t 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
323 14 Dtool_VZN3GIsN 6 293 2553 0 14 Dtool_VZN3GIsN 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
324 14 Dtool_VZN3tBSD 6 294 2545 0 14 Dtool_VZN3tBSD 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2569  
325 14 Dtool_VZN34N6j 6 295 2553 0 14 Dtool_VZN34N6j 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
326 14 Dtool_VZN3vmLU 7 296 2569 1699 14 Dtool_VZN3vmLU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
327 14 Dtool_VZN3a8hq 7 297 2569 1699 14 Dtool_VZN3a8hq 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  4 onto 1 2570  
328 14 Dtool_VZN3f_c1 6 298 2545 0 14 Dtool_VZN3f_c1 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
329 14 Dtool_VZN35E4P 6 299 2545 0 14 Dtool_VZN35E4P 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
330 14 Dtool_VZN3Ckg_ 6 300 2545 0 14 Dtool_VZN3Ckg_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
331 14 Dtool_VZN3wK45 7 301 2569 1699 14 Dtool_VZN3wK45 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
332 14 Dtool_VZN3AqT1 6 302 2544 0 14 Dtool_VZN3AqT1 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
333 14 Dtool_VZN3DVKA 6 302 2544 0 14 Dtool_VZN3DVKA 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2570  5 other 1 2570  9 threshold 1 2553  
334 14 Dtool_VZN3Q_pi 6 303 2539 0 14 Dtool_VZN3Q_pi 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
335 14 Dtool_VZN3BwnB 6 303 2539 0 14 Dtool_VZN3BwnB 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  9 threshold 1 2553  
336 14 Dtool_VZN3lrfx 6 304 2539 0 14 Dtool_VZN3lrfx 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  4 hash 1 2539  
337 14 Dtool_VZN3jZW8 6 304 2539 0 14 Dtool_VZN3jZW8 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2570  4 hash 1 2539  9 threshold 1 2553  
338 14 Dtool_VZN3Ey_f 7 305 2569 1699 14 Dtool_VZN3Ey_f 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
339 14 Dtool_VZN3Z2dP 7 306 2569 1699 14 Dtool_VZN3Z2dP 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
340 14 Dtool_VZN3ZG_i 7 307 2569 1699 14 Dtool_VZN3ZG_i 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
341 14 Dtool_VZN36_m2 7 308 2569 1699 14 Dtool_VZN36_m2 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  6 scalar 1 2553  
342 14 Dtool_VZN37Wdn 7 309 2569 1699 14 Dtool_VZN37Wdn 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  6 scalar 1 2553  
343 14 Dtool_VZN3azWw 6 310 2569 0 14 Dtool_VZN3azWw 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 other 1 2570  
344 14 Dtool_VZN3bD4D 6 311 2569 0 14 Dtool_VZN3bD4D 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 other 1 2570  
345 14 Dtool_VZN3FCn2 6 312 2569 0 14 Dtool_VZN3FCn2 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  6 scalar 1 2553  
346 14 Dtool_VZN3K6bn 6 313 2569 0 14 Dtool_VZN3K6bn 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  6 scalar 1 2553  
347 14 Dtool_VZN3yw_P 7 314 2569 1699 14 Dtool_VZN3yw_P 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 other 1 2570  
348 14 Dtool_VZN3QkhO 7 315 2569 1699 14 Dtool_VZN3QkhO 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 other 1 2570  
349 14 Dtool_VZN3mWqm 4 316 2540 0 14 Dtool_VZN3mWqm 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 other 1 2570  
350 14 Dtool_VZN3gl6W 6 317 2545 0 14 Dtool_VZN3gl6W 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
351 14 Dtool_VZN36Cbn 6 317 2545 0 14 Dtool_VZN36Cbn 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2570  5 other 1 2570  9 threshold 1 2553  
352 14 Dtool_VZN3hBt4 4 318 2540 0 14 Dtool_VZN3hBt4 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  3 out 1 2546  
353 14 Dtool_VZN3rCGM 4 319 2540 0 14 Dtool_VZN3rCGM 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2570  3 out 1 2546  10 class_name 1 2543  
354 14 Dtool_VZN3yA_x 7 320 2549 0 14 Dtool_VZN3yA_x 0 0 
355 14 Dtool_VZN3hACr 7 324 2572 1789 14 Dtool_VZN3hACr 716 // Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
356 14 Dtool_VZN3Z8LN 7 324 2572 1789 14 Dtool_VZN3Z8LN 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2567  
357 14 Dtool_VZN36OMJ 7 324 2572 1789 14 Dtool_VZN36OMJ 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
358 14 Dtool_VZN3hp6I 7 324 2572 1789 14 Dtool_VZN3hp6I 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2538  1 y 1 2538  1 z 1 2538  
359 14 Dtool_VZN3qZGE 6 325 2572 0 14 Dtool_VZN3qZGE 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2572  4 copy 1 2567  
360 14 Dtool_VZN3R_QE 6 325 2572 0 14 Dtool_VZN3R_QE 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2572  10 fill_value 1 2538  
361 14 Dtool_VZN3vXBf 6 326 2541 0 14 Dtool_VZN3vXBf 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  9 attr_name 1 2543  
362 14 Dtool_VZN3rK3o 6 327 2544 0 14 Dtool_VZN3rK3o 259 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2572  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
363 14 Dtool_VZN3Mixn 6 328 2573 0 14 Dtool_VZN3Mixn 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
364 14 Dtool_VZN3yo58 6 329 2573 0 14 Dtool_VZN3yo58 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
365 14 Dtool_VZN3xExB 6 330 2573 0 14 Dtool_VZN3xExB 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
366 14 Dtool_VZN3xgqG 6 331 2573 0 14 Dtool_VZN3xgqG 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
367 14 Dtool_VZN38jfB 7 332 2554 1574 14 Dtool_VZN38jfB 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2573  
368 14 Dtool_VZN38PYG 7 333 2554 1574 14 Dtool_VZN38PYG 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2573  
369 14 Dtool_VZN3E_hG 7 334 2554 1574 14 Dtool_VZN3E_hG 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2573  
370 14 Dtool_VZN3WstI 7 335 2572 1789 14 Dtool_VZN3WstI 216 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2573  
371 14 Dtool_VZN3JrR4 7 336 2566 1634 14 Dtool_VZN3JrR4 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2567  
372 14 Dtool_VZN3ciQH 7 336 2572 1789 14 Dtool_VZN3ciQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2573  
373 14 Dtool_VZN3po44 7 337 2566 1634 14 Dtool_VZN3po44 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2567  
374 14 Dtool_VZN38f3H 7 337 2572 1789 14 Dtool_VZN38f3H 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2573  
375 14 Dtool_VZN3XSXn 7 338 2572 1789 14 Dtool_VZN3XSXn 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2567  
376 14 Dtool_VZN3zCBx 7 339 2572 1789 14 Dtool_VZN3zCBx 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  4 onto 1 2567  
377 14 Dtool_VZN3i1_1 6 340 2538 0 14 Dtool_VZN3i1_1 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2573  
378 14 Dtool_VZN3Se7m 6 341 2538 0 14 Dtool_VZN3Se7m 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2573  
379 14 Dtool_VZN3qxe0 6 342 2538 0 14 Dtool_VZN3qxe0 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2573  5 other 1 2573  3 ref 1 2573  
380 14 Dtool_VZN3DYOx 6 343 2538 0 14 Dtool_VZN3DYOx 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2573  5 other 1 2573  3 ref 1 2573  
381 14 Dtool_VZN3_dvn 6 344 2538 0 14 Dtool_VZN3_dvn 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2573  
382 14 Dtool_VZN3zM2t 6 345 2538 0 14 Dtool_VZN3zM2t 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2573  
383 14 Dtool_VZN3cvTb 7 346 2572 1789 14 Dtool_VZN3cvTb 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  6 scalar 1 2538  
384 14 Dtool_VZN3sH0c 7 347 2572 1789 14 Dtool_VZN3sH0c 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  6 scalar 1 2538  
385 14 Dtool_VZN3lOZo 7 348 2572 1789 14 Dtool_VZN3lOZo 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
386 14 Dtool_VZN3z_MF 7 348 2572 1789 14 Dtool_VZN3z_MF 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
387 14 Dtool_VZN33sup 7 349 2572 1789 14 Dtool_VZN33sup 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
388 14 Dtool_VZN3YM3h 7 349 2572 1789 14 Dtool_VZN3YM3h 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
389 14 Dtool_VZN3n621 7 350 2572 1789 14 Dtool_VZN3n621 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
390 14 Dtool_VZN3oQbv 7 350 2572 1789 14 Dtool_VZN3oQbv 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
391 14 Dtool_VZN35s4e 7 351 2572 1789 14 Dtool_VZN35s4e 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
392 14 Dtool_VZN3jBqg 7 351 2572 1789 14 Dtool_VZN3jBqg 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
393 14 Dtool_VZN3vT2J 7 352 2572 1789 14 Dtool_VZN3vT2J 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
394 14 Dtool_VZN31_pL 7 352 2572 1789 14 Dtool_VZN31_pL 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
395 14 Dtool_VZN3xPd_ 7 353 2572 1789 14 Dtool_VZN3xPd_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
396 14 Dtool_VZN3UzPA 7 353 2572 1789 14 Dtool_VZN3UzPA 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
397 14 Dtool_VZN3hSqR 7 354 2572 1789 14 Dtool_VZN3hSqR 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 4 5 right 1 2538  3 fwd 1 2538  2 up 1 2538  2 cs 1 2506  
398 14 Dtool_VZN3UW9c 7 354 2572 1789 14 Dtool_VZN3UW9c 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 3 5 right 1 2538  3 fwd 1 2538  2 up 1 2538  
399 14 Dtool_VZN3fg_v 4 355 2540 0 14 Dtool_VZN3fg_v 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2573  3 out 1 2546  10 class_name 1 2543  
400 14 Dtool_VZN3g4QZ 7 356 2549 0 14 Dtool_VZN3g4QZ 0 0 
401 14 Dtool_VZN3Dyhn 7 359 2575 1823 14 Dtool_VZN3Dyhn 716 // Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
402 14 Dtool_VZN3vfOH 7 359 2575 1823 14 Dtool_VZN3vfOH 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2570  
403 14 Dtool_VZN3vhGS 7 359 2575 1823 14 Dtool_VZN3vhGS 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
404 14 Dtool_VZN3_Wm1 7 359 2575 1823 14 Dtool_VZN3_Wm1 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2553  1 y 1 2553  1 z 1 2553  
405 14 Dtool_VZN3zYfy 6 360 2575 0 14 Dtool_VZN3zYfy 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2575  4 copy 1 2570  
406 14 Dtool_VZN3pe8O 6 360 2575 0 14 Dtool_VZN3pe8O 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2575  10 fill_value 1 2553  
407 14 Dtool_VZN3GUhb 6 361 2541 0 14 Dtool_VZN3GUhb 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  9 attr_name 1 2543  
408 14 Dtool_VZN3wLXl 6 362 2544 0 14 Dtool_VZN3wLXl 259 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2575  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
409 14 Dtool_VZN33lRk 6 363 2576 0 14 Dtool_VZN33lRk 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
410 14 Dtool_VZN3p3Z5 6 364 2576 0 14 Dtool_VZN3p3Z5 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
411 14 Dtool_VZN3pbR_ 6 365 2576 0 14 Dtool_VZN3pbR_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
412 14 Dtool_VZN3o_KD 6 366 2576 0 14 Dtool_VZN3o_KD 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
413 14 Dtool_VZN3Uj_9 7 367 2557 1592 14 Dtool_VZN3Uj_9 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2576  
414 14 Dtool_VZN3VP4C 7 368 2557 1592 14 Dtool_VZN3VP4C 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2576  
415 14 Dtool_VZN3t_BD 7 369 2557 1592 14 Dtool_VZN3t_BD 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2576  
416 14 Dtool_VZN3PtNF 7 370 2575 1823 14 Dtool_VZN3PtNF 216 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2576  
417 14 Dtool_VZN3hqqm 7 371 2569 1699 14 Dtool_VZN3hqqm 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2570  
418 14 Dtool_VZN3zxUB 7 371 2575 1823 14 Dtool_VZN3zxUB 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2576  
419 14 Dtool_VZN3BpRn 7 372 2569 1699 14 Dtool_VZN3BpRn 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2570  
420 14 Dtool_VZN3Ts7B 7 372 2575 1823 14 Dtool_VZN3Ts7B 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2576  
421 14 Dtool_VZN3Pzz8 7 373 2575 1823 14 Dtool_VZN3Pzz8 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2570  
422 14 Dtool_VZN3iGg1 7 374 2575 1823 14 Dtool_VZN3iGg1 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  4 onto 1 2570  
423 14 Dtool_VZN3_6Zy 6 375 2553 0 14 Dtool_VZN3_6Zy 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2576  
424 14 Dtool_VZN3lnWj 6 376 2553 0 14 Dtool_VZN3lnWj 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2576  
425 14 Dtool_VZN3I_w4 6 377 2553 0 14 Dtool_VZN3I_w4 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2576  5 other 1 2576  3 ref 1 2576  
426 14 Dtool_VZN3lWg1 6 378 2553 0 14 Dtool_VZN3lWg1 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2576  5 other 1 2576  3 ref 1 2576  
427 14 Dtool_VZN3l1PE 6 379 2553 0 14 Dtool_VZN3l1PE 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2576  
428 14 Dtool_VZN3ZkXK 6 380 2553 0 14 Dtool_VZN3ZkXK 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2576  
429 14 Dtool_VZN3_54j 7 381 2575 1823 14 Dtool_VZN3_54j 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  6 scalar 1 2553  
430 14 Dtool_VZN3uQal 7 382 2575 1823 14 Dtool_VZN3uQal 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  6 scalar 1 2553  
431 14 Dtool_VZN38N5k 7 383 2575 1823 14 Dtool_VZN38N5k 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
432 14 Dtool_VZN3I8sB 7 383 2575 1823 14 Dtool_VZN3I8sB 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
433 14 Dtool_VZN3QtOm 7 384 2575 1823 14 Dtool_VZN3QtOm 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
434 14 Dtool_VZN3xMXe 7 384 2575 1823 14 Dtool_VZN3xMXe 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
435 14 Dtool_VZN38FXy 7 385 2575 1823 14 Dtool_VZN38FXy 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
436 14 Dtool_VZN3PT7r 7 385 2575 1823 14 Dtool_VZN3PT7r 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
437 14 Dtool_VZN3gtYb 7 386 2575 1823 14 Dtool_VZN3gtYb 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
438 14 Dtool_VZN3KBKd 7 386 2575 1823 14 Dtool_VZN3KBKd 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
439 14 Dtool_VZN32UWG 7 387 2575 1823 14 Dtool_VZN32UWG 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
440 14 Dtool_VZN3cxJI 7 387 2575 1823 14 Dtool_VZN3cxJI 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
441 14 Dtool_VZN3WP96 7 388 2575 1823 14 Dtool_VZN3WP96 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
442 14 Dtool_VZN3Myv8 7 388 2575 1823 14 Dtool_VZN3Myv8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
443 14 Dtool_VZN3uPAa 7 389 2575 1823 14 Dtool_VZN3uPAa 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 4 5 right 1 2553  3 fwd 1 2553  2 up 1 2553  2 cs 1 2506  
444 14 Dtool_VZN3nVMh 7 389 2575 1823 14 Dtool_VZN3nVMh 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 3 5 right 1 2553  3 fwd 1 2553  2 up 1 2553  
445 14 Dtool_VZN32jes 4 390 2540 0 14 Dtool_VZN32jes 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2576  3 out 1 2546  10 class_name 1 2543  
446 14 Dtool_VZN3H5wV 7 391 2549 0 14 Dtool_VZN3H5wV 0 0 
447 14 Dtool_VZN3z3Qe 7 394 2578 1846 14 Dtool_VZN3z3Qe 711 // Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
448 14 Dtool_VZN3b_6E 7 394 2578 1846 14 Dtool_VZN3b_6E 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2567  
449 14 Dtool_VZN3CO2W 7 394 2578 1846 14 Dtool_VZN3CO2W 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
450 14 Dtool_VZN3Mxu6 7 394 2578 1846 14 Dtool_VZN3Mxu6 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2538  1 y 1 2538  1 z 1 2538  
451 14 Dtool_VZN3J6xP 6 395 2578 0 14 Dtool_VZN3J6xP 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2578  4 copy 1 2567  
452 14 Dtool_VZN3qkxL 6 395 2578 0 14 Dtool_VZN3qkxL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2578  10 fill_value 1 2538  
453 14 Dtool_VZN3PEjO 6 396 2541 0 14 Dtool_VZN3PEjO 260 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  9 attr_name 1 2543  
454 14 Dtool_VZN3bPzi 6 397 2544 0 14 Dtool_VZN3bPzi 258 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2578  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
455 14 Dtool_VZN3qu74 6 398 2579 0 14 Dtool_VZN3qu74 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
456 14 Dtool_VZN3CPkF 6 399 2579 0 14 Dtool_VZN3CPkF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
457 14 Dtool_VZN3aeuF 6 400 2579 0 14 Dtool_VZN3aeuF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
458 14 Dtool_VZN3Sp3F 6 401 2579 0 14 Dtool_VZN3Sp3F 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
459 14 Dtool_VZN3xis3 7 402 2560 1608 14 Dtool_VZN3xis3 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2579  
460 14 Dtool_VZN3pT23 7 403 2560 1608 14 Dtool_VZN3pT23 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2579  
461 14 Dtool_VZN3LH2n 7 404 2560 1608 14 Dtool_VZN3LH2n 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2579  
462 14 Dtool_VZN30M7V 7 405 2578 1846 14 Dtool_VZN30M7V 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2579  
463 14 Dtool_VZN3_4Xx 7 406 2566 1634 14 Dtool_VZN3_4Xx 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  5 other 1 2567  
464 14 Dtool_VZN3g12J 7 406 2578 1846 14 Dtool_VZN3g12J 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  5 other 1 2573  
465 14 Dtool_VZN3SFwU 7 407 2572 1789 14 Dtool_VZN3SFwU 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  5 other 1 2579  
466 14 Dtool_VZN3BLZx 7 407 2566 1634 14 Dtool_VZN3BLZx 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  5 other 1 2567  
467 14 Dtool_VZN3fn3J 7 407 2578 1846 14 Dtool_VZN3fn3J 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  5 other 1 2573  
468 14 Dtool_VZN33m20 7 408 2578 1846 14 Dtool_VZN33m20 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  5 other 1 2567  
469 14 Dtool_VZN3PmL9 7 409 2578 1846 14 Dtool_VZN3PmL9 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  4 onto 1 2567  
470 14 Dtool_VZN3UCf8 7 410 2578 1846 14 Dtool_VZN3UCf8 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  6 scalar 1 2538  
471 14 Dtool_VZN3rOic 7 411 2578 1846 14 Dtool_VZN3rOic 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  6 scalar 1 2538  
472 14 Dtool_VZN3VRyH 7 412 2578 1846 14 Dtool_VZN3VRyH 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
473 14 Dtool_VZN3M16_ 7 412 2578 1846 14 Dtool_VZN3M16_ 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
474 14 Dtool_VZN3kaIy 7 413 2578 1846 14 Dtool_VZN3kaIy 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 2538  3 fwd 1 2538  2 up 1 2538  2 cs 1 2506  
475 14 Dtool_VZN32tjk 7 413 2578 1846 14 Dtool_VZN32tjk 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 2538  3 fwd 1 2538  2 up 1 2538  
476 14 Dtool_VZN3FpCv 4 414 2540 0 14 Dtool_VZN3FpCv 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2579  3 out 1 2546  10 class_name 1 2543  
477 14 Dtool_VZN3nkbU 7 415 2549 0 14 Dtool_VZN3nkbU 0 0 
478 14 Dtool_VZN3t3tX 7 418 2581 1869 14 Dtool_VZN3t3tX 711 // Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
479 14 Dtool_VZN3SkXG 7 418 2581 1869 14 Dtool_VZN3SkXG 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2570  
480 14 Dtool_VZN33ZYu 7 418 2581 1869 14 Dtool_VZN33ZYu 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
481 14 Dtool_VZN3k1qU 7 418 2581 1869 14 Dtool_VZN3k1qU 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2553  1 y 1 2553  1 z 1 2553  
482 14 Dtool_VZN3LoO_ 6 419 2581 0 14 Dtool_VZN3LoO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2581  4 copy 1 2570  
483 14 Dtool_VZN3MIGK 6 419 2581 0 14 Dtool_VZN3MIGK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2581  10 fill_value 1 2553  
484 14 Dtool_VZN3OEcA 6 420 2541 0 14 Dtool_VZN3OEcA 260 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  9 attr_name 1 2543  
485 14 Dtool_VZN3aPsU 6 421 2544 0 14 Dtool_VZN3aPsU 258 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2581  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
486 14 Dtool_VZN3ru0q 6 422 2582 0 14 Dtool_VZN3ru0q 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
487 14 Dtool_VZN3APd3 6 423 2582 0 14 Dtool_VZN3APd3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
488 14 Dtool_VZN3Yen3 6 424 2582 0 14 Dtool_VZN3Yen3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
489 14 Dtool_VZN3Qpw3 6 425 2582 0 14 Dtool_VZN3Qpw3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
490 14 Dtool_VZN3Oilp 7 426 2563 1624 14 Dtool_VZN3Oilp 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2582  
491 14 Dtool_VZN3WTvp 7 427 2563 1624 14 Dtool_VZN3WTvp 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2582  
492 14 Dtool_VZN3IHvZ 7 428 2563 1624 14 Dtool_VZN3IHvZ 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2582  
493 14 Dtool_VZN31M0H 7 429 2581 1869 14 Dtool_VZN31M0H 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2582  
494 14 Dtool_VZN39u0g 7 430 2569 1699 14 Dtool_VZN39u0g 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  5 other 1 2570  
495 14 Dtool_VZN36tq7 7 430 2581 1869 14 Dtool_VZN36tq7 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  5 other 1 2576  
496 14 Dtool_VZN3HBoO 7 431 2575 1823 14 Dtool_VZN3HBoO 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  5 other 1 2582  
497 14 Dtool_VZN3C51g 7 431 2569 1699 14 Dtool_VZN3C51g 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  5 other 1 2570  
498 14 Dtool_VZN39fr7 7 431 2581 1869 14 Dtool_VZN39fr7 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  5 other 1 2576  
499 14 Dtool_VZN3wvhl 7 432 2581 1869 14 Dtool_VZN3wvhl 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  5 other 1 2570  
500 14 Dtool_VZN3jmUN 7 433 2581 1869 14 Dtool_VZN3jmUN 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  4 onto 1 2570  
501 14 Dtool_VZN3rZwG 7 434 2581 1869 14 Dtool_VZN3rZwG 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  6 scalar 1 2553  
502 14 Dtool_VZN36cym 7 435 2581 1869 14 Dtool_VZN36cym 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  6 scalar 1 2553  
503 14 Dtool_VZN3XRr5 7 436 2581 1869 14 Dtool_VZN3XRr5 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2506  
504 14 Dtool_VZN3N1zx 7 436 2581 1869 14 Dtool_VZN3N1zx 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
505 14 Dtool_VZN3x8Y0 7 437 2581 1869 14 Dtool_VZN3x8Y0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 2553  3 fwd 1 2553  2 up 1 2553  2 cs 1 2506  
506 14 Dtool_VZN3s_qG 7 437 2581 1869 14 Dtool_VZN3s_qG 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 2553  3 fwd 1 2553  2 up 1 2553  
507 14 Dtool_VZN3Ep7g 4 438 2540 0 14 Dtool_VZN3Ep7g 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2582  3 out 1 2546  10 class_name 1 2543  
508 14 Dtool_VZN3mkUG 7 439 2549 0 14 Dtool_VZN3mkUG 0 0 
509 14 Dtool_VZN35kRY 7 442 2584 1880 14 Dtool_VZN35kRY 715 // Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
510 14 Dtool_VZN3dTtd 7 442 2584 1880 14 Dtool_VZN3dTtd 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2585  
511 14 Dtool_VZN3ity7 7 442 2584 1880 14 Dtool_VZN3ity7 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
512 14 Dtool_VZN3DRvG 7 442 2584 1880 14 Dtool_VZN3DRvG 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2538  1 y 1 2538  1 z 1 2538  1 w 1 2538  
513 14 Dtool_VZN3XuCG 6 443 2584 0 14 Dtool_VZN3XuCG 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  4 copy 1 2585  
514 14 Dtool_VZN3GYHk 6 443 2584 0 14 Dtool_VZN3GYHk 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  10 fill_value 1 2538  
515 14 Dtool_VZN3YOHd 4 444 2540 0 14 Dtool_VZN3YOHd 0 2 4 this 3 2584  4 size 1 2539  
516 14 Dtool_VZN3mHPT 6 447 2585 0 14 Dtool_VZN3mHPT 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
517 14 Dtool_VZN3xCF3 6 448 2585 0 14 Dtool_VZN3xCF3 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
518 14 Dtool_VZN3MdTT 6 449 2585 0 14 Dtool_VZN3MdTT 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
519 14 Dtool_VZN3Odhv 6 450 2585 0 14 Dtool_VZN3Odhv 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
520 14 Dtool_VZN33C3a 6 451 2585 0 14 Dtool_VZN33C3a 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
521 14 Dtool_VZN32iko 6 453 2541 0 14 Dtool_VZN32iko 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  4 self 1 2541  
522 14 Dtool_VZN3_QT_ 6 454 2541 0 14 Dtool_VZN3_QT_ 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  9 attr_name 1 2543  
523 14 Dtool_VZN3uRI7 6 455 2544 0 14 Dtool_VZN3uRI7 260 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2584  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
524 14 Dtool_VZN3By34 4 456 2540 0 14 Dtool_VZN3By34 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  1 i 1 2544  
525 14 Dtool_VZN3TrrV 6 456 2538 0 14 Dtool_VZN3TrrV 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  1 i 1 2544  
526 14 Dtool_VZN3WM5I 4 457 2540 0 14 Dtool_VZN3WM5I 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2584  1 i 1 2544  1 v 1 2538  
527 14 Dtool_VZN33Z_8 6 458 2544 0 14 Dtool_VZN33Z_8 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
528 14 Dtool_VZN3x62D 6 459 2545 0 14 Dtool_VZN3x62D 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
529 14 Dtool_VZN3d_Pp 6 460 2538 0 14 Dtool_VZN3d_Pp 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  1 i 1 2544  
530 14 Dtool_VZN3JYvU 6 461 2538 0 14 Dtool_VZN3JYvU 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
531 14 Dtool_VZN3J8oZ 6 462 2538 0 14 Dtool_VZN3J8oZ 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
532 14 Dtool_VZN3JQge 6 463 2538 0 14 Dtool_VZN3JQge 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
533 14 Dtool_VZN3JE3P 6 464 2538 0 14 Dtool_VZN3JE3P 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
534 14 Dtool_VZN3AQHX 4 465 2540 0 14 Dtool_VZN3AQHX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2584  1 i 1 2544  5 value 1 2538  
535 14 Dtool_VZN3JuJp 4 466 2540 0 14 Dtool_VZN3JuJp 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 value 1 2538  
536 14 Dtool_VZN3JKCu 4 467 2540 0 14 Dtool_VZN3JKCu 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 value 1 2538  
537 14 Dtool_VZN3JW6y 4 468 2540 0 14 Dtool_VZN3JW6y 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 value 1 2538  
538 14 Dtool_VZN3JCRk 4 469 2540 0 14 Dtool_VZN3JCRk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 value 1 2538  
539 14 Dtool_VZN3zyHW 4 470 2540 0 14 Dtool_VZN3zyHW 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2584  1 i 1 2544  5 value 1 2538  
540 14 Dtool_VZN3mmmn 4 471 2540 0 14 Dtool_VZN3mmmn 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 value 1 2538  
541 14 Dtool_VZN3mCfs 4 472 2540 0 14 Dtool_VZN3mCfs 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 value 1 2538  
542 14 Dtool_VZN3muXx 4 473 2540 0 14 Dtool_VZN3muXx 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 value 1 2538  
543 14 Dtool_VZN3maui 4 474 2540 0 14 Dtool_VZN3maui 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 value 1 2538  
544 14 Dtool_VZN3XRyH 4 475 2540 0 14 Dtool_VZN3XRyH 398 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
545 14 Dtool_VZN30F36 6 476 2544 0 14 Dtool_VZN30F36 277 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
546 14 Dtool_VZN3W1HJ 4 477 2540 0 14 Dtool_VZN3W1HJ 361 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  10 fill_value 1 2538  
547 14 Dtool_VZN3__rX 4 478 2540 0 14 Dtool_VZN3__rX 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2584  1 x 1 2538  1 y 1 2538  1 z 1 2538  1 w 1 2538  
548 14 Dtool_VZN30Yo_ 6 479 2538 0 14 Dtool_VZN30Yo_ 292 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
549 14 Dtool_VZN3xUcf 6 480 2538 0 14 Dtool_VZN3xUcf 297 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
550 14 Dtool_VZN3SsCV 6 481 2545 0 14 Dtool_VZN3SsCV 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2584  
551 14 Dtool_VZN32052 6 482 2538 0 14 Dtool_VZN32052 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  5 other 1 2585  
552 14 Dtool_VZN3MsWY 7 483 2584 1880 14 Dtool_VZN3MsWY 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  4 onto 1 2585  
553 14 Dtool_VZN3xlvx 6 484 2545 0 14 Dtool_VZN3xlvx 495 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  5 other 1 2585  
554 14 Dtool_VZN3auYz 6 485 2545 0 14 Dtool_VZN3auYz 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  5 other 1 2585  
555 14 Dtool_VZN3mNAi 6 486 2545 0 14 Dtool_VZN3mNAi 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  5 other 1 2585  
556 14 Dtool_VZN3tXnx 6 487 2544 0 14 Dtool_VZN3tXnx 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  5 other 1 2585  
557 14 Dtool_VZN3IZYW 6 487 2544 0 14 Dtool_VZN3IZYW 501 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2585  5 other 1 2585  9 threshold 1 2538  
558 14 Dtool_VZN3diZ0 6 488 2539 0 14 Dtool_VZN3diZ0 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
559 14 Dtool_VZN3zn_6 6 488 2539 0 14 Dtool_VZN3zn_6 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  9 threshold 1 2538  
560 14 Dtool_VZN3r3PD 6 489 2539 0 14 Dtool_VZN3r3PD 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  4 hash 1 2539  
561 14 Dtool_VZN3NEBo 6 489 2539 0 14 Dtool_VZN3NEBo 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2585  4 hash 1 2539  9 threshold 1 2538  
562 14 Dtool_VZN3POux 7 490 2584 1880 14 Dtool_VZN3POux 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2585  
563 14 Dtool_VZN3ztwL 7 491 2584 1880 14 Dtool_VZN3ztwL 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  5 other 1 2585  
564 14 Dtool_VZN3zdSf 7 492 2584 1880 14 Dtool_VZN3zdSf 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  5 other 1 2585  
565 14 Dtool_VZN3reVF 7 493 2584 1880 14 Dtool_VZN3reVF 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  6 scalar 1 2538  
566 14 Dtool_VZN3r2J2 7 494 2584 1880 14 Dtool_VZN3r2J2 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  6 scalar 1 2538  
567 14 Dtool_VZN3tr3T 6 495 2584 0 14 Dtool_VZN3tr3T 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 other 1 2585  
568 14 Dtool_VZN3tbZn 6 496 2584 0 14 Dtool_VZN3tbZn 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 other 1 2585  
569 14 Dtool_VZN37ZPM 6 497 2584 0 14 Dtool_VZN37ZPM 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  6 scalar 1 2538  
570 14 Dtool_VZN37hD9 6 498 2584 0 14 Dtool_VZN37hD9 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  6 scalar 1 2538  
571 14 Dtool_VZN3jRaJ 7 499 2584 1880 14 Dtool_VZN3jRaJ 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 other 1 2585  
572 14 Dtool_VZN3BC7H 7 500 2584 1880 14 Dtool_VZN3BC7H 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2584  5 other 1 2585  
573 14 Dtool_VZN3yKzg 6 501 2545 0 14 Dtool_VZN3yKzg 339 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  5 other 1 2585  
574 14 Dtool_VZN3__lQ 6 501 2545 0 14 Dtool_VZN3__lQ 315 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2585  5 other 1 2585  9 threshold 1 2538  
575 14 Dtool_VZN3QPcK 4 502 2540 0 14 Dtool_VZN3QPcK 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2585  3 out 1 2546  
576 14 Dtool_VZN3FM3d 4 503 2540 0 14 Dtool_VZN3FM3d 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2585  3 out 1 2546  10 class_name 1 2543  
577 14 Dtool_VZN3hKuD 7 504 2549 0 14 Dtool_VZN3hKuD 0 0 
578 14 Dtool_VZN3fAuU 7 506 2587 1943 14 Dtool_VZN3fAuU 715 // Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
579 14 Dtool_VZN3KfrW 7 506 2587 1943 14 Dtool_VZN3KfrW 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2588  
580 14 Dtool_VZN35BJ_ 7 506 2587 1943 14 Dtool_VZN35BJ_ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
581 14 Dtool_VZN3GENf 7 506 2587 1943 14 Dtool_VZN3GENf 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2553  1 y 1 2553  1 z 1 2553  1 w 1 2553  
582 14 Dtool_VZN3e6iS 6 507 2587 0 14 Dtool_VZN3e6iS 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  4 copy 1 2588  
583 14 Dtool_VZN3IM_5 6 507 2587 0 14 Dtool_VZN3IM_5 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  10 fill_value 1 2553  
584 14 Dtool_VZN326Ht 4 508 2540 0 14 Dtool_VZN326Ht 0 2 4 this 3 2587  4 size 1 2539  
585 14 Dtool_VZN3YrPj 6 511 2588 0 14 Dtool_VZN3YrPj 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
586 14 Dtool_VZN3QxFH 6 512 2588 0 14 Dtool_VZN3QxFH 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
587 14 Dtool_VZN3SxTj 6 513 2588 0 14 Dtool_VZN3SxTj 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
588 14 Dtool_VZN3sxh_ 6 514 2588 0 14 Dtool_VZN3sxh_ 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
589 14 Dtool_VZN3Vx3q 6 515 2588 0 14 Dtool_VZN3Vx3q 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
590 14 Dtool_VZN3Qxk4 6 517 2541 0 14 Dtool_VZN3Qxk4 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  4 self 1 2541  
591 14 Dtool_VZN3QeSO 6 518 2541 0 14 Dtool_VZN3QeSO 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  9 attr_name 1 2543  
592 14 Dtool_VZN3QMJL 6 519 2544 0 14 Dtool_VZN3QMJL 260 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2587  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
593 14 Dtool_VZN3mm3I 4 520 2540 0 14 Dtool_VZN3mm3I 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  1 i 1 2544  
594 14 Dtool_VZN31Hrl 6 520 2553 0 14 Dtool_VZN31Hrl 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  1 i 1 2544  
595 14 Dtool_VZN3glMR 4 521 2540 0 14 Dtool_VZN3glMR 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2587  1 i 1 2544  1 v 1 2553  
596 14 Dtool_VZN3WK_M 6 522 2544 0 14 Dtool_VZN3WK_M 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
597 14 Dtool_VZN3Pu2T 6 523 2545 0 14 Dtool_VZN3Pu2T 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
598 14 Dtool_VZN3_qP5 6 524 2553 0 14 Dtool_VZN3_qP5 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  1 i 1 2544  
599 14 Dtool_VZN3rtvk 6 525 2553 0 14 Dtool_VZN3rtvk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
600 14 Dtool_VZN3rJop 6 526 2553 0 14 Dtool_VZN3rJop 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
601 14 Dtool_VZN3rlgu 6 527 2553 0 14 Dtool_VZN3rlgu 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
602 14 Dtool_VZN3rx3f 6 528 2553 0 14 Dtool_VZN3rx3f 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
603 14 Dtool_VZN3f_AA 4 529 2540 0 14 Dtool_VZN3f_AA 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2587  1 i 1 2544  5 value 1 2553  
604 14 Dtool_VZN3jGFc 4 530 2540 0 14 Dtool_VZN3jGFc 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 value 1 2553  
605 14 Dtool_VZN3ji9g 4 531 2540 0 14 Dtool_VZN3ji9g 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 value 1 2553  
606 14 Dtool_VZN3je2l 4 532 2540 0 14 Dtool_VZN3je2l 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 value 1 2553  
607 14 Dtool_VZN3jqMX 4 533 2540 0 14 Dtool_VZN3jqMX 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 value 1 2553  
608 14 Dtool_VZN3fMae 4 534 2540 0 14 Dtool_VZN3fMae 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2587  1 i 1 2544  5 value 1 2553  
609 14 Dtool_VZN3ARia 4 535 2540 0 14 Dtool_VZN3ARia 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 value 1 2553  
610 14 Dtool_VZN3A1af 4 536 2540 0 14 Dtool_VZN3A1af 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 value 1 2553  
611 14 Dtool_VZN3AZTk 4 537 2540 0 14 Dtool_VZN3AZTk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 value 1 2553  
612 14 Dtool_VZN3ANqV 4 538 2540 0 14 Dtool_VZN3ANqV 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 value 1 2553  
613 14 Dtool_VZN3x8zX 4 539 2540 0 14 Dtool_VZN3x8zX 398 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
614 14 Dtool_VZN3Xx2K 6 540 2544 0 14 Dtool_VZN3Xx2K 277 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
615 14 Dtool_VZN3FbMg 4 541 2540 0 14 Dtool_VZN3FbMg 361 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  10 fill_value 1 2553  
616 14 Dtool_VZN3dT7O 4 542 2540 0 14 Dtool_VZN3dT7O 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2587  1 x 1 2553  1 y 1 2553  1 z 1 2553  1 w 1 2553  
617 14 Dtool_VZN3VEoP 6 543 2553 0 14 Dtool_VZN3VEoP 292 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
618 14 Dtool_VZN3TIcv 6 544 2553 0 14 Dtool_VZN3TIcv 297 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
619 14 Dtool_VZN3wBCl 6 545 2545 0 14 Dtool_VZN3wBCl 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2587  
620 14 Dtool_VZN3VfrF 6 546 2553 0 14 Dtool_VZN3VfrF 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  5 other 1 2588  
621 14 Dtool_VZN3O3Ro 7 547 2587 1943 14 Dtool_VZN3O3Ro 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  4 onto 1 2588  
622 14 Dtool_VZN3zfP_ 6 548 2545 0 14 Dtool_VZN3zfP_ 495 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  5 other 1 2588  
623 14 Dtool_VZN3eFYT 6 549 2545 0 14 Dtool_VZN3eFYT 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  5 other 1 2588  
624 14 Dtool_VZN3alAC 6 550 2545 0 14 Dtool_VZN3alAC 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  5 other 1 2588  
625 14 Dtool_VZN30LH_ 6 551 2544 0 14 Dtool_VZN30LH_ 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  5 other 1 2588  
626 14 Dtool_VZN3319I 6 551 2544 0 14 Dtool_VZN3319I 501 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2588  5 other 1 2588  9 threshold 1 2553  
627 14 Dtool_VZN38_ZE 6 552 2539 0 14 Dtool_VZN38_ZE 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
628 14 Dtool_VZN3SwXj 6 552 2539 0 14 Dtool_VZN3SwXj 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  9 threshold 1 2553  
629 14 Dtool_VZN3JoPT 6 553 2539 0 14 Dtool_VZN3JoPT 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  4 hash 1 2539  
630 14 Dtool_VZN3XZGe 6 553 2539 0 14 Dtool_VZN3XZGe 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2588  4 hash 1 2539  9 threshold 1 2553  
631 14 Dtool_VZN3QyvB 7 554 2587 1943 14 Dtool_VZN3QyvB 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2588  
632 14 Dtool_VZN3tXQY 7 555 2587 1943 14 Dtool_VZN3tXQY 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  5 other 1 2588  
633 14 Dtool_VZN3tnyr 7 556 2587 1943 14 Dtool_VZN3tnyr 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  5 other 1 2588  
634 14 Dtool_VZN3W_WY 7 557 2587 1943 14 Dtool_VZN3W_WY 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  6 scalar 1 2553  
635 14 Dtool_VZN3XWNJ 7 558 2587 1943 14 Dtool_VZN3XWNJ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  6 scalar 1 2553  
636 14 Dtool_VZN3hw2z 6 559 2587 0 14 Dtool_VZN3hw2z 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 other 1 2588  
637 14 Dtool_VZN3iAYH 6 560 2587 0 14 Dtool_VZN3iAYH 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 other 1 2588  
638 14 Dtool_VZN35DXY 6 561 2587 0 14 Dtool_VZN35DXY 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  6 scalar 1 2553  
639 14 Dtool_VZN3_7LJ 6 562 2587 0 14 Dtool_VZN3_7LJ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  6 scalar 1 2553  
640 14 Dtool_VZN3_0Xy 7 563 2587 1943 14 Dtool_VZN3_0Xy 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 other 1 2588  
641 14 Dtool_VZN3dn2w 7 564 2587 1943 14 Dtool_VZN3dn2w 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2587  5 other 1 2588  
642 14 Dtool_VZN3coqw 6 565 2545 0 14 Dtool_VZN3coqw 339 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  5 other 1 2588  
643 14 Dtool_VZN39ILB 6 565 2545 0 14 Dtool_VZN39ILB 315 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2588  5 other 1 2588  9 threshold 1 2553  
644 14 Dtool_VZN31Bda 4 566 2540 0 14 Dtool_VZN31Bda 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2588  3 out 1 2546  
645 14 Dtool_VZN3eB2t 4 567 2540 0 14 Dtool_VZN3eB2t 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2588  3 out 1 2546  10 class_name 1 2543  
646 14 Dtool_VZN3GAvT 7 568 2549 0 14 Dtool_VZN3GAvT 0 0 
647 14 Dtool_VZN32hGZ 7 570 2590 2013 14 Dtool_VZN32hGZ 713 // Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
648 14 Dtool_VZN355R7 7 570 2590 2013 14 Dtool_VZN355R7 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2585  
649 14 Dtool_VZN3IgP3 7 570 2590 2013 14 Dtool_VZN3IgP3 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
650 14 Dtool_VZN3GLX9 7 570 2590 2013 14 Dtool_VZN3GLX9 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2538  1 y 1 2538  1 z 1 2538  1 w 1 2538  
651 14 Dtool_VZN3q2Ys 6 571 2590 0 14 Dtool_VZN3q2Ys 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2590  4 copy 1 2585  
652 14 Dtool_VZN3RfUr 6 571 2590 0 14 Dtool_VZN3RfUr 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2590  10 fill_value 1 2538  
653 14 Dtool_VZN3u3EG 6 572 2541 0 14 Dtool_VZN3u3EG 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2591  9 attr_name 1 2543  
654 14 Dtool_VZN3oq7P 6 573 2544 0 14 Dtool_VZN3oq7P 259 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2590  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
655 14 Dtool_VZN3PC0O 6 574 2591 0 14 Dtool_VZN3PC0O 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
656 14 Dtool_VZN3xI8j 6 575 2591 0 14 Dtool_VZN3xI8j 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
657 14 Dtool_VZN3xk1o 6 576 2591 0 14 Dtool_VZN3xk1o 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
658 14 Dtool_VZN3xAtt 6 577 2591 0 14 Dtool_VZN3xAtt 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
659 14 Dtool_VZN3xsEf 6 578 2591 0 14 Dtool_VZN3xsEf 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
660 14 Dtool_VZN3WMwv 7 579 2590 2013 14 Dtool_VZN3WMwv 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2591  
661 14 Dtool_VZN3WUig 7 580 2584 1880 14 Dtool_VZN3WUig 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2591  5 other 1 2585  
662 14 Dtool_VZN3OmWu 7 580 2590 2013 14 Dtool_VZN3OmWu 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2591  5 other 1 2591  
663 14 Dtool_VZN32RJh 7 581 2584 1880 14 Dtool_VZN32RJh 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2591  5 other 1 2585  
664 14 Dtool_VZN3uj9u 7 581 2590 2013 14 Dtool_VZN3uj9u 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2591  5 other 1 2591  
665 14 Dtool_VZN3TPWC 7 582 2590 2013 14 Dtool_VZN3TPWC 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2591  6 scalar 1 2538  
666 14 Dtool_VZN3jn4D 7 583 2590 2013 14 Dtool_VZN3jn4D 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2591  6 scalar 1 2538  
667 14 Dtool_VZN3Gh8I 7 584 2590 2013 14 Dtool_VZN3Gh8I 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2591  4 onto 1 2585  
668 14 Dtool_VZN3eACX 4 585 2540 0 14 Dtool_VZN3eACX 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2591  3 out 1 2546  10 class_name 1 2543  
669 14 Dtool_VZN3vYTA 7 586 2549 0 14 Dtool_VZN3vYTA 0 0 
670 14 Dtool_VZN3STkV 7 589 2593 2031 14 Dtool_VZN3STkV 713 // Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
671 14 Dtool_VZN3rcU1 7 589 2593 2031 14 Dtool_VZN3rcU1 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2588  
672 14 Dtool_VZN38AKA 7 589 2593 2031 14 Dtool_VZN38AKA 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
673 14 Dtool_VZN372XI 7 589 2593 2031 14 Dtool_VZN372XI 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2553  1 y 1 2553  1 z 1 2553  1 w 1 2553  
674 14 Dtool_VZN3y3xa 6 590 2593 0 14 Dtool_VZN3y3xa 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2593  4 copy 1 2588  
675 14 Dtool_VZN3p_A2 6 590 2593 0 14 Dtool_VZN3p_A2 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2593  10 fill_value 1 2553  
676 14 Dtool_VZN3J0kC 6 591 2541 0 14 Dtool_VZN3J0kC 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  9 attr_name 1 2543  
677 14 Dtool_VZN3xrbM 6 592 2544 0 14 Dtool_VZN3xrbM 259 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2593  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
678 14 Dtool_VZN32FUL 6 593 2594 0 14 Dtool_VZN32FUL 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
679 14 Dtool_VZN3oXcg 6 594 2594 0 14 Dtool_VZN3oXcg 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
680 14 Dtool_VZN3o7Vl 6 595 2594 0 14 Dtool_VZN3o7Vl 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
681 14 Dtool_VZN3ofNq 6 596 2594 0 14 Dtool_VZN3ofNq 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
682 14 Dtool_VZN3ozkb 6 597 2594 0 14 Dtool_VZN3ozkb 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
683 14 Dtool_VZN3PNQs 7 598 2593 2031 14 Dtool_VZN3PNQs 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2594  
684 14 Dtool_VZN3uV7O 7 599 2587 1943 14 Dtool_VZN3uV7O 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  5 other 1 2588  
685 14 Dtool_VZN3h1ao 7 599 2593 2031 14 Dtool_VZN3h1ao 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  5 other 1 2594  
686 14 Dtool_VZN3OQiP 7 600 2587 1943 14 Dtool_VZN3OQiP 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  5 other 1 2588  
687 14 Dtool_VZN3BwBp 7 600 2593 2031 14 Dtool_VZN3BwBp 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  5 other 1 2594  
688 14 Dtool_VZN39Z8K 7 601 2593 2031 14 Dtool_VZN39Z8K 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  6 scalar 1 2553  
689 14 Dtool_VZN3twdM 7 602 2593 2031 14 Dtool_VZN3twdM 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  6 scalar 1 2553  
690 14 Dtool_VZN31mdN 7 603 2593 2031 14 Dtool_VZN31mdN 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2594  4 onto 1 2588  
691 14 Dtool_VZN3xDiT 4 604 2540 0 14 Dtool_VZN3xDiT 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2594  3 out 1 2546  10 class_name 1 2543  
692 14 Dtool_VZN3HZz8 7 605 2549 0 14 Dtool_VZN3HZz8 0 0 
693 14 Dtool_VZN3zUXk 7 608 2596 2049 14 Dtool_VZN3zUXk 711 // Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
694 14 Dtool_VZN3SD57 7 608 2596 2049 14 Dtool_VZN3SD57 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2585  
695 14 Dtool_VZN3Cj8c 7 608 2596 2049 14 Dtool_VZN3Cj8c 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2538  
696 14 Dtool_VZN3zr8M 7 608 2596 2049 14 Dtool_VZN3zr8M 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2538  1 y 1 2538  1 z 1 2538  1 w 1 2538  
697 14 Dtool_VZN3bZBR 6 609 2596 0 14 Dtool_VZN3bZBR 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2596  4 copy 1 2585  
698 14 Dtool_VZN3qdAN 6 609 2596 0 14 Dtool_VZN3qdAN 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2596  10 fill_value 1 2538  
699 14 Dtool_VZN3PNxP 6 610 2541 0 14 Dtool_VZN3PNxP 260 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  9 attr_name 1 2543  
700 14 Dtool_VZN3bWBk 6 611 2544 0 14 Dtool_VZN3bWBk 258 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2596  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
701 14 Dtool_VZN3q1J6 6 612 2597 0 14 Dtool_VZN3q1J6 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
702 14 Dtool_VZN3C0yG 6 613 2597 0 14 Dtool_VZN3C0yG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
703 14 Dtool_VZN3aH8G 6 614 2597 0 14 Dtool_VZN3aH8G 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
704 14 Dtool_VZN3SWGH 6 615 2597 0 14 Dtool_VZN3SWGH 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
705 14 Dtool_VZN3KloG 6 616 2597 0 14 Dtool_VZN3KloG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
706 14 Dtool_VZN30LJX 7 617 2596 2049 14 Dtool_VZN30LJX 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2597  
707 14 Dtool_VZN3Icoy 7 618 2584 1880 14 Dtool_VZN3Icoy 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  5 other 1 2585  
708 14 Dtool_VZN3opEn 7 618 2596 2049 14 Dtool_VZN3opEn 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  5 other 1 2591  
709 14 Dtool_VZN3MM2G 7 619 2590 2013 14 Dtool_VZN3MM2G 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  5 other 1 2597  
710 14 Dtool_VZN3Tupy 7 619 2584 1880 14 Dtool_VZN3Tupy 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  5 other 1 2585  
711 14 Dtool_VZN3XbFn 7 619 2596 2049 14 Dtool_VZN3XbFn 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  5 other 1 2591  
712 14 Dtool_VZN3Udt9 7 620 2596 2049 14 Dtool_VZN3Udt9 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  6 scalar 1 2538  
713 14 Dtool_VZN3rXwd 7 621 2596 2049 14 Dtool_VZN3rXwd 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  6 scalar 1 2538  
714 14 Dtool_VZN3It7R 7 622 2596 2049 14 Dtool_VZN3It7R 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2597  4 onto 1 2585  
715 14 Dtool_VZN3FwQw 4 623 2540 0 14 Dtool_VZN3FwQw 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2597  3 out 1 2546  10 class_name 1 2543  
716 14 Dtool_VZN3nbpV 7 624 2549 0 14 Dtool_VZN3nbpV 0 0 
717 14 Dtool_VZN3tU0d 7 627 2599 2067 14 Dtool_VZN3tU0d 711 // Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
718 14 Dtool_VZN3JZW9 7 627 2599 2067 14 Dtool_VZN3JZW9 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2588  
719 14 Dtool_VZN336e0 7 627 2599 2067 14 Dtool_VZN336e0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2553  
720 14 Dtool_VZN3CpeG 7 627 2599 2067 14 Dtool_VZN3CpeG 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2553  1 y 1 2553  1 z 1 2553  1 w 1 2553  
721 14 Dtool_VZN3YHeA 6 628 2599 0 14 Dtool_VZN3YHeA 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2599  4 copy 1 2588  
722 14 Dtool_VZN3MxVL 6 628 2599 0 14 Dtool_VZN3MxVL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2599  10 fill_value 1 2553  
723 14 Dtool_VZN3ONqB 6 629 2541 0 14 Dtool_VZN3ONqB 260 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__getattr__
//       Access: Published
//  Description: This is used to implement swizzle masks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  9 attr_name 1 2543  
724 14 Dtool_VZN3aW6V 6 630 2544 0 14 Dtool_VZN3aW6V 258 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::__setattr__
//       Access: Published
//  Description: This is used to implement write masks.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2599  4 self 1 2541  9 attr_name 1 2543  6 assign 1 2541  
725 14 Dtool_VZN3r1Cs 6 631 2600 0 14 Dtool_VZN3r1Cs 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
726 14 Dtool_VZN3A0r4 6 632 2600 0 14 Dtool_VZN3A0r4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
727 14 Dtool_VZN3YH14 6 633 2600 0 14 Dtool_VZN3YH14 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
728 14 Dtool_VZN3QW_4 6 634 2600 0 14 Dtool_VZN3QW_4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
729 14 Dtool_VZN3Ilh4 6 635 2600 0 14 Dtool_VZN3Ilh4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
730 14 Dtool_VZN31LCJ 7 636 2599 2067 14 Dtool_VZN31LCJ 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2600  
731 14 Dtool_VZN3LSFi 7 637 2587 1943 14 Dtool_VZN3LSFi 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  5 other 1 2588  
732 14 Dtool_VZN3zh4Y 7 637 2599 2067 14 Dtool_VZN3zh4Y 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  5 other 1 2594  
733 14 Dtool_VZN3xIuA 7 638 2593 2031 14 Dtool_VZN3xIuA 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  5 other 1 2600  
734 14 Dtool_VZN3QcGi 7 638 2587 1943 14 Dtool_VZN3QcGi 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  5 other 1 2588  
735 14 Dtool_VZN30T5Y 7 638 2599 2067 14 Dtool_VZN30T5Y 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  5 other 1 2594  
736 14 Dtool_VZN3re_H 7 639 2599 2067 14 Dtool_VZN3re_H 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  6 scalar 1 2553  
737 14 Dtool_VZN36DAo 7 640 2599 2067 14 Dtool_VZN36DAo 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  6 scalar 1 2553  
738 14 Dtool_VZN3jtEi 7 641 2599 2067 14 Dtool_VZN3jtEi 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2600  4 onto 1 2588  
739 14 Dtool_VZN3EwJi 4 642 2540 0 14 Dtool_VZN3EwJi 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2600  3 out 1 2546  10 class_name 1 2543  
740 14 Dtool_VZN3mbiH 7 643 2549 0 14 Dtool_VZN3mbiH 0 0 
741 14 Dtool_VZN3l0PU 7 655 2602 2139 14 Dtool_VZN3l0PU 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
742 14 Dtool_VZN3sN2u 7 655 2602 2139 14 Dtool_VZN3sN2u 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2603  
743 14 Dtool_VZN3Qz8c 7 655 2602 2139 14 Dtool_VZN3Qz8c 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 2538  3 e01 1 2538  3 e02 1 2538  3 e10 1 2538  3 e11 1 2538  3 e12 1 2538  3 e20 1 2538  3 e21 1 2538  3 e22 1 2538  
744 14 Dtool_VZN3WGVN 6 656 2602 0 14 Dtool_VZN3WGVN 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 other 1 2603  
745 14 Dtool_VZN3OZp_ 6 656 2602 0 14 Dtool_VZN3OZp_ 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  10 fill_value 1 2538  
746 14 Dtool_VZN3xIaw 4 657 2540 0 14 Dtool_VZN3xIaw 0 2 4 this 3 2602  4 size 1 2539  
747 14 Dtool_VZN374w_ 6 660 2541 0 14 Dtool_VZN374w_ 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  4 self 1 2541  
748 14 Dtool_VZN3gH0z 4 661 2540 0 14 Dtool_VZN3gH0z 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  10 fill_value 1 2538  
749 14 Dtool_VZN3z3qU 4 662 2540 0 14 Dtool_VZN3z3qU 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 2602  3 e00 1 2538  3 e01 1 2538  3 e02 1 2538  3 e10 1 2538  3 e11 1 2538  3 e12 1 2538  3 e20 1 2538  3 e21 1 2538  3 e22 1 2538  
750 14 Dtool_VZN3N5w9 4 663 2540 0 14 Dtool_VZN3N5w9 326 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  3 row 1 2544  1 v 1 2536  
751 14 Dtool_VZN355gf 4 663 2540 0 14 Dtool_VZN355gf 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  3 row 1 2544  1 v 1 2567  
752 14 Dtool_VZN3vDEF 4 664 2540 0 14 Dtool_VZN3vDEF 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  3 col 1 2544  1 v 1 2536  
753 14 Dtool_VZN3ac0m 4 664 2540 0 14 Dtool_VZN3ac0m 308 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  3 col 1 2544  1 v 1 2567  
754 14 Dtool_VZN3dfDX 4 665 2540 0 14 Dtool_VZN3dfDX 31 // these versions inline better 3 4 this 3 2603  10 result_vec 1 2566  3 row 1 2544  
755 14 Dtool_VZN3wROZ 7 665 2566 1634 14 Dtool_VZN3wROZ 299 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  3 row 1 2544  
756 14 Dtool_VZN3Fuhg 7 666 2566 1634 14 Dtool_VZN3Fuhg 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  3 col 1 2544  
757 14 Dtool_VZN37qSI 7 667 2535 1455 14 Dtool_VZN37qSI 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  3 row 1 2544  
758 14 Dtool_VZN3WJmP 7 668 2535 1455 14 Dtool_VZN3WJmP 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  3 col 1 2544  
759 14 Dtool_VZN3HBvR 4 669 2540 0 14 Dtool_VZN3HBvR 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  3 row 1 2544  3 col 1 2544  
760 14 Dtool_VZN3_Fgz 6 669 2538 0 14 Dtool_VZN3_Fgz 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2603  3 row 1 2544  3 col 1 2544  
761 14 Dtool_VZN3n3T3 7 670 2605 2071 14 Dtool_VZN3n3T3 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  1 i 1 2544  
762 14 Dtool_VZN3cUMI 7 670 2606 2074 14 Dtool_VZN3cUMI 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  1 i 1 2544  
763 14 Dtool_VZN3kTdF 6 671 2544 0 14 Dtool_VZN3kTdF 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
764 14 Dtool_VZN3R3pT 6 672 2545 0 14 Dtool_VZN3R3pT 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2603  
765 14 Dtool_VZN3H4Zy 6 673 2538 0 14 Dtool_VZN3H4Zy 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2603  3 row 1 2544  3 col 1 2544  
766 14 Dtool_VZN3l0_H 4 674 2540 0 14 Dtool_VZN3l0_H 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2602  3 row 1 2544  3 col 1 2544  5 value 1 2538  
767 14 Dtool_VZN3WvxR 4 675 2540 0 14 Dtool_VZN3WvxR 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2603  
768 14 Dtool_VZN3bMUR 6 676 2544 0 14 Dtool_VZN3bMUR 276 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2603  
769 14 Dtool_VZN3vhzu 6 677 2545 0 14 Dtool_VZN3vhzu 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  5 other 1 2603  
770 14 Dtool_VZN3JQr_ 6 678 2545 0 14 Dtool_VZN3JQr_ 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  5 other 1 2603  
771 14 Dtool_VZN3JhJ3 6 679 2545 0 14 Dtool_VZN3JhJ3 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  5 other 1 2603  
772 14 Dtool_VZN3KM0m 6 680 2544 0 14 Dtool_VZN3KM0m 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  5 other 1 2603  
773 14 Dtool_VZN3xCZj 6 680 2544 0 14 Dtool_VZN3xCZj 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2603  5 other 1 2603  9 threshold 1 2538  
774 14 Dtool_VZN3W4In 6 681 2539 0 14 Dtool_VZN3W4In 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2603  
775 14 Dtool_VZN3G8W5 6 681 2539 0 14 Dtool_VZN3G8W5 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  9 threshold 1 2538  
776 14 Dtool_VZN3pcnj 6 682 2539 0 14 Dtool_VZN3pcnj 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  4 hash 1 2539  
777 14 Dtool_VZN3Gmv2 6 682 2539 0 14 Dtool_VZN3Gmv2 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2603  4 hash 1 2539  9 threshold 1 2538  
778 14 Dtool_VZN3Hzw6 7 683 2566 1634 14 Dtool_VZN3Hzw6 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  1 v 1 2567  
779 14 Dtool_VZN3E0BQ 7 684 2535 1455 14 Dtool_VZN3E0BQ 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  1 v 1 2536  
780 14 Dtool_VZN3I3MJ 7 685 2535 1455 14 Dtool_VZN3I3MJ 397 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  1 v 1 2536  
781 14 Dtool_VZN3abOJ 7 685 2566 1634 14 Dtool_VZN3abOJ 444 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  1 v 1 2567  
782 14 Dtool_VZN3J0pj 7 686 2566 1634 14 Dtool_VZN3J0pj 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  1 v 1 2567  
783 14 Dtool_VZN3SR6_ 4 687 2540 0 14 Dtool_VZN3SR6_ 25 // this = other1 * other2 3 4 this 3 2602  6 other1 1 2603  6 other2 1 2603  
784 14 Dtool_VZN3PBTp 7 688 2602 2139 14 Dtool_VZN3PBTp 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  5 other 1 2603  
785 14 Dtool_VZN3cFqV 7 688 2602 2139 14 Dtool_VZN3cFqV 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  6 scalar 1 2538  
786 14 Dtool_VZN3MqMX 7 689 2602 2139 14 Dtool_VZN3MqMX 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  6 scalar 1 2538  
787 14 Dtool_VZN3E0iA 6 690 2602 0 14 Dtool_VZN3E0iA 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 other 1 2603  
788 14 Dtool_VZN3kIJB 6 691 2602 0 14 Dtool_VZN3kIJB 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 other 1 2603  
789 14 Dtool_VZN30XOA 6 692 2602 0 14 Dtool_VZN30XOA 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 other 1 2603  
790 14 Dtool_VZN3MH5p 6 692 2602 0 14 Dtool_VZN3MH5p 251 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  6 scalar 1 2538  
791 14 Dtool_VZN3c8ar 6 693 2602 0 14 Dtool_VZN3c8ar 251 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  6 scalar 1 2538  
792 14 Dtool_VZN33zlL 6 694 2538 0 14 Dtool_VZN33zlL 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2603  
793 14 Dtool_VZN3lS3s 4 695 2540 0 14 Dtool_VZN3lS3s 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 other 1 2603  
794 14 Dtool_VZN38Ojo 4 696 2540 0 14 Dtool_VZN38Ojo 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2602  
795 14 Dtool_VZN3UKZ2 6 697 2545 0 14 Dtool_VZN3UKZ2 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 other 1 2603  
796 14 Dtool_VZN3huLY 6 698 2545 0 14 Dtool_VZN3huLY 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2602  
797 14 Dtool_VZN3KfCp 6 699 2545 0 14 Dtool_VZN3KfCp 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 other 1 2603  
798 14 Dtool_VZN3KD6t 6 699 2545 0 14 Dtool_VZN3KD6t 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 other 1 2607  
799 14 Dtool_VZN3q8vo 6 700 2603 0 14 Dtool_VZN3q8vo 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
800 14 Dtool_VZN3oByR 4 701 2540 0 14 Dtool_VZN3oByR 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 trans 1 2536  
801 14 Dtool_VZN3d4J2 4 702 2540 0 14 Dtool_VZN3d4J2 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 angle 1 2538  
802 14 Dtool_VZN3PymL 4 702 2540 0 14 Dtool_VZN3PymL 365 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2602  5 angle 1 2538  4 axis 1 2566  2 cs 1 2506  
803 14 Dtool_VZN3diBV 4 702 2540 0 14 Dtool_VZN3diBV 365 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  5 angle 1 2538  4 axis 1 2566  
804 14 Dtool_VZN3SAXQ 4 703 2540 0 14 Dtool_VZN3SAXQ 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 scale 1 2536  
805 14 Dtool_VZN3B2WI 4 703 2540 0 14 Dtool_VZN3B2WI 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 scale 1 2567  
806 14 Dtool_VZN39Yv7 7 704 2602 2139 14 Dtool_VZN39Yv7 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2536  
807 14 Dtool_VZN31aHR 7 704 2602 2139 14 Dtool_VZN31aHR 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 2538  2 ty 1 2538  
808 14 Dtool_VZN3wS2A 7 705 2602 2139 14 Dtool_VZN3wS2A 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 2538  
809 14 Dtool_VZN3zgNZ 7 705 2602 2139 14 Dtool_VZN3zgNZ 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2538  4 axis 1 2566  2 cs 1 2506  
810 14 Dtool_VZN3y0rv 7 705 2602 2139 14 Dtool_VZN3y0rv 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2538  4 axis 1 2566  
811 14 Dtool_VZN3fF2k 7 706 2602 2139 14 Dtool_VZN3fF2k 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2536  
812 14 Dtool_VZN3Np4k 7 706 2602 2139 14 Dtool_VZN3Np4k 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2567  
813 14 Dtool_VZN3KKk6 7 706 2602 2139 14 Dtool_VZN3KKk6 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 2538  2 sy 1 2538  
814 14 Dtool_VZN3x6ng 7 706 2602 2139 14 Dtool_VZN3x6ng 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2538  2 sy 1 2538  2 sz 1 2538  
815 14 Dtool_VZN3A7ca 4 707 2540 0 14 Dtool_VZN3A7ca 409 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2602  5 angle 1 2538  4 axis 1 2567  2 cs 1 2506  
816 14 Dtool_VZN3iLqT 4 707 2540 0 14 Dtool_VZN3iLqT 409 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  5 angle 1 2538  4 axis 1 2567  
817 14 Dtool_VZN3Sl9G 7 708 2602 2139 14 Dtool_VZN3Sl9G 405 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2538  4 axis 1 2567  2 cs 1 2506  
818 14 Dtool_VZN3if2Z 7 708 2602 2139 14 Dtool_VZN3if2Z 405 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2538  4 axis 1 2567  
819 14 Dtool_VZN3_oI_ 4 709 2540 0 14 Dtool_VZN3_oI_ 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  5 shear 1 2567  2 cs 1 2506  
820 14 Dtool_VZN35pyk 4 709 2540 0 14 Dtool_VZN35pyk 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2602  5 shear 1 2567  
821 14 Dtool_VZN34aMC 7 710 2602 2139 14 Dtool_VZN34aMC 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2567  2 cs 1 2506  
822 14 Dtool_VZN3KUWr 7 710 2602 2139 14 Dtool_VZN3KUWr 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2567  
823 14 Dtool_VZN3iw5Z 7 710 2602 2139 14 Dtool_VZN3iw5Z 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2538  4 shxz 1 2538  4 shyz 1 2538  2 cs 1 2506  
824 14 Dtool_VZN3wRFn 7 710 2602 2139 14 Dtool_VZN3wRFn 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2538  4 shxz 1 2538  4 shyz 1 2538  
825 14 Dtool_VZN3ZjM_ 4 711 2540 0 14 Dtool_VZN3ZjM_ 324 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2602  5 scale 1 2567  5 shear 1 2567  2 cs 1 2506  
826 14 Dtool_VZN3Fn4k 4 711 2540 0 14 Dtool_VZN3Fn4k 324 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2602  5 scale 1 2567  5 shear 1 2567  
827 14 Dtool_VZN3aF0T 7 712 2602 2139 14 Dtool_VZN3aF0T 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2567  5 shear 1 2567  2 cs 1 2506  
828 14 Dtool_VZN3_Jjt 7 712 2602 2139 14 Dtool_VZN3_Jjt 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2567  5 shear 1 2567  
829 14 Dtool_VZN3iFf9 7 712 2602 2139 14 Dtool_VZN3iFf9 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2538  2 sy 1 2538  2 sz 1 2538  4 shxy 1 2538  4 shxz 1 2538  4 shyz 1 2538  2 cs 1 2506  
830 14 Dtool_VZN3ie6G 7 712 2602 2139 14 Dtool_VZN3ie6G 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2538  2 sy 1 2538  2 sz 1 2538  4 shxy 1 2538  4 shxz 1 2538  4 shyz 1 2538  
831 14 Dtool_VZN3jv0p 6 713 2603 0 14 Dtool_VZN3jv0p 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2506  2 to 1 2506  
832 14 Dtool_VZN35LZV 6 714 2545 0 14 Dtool_VZN35LZV 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  5 other 1 2603  
833 14 Dtool_VZN3jSL6 6 714 2545 0 14 Dtool_VZN3jSL6 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2603  5 other 1 2603  9 threshold 1 2538  
834 14 Dtool_VZN3zE1n 4 715 2540 0 14 Dtool_VZN3zE1n 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  3 out 1 2546  
835 14 Dtool_VZN3xi6e 4 716 2540 0 14 Dtool_VZN3xi6e 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2603  3 out 1 2546  12 indent_level 1 2544  
836 14 Dtool_VZN3t5Vo 4 716 2540 0 14 Dtool_VZN3t5Vo 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2603  3 out 1 2546  
837 14 Dtool_VZN3f4Xq 4 717 2540 0 14 Dtool_VZN3f4Xq 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2603  3 out 1 2546  10 class_name 1 2543  
838 14 Dtool_VZN3IXnT 7 718 2549 0 14 Dtool_VZN3IXnT 0 0 
839 14 Dtool_VZN3sICl 4 647 2540 0 14 Dtool_VZN3sICl 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2605  1 i 1 2544  
840 14 Dtool_VZN3UN1G 6 647 2538 0 14 Dtool_VZN3UN1G 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2609  1 i 1 2544  
841 14 Dtool_VZN3g9AW 4 648 2540 0 14 Dtool_VZN3g9AW 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2605  1 i 1 2544  1 v 1 2538  
842 14 Dtool_VZN3OlSB 6 649 2544 0 14 Dtool_VZN3OlSB 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
843 14 Dtool_VZN3KWHJ 6 652 2538 0 14 Dtool_VZN3KWHJ 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2611  1 i 1 2544  
844 14 Dtool_VZN3S_uX 6 653 2544 0 14 Dtool_VZN3S_uX 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
845 14 Dtool_VZN30VSC 7 732 2613 2220 14 Dtool_VZN30VSC 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
846 14 Dtool_VZN3fs5c 7 732 2613 2220 14 Dtool_VZN3fs5c 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 2603  
847 14 Dtool_VZN36_z9 7 732 2613 2220 14 Dtool_VZN36_z9 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 2603  5 trans 1 2567  
848 14 Dtool_VZN3X354 7 732 2613 2220 14 Dtool_VZN3X354 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2607  
849 14 Dtool_VZN3kfiq 7 732 2613 2220 14 Dtool_VZN3kfiq 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2538  3 e01 1 2538  3 e02 1 2538  3 e03 1 2538  3 e10 1 2538  3 e11 1 2538  3 e12 1 2538  3 e13 1 2538  3 e20 1 2538  3 e21 1 2538  3 e22 1 2538  3 e23 1 2538  3 e30 1 2538  3 e31 1 2538  3 e32 1 2538  3 e33 1 2538  
850 14 Dtool_VZN3kLb0 6 733 2613 0 14 Dtool_VZN3kLb0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 other 1 2607  
851 14 Dtool_VZN3J5tl 6 733 2613 0 14 Dtool_VZN3J5tl 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  10 fill_value 1 2538  
852 14 Dtool_VZN32oeX 4 734 2540 0 14 Dtool_VZN32oeX 0 2 4 this 3 2613  4 size 1 2539  
853 14 Dtool_VZN34Yzl 6 737 2541 0 14 Dtool_VZN34Yzl 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  4 self 1 2541  
854 14 Dtool_VZN3hn3a 4 738 2540 0 14 Dtool_VZN3hn3a 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  10 fill_value 1 2538  
855 14 Dtool_VZN3b_Gk 4 739 2540 0 14 Dtool_VZN3b_Gk 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2613  3 e00 1 2538  3 e01 1 2538  3 e02 1 2538  3 e03 1 2538  3 e10 1 2538  3 e11 1 2538  3 e12 1 2538  3 e13 1 2538  3 e20 1 2538  3 e21 1 2538  3 e22 1 2538  3 e23 1 2538  3 e30 1 2538  3 e31 1 2538  3 e32 1 2538  3 e33 1 2538  
856 14 Dtool_VZN3QITa 4 740 2540 0 14 Dtool_VZN3QITa 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  6 upper3 1 2603  
857 14 Dtool_VZN31ZhQ 7 741 2602 2139 14 Dtool_VZN31ZhQ 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2607  
858 14 Dtool_VZN32ZkG 4 742 2540 0 14 Dtool_VZN32ZkG 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  3 row 1 2544  1 v 1 2567  
859 14 Dtool_VZN3lZUo 4 742 2540 0 14 Dtool_VZN3lZUo 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  3 row 1 2544  1 v 1 2585  
860 14 Dtool_VZN3b83N 4 743 2540 0 14 Dtool_VZN3b83N 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  3 col 1 2544  1 v 1 2567  
861 14 Dtool_VZN328nv 4 743 2540 0 14 Dtool_VZN328nv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  3 col 1 2544  1 v 1 2585  
862 14 Dtool_VZN3n__u 4 744 2540 0 14 Dtool_VZN3n__u 31 // these versions inline better 3 4 this 3 2607  10 result_vec 1 2584  3 row 1 2544  
863 14 Dtool_VZN3xxRA 7 744 2584 1880 14 Dtool_VZN3xxRA 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  3 row 1 2544  
864 14 Dtool_VZN3COlH 7 745 2584 1880 14 Dtool_VZN3COlH 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  3 col 1 2544  
865 14 Dtool_VZN3dF7x 4 746 2540 0 14 Dtool_VZN3dF7x 31 // these versions inline better 3 4 this 3 2607  10 result_vec 1 2566  3 row 1 2544  
866 14 Dtool_VZN3JMW2 7 746 2566 1634 14 Dtool_VZN3JMW2 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  3 row 1 2544  
867 14 Dtool_VZN3kop9 7 747 2566 1634 14 Dtool_VZN3kop9 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  3 col 1 2544  
868 14 Dtool_VZN3Hhy4 4 748 2540 0 14 Dtool_VZN3Hhy4 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  3 row 1 2544  3 col 1 2544  
869 14 Dtool_VZN3_lka 6 748 2538 0 14 Dtool_VZN3_lka 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2607  3 row 1 2544  3 col 1 2544  
870 14 Dtool_VZN3kXWe 7 749 2614 2145 14 Dtool_VZN3kXWe 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  1 i 1 2544  
871 14 Dtool_VZN3c0Pv 7 749 2615 2148 14 Dtool_VZN3c0Pv 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  1 i 1 2544  
872 14 Dtool_VZN3kzgs 6 750 2544 0 14 Dtool_VZN3kzgs 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
873 14 Dtool_VZN3RXs6 6 751 2545 0 14 Dtool_VZN3RXs6 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2607  
874 14 Dtool_VZN3GYcZ 6 752 2538 0 14 Dtool_VZN3GYcZ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2607  3 row 1 2544  3 col 1 2544  
875 14 Dtool_VZN3lUBv 4 753 2540 0 14 Dtool_VZN3lUBv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2613  3 row 1 2544  3 col 1 2544  5 value 1 2538  
876 14 Dtool_VZN3WP14 4 754 2540 0 14 Dtool_VZN3WP14 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2607  
877 14 Dtool_VZN3bsX4 6 755 2544 0 14 Dtool_VZN3bsX4 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2607  
878 14 Dtool_VZN3KK3S 4 756 2540 0 14 Dtool_VZN3KK3S 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2613  
879 14 Dtool_VZN3BQDa 4 756 2540 0 14 Dtool_VZN3BQDa 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2607  
880 14 Dtool_VZN3m_kL 4 757 2540 0 14 Dtool_VZN3m_kL 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2613  
881 14 Dtool_VZN3gxNr 4 757 2540 0 14 Dtool_VZN3gxNr 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2607  
882 14 Dtool_VZN38l5V 6 758 2545 0 14 Dtool_VZN38l5V 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  5 other 1 2607  
883 14 Dtool_VZN3I59n 6 759 2545 0 14 Dtool_VZN3I59n 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  5 other 1 2607  
884 14 Dtool_VZN3IOaf 6 760 2545 0 14 Dtool_VZN3IOaf 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  5 other 1 2607  
885 14 Dtool_VZN3zB6N 6 761 2544 0 14 Dtool_VZN3zB6N 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  5 other 1 2607  
886 14 Dtool_VZN3mOfK 6 761 2544 0 14 Dtool_VZN3mOfK 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2607  5 other 1 2607  9 threshold 1 2538  
887 14 Dtool_VZN3VYMO 6 762 2539 0 14 Dtool_VZN3VYMO 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2607  
888 14 Dtool_VZN3FcZg 6 762 2539 0 14 Dtool_VZN3FcZg 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  9 threshold 1 2538  
889 14 Dtool_VZN3o8oK 6 763 2539 0 14 Dtool_VZN3o8oK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  4 hash 1 2539  
890 14 Dtool_VZN3JGyd 6 763 2539 0 14 Dtool_VZN3JGyd 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2607  4 hash 1 2539  9 threshold 1 2538  
891 14 Dtool_VZN3mWbi 7 764 2584 1880 14 Dtool_VZN3mWbi 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  1 v 1 2585  
892 14 Dtool_VZN3F0Ie 7 765 2566 1634 14 Dtool_VZN3F0Ie 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  1 v 1 2567  
893 14 Dtool_VZN3a7Sw 7 766 2566 1634 14 Dtool_VZN3a7Sw 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  1 v 1 2567  
894 14 Dtool_VZN3IUtK 7 767 2566 1634 14 Dtool_VZN3IUtK 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  1 v 1 2567  
895 14 Dtool_VZN3cv3G 4 768 2540 0 14 Dtool_VZN3cv3G 25 // this = other1 * other2 3 4 this 3 2613  6 other1 1 2607  6 other2 1 2607  
896 14 Dtool_VZN3cFZQ 7 769 2613 2220 14 Dtool_VZN3cFZQ 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  5 other 1 2607  
897 14 Dtool_VZN3clu8 7 769 2613 2220 14 Dtool_VZN3clu8 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  6 scalar 1 2538  
898 14 Dtool_VZN3MKP_ 7 770 2613 2220 14 Dtool_VZN3MKP_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  6 scalar 1 2538  
899 14 Dtool_VZN3Ev0o 6 771 2613 0 14 Dtool_VZN3Ev0o 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 other 1 2607  
900 14 Dtool_VZN3kjbp 6 772 2613 0 14 Dtool_VZN3kjbp 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 other 1 2607  
901 14 Dtool_VZN30Ogo 6 773 2613 0 14 Dtool_VZN30Ogo 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 other 1 2607  
902 14 Dtool_VZN3Nn8Q 6 773 2613 0 14 Dtool_VZN3Nn8Q 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  6 scalar 1 2538  
903 14 Dtool_VZN3dceS 6 774 2613 0 14 Dtool_VZN3dceS 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  6 scalar 1 2538  
904 14 Dtool_VZN3rI6L 4 775 2540 0 14 Dtool_VZN3rI6L 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 other 1 2607  
905 14 Dtool_VZN39umP 4 776 2540 0 14 Dtool_VZN39umP 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2613  
906 14 Dtool_VZN3Vtqe 6 777 2545 0 14 Dtool_VZN3Vtqe 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 other 1 2607  
907 14 Dtool_VZN3KvHn 6 778 2545 0 14 Dtool_VZN3KvHn 929 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 2613  5 other 1 2607  
908 14 Dtool_VZN3hOP_ 6 779 2545 0 14 Dtool_VZN3hOP_ 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2613  
909 14 Dtool_VZN3rczP 6 780 2607 0 14 Dtool_VZN3rczP 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
910 14 Dtool_VZN3mxV_ 6 781 2607 0 14 Dtool_VZN3mxV_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
911 14 Dtool_VZN3LEvk 6 782 2607 0 14 Dtool_VZN3LEvk 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
912 14 Dtool_VZN3TiW8 4 783 2540 0 14 Dtool_VZN3TiW8 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 trans 1 2567  
913 14 Dtool_VZN3PSpy 4 784 2540 0 14 Dtool_VZN3PSpy 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2613  5 angle 1 2538  4 axis 1 2567  2 cs 1 2506  
914 14 Dtool_VZN3dCF8 4 784 2540 0 14 Dtool_VZN3dCF8 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  5 angle 1 2538  4 axis 1 2567  
915 14 Dtool_VZN3BbgB 4 785 2540 0 14 Dtool_VZN3BbgB 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2613  5 angle 1 2538  4 axis 1 2567  2 cs 1 2506  
916 14 Dtool_VZN3iru6 4 785 2540 0 14 Dtool_VZN3iru6 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  5 angle 1 2538  4 axis 1 2567  
917 14 Dtool_VZN3BWav 4 786 2540 0 14 Dtool_VZN3BWav 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 scale 1 2567  
918 14 Dtool_VZN3_IMl 4 787 2540 0 14 Dtool_VZN3_IMl 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  5 shear 1 2567  2 cs 1 2506  
919 14 Dtool_VZN36J2L 4 787 2540 0 14 Dtool_VZN36J2L 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2613  5 shear 1 2567  
920 14 Dtool_VZN3aDQm 4 788 2540 0 14 Dtool_VZN3aDQm 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2613  5 scale 1 2567  5 shear 1 2567  2 cs 1 2506  
921 14 Dtool_VZN3CH7L 4 788 2540 0 14 Dtool_VZN3CH7L 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2613  5 scale 1 2567  5 shear 1 2567  
922 14 Dtool_VZN3jyza 7 789 2613 2220 14 Dtool_VZN3jyza 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2567  
923 14 Dtool_VZN3Q9hS 7 789 2613 2220 14 Dtool_VZN3Q9hS 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 2538  2 ty 1 2538  2 tz 1 2538  
924 14 Dtool_VZN38AQA 7 790 2613 2220 14 Dtool_VZN38AQA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2538  4 axis 1 2567  2 cs 1 2506  
925 14 Dtool_VZN3zUuW 7 790 2613 2220 14 Dtool_VZN3zUuW 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2538  4 axis 1 2567  
926 14 Dtool_VZN3SFBu 7 791 2613 2220 14 Dtool_VZN3SFBu 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2538  4 axis 1 2567  2 cs 1 2506  
927 14 Dtool_VZN3l_5A 7 791 2613 2220 14 Dtool_VZN3l_5A 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2538  4 axis 1 2567  
928 14 Dtool_VZN3OJ8L 7 792 2613 2220 14 Dtool_VZN3OJ8L 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2567  
929 14 Dtool_VZN3gj9H 7 792 2613 2220 14 Dtool_VZN3gj9H 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2538  
930 14 Dtool_VZN3waqH 7 792 2613 2220 14 Dtool_VZN3waqH 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2538  2 sy 1 2538  2 sz 1 2538  
931 14 Dtool_VZN346Pp 7 793 2613 2220 14 Dtool_VZN346Pp 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2567  2 cs 1 2506  
932 14 Dtool_VZN3J0aS 7 793 2613 2220 14 Dtool_VZN3J0aS 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2567  
933 14 Dtool_VZN3lQ9A 7 793 2613 2220 14 Dtool_VZN3lQ9A 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2538  4 shxz 1 2538  4 shyz 1 2538  2 cs 1 2506  
934 14 Dtool_VZN3xxJO 7 793 2613 2220 14 Dtool_VZN3xxJO 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2538  4 shxz 1 2538  4 shyz 1 2538  
935 14 Dtool_VZN3al56 7 794 2613 2220 14 Dtool_VZN3al56 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2567  5 shear 1 2567  2 cs 1 2506  
936 14 Dtool_VZN3gpnU 7 794 2613 2220 14 Dtool_VZN3gpnU 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2567  5 shear 1 2567  
937 14 Dtool_VZN39lik 7 794 2613 2220 14 Dtool_VZN39lik 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2538  2 sy 1 2538  2 sz 1 2538  4 shxy 1 2538  4 shxz 1 2538  4 shyz 1 2538  2 cs 1 2506  
938 14 Dtool_VZN3i__t 7 794 2613 2220 14 Dtool_VZN3i__t 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2538  2 sy 1 2538  2 sz 1 2538  4 shxy 1 2538  4 shxz 1 2538  4 shyz 1 2538  
939 14 Dtool_VZN3lIST 6 795 2607 0 14 Dtool_VZN3lIST 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
940 14 Dtool_VZN3lG2Q 6 796 2607 0 14 Dtool_VZN3lG2Q 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
941 14 Dtool_VZN3gP4Q 6 797 2607 0 14 Dtool_VZN3gP4Q 362 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2506  2 to 1 2506  
942 14 Dtool_VZN34Lgj 6 798 2545 0 14 Dtool_VZN34Lgj 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  5 other 1 2607  
943 14 Dtool_VZN39SSI 6 798 2545 0 14 Dtool_VZN39SSI 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2607  5 other 1 2607  9 threshold 1 2538  
944 14 Dtool_VZN30k4O 4 799 2540 0 14 Dtool_VZN30k4O 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  3 out 1 2546  
945 14 Dtool_VZN3wC_F 4 800 2540 0 14 Dtool_VZN3wC_F 226 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2607  3 out 1 2546  12 indent_level 1 2544  
946 14 Dtool_VZN3sZZP 4 800 2540 0 14 Dtool_VZN3sZZP 226 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2607  3 out 1 2546  
947 14 Dtool_VZN3eYaR 4 801 2540 0 14 Dtool_VZN3eYaR 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2607  3 out 1 2546  10 class_name 1 2543  
948 14 Dtool_VZN3I3r6 7 802 2549 0 14 Dtool_VZN3I3r6 0 0 
949 14 Dtool_VZN3roGM 4 724 2540 0 14 Dtool_VZN3roGM 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2614  1 i 1 2544  
950 14 Dtool_VZN3Ut2t 6 724 2538 0 14 Dtool_VZN3Ut2t 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2616  1 i 1 2544  
951 14 Dtool_VZN3gdD9 4 725 2540 0 14 Dtool_VZN3gdD9 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2614  1 i 1 2544  1 v 1 2538  
952 14 Dtool_VZN3OFWo 6 726 2544 0 14 Dtool_VZN3OFWo 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
953 14 Dtool_VZN3K2Kw 6 729 2538 0 14 Dtool_VZN3K2Kw 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2618  1 i 1 2544  
954 14 Dtool_VZN3Sfy_ 6 730 2544 0 14 Dtool_VZN3Sfy_ 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
955 14 Dtool_VZN3HKtQ 7 814 2620 2292 14 Dtool_VZN3HKtQ 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
956 14 Dtool_VZN3gwPr 7 814 2620 2292 14 Dtool_VZN3gwPr 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2621  
957 14 Dtool_VZN31oPv 7 814 2620 2292 14 Dtool_VZN31oPv 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 2553  3 e01 1 2553  3 e02 1 2553  3 e10 1 2553  3 e11 1 2553  3 e12 1 2553  3 e20 1 2553  3 e21 1 2553  3 e22 1 2553  
958 14 Dtool_VZN39QZH 6 815 2620 0 14 Dtool_VZN39QZH 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 other 1 2621  
959 14 Dtool_VZN3ByUJ 6 815 2620 0 14 Dtool_VZN3ByUJ 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  10 fill_value 1 2553  
960 14 Dtool_VZN3eI6s 4 816 2540 0 14 Dtool_VZN3eI6s 0 2 4 this 3 2620  4 size 1 2539  
961 14 Dtool_VZN3Q4Q7 6 819 2541 0 14 Dtool_VZN3Q4Q7 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  4 self 1 2541  
962 14 Dtool_VZN3tMiW 4 820 2540 0 14 Dtool_VZN3tMiW 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  10 fill_value 1 2553  
963 14 Dtool_VZN3YSjO 4 821 2540 0 14 Dtool_VZN3YSjO 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 2620  3 e00 1 2553  3 e01 1 2553  3 e02 1 2553  3 e10 1 2553  3 e11 1 2553  3 e12 1 2553  3 e20 1 2553  3 e21 1 2553  3 e22 1 2553  
964 14 Dtool_VZN3MjRK 4 822 2540 0 14 Dtool_VZN3MjRK 326 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  3 row 1 2544  1 v 1 2551  
965 14 Dtool_VZN37jBs 4 822 2540 0 14 Dtool_VZN37jBs 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  3 row 1 2544  1 v 1 2570  
966 14 Dtool_VZN3hFlR 4 823 2540 0 14 Dtool_VZN3hFlR 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  3 col 1 2544  1 v 1 2551  
967 14 Dtool_VZN3cGVz 4 823 2540 0 14 Dtool_VZN3cGVz 308 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  3 col 1 2544  1 v 1 2570  
968 14 Dtool_VZN3FRjb 4 824 2540 0 14 Dtool_VZN3FRjb 31 // these versions inline better 3 4 this 3 2621  10 result_vec 1 2569  3 row 1 2544  
969 14 Dtool_VZN3pQuV 7 824 2569 1699 14 Dtool_VZN3pQuV 299 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  3 row 1 2544  
970 14 Dtool_VZN3qvBd 7 825 2569 1699 14 Dtool_VZN3qvBd 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  3 col 1 2544  
971 14 Dtool_VZN3CqyE 7 826 2550 1510 14 Dtool_VZN3CqyE 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  3 row 1 2544  
972 14 Dtool_VZN3xKGM 7 827 2550 1510 14 Dtool_VZN3xKGM 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  3 col 1 2544  
973 14 Dtool_VZN3YAPO 4 828 2540 0 14 Dtool_VZN3YAPO 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  3 row 1 2544  3 col 1 2544  
974 14 Dtool_VZN3nEAw 6 828 2553 0 14 Dtool_VZN3nEAw 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2621  3 row 1 2544  3 col 1 2544  
975 14 Dtool_VZN380zz 7 829 2623 2224 14 Dtool_VZN380zz 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  1 i 1 2544  
976 14 Dtool_VZN31LsE 7 829 2624 2227 14 Dtool_VZN31LsE 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  1 i 1 2544  
977 14 Dtool_VZN3DT9B 6 830 2544 0 14 Dtool_VZN3DT9B 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
978 14 Dtool_VZN3u3JQ 6 831 2545 0 14 Dtool_VZN3u3JQ 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2621  
979 14 Dtool_VZN3u75u 6 832 2553 0 14 Dtool_VZN3u75u 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2621  3 row 1 2544  3 col 1 2544  
980 14 Dtool_VZN3YWBO 4 833 2540 0 14 Dtool_VZN3YWBO 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2620  3 row 1 2544  3 col 1 2544  5 value 1 2553  
981 14 Dtool_VZN3tvRO 4 834 2540 0 14 Dtool_VZN3tvRO 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2621  
982 14 Dtool_VZN3wP0N 6 835 2544 0 14 Dtool_VZN3wP0N 276 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2621  
983 14 Dtool_VZN3Gv3o 6 836 2545 0 14 Dtool_VZN3Gv3o 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  5 other 1 2621  
984 14 Dtool_VZN3RREu 6 837 2545 0 14 Dtool_VZN3RREu 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  5 other 1 2621  
985 14 Dtool_VZN3Rgil 6 838 2545 0 14 Dtool_VZN3Rgil 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  5 other 1 2621  
986 14 Dtool_VZN3t_3g 6 839 2544 0 14 Dtool_VZN3t_3g 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  5 other 1 2621  
987 14 Dtool_VZN3Sbnp 6 839 2544 0 14 Dtool_VZN3Sbnp 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2621  5 other 1 2621  9 threshold 1 2553  
988 14 Dtool_VZN3t7oj 6 840 2539 0 14 Dtool_VZN3t7oj 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2621  
989 14 Dtool_VZN3ACnK 6 840 2539 0 14 Dtool_VZN3ACnK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  9 threshold 1 2553  
990 14 Dtool_VZN3QfHg 6 841 2539 0 14 Dtool_VZN3QfHg 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  4 hash 1 2539  
991 14 Dtool_VZN3e2a4 6 841 2539 0 14 Dtool_VZN3e2a4 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2621  4 hash 1 2539  9 threshold 1 2553  
992 14 Dtool_VZN3uQNQ 7 842 2569 1699 14 Dtool_VZN3uQNQ 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  1 v 1 2570  
993 14 Dtool_VZN3S1BJ 7 843 2550 1510 14 Dtool_VZN3S1BJ 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  1 v 1 2551  
994 14 Dtool_VZN3RGPD 7 844 2550 1510 14 Dtool_VZN3RGPD 397 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  1 v 1 2551  
995 14 Dtool_VZN3DiSD 7 844 2569 1699 14 Dtool_VZN3DiSD 444 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  1 v 1 2570  
996 14 Dtool_VZN3sKJA 7 845 2569 1699 14 Dtool_VZN3sKJA 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  1 v 1 2570  
997 14 Dtool_VZN3Z5GD 4 846 2540 0 14 Dtool_VZN3Z5GD 25 // this = other1 * other2 3 4 this 3 2620  6 other1 1 2621  6 other2 1 2621  
998 14 Dtool_VZN3mPXj 7 847 2620 2292 14 Dtool_VZN3mPXj 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  5 other 1 2621  
999 14 Dtool_VZN3_fQe 7 847 2620 2292 14 Dtool_VZN3_fQe 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  6 scalar 1 2553  
1000 14 Dtool_VZN3Ooxf 7 848 2620 2292 14 Dtool_VZN3Ooxf 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  6 scalar 1 2553  
1001 14 Dtool_VZN3_07u 6 849 2620 0 14 Dtool_VZN3_07u 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 other 1 2621  
1002 14 Dtool_VZN3fIiv 6 850 2620 0 14 Dtool_VZN3fIiv 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 other 1 2621  
1003 14 Dtool_VZN3PXnu 6 851 2620 0 14 Dtool_VZN3PXnu 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 other 1 2621  
1004 14 Dtool_VZN3X0Qs 6 851 2620 0 14 Dtool_VZN3X0Qs 251 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  6 scalar 1 2553  
1005 14 Dtool_VZN3ndyt 6 852 2620 0 14 Dtool_VZN3ndyt 251 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  6 scalar 1 2553  
1006 14 Dtool_VZN3syFI 6 853 2553 0 14 Dtool_VZN3syFI 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2621  
1007 14 Dtool_VZN3aONp 4 854 2540 0 14 Dtool_VZN3aONp 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 other 1 2621  
1008 14 Dtool_VZN3lPDl 4 855 2540 0 14 Dtool_VZN3lPDl 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2620  
1009 14 Dtool_VZN3MJyk 6 856 2545 0 14 Dtool_VZN3MJyk 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 other 1 2621  
1010 14 Dtool_VZN3IurU 6 857 2545 0 14 Dtool_VZN3IurU 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2620  
1011 14 Dtool_VZN3meGt 6 858 2545 0 14 Dtool_VZN3meGt 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 other 1 2621  
1012 14 Dtool_VZN3mC_x 6 858 2545 0 14 Dtool_VZN3mC_x 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 other 1 2625  
1013 14 Dtool_VZN3D_Pl 6 859 2621 0 14 Dtool_VZN3D_Pl 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1014 14 Dtool_VZN39pSu 4 860 2540 0 14 Dtool_VZN39pSu 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 trans 1 2551  
1015 14 Dtool_VZN39uiL 4 861 2540 0 14 Dtool_VZN39uiL 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 angle 1 2553  
1016 14 Dtool_VZN358U8 4 861 2540 0 14 Dtool_VZN358U8 365 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2620  5 angle 1 2553  4 axis 1 2569  2 cs 1 2506  
1017 14 Dtool_VZN3HjMp 4 861 2540 0 14 Dtool_VZN3HjMp 365 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  5 angle 1 2553  4 axis 1 2569  
1018 14 Dtool_VZN3hzuM 4 862 2540 0 14 Dtool_VZN3hzuM 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 scale 1 2551  
1019 14 Dtool_VZN3wFvE 4 862 2540 0 14 Dtool_VZN3wFvE 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 scale 1 2570  
1020 14 Dtool_VZN3cpG4 7 863 2620 2292 14 Dtool_VZN3cpG4 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2551  
1021 14 Dtool_VZN3Zis7 7 863 2620 2292 14 Dtool_VZN3Zis7 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 2553  2 ty 1 2553  
1022 14 Dtool_VZN3B6hL 7 864 2620 2292 14 Dtool_VZN3B6hL 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 2553  
1023 14 Dtool_VZN3aFgZ 7 864 2620 2292 14 Dtool_VZN3aFgZ 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2553  4 axis 1 2569  2 cs 1 2506  
1024 14 Dtool_VZN3z6sm 7 864 2620 2292 14 Dtool_VZN3z6sm 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2553  4 axis 1 2569  
1025 14 Dtool_VZN3kw5e 7 865 2620 2292 14 Dtool_VZN3kw5e 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2551  
1026 14 Dtool_VZN32c8e 7 865 2620 2292 14 Dtool_VZN32c8e 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2570  
1027 14 Dtool_VZN3KYtY 7 865 2620 2292 14 Dtool_VZN3KYtY 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 2553  2 sy 1 2553  
1028 14 Dtool_VZN3XTVN 7 865 2620 2292 14 Dtool_VZN3XTVN 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2553  2 sy 1 2553  2 sz 1 2553  
1029 14 Dtool_VZN3oZc9 4 866 2540 0 14 Dtool_VZN3oZc9 409 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2620  5 angle 1 2553  4 axis 1 2570  2 cs 1 2506  
1030 14 Dtool_VZN3r2Hj 4 866 2540 0 14 Dtool_VZN3r2Hj 409 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  5 angle 1 2553  4 axis 1 2570  
1031 14 Dtool_VZN3yh6r 7 867 2620 2292 14 Dtool_VZN3yh6r 405 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2553  4 axis 1 2570  2 cs 1 2506  
1032 14 Dtool_VZN3YlqF 7 867 2620 2292 14 Dtool_VZN3YlqF 405 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2553  4 axis 1 2570  
1033 14 Dtool_VZN3f5e6 4 868 2540 0 14 Dtool_VZN3f5e6 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  5 shear 1 2570  2 cs 1 2506  
1034 14 Dtool_VZN3a_Ih 4 868 2540 0 14 Dtool_VZN3a_Ih 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2620  5 shear 1 2570  
1035 14 Dtool_VZN3QoP8 7 869 2620 2292 14 Dtool_VZN3QoP8 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2570  2 cs 1 2506  
1036 14 Dtool_VZN3xJal 7 869 2620 2292 14 Dtool_VZN3xJal 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2570  
1037 14 Dtool_VZN31tYK 7 869 2620 2292 14 Dtool_VZN31tYK 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2553  4 shxz 1 2553  4 shyz 1 2553  2 cs 1 2506  
1038 14 Dtool_VZN3n6zT 7 869 2620 2292 14 Dtool_VZN3n6zT 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2553  4 shxz 1 2553  4 shyz 1 2553  
1039 14 Dtool_VZN3on65 4 870 2540 0 14 Dtool_VZN3on65 324 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2620  5 scale 1 2570  5 shear 1 2570  2 cs 1 2506  
1040 14 Dtool_VZN39Qnf 4 870 2540 0 14 Dtool_VZN39Qnf 324 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2620  5 scale 1 2570  5 shear 1 2570  
1041 14 Dtool_VZN3ipF0 7 871 2620 2292 14 Dtool_VZN3ipF0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2570  5 shear 1 2570  2 cs 1 2506  
1042 14 Dtool_VZN3EtzN 7 871 2620 2292 14 Dtool_VZN3EtzN 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2570  5 shear 1 2570  
1043 14 Dtool_VZN3erao 7 871 2620 2292 14 Dtool_VZN3erao 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2553  2 sy 1 2553  2 sz 1 2553  4 shxy 1 2553  4 shxz 1 2553  4 shyz 1 2553  2 cs 1 2506  
1044 14 Dtool_VZN3kqKC 7 871 2620 2292 14 Dtool_VZN3kqKC 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2553  2 sy 1 2553  2 sz 1 2553  4 shxy 1 2553  4 shxz 1 2553  4 shyz 1 2553  
1045 14 Dtool_VZN34uUm 6 872 2621 0 14 Dtool_VZN34uUm 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2506  2 to 1 2506  
1046 14 Dtool_VZN3rIZO 6 873 2545 0 14 Dtool_VZN3rIZO 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  5 other 1 2621  
1047 14 Dtool_VZN3pOQZ 6 873 2545 0 14 Dtool_VZN3pOQZ 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2621  5 other 1 2621  9 threshold 1 2553  
1048 14 Dtool_VZN3cEVk 4 874 2540 0 14 Dtool_VZN3cEVk 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  3 out 1 2546  
1049 14 Dtool_VZN3Ihab 4 875 2540 0 14 Dtool_VZN3Ihab 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2621  3 out 1 2546  12 indent_level 1 2544  
1050 14 Dtool_VZN3U41k 4 875 2540 0 14 Dtool_VZN3U41k 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2621  3 out 1 2546  
1051 14 Dtool_VZN3253m 4 876 2540 0 14 Dtool_VZN3253m 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2621  3 out 1 2546  10 class_name 1 2543  
1052 14 Dtool_VZN3nXHQ 7 877 2549 0 14 Dtool_VZN3nXHQ 0 0 
1053 14 Dtool_VZN3DIih 4 806 2540 0 14 Dtool_VZN3DIih 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2623  1 i 1 2544  
1054 14 Dtool_VZN37NVD 6 806 2553 0 14 Dtool_VZN37NVD 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2627  1 i 1 2544  
1055 14 Dtool_VZN3rNBq 4 807 2540 0 14 Dtool_VZN3rNBq 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2623  1 i 1 2544  1 v 1 2553  
1056 14 Dtool_VZN3mly9 6 808 2544 0 14 Dtool_VZN3mly9 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1057 14 Dtool_VZN3jWnF 6 811 2553 0 14 Dtool_VZN3jWnF 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2629  1 i 1 2544  
1058 14 Dtool_VZN398OU 6 812 2544 0 14 Dtool_VZN398OU 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1059 14 Dtool_VZN3Vrx_ 7 889 2631 2371 14 Dtool_VZN3Vrx_ 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1060 14 Dtool_VZN3RSTZ 7 889 2631 2371 14 Dtool_VZN3RSTZ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 2621  
1061 14 Dtool_VZN3y2xB 7 889 2631 2371 14 Dtool_VZN3y2xB 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 2621  5 trans 1 2570  
1062 14 Dtool_VZN3pOT1 7 889 2631 2371 14 Dtool_VZN3pOT1 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2625  
1063 14 Dtool_VZN3LfZS 7 889 2631 2371 14 Dtool_VZN3LfZS 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2553  3 e01 1 2553  3 e02 1 2553  3 e03 1 2553  3 e10 1 2553  3 e11 1 2553  3 e12 1 2553  3 e13 1 2553  3 e20 1 2553  3 e21 1 2553  3 e22 1 2553  3 e23 1 2553  3 e30 1 2553  3 e31 1 2553  3 e32 1 2553  3 e33 1 2553  
1064 14 Dtool_VZN3PVfu 6 890 2631 0 14 Dtool_VZN3PVfu 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 other 1 2625  
1065 14 Dtool_VZN3BSXw 6 890 2631 0 14 Dtool_VZN3BSXw 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  10 fill_value 1 2553  
1066 14 Dtool_VZN3fo_T 4 891 2540 0 14 Dtool_VZN3fo_T 0 2 4 this 3 2631  4 size 1 2539  
1067 14 Dtool_VZN3RYTi 6 894 2541 0 14 Dtool_VZN3RYTi 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  4 self 1 2541  
1068 14 Dtool_VZN3tsm9 4 895 2540 0 14 Dtool_VZN3tsm9 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  10 fill_value 1 2553  
1069 14 Dtool_VZN3E5Uz 4 896 2540 0 14 Dtool_VZN3E5Uz 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2631  3 e00 1 2553  3 e01 1 2553  3 e02 1 2553  3 e03 1 2553  3 e10 1 2553  3 e11 1 2553  3 e12 1 2553  3 e13 1 2553  3 e20 1 2553  3 e21 1 2553  3 e22 1 2553  3 e23 1 2553  3 e30 1 2553  3 e31 1 2553  3 e32 1 2553  3 e33 1 2553  
1070 14 Dtool_VZN34JsI 4 897 2540 0 14 Dtool_VZN34JsI 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  6 upper3 1 2621  
1071 14 Dtool_VZN3cZBN 7 898 2620 2292 14 Dtool_VZN3cZBN 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2625  
1072 14 Dtool_VZN34DFT 4 899 2540 0 14 Dtool_VZN34DFT 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  3 row 1 2544  1 v 1 2570  
1073 14 Dtool_VZN3nD10 4 899 2540 0 14 Dtool_VZN3nD10 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  3 row 1 2544  1 v 1 2588  
1074 14 Dtool_VZN3dmWa 4 900 2540 0 14 Dtool_VZN3dmWa 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  3 col 1 2544  1 v 1 2570  
1075 14 Dtool_VZN3ImG8 4 900 2540 0 14 Dtool_VZN3ImG8 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  3 col 1 2544  1 v 1 2588  
1076 14 Dtool_VZN3Pxez 4 901 2540 0 14 Dtool_VZN3Pxez 31 // these versions inline better 3 4 this 3 2625  10 result_vec 1 2587  3 row 1 2544  
1077 14 Dtool_VZN3pwx8 7 901 2587 1943 14 Dtool_VZN3pwx8 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  3 row 1 2544  
1078 14 Dtool_VZN3rPFE 7 902 2587 1943 14 Dtool_VZN3rPFE 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  3 col 1 2544  
1079 14 Dtool_VZN3eTWu 4 903 2540 0 14 Dtool_VZN3eTWu 31 // these versions inline better 3 4 this 3 2625  10 result_vec 1 2569  3 row 1 2544  
1080 14 Dtool_VZN3QL2y 7 903 2569 1699 14 Dtool_VZN3QL2y 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  3 row 1 2544  
1081 14 Dtool_VZN3_pJ6 7 904 2569 1699 14 Dtool_VZN3_pJ6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  3 col 1 2544  
1082 14 Dtool_VZN3YgS1 4 905 2540 0 14 Dtool_VZN3YgS1 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  3 row 1 2544  3 col 1 2544  
1083 14 Dtool_VZN3gkEX 6 905 2553 0 14 Dtool_VZN3gkEX 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2625  3 row 1 2544  3 col 1 2544  
1084 14 Dtool_VZN39U2a 7 906 2632 2296 14 Dtool_VZN39U2a 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  1 i 1 2544  
1085 14 Dtool_VZN31rvr 7 906 2633 2299 14 Dtool_VZN31rvr 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  1 i 1 2544  
1086 14 Dtool_VZN3DzAp 6 907 2544 0 14 Dtool_VZN3DzAp 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1087 14 Dtool_VZN3uXM3 6 908 2545 0 14 Dtool_VZN3uXM3 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2625  
1088 14 Dtool_VZN3tb8V 6 909 2553 0 14 Dtool_VZN3tb8V 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2625  3 row 1 2544  3 col 1 2544  
1089 14 Dtool_VZN3Y2F1 4 910 2540 0 14 Dtool_VZN3Y2F1 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2631  3 row 1 2544  3 col 1 2544  5 value 1 2553  
1090 14 Dtool_VZN3tPV1 4 911 2540 0 14 Dtool_VZN3tPV1 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2625  
1091 14 Dtool_VZN3wv30 6 912 2544 0 14 Dtool_VZN3wv30 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2625  
1092 14 Dtool_VZN3jKXP 4 913 2540 0 14 Dtool_VZN3jKXP 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2631  
1093 14 Dtool_VZN3mQjW 4 913 2540 0 14 Dtool_VZN3mQjW 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2625  
1094 14 Dtool_VZN3PBFI 4 914 2540 0 14 Dtool_VZN3PBFI 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2631  
1095 14 Dtool_VZN35wtn 4 914 2540 0 14 Dtool_VZN35wtn 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2625  
1096 14 Dtool_VZN3Xz9P 6 915 2545 0 14 Dtool_VZN3Xz9P 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  5 other 1 2625  
1097 14 Dtool_VZN3Q4WW 6 916 2545 0 14 Dtool_VZN3Q4WW 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  5 other 1 2625  
1098 14 Dtool_VZN3QPzN 6 917 2545 0 14 Dtool_VZN3QPzN 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  5 other 1 2625  
1099 14 Dtool_VZN3az9H 6 918 2544 0 14 Dtool_VZN3az9H 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  5 other 1 2625  
1100 14 Dtool_VZN3lGtQ 6 918 2544 0 14 Dtool_VZN3lGtQ 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2625  5 other 1 2625  9 threshold 1 2553  
1101 14 Dtool_VZN3sbsK 6 919 2539 0 14 Dtool_VZN3sbsK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2625  
1102 14 Dtool_VZN3Aiqx 6 919 2539 0 14 Dtool_VZN3Aiqx 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  9 threshold 1 2553  
1103 14 Dtool_VZN3T_IH 6 920 2539 0 14 Dtool_VZN3T_IH 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  4 hash 1 2539  
1104 14 Dtool_VZN3dWef 6 920 2539 0 14 Dtool_VZN3dWef 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2625  4 hash 1 2539  9 threshold 1 2553  
1105 14 Dtool_VZN3O133 7 921 2587 1943 14 Dtool_VZN3O133 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  1 v 1 2588  
1106 14 Dtool_VZN3T1IX 7 922 2569 1699 14 Dtool_VZN3T1IX 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  1 v 1 2570  
1107 14 Dtool_VZN3DCVq 7 923 2569 1699 14 Dtool_VZN3DCVq 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  1 v 1 2570  
1108 14 Dtool_VZN3sqNn 7 924 2569 1699 14 Dtool_VZN3sqNn 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  1 v 1 2570  
1109 14 Dtool_VZN3U8DL 4 925 2540 0 14 Dtool_VZN3U8DL 25 // this = other1 * other2 3 4 this 3 2631  6 other1 1 2625  6 other2 1 2625  
1110 14 Dtool_VZN33TdK 7 926 2631 2371 14 Dtool_VZN33TdK 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  5 other 1 2625  
1111 14 Dtool_VZN39_TF 7 926 2631 2371 14 Dtool_VZN39_TF 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  6 scalar 1 2553  
1112 14 Dtool_VZN3NI1G 7 927 2631 2371 14 Dtool_VZN3NI1G 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  6 scalar 1 2553  
1113 14 Dtool_VZN38vNX 6 928 2631 0 14 Dtool_VZN38vNX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 other 1 2625  
1114 14 Dtool_VZN3cj0X 6 929 2631 0 14 Dtool_VZN3cj0X 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 other 1 2625  
1115 14 Dtool_VZN3MO5W 6 930 2631 0 14 Dtool_VZN3MO5W 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 other 1 2625  
1116 14 Dtool_VZN3WUUT 6 930 2631 0 14 Dtool_VZN3WUUT 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  6 scalar 1 2553  
1117 14 Dtool_VZN3m93U 6 931 2631 0 14 Dtool_VZN3m93U 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  6 scalar 1 2553  
1118 14 Dtool_VZN3oYQI 4 932 2540 0 14 Dtool_VZN3oYQI 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 other 1 2625  
1119 14 Dtool_VZN3ivGM 4 933 2540 0 14 Dtool_VZN3ivGM 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2631  
1120 14 Dtool_VZN3NuDN 6 934 2545 0 14 Dtool_VZN3NuDN 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 other 1 2625  
1121 14 Dtool_VZN3g2mD 6 935 2545 0 14 Dtool_VZN3g2mD 929 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 2631  5 other 1 2625  
1122 14 Dtool_VZN3IOv7 6 936 2545 0 14 Dtool_VZN3IOv7 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2631  
1123 14 Dtool_VZN3AfTM 6 937 2625 0 14 Dtool_VZN3AfTM 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1124 14 Dtool_VZN3Ny16 6 938 2625 0 14 Dtool_VZN3Ny16 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1125 14 Dtool_VZN3QFPh 6 939 2625 0 14 Dtool_VZN3QFPh 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1126 14 Dtool_VZN3lK2Y 4 940 2540 0 14 Dtool_VZN3lK2Y 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 trans 1 2570  
1127 14 Dtool_VZN34cXj 4 941 2540 0 14 Dtool_VZN34cXj 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2631  5 angle 1 2553  4 axis 1 2570  2 cs 1 2506  
1128 14 Dtool_VZN3EDQQ 4 941 2540 0 14 Dtool_VZN3EDQQ 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  5 angle 1 2553  4 axis 1 2570  
1129 14 Dtool_VZN3r5fk 4 942 2540 0 14 Dtool_VZN3r5fk 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2631  5 angle 1 2553  4 axis 1 2570  2 cs 1 2506  
1130 14 Dtool_VZN3qWLK 4 942 2540 0 14 Dtool_VZN3qWLK 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  5 angle 1 2553  4 axis 1 2570  
1131 14 Dtool_VZN3wlwr 4 943 2540 0 14 Dtool_VZN3wlwr 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 scale 1 2570  
1132 14 Dtool_VZN3cZih 4 944 2540 0 14 Dtool_VZN3cZih 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  5 shear 1 2570  2 cs 1 2506  
1133 14 Dtool_VZN3bfMI 4 944 2540 0 14 Dtool_VZN3bfMI 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2631  5 shear 1 2570  
1134 14 Dtool_VZN3pH_g 4 945 2540 0 14 Dtool_VZN3pH_g 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2631  5 scale 1 2570  5 shear 1 2570  2 cs 1 2506  
1135 14 Dtool_VZN36wrG 4 945 2540 0 14 Dtool_VZN36wrG 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2631  5 scale 1 2570  5 shear 1 2570  
1136 14 Dtool_VZN3SDJX 7 946 2631 2371 14 Dtool_VZN3SDJX 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2570  
1137 14 Dtool_VZN3tfAu 7 946 2631 2371 14 Dtool_VZN3tfAu 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 2553  2 ty 1 2553  2 tz 1 2553  
1138 14 Dtool_VZN3blkA 7 947 2631 2371 14 Dtool_VZN3blkA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2553  4 axis 1 2570  2 cs 1 2506  
1139 14 Dtool_VZN3yawN 7 947 2631 2371 14 Dtool_VZN3yawN 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2553  4 axis 1 2570  
1140 14 Dtool_VZN39B_S 7 948 2631 2371 14 Dtool_VZN39B_S 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2553  4 axis 1 2570  2 cs 1 2506  
1141 14 Dtool_VZN3YFts 7 948 2631 2371 14 Dtool_VZN3YFts 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2553  4 axis 1 2570  
1142 14 Dtool_VZN338_F 7 949 2631 2371 14 Dtool_VZN338_F 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2570  
1143 14 Dtool_VZN3H84Q 7 949 2631 2371 14 Dtool_VZN3H84Q 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2553  
1144 14 Dtool_VZN3XzZ0 7 949 2631 2371 14 Dtool_VZN3XzZ0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2553  2 sy 1 2553  2 sz 1 2553  
1145 14 Dtool_VZN3fITj 7 950 2631 2371 14 Dtool_VZN3fITj 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2570  2 cs 1 2506  
1146 14 Dtool_VZN3wpeM 7 950 2631 2371 14 Dtool_VZN3wpeM 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2570  
1147 14 Dtool_VZN31Nbx 7 950 2631 2371 14 Dtool_VZN31Nbx 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2553  4 shxz 1 2553  4 shyz 1 2553  2 cs 1 2506  
1148 14 Dtool_VZN3na36 7 950 2631 2371 14 Dtool_VZN3na36 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2553  4 shxz 1 2553  4 shyz 1 2553  
1149 14 Dtool_VZN3jJJb 7 951 2631 2371 14 Dtool_VZN3jJJb 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2570  5 shear 1 2570  2 cs 1 2506  
1150 14 Dtool_VZN3EN20 7 951 2631 2371 14 Dtool_VZN3EN20 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2570  5 shear 1 2570  
1151 14 Dtool_VZN3fLeP 7 951 2631 2371 14 Dtool_VZN3fLeP 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2553  2 sy 1 2553  2 sz 1 2553  4 shxy 1 2553  4 shxz 1 2553  4 shyz 1 2553  2 cs 1 2506  
1152 14 Dtool_VZN3kKNp 7 951 2631 2371 14 Dtool_VZN3kKNp 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2553  2 sy 1 2553  2 sz 1 2553  4 shxy 1 2553  4 shxz 1 2553  4 shyz 1 2553  
1153 14 Dtool_VZN3MIyP 6 952 2625 0 14 Dtool_VZN3MIyP 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1154 14 Dtool_VZN3MGWN 6 953 2625 0 14 Dtool_VZN3MGWN 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1155 14 Dtool_VZN35OYN 6 954 2625 0 14 Dtool_VZN35OYN 362 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2506  2 to 1 2506  
1156 14 Dtool_VZN3qIgc 6 955 2545 0 14 Dtool_VZN3qIgc 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  5 other 1 2625  
1157 14 Dtool_VZN3oOXn 6 955 2545 0 14 Dtool_VZN3oOXn 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2625  5 other 1 2625  9 threshold 1 2553  
1158 14 Dtool_VZN3dkYL 4 956 2540 0 14 Dtool_VZN3dkYL 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  3 out 1 2546  
1159 14 Dtool_VZN3XBeC 4 957 2540 0 14 Dtool_VZN3XBeC 226 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2625  3 out 1 2546  12 indent_level 1 2544  
1160 14 Dtool_VZN3XY5L 4 957 2540 0 14 Dtool_VZN3XY5L 226 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2625  3 out 1 2546  
1161 14 Dtool_VZN35Z6N 4 958 2540 0 14 Dtool_VZN35Z6N 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2625  3 out 1 2546  10 class_name 1 2543  
1162 14 Dtool_VZN3n3L3 7 959 2549 0 14 Dtool_VZN3n3L3 0 0 
1163 14 Dtool_VZN3ComI 4 881 2540 0 14 Dtool_VZN3ComI 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2632  1 i 1 2544  
1164 14 Dtool_VZN37tWq 6 881 2553 0 14 Dtool_VZN37tWq 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2634  1 i 1 2544  
1165 14 Dtool_VZN3stFR 4 882 2540 0 14 Dtool_VZN3stFR 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2632  1 i 1 2544  1 v 1 2553  
1166 14 Dtool_VZN3lF2k 6 883 2544 0 14 Dtool_VZN3lF2k 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1167 14 Dtool_VZN3j2qs 6 886 2553 0 14 Dtool_VZN3j2qs 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2636  1 i 1 2544  
1168 14 Dtool_VZN39cS7 6 887 2544 0 14 Dtool_VZN39cS7 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1169 14 Dtool_VZN3rtd_ 7 973 2638 2430 14 Dtool_VZN3rtd_ 719 // Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1170 14 Dtool_VZN3vDxK 7 973 2638 2430 14 Dtool_VZN3vDxK 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2585  
1171 14 Dtool_VZN3M1Wm 7 973 2638 2430 14 Dtool_VZN3M1Wm 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2538  4 copy 1 2567  
1172 14 Dtool_VZN3zNTV 7 973 2638 2430 14 Dtool_VZN3zNTV 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2538  6 param1 0 2538  6 param2 0 2538  6 param3 0 2538  
1173 14 Dtool_VZN3Qoeb 7 974 2638 2430 14 Dtool_VZN3Qoeb 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2573  
1174 14 Dtool_VZN3_F9y 7 975 2638 2430 14 Dtool_VZN3_F9y 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1175 14 Dtool_VZN3rkOj 7 976 2566 1634 14 Dtool_VZN3rkOj 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  1 v 1 2567  
1176 14 Dtool_VZN3jhO_ 7 976 2584 1880 14 Dtool_VZN3jhO_ 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  1 v 1 2585  
1177 14 Dtool_VZN3eJuF 7 977 2638 2430 14 Dtool_VZN3eJuF 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  3 rhs 1 2639  
1178 14 Dtool_VZN3XaQp 7 978 2638 2430 14 Dtool_VZN3XaQp 216 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1179 14 Dtool_VZN3I56X 7 979 2638 2430 14 Dtool_VZN3I56X 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  5 other 1 2639  
1180 14 Dtool_VZN3b27z 7 980 2638 2430 14 Dtool_VZN3b27z 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  5 other 1 2639  
1181 14 Dtool_VZN33Uhy 6 981 2538 0 14 Dtool_VZN33Uhy 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  5 other 1 2639  
1182 14 Dtool_VZN3mSn_ 6 982 2538 0 14 Dtool_VZN3mSn_ 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  5 other 1 2639  
1183 14 Dtool_VZN3j8YK 7 983 2602 2139 14 Dtool_VZN3j8YK 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  6 param0 0 2603  
1184 14 Dtool_VZN3e9Is 7 983 2613 2220 14 Dtool_VZN3e9Is 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  6 param0 0 2607  
1185 14 Dtool_VZN3U_6J 7 983 2638 2430 14 Dtool_VZN3U_6J 226 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  6 param0 0 2639  
1186 14 Dtool_VZN3ppqj 7 983 2638 2430 14 Dtool_VZN3ppqj 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  6 scalar 1 2538  
1187 14 Dtool_VZN3e9qp 7 984 2638 2430 14 Dtool_VZN3e9qp 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  6 scalar 1 2538  
1188 14 Dtool_VZN3MJVd 6 985 2638 0 14 Dtool_VZN3MJVd 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  6 param0 0 2639  
1189 14 Dtool_VZN3rHMU 6 986 2545 0 14 Dtool_VZN3rHMU 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  5 other 1 2639  
1190 14 Dtool_VZN3lDKH 6 986 2545 0 14 Dtool_VZN3lDKH 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2639  5 other 1 2639  9 threshold 1 2538  
1191 14 Dtool_VZN3i2zi 6 987 2545 0 14 Dtool_VZN3i2zi 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  5 other 1 2639  
1192 14 Dtool_VZN3gEa5 6 988 2545 0 14 Dtool_VZN3gEa5 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2639  5 other 1 2639  9 threshold 1 2538  
1193 14 Dtool_VZN3clzP 4 989 2540 0 14 Dtool_VZN3clzP 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  6 param0 0 2546  
1194 14 Dtool_VZN3QnH2 4 990 2540 0 14 Dtool_VZN3QnH2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  1 m 1 2602  
1195 14 Dtool_VZN3IWR2 4 990 2540 0 14 Dtool_VZN3IWR2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  1 m 1 2613  
1196 14 Dtool_VZN3adwD 4 991 2540 0 14 Dtool_VZN3adwD 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  1 m 1 2603  
1197 14 Dtool_VZN31eQH 4 991 2540 0 14 Dtool_VZN31eQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  1 m 1 2607  
1198 14 Dtool_VZN3Rc8G 4 992 2540 0 14 Dtool_VZN3Rc8G 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 2638  3 hpr 1 2567  2 cs 1 2506  
1199 14 Dtool_VZN3ghkq 4 992 2540 0 14 Dtool_VZN3ghkq 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  3 hpr 1 2567  
1200 14 Dtool_VZN3WRZg 7 993 2566 1634 14 Dtool_VZN3WRZg 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  2 cs 1 2506  
1201 14 Dtool_VZN3O1A0 7 993 2566 1634 14 Dtool_VZN3O1A0 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1202 14 Dtool_VZN3YcKh 7 994 2572 1789 14 Dtool_VZN3YcKh 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1203 14 Dtool_VZN3NIeK 7 995 2572 1789 14 Dtool_VZN3NIeK 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1204 14 Dtool_VZN3ZTUN 6 996 2538 0 14 Dtool_VZN3ZTUN 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1205 14 Dtool_VZN3eAIg 6 997 2538 0 14 Dtool_VZN3eAIg 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1206 14 Dtool_VZN3yPe0 4 998 2540 0 14 Dtool_VZN3yPe0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2638  9 angle_rad 1 2538  4 axis 1 2573  
1207 14 Dtool_VZN3Ykah 4 999 2540 0 14 Dtool_VZN3Ykah 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2638  9 angle_deg 1 2538  4 axis 1 2573  
1208 14 Dtool_VZN33KoZ 7 1000 2572 1789 14 Dtool_VZN33KoZ 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  2 cs 1 2506  
1209 14 Dtool_VZN3rwSS 7 1000 2572 1789 14 Dtool_VZN3rwSS 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1210 14 Dtool_VZN3Mxzz 7 1001 2572 1789 14 Dtool_VZN3Mxzz 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  2 cs 1 2506  
1211 14 Dtool_VZN386me 7 1001 2572 1789 14 Dtool_VZN386me 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1212 14 Dtool_VZN36X_p 7 1002 2572 1789 14 Dtool_VZN36X_p 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  2 cs 1 2506  
1213 14 Dtool_VZN3IjTb 7 1002 2572 1789 14 Dtool_VZN3IjTb 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1214 14 Dtool_VZN3k8aD 6 1003 2538 0 14 Dtool_VZN3k8aD 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1215 14 Dtool_VZN3jxaE 6 1004 2538 0 14 Dtool_VZN3jxaE 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1216 14 Dtool_VZN31yaL 6 1005 2538 0 14 Dtool_VZN31yaL 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1217 14 Dtool_VZN3H0aS 6 1006 2538 0 14 Dtool_VZN3H0aS 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1218 14 Dtool_VZN33PLX 4 1007 2540 0 14 Dtool_VZN33PLX 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  1 r 1 2538  
1219 14 Dtool_VZN304KY 4 1008 2540 0 14 Dtool_VZN304KY 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  1 i 1 2538  
1220 14 Dtool_VZN3m5Kf 4 1009 2540 0 14 Dtool_VZN3m5Kf 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  1 j 1 2538  
1221 14 Dtool_VZN3YGLm 4 1010 2540 0 14 Dtool_VZN3YGLm 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  1 k 1 2538  
1222 14 Dtool_VZN3aBWQ 6 1011 2545 0 14 Dtool_VZN3aBWQ 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2638  
1223 14 Dtool_VZN3MknV 6 1012 2545 0 14 Dtool_VZN3MknV 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  5 other 1 2639  
1224 14 Dtool_VZN3Dgwh 6 1013 2545 0 14 Dtool_VZN3Dgwh 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2638  
1225 14 Dtool_VZN3ed84 6 1014 2545 0 14 Dtool_VZN3ed84 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2638  5 other 1 2639  
1226 14 Dtool_VZN3vLqt 6 1015 2545 0 14 Dtool_VZN3vLqt 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2638  
1227 14 Dtool_VZN3Jkak 6 1016 2545 0 14 Dtool_VZN3Jkak 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2639  
1228 14 Dtool_VZN34P4N 6 1017 2545 0 14 Dtool_VZN34P4N 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2639  9 tolerance 1 2538  
1229 14 Dtool_VZN3mmMR 6 1018 2639 0 14 Dtool_VZN3mmMR 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1230 14 Dtool_VZN3ndKd 7 1019 2549 0 14 Dtool_VZN3ndKd 0 0 
1231 14 Dtool_VZN3rOX4 7 1022 2641 2478 14 Dtool_VZN3rOX4 719 // Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1232 14 Dtool_VZN3wmdo 7 1022 2641 2478 14 Dtool_VZN3wmdo 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2588  
1233 14 Dtool_VZN3BaVV 7 1022 2641 2478 14 Dtool_VZN3BaVV 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2553  4 copy 1 2570  
1234 14 Dtool_VZN36Z6w 7 1022 2641 2478 14 Dtool_VZN36Z6w 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2553  6 param1 0 2553  6 param2 0 2553  6 param3 0 2553  
1235 14 Dtool_VZN3OPmP 7 1023 2641 2478 14 Dtool_VZN3OPmP 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2576  
1236 14 Dtool_VZN3_hFu 7 1024 2641 2478 14 Dtool_VZN3_hFu 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1237 14 Dtool_VZN3PTTe 7 1025 2569 1699 14 Dtool_VZN3PTTe 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  1 v 1 2570  
1238 14 Dtool_VZN3HWT6 7 1025 2587 1943 14 Dtool_VZN3HWT6 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  1 v 1 2588  
1239 14 Dtool_VZN3GGsA 7 1026 2641 2478 14 Dtool_VZN3GGsA 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  3 rhs 1 2642  
1240 14 Dtool_VZN3X_Xk 7 1027 2641 2478 14 Dtool_VZN3X_Xk 216 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1241 14 Dtool_VZN3PV02 7 1028 2641 2478 14 Dtool_VZN3PV02 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  5 other 1 2642  
1242 14 Dtool_VZN3Za1S 7 1029 2641 2478 14 Dtool_VZN3Za1S 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  5 other 1 2642  
1243 14 Dtool_VZN33sxo 6 1030 2553 0 14 Dtool_VZN33sxo 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  5 other 1 2642  
1244 14 Dtool_VZN3mq30 6 1031 2553 0 14 Dtool_VZN3mq30 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  5 other 1 2642  
1245 14 Dtool_VZN3BNgV 7 1032 2620 2292 14 Dtool_VZN3BNgV 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  6 param0 0 2621  
1246 14 Dtool_VZN38NQ3 7 1032 2631 2371 14 Dtool_VZN38NQ3 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  6 param0 0 2625  
1247 14 Dtool_VZN3rQ0o 7 1032 2641 2478 14 Dtool_VZN3rQ0o 226 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  6 param0 0 2642  
1248 14 Dtool_VZN3A0TI 7 1032 2641 2478 14 Dtool_VZN3A0TI 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  6 scalar 1 2553  
1249 14 Dtool_VZN3PASO 7 1033 2641 2478 14 Dtool_VZN3PASO 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  6 scalar 1 2553  
1250 14 Dtool_VZN36vdR 6 1034 2641 0 14 Dtool_VZN36vdR 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  6 param0 0 2642  
1251 14 Dtool_VZN3sATv 6 1035 2545 0 14 Dtool_VZN3sATv 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  5 other 1 2642  
1252 14 Dtool_VZN3KRVo 6 1035 2545 0 14 Dtool_VZN3KRVo 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2642  5 other 1 2642  9 threshold 1 2553  
1253 14 Dtool_VZN3Zg5d 6 1036 2545 0 14 Dtool_VZN3Zg5d 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  5 other 1 2642  
1254 14 Dtool_VZN3UNTJ 6 1037 2545 0 14 Dtool_VZN3UNTJ 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2642  5 other 1 2642  9 threshold 1 2553  
1255 14 Dtool_VZN3cZ7K 4 1038 2540 0 14 Dtool_VZN3cZ7K 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  6 param0 0 2546  
1256 14 Dtool_VZN3QLcn 4 1039 2540 0 14 Dtool_VZN3QLcn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  1 m 1 2620  
1257 14 Dtool_VZN3I6nn 4 1039 2540 0 14 Dtool_VZN3I6nn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  1 m 1 2631  
1258 14 Dtool_VZN3ea4e 4 1040 2540 0 14 Dtool_VZN3ea4e 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  1 m 1 2621  
1259 14 Dtool_VZN35bYi 4 1040 2540 0 14 Dtool_VZN35bYi 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  1 m 1 2625  
1260 14 Dtool_VZN3X48z 4 1041 2540 0 14 Dtool_VZN3X48z 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 2641  3 hpr 1 2570  2 cs 1 2506  
1261 14 Dtool_VZN3hFnX 4 1041 2540 0 14 Dtool_VZN3hFnX 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  3 hpr 1 2570  
1262 14 Dtool_VZN3W1gb 7 1042 2569 1699 14 Dtool_VZN3W1gb 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  2 cs 1 2506  
1263 14 Dtool_VZN3ORIv 7 1042 2569 1699 14 Dtool_VZN3ORIv 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1264 14 Dtool_VZN3Y4Rc 7 1043 2575 1823 14 Dtool_VZN3Y4Rc 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1265 14 Dtool_VZN3NkmF 7 1044 2575 1823 14 Dtool_VZN3NkmF 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1266 14 Dtool_VZN3Z_bI 6 1045 2553 0 14 Dtool_VZN3Z_bI 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1267 14 Dtool_VZN3e8Rb 6 1046 2553 0 14 Dtool_VZN3e8Rb 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1268 14 Dtool_VZN3Z91x 4 1047 2540 0 14 Dtool_VZN3Z91x 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2641  9 angle_rad 1 2553  4 axis 1 2576  
1269 14 Dtool_VZN3VKOA 4 1048 2540 0 14 Dtool_VZN3VKOA 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2641  9 angle_deg 1 2553  4 axis 1 2576  
1270 14 Dtool_VZN33uwU 7 1049 2575 1823 14 Dtool_VZN33uwU 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  2 cs 1 2506  
1271 14 Dtool_VZN3rsaN 7 1049 2575 1823 14 Dtool_VZN3rsaN 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1272 14 Dtool_VZN3Mt7u 7 1050 2575 1823 14 Dtool_VZN3Mt7u 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  2 cs 1 2506  
1273 14 Dtool_VZN38etZ 7 1050 2575 1823 14 Dtool_VZN38etZ 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1274 14 Dtool_VZN36zHl 7 1051 2575 1823 14 Dtool_VZN36zHl 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  2 cs 1 2506  
1275 14 Dtool_VZN3IPaW 7 1051 2575 1823 14 Dtool_VZN3IPaW 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1276 14 Dtool_VZN3lYi_ 6 1052 2553 0 14 Dtool_VZN3lYi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1277 14 Dtool_VZN3kVi_ 6 1053 2553 0 14 Dtool_VZN3kVi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1278 14 Dtool_VZN31WiG 6 1054 2553 0 14 Dtool_VZN31WiG 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1279 14 Dtool_VZN3HQiN 6 1055 2553 0 14 Dtool_VZN3HQiN 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1280 14 Dtool_VZN32srU 4 1056 2540 0 14 Dtool_VZN32srU 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  1 r 1 2553  
1281 14 Dtool_VZN33hrV 4 1057 2540 0 14 Dtool_VZN33hrV 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  1 i 1 2553  
1282 14 Dtool_VZN35irc 4 1058 2540 0 14 Dtool_VZN35irc 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  1 j 1 2553  
1283 14 Dtool_VZN3Ljrj 4 1059 2540 0 14 Dtool_VZN3Ljrj 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  1 k 1 2553  
1284 14 Dtool_VZN3aleL 6 1060 2545 0 14 Dtool_VZN3aleL 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2641  
1285 14 Dtool_VZN3Mw_G 6 1061 2545 0 14 Dtool_VZN3Mw_G 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  5 other 1 2642  
1286 14 Dtool_VZN3DM3c 6 1062 2545 0 14 Dtool_VZN3DM3c 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2641  
1287 14 Dtool_VZN3IgEt 6 1063 2545 0 14 Dtool_VZN3IgEt 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2641  5 other 1 2642  
1288 14 Dtool_VZN3v3zo 6 1064 2545 0 14 Dtool_VZN3v3zo 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2641  
1289 14 Dtool_VZN3JIif 6 1065 2545 0 14 Dtool_VZN3JIif 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2642  
1290 14 Dtool_VZN3Z4KV 6 1066 2545 0 14 Dtool_VZN3Z4KV 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2642  9 tolerance 1 2553  
1291 14 Dtool_VZN3maTM 6 1067 2642 0 14 Dtool_VZN3maTM 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1292 14 Dtool_VZN3nxRY 7 1068 2549 0 14 Dtool_VZN3nxRY 0 0 
1293 14 Dtool_VZN31ufs 7 1071 2644 2483 14 Dtool_VZN31ufs 724 // Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1294 14 Dtool_VZN3oHWm 7 1071 2644 2483 14 Dtool_VZN3oHWm 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2603  
1295 14 Dtool_VZN3oMkn 7 1071 2644 2483 14 Dtool_VZN3oMkn 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2607  
1296 14 Dtool_VZN3dC6k 7 1071 2644 2483 14 Dtool_VZN3dC6k 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2639  
1297 14 Dtool_VZN3ZE8x 7 1071 2644 2483 14 Dtool_VZN3ZE8x 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2585  
1298 14 Dtool_VZN3zssT 7 1071 2644 2483 14 Dtool_VZN3zssT 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2573  6 param1 0 2538  
1299 14 Dtool_VZN3LwNm 7 1071 2644 2483 14 Dtool_VZN3LwNm 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 2538  6 param1 0 2538  6 param2 0 2538  
1300 14 Dtool_VZN36t_a 7 1071 2644 2483 14 Dtool_VZN36t_a 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2538  6 param1 0 2538  6 param2 0 2538  6 param3 0 2538  
1301 14 Dtool_VZN3cT59 7 1072 2638 2430 14 Dtool_VZN3cT59 377 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2645  5 other 1 2639  
1302 14 Dtool_VZN3ttc8 7 1072 2644 2483 14 Dtool_VZN3ttc8 248 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2645  5 other 1 2645  
1303 14 Dtool_VZN3mMpJ 7 1072 2644 2483 14 Dtool_VZN3mMpJ 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2645  6 scalar 1 2538  
1304 14 Dtool_VZN3mkd6 7 1073 2644 2483 14 Dtool_VZN3mkd6 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2645  6 scalar 1 2538  
1305 14 Dtool_VZN3scCI 7 1074 2549 0 14 Dtool_VZN3scCI 0 0 
1306 14 Dtool_VZN3XT9o 7 1077 2647 2488 14 Dtool_VZN3XT9o 724 // Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1307 14 Dtool_VZN31jtU 7 1077 2647 2488 14 Dtool_VZN31jtU 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2621  
1308 14 Dtool_VZN31o7V 7 1077 2647 2488 14 Dtool_VZN31o7V 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2625  
1309 14 Dtool_VZN371Oh 7 1077 2647 2488 14 Dtool_VZN371Oh 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2642  
1310 14 Dtool_VZN3bq7q 7 1077 2647 2488 14 Dtool_VZN3bq7q 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2588  
1311 14 Dtool_VZN3Ldpy 7 1077 2647 2488 14 Dtool_VZN3Ldpy 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2576  6 param1 0 2553  
1312 14 Dtool_VZN34Iug 7 1077 2647 2488 14 Dtool_VZN34Iug 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 2553  6 param1 0 2553  6 param2 0 2553  
1313 14 Dtool_VZN3A9cz 7 1077 2647 2488 14 Dtool_VZN3A9cz 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2553  6 param1 0 2553  6 param2 0 2553  6 param3 0 2553  
1314 14 Dtool_VZN3ukuN 7 1078 2641 2478 14 Dtool_VZN3ukuN 377 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2648  5 other 1 2642  
1315 14 Dtool_VZN31Z8I 7 1078 2647 2488 14 Dtool_VZN31Z8I 248 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2648  5 other 1 2648  
1316 14 Dtool_VZN3y_rc 7 1078 2647 2488 14 Dtool_VZN3y_rc 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2648  6 scalar 1 2553  
1317 14 Dtool_VZN3zWgN 7 1079 2647 2488 14 Dtool_VZN3zWgN 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2648  6 scalar 1 2553  
1318 14 Dtool_VZN3KPCY 7 1080 2549 0 14 Dtool_VZN3KPCY 0 0 
1319 14 Dtool_VZN3cX4n 7 1083 2650 2492 14 Dtool_VZN3cX4n 730 // Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1320 14 Dtool_VZN3kodg 7 1083 2650 2492 14 Dtool_VZN3kodg 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2603  
1321 14 Dtool_VZN3loku 7 1083 2650 2492 14 Dtool_VZN3loku 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2607  
1322 14 Dtool_VZN3_eNF 7 1083 2650 2492 14 Dtool_VZN3_eNF 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2639  
1323 14 Dtool_VZN3Os13 7 1083 2650 2492 14 Dtool_VZN3Os13 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2573  6 param1 0 2538  
1324 14 Dtool_VZN3WFbK 7 1083 2650 2492 14 Dtool_VZN3WFbK 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2538  6 param1 0 2538  6 param2 0 2538  6 param3 0 2538  
1325 14 Dtool_VZN31nPz 7 1084 2650 2492 14 Dtool_VZN31nPz 352 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2651  5 other 1 2639  
1326 14 Dtool_VZN3yr_X 7 1084 2650 2492 14 Dtool_VZN3yr_X 312 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2651  5 other 1 2645  
1327 14 Dtool_VZN3yKEa 7 1085 2549 0 14 Dtool_VZN3yKEa 0 0 
1328 14 Dtool_VZN32Y6p 7 1088 2653 2496 14 Dtool_VZN32Y6p 730 // Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1329 14 Dtool_VZN3Yrfb 7 1088 2653 2496 14 Dtool_VZN3Yrfb 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2621  
1330 14 Dtool_VZN3Zrmp 7 1088 2653 2496 14 Dtool_VZN3Zrmp 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2625  
1331 14 Dtool_VZN3RFe9 7 1088 2653 2496 14 Dtool_VZN3RFe9 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2642  
1332 14 Dtool_VZN3yi3y 7 1088 2653 2496 14 Dtool_VZN3yi3y 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2576  6 param1 0 2538  
1333 14 Dtool_VZN3QOxM 7 1088 2653 2496 14 Dtool_VZN3QOxM 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2553  6 param1 0 2553  6 param2 0 2553  6 param3 0 2553  
1334 14 Dtool_VZN3lgBQ 7 1089 2653 2496 14 Dtool_VZN3lgBQ 352 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2654  5 other 1 2642  
1335 14 Dtool_VZN39P52 7 1089 2653 2496 14 Dtool_VZN39P52 312 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2654  5 other 1 2648  
1336 14 Dtool_VZN3xK29 7 1090 2549 0 14 Dtool_VZN3xK29 0 0 
1337 14 Dtool_VZN3aTo4 6 3 2553 0 14 Dtool_VZN3aTo4 0 1 1 f 1 2553  
1338 14 Dtool_VZN3RKCI 6 3 2538 0 14 Dtool_VZN3RKCI 0 1 1 f 1 2538  
1339 14 Dtool_VZN3gpRs 6 4 2553 0 14 Dtool_VZN3gpRs 0 1 1 f 1 2553  
1340 14 Dtool_VZN3Ibq7 6 4 2538 0 14 Dtool_VZN3Ibq7 0 1 1 f 1 2538  
1341 14 Dtool_VZN3t1jy 6 322 2506 0 14 Dtool_VZN3t1jy 0 0 
1342 14 Dtool_VZN3p_eQ 7 720 2620 2292 14 Dtool_VZN3p_eQ 0 1 1 a 1 2621  
1343 14 Dtool_VZN3N4ee 7 720 2602 2139 14 Dtool_VZN3N4ee 0 1 1 a 1 2603  
1344 14 Dtool_VZN3n_ss 7 720 2631 2371 14 Dtool_VZN3n_ss 0 1 1 a 1 2625  
1345 14 Dtool_VZN3L4s6 7 720 2613 2220 14 Dtool_VZN3L4s6 0 1 1 a 1 2607  
1346 14 Dtool_VZN39Gem 7 721 2620 2292 14 Dtool_VZN39Gem 0 1 1 a 1 2621  
1347 14 Dtool_VZN3Ngym 7 721 2602 2139 14 Dtool_VZN3Ngym 0 1 1 a 1 2603  
1348 14 Dtool_VZN3YJfW 7 721 2631 2371 14 Dtool_VZN3YJfW 0 1 1 a 1 2625  
1349 14 Dtool_VZN3orzW 7 721 2613 2220 14 Dtool_VZN3orzW 0 1 1 a 1 2607  
1350 14 Dtool_VZN3G8wm 7 721 2641 2478 14 Dtool_VZN3G8wm 0 1 1 a 1 2642  
1351 14 Dtool_VZN3qBx0 7 721 2638 2430 14 Dtool_VZN3qBx0 0 1 1 a 1 2639  
1352 14 Dtool_VZN3DzjX 7 961 2620 2292 14 Dtool_VZN3DzjX 0 2 1 m 1 2621  1 q 1 2642  
1353 14 Dtool_VZN3kolH 7 961 2602 2139 14 Dtool_VZN3kolH 0 2 1 m 1 2603  1 q 1 2639  
1354 14 Dtool_VZN3Rsje 7 961 2631 2371 14 Dtool_VZN3Rsje 0 2 1 m 1 2625  1 q 1 2642  
1355 14 Dtool_VZN3qplO 7 961 2613 2220 14 Dtool_VZN3qplO 0 2 1 m 1 2607  1 q 1 2639  
1356 14 Dtool_VZN3yfKI 7 961 2563 1624 14 Dtool_VZN3yfKI 0 2 1 v 1 2564  1 m 1 2621  
1357 14 Dtool_VZN3SCRW 7 961 2560 1608 14 Dtool_VZN3SCRW 0 2 1 v 1 2561  1 m 1 2603  
1358 14 Dtool_VZN3mWZA 7 961 2581 1869 14 Dtool_VZN3mWZA 0 2 1 v 1 2582  1 m 1 2625  
1359 14 Dtool_VZN3eNeO 7 961 2578 1846 14 Dtool_VZN3eNeO 0 2 1 v 1 2579  1 m 1 2607  
1360 14 Dtool_VZN36f4W 7 961 2569 1699 14 Dtool_VZN36f4W 0 2 1 v 1 2570  1 m 1 2621  
1361 14 Dtool_VZN3ZSml 7 961 2566 1634 14 Dtool_VZN3ZSml 0 2 1 v 1 2567  1 m 1 2603  
1362 14 Dtool_VZN3HpH4 7 961 2587 1943 14 Dtool_VZN3HpH4 0 2 1 v 1 2588  1 m 1 2625  
1363 14 Dtool_VZN3lt1G 7 961 2584 1880 14 Dtool_VZN3lt1G 0 2 1 v 1 2585  1 m 1 2607  
1364 14 Dtool_VZN3QlWf 7 961 2557 1592 14 Dtool_VZN3QlWf 0 2 1 v 1 2558  1 m 1 2621  
1365 14 Dtool_VZN3fZ0h 7 961 2554 1574 14 Dtool_VZN3fZ0h 0 2 1 v 1 2555  1 m 1 2603  
1366 14 Dtool_VZN3wbZm 7 961 2575 1823 14 Dtool_VZN3wbZm 0 2 1 v 1 2576  1 m 1 2625  
1367 14 Dtool_VZN37_2o 7 961 2572 1789 14 Dtool_VZN37_2o 0 2 1 v 1 2573  1 m 1 2607  
1368 14 Dtool_VZN3J63D 4 962 2540 0 14 Dtool_VZN3J63D 0 2 4 dest 1 2656  5 value 1 2621  
1369 14 Dtool_VZN3Qo4D 4 962 2540 0 14 Dtool_VZN3Qo4D 0 2 4 dest 1 2656  5 value 1 2603  
1370 14 Dtool_VZN3b53K 4 962 2540 0 14 Dtool_VZN3b53K 0 2 4 dest 1 2656  5 value 1 2625  
1371 14 Dtool_VZN3Cr4K 4 962 2540 0 14 Dtool_VZN3Cr4K 0 2 4 dest 1 2656  5 value 1 2607  
1372 14 Dtool_VZN3G74L 4 963 2540 0 14 Dtool_VZN3G74L 0 2 6 result 1 2620  6 source 1 2658  
1373 14 Dtool_VZN3GpUO 4 963 2540 0 14 Dtool_VZN3GpUO 0 2 6 result 1 2602  6 source 1 2658  
1374 14 Dtool_VZN30f6L 4 963 2540 0 14 Dtool_VZN30f6L 0 2 6 result 1 2631  6 source 1 2658  
1375 14 Dtool_VZN30NWO 4 963 2540 0 14 Dtool_VZN30NWO 0 2 6 result 1 2613  6 source 1 2658  
1376 14 Dtool_VZN3yVzC 4 964 2540 0 14 Dtool_VZN3yVzC 0 4 3 mat 1 2620  5 scale 1 2570  3 hpr 1 2570  2 cs 1 2506  
1377 14 Dtool_VZN3hQb3 4 964 2540 0 14 Dtool_VZN3hQb3 0 3 3 mat 1 2620  5 scale 1 2570  3 hpr 1 2570  
1378 14 Dtool_VZN33KHb 4 964 2540 0 14 Dtool_VZN33KHb 0 5 3 mat 1 2620  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  2 cs 1 2506  
1379 14 Dtool_VZN3RK2_ 4 964 2540 0 14 Dtool_VZN3RK2_ 0 4 3 mat 1 2620  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  
1380 14 Dtool_VZN34aBn 4 964 2540 0 14 Dtool_VZN34aBn 0 4 3 mat 1 2602  5 scale 1 2567  3 hpr 1 2567  2 cs 1 2506  
1381 14 Dtool_VZN36xpb 4 964 2540 0 14 Dtool_VZN36xpb 0 3 3 mat 1 2602  5 scale 1 2567  3 hpr 1 2567  
1382 14 Dtool_VZN3s_WG 4 964 2540 0 14 Dtool_VZN3s_WG 0 5 3 mat 1 2602  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  2 cs 1 2506  
1383 14 Dtool_VZN3k7Er 4 964 2540 0 14 Dtool_VZN3k7Er 0 4 3 mat 1 2602  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  
1384 14 Dtool_VZN38KjT 4 964 2540 0 14 Dtool_VZN38KjT 0 5 3 mat 1 2631  5 scale 1 2570  3 hpr 1 2570  9 translate 1 2570  2 cs 1 2506  
1385 14 Dtool_VZN3UKS4 4 964 2540 0 14 Dtool_VZN3UKS4 0 4 3 mat 1 2631  5 scale 1 2570  3 hpr 1 2570  9 translate 1 2570  
1386 14 Dtool_VZN3oQjw 4 964 2540 0 14 Dtool_VZN3oQjw 0 6 3 mat 1 2631  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  9 translate 1 2570  2 cs 1 2506  
1387 14 Dtool_VZN39vLl 4 964 2540 0 14 Dtool_VZN39vLl 0 5 3 mat 1 2631  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  9 translate 1 2570  
1388 14 Dtool_VZN3Q_y_ 4 964 2540 0 14 Dtool_VZN3Q_y_ 0 5 3 mat 1 2613  5 scale 1 2567  3 hpr 1 2567  9 translate 1 2567  2 cs 1 2506  
1389 14 Dtool_VZN377gj 4 964 2540 0 14 Dtool_VZN377gj 0 4 3 mat 1 2613  5 scale 1 2567  3 hpr 1 2567  9 translate 1 2567  
1390 14 Dtool_VZN31X_c 4 964 2540 0 14 Dtool_VZN31X_c 0 6 3 mat 1 2613  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  9 translate 1 2567  2 cs 1 2506  
1391 14 Dtool_VZN3CknR 4 964 2540 0 14 Dtool_VZN3CknR 0 5 3 mat 1 2613  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  9 translate 1 2567  
1392 14 Dtool_VZN3rGAD 6 965 2545 0 14 Dtool_VZN3rGAD 0 4 3 mat 1 2621  5 scale 1 2569  3 hpr 1 2569  2 cs 1 2506  
1393 14 Dtool_VZN3VxX2 6 965 2545 0 14 Dtool_VZN3VxX2 0 3 3 mat 1 2621  5 scale 1 2569  3 hpr 1 2569  
1394 14 Dtool_VZN3wk1_ 6 965 2545 0 14 Dtool_VZN3wk1_ 0 5 3 mat 1 2621  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  2 cs 1 2506  
1395 14 Dtool_VZN3syts 6 965 2545 0 14 Dtool_VZN3syts 0 4 3 mat 1 2621  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  
1396 14 Dtool_VZN3KI_s 6 965 2545 0 14 Dtool_VZN3KI_s 0 4 3 mat 1 2603  5 scale 1 2566  3 hpr 1 2566  2 cs 1 2506  
1397 14 Dtool_VZN3zJVg 6 965 2545 0 14 Dtool_VZN3zJVg 0 3 3 mat 1 2603  5 scale 1 2566  3 hpr 1 2566  
1398 14 Dtool_VZN3b5Pi 6 965 2545 0 14 Dtool_VZN3b5Pi 0 5 3 mat 1 2603  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  2 cs 1 2506  
1399 14 Dtool_VZN3FoHP 6 965 2545 0 14 Dtool_VZN3FoHP 0 4 3 mat 1 2603  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  
1400 14 Dtool_VZN37y0_ 6 965 2545 0 14 Dtool_VZN37y0_ 0 5 3 mat 1 2625  5 scale 1 2569  3 hpr 1 2569  9 translate 1 2569  2 cs 1 2506  
1401 14 Dtool_VZN31gus 6 965 2545 0 14 Dtool_VZN31gus 0 4 3 mat 1 2625  5 scale 1 2569  3 hpr 1 2569  9 translate 1 2569  
1402 14 Dtool_VZN3Fy__ 6 965 2545 0 14 Dtool_VZN3Fy__ 0 6 3 mat 1 2625  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  9 translate 1 2569  2 cs 1 2506  
1403 14 Dtool_VZN3ioSK 6 965 2545 0 14 Dtool_VZN3ioSK 0 5 3 mat 1 2625  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  9 translate 1 2569  
1404 14 Dtool_VZN3QLRi 6 965 2545 0 14 Dtool_VZN3QLRi 0 5 3 mat 1 2607  5 scale 1 2566  3 hpr 1 2566  9 translate 1 2566  2 cs 1 2506  
1405 14 Dtool_VZN3cmIP 6 965 2545 0 14 Dtool_VZN3cmIP 0 4 3 mat 1 2607  5 scale 1 2566  3 hpr 1 2566  9 translate 1 2566  
1406 14 Dtool_VZN3t1gv 6 965 2545 0 14 Dtool_VZN3t1gv 0 6 3 mat 1 2607  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  9 translate 1 2566  2 cs 1 2506  
1407 14 Dtool_VZN3Jlz6 6 965 2545 0 14 Dtool_VZN3Jlz6 0 5 3 mat 1 2607  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  9 translate 1 2566  
1408 14 Dtool_VZN35kiD 4 966 2540 0 14 Dtool_VZN35kiD 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2620  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  2 cs 1 2506  
1409 14 Dtool_VZN3TMeM 4 966 2540 0 14 Dtool_VZN3TMeM 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2620  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  
1410 14 Dtool_VZN3URso 4 966 2540 0 14 Dtool_VZN3URso 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2602  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  2 cs 1 2506  
1411 14 Dtool_VZN3_Rpx 4 966 2540 0 14 Dtool_VZN3_Rpx 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2602  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  
1412 14 Dtool_VZN3aU0J 4 966 2540 0 14 Dtool_VZN3aU0J 0 6 3 mat 1 2631  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  9 translate 1 2570  2 cs 1 2506  
1413 14 Dtool_VZN3_LGV 4 966 2540 0 14 Dtool_VZN3_LGV 0 5 3 mat 1 2631  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  9 translate 1 2570  
1414 14 Dtool_VZN3Xr_e 4 966 2540 0 14 Dtool_VZN3Xr_e 0 6 3 mat 1 2613  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  9 translate 1 2567  2 cs 1 2506  
1415 14 Dtool_VZN3gMRq 4 966 2540 0 14 Dtool_VZN3gMRq 0 5 3 mat 1 2613  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  9 translate 1 2567  
1416 14 Dtool_VZN3tC1N 6 967 2545 0 14 Dtool_VZN3tC1N 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2621  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  2 cs 1 2506  
1417 14 Dtool_VZN3z5DH 6 967 2545 0 14 Dtool_VZN3z5DH 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2621  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  
1418 14 Dtool_VZN3POdX 6 967 2545 0 14 Dtool_VZN3POdX 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2603  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  2 cs 1 2506  
1419 14 Dtool_VZN3RWrQ 6 967 2545 0 14 Dtool_VZN3RWrQ 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2603  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  
1420 14 Dtool_VZN3vhAZ 6 967 2545 0 14 Dtool_VZN3vhAZ 0 6 3 mat 1 2625  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  9 translate 1 2569  2 cs 1 2506  
1421 14 Dtool_VZN3PJWn 6 967 2545 0 14 Dtool_VZN3PJWn 0 5 3 mat 1 2625  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  9 translate 1 2569  
1422 14 Dtool_VZN3ST9i 6 967 2545 0 14 Dtool_VZN3ST9i 0 6 3 mat 1 2607  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  9 translate 1 2566  2 cs 1 2506  
1423 14 Dtool_VZN395Tx 6 967 2545 0 14 Dtool_VZN395Tx 0 5 3 mat 1 2607  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  9 translate 1 2566  
1424 14 Dtool_VZN32yX5 4 968 2540 0 14 Dtool_VZN32yX5 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2620  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  2 cs 1 2506  
1425 14 Dtool_VZN3ZHTC 4 968 2540 0 14 Dtool_VZN3ZHTC 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2620  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  
1426 14 Dtool_VZN3SFhe 4 968 2540 0 14 Dtool_VZN3SFhe 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2602  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  2 cs 1 2506  
1427 14 Dtool_VZN31Zen 4 968 2540 0 14 Dtool_VZN31Zen 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2602  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  
1428 14 Dtool_VZN3XOp_ 4 968 2540 0 14 Dtool_VZN3XOp_ 0 6 3 mat 1 2631  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  9 translate 1 2570  2 cs 1 2506  
1429 14 Dtool_VZN3IA7K 4 968 2540 0 14 Dtool_VZN3IA7K 0 5 3 mat 1 2631  5 scale 1 2570  5 shear 1 2570  3 hpr 1 2570  9 translate 1 2570  
1430 14 Dtool_VZN3R3yU 4 968 2540 0 14 Dtool_VZN3R3yU 0 6 3 mat 1 2613  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  9 translate 1 2567  2 cs 1 2506  
1431 14 Dtool_VZN3KHGg 4 968 2540 0 14 Dtool_VZN3KHGg 0 5 3 mat 1 2613  5 scale 1 2567  5 shear 1 2567  3 hpr 1 2567  9 translate 1 2567  
1432 14 Dtool_VZN30nyg 6 969 2545 0 14 Dtool_VZN30nyg 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2621  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  2 cs 1 2506  
1433 14 Dtool_VZN3WfBa 6 969 2545 0 14 Dtool_VZN3WfBa 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2621  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  
1434 14 Dtool_VZN3Suaq 6 969 2545 0 14 Dtool_VZN3Suaq 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2603  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  2 cs 1 2506  
1435 14 Dtool_VZN37noj 6 969 2545 0 14 Dtool_VZN37noj 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2603  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  
1436 14 Dtool_VZN3Bw_r 6 969 2545 0 14 Dtool_VZN3Bw_r 0 6 3 mat 1 2625  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  9 translate 1 2569  2 cs 1 2506  
1437 14 Dtool_VZN31_T6 6 969 2545 0 14 Dtool_VZN31_T6 0 5 3 mat 1 2625  5 scale 1 2569  5 shear 1 2569  3 hpr 1 2569  9 translate 1 2569  
1438 14 Dtool_VZN33x61 6 969 2545 0 14 Dtool_VZN33x61 0 6 3 mat 1 2607  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  9 translate 1 2566  2 cs 1 2506  
1439 14 Dtool_VZN3GpPE 6 969 2545 0 14 Dtool_VZN3GpPE 0 5 3 mat 1 2607  5 scale 1 2566  5 shear 1 2566  3 hpr 1 2566  9 translate 1 2566  
1440 14 Dtool_VZN32peC 7 970 2569 1699 14 Dtool_VZN32peC 505 ////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 old_hpr 1 2570  
1441 14 Dtool_VZN3I0gC 7 970 2566 1634 14 Dtool_VZN3I0gC 505 ////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 old_hpr 1 2567  
1442 14 Dtool_VZN3Pgfc 7 971 2569 1699 14 Dtool_VZN3Pgfc 535 ////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 new_hpr 1 2570  
1443 14 Dtool_VZN3ZEhc 7 971 2566 1634 14 Dtool_VZN3ZEhc 535 ////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 new_hpr 1 2567  
163
2497 11 MathNumbers 141313 11 MathNumbers 11 MathNumbers 0 0 0 0 1444 0 0 0 0 0 0 0 0

2498 10 LVecBase2f 26625 10 LVecBase2f 10 LVecBase2f 0 0 0 1 1447 1455 0 53 1448 1449 1450 1451 1452 1453 1454 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 0 0 0 0 0 805
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2499 10 LVecBase2d 26625 10 LVecBase2d 10 LVecBase2d 0 0 0 1 1502 1510 0 53 1503 1504 1505 1506 1507 1508 1509 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 0 0 0 0 0 805
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2500 9 LVector2f 141313 9 LVector2f 9 LVector2f 0 0 0 1 1557 1574 0 16 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 0 0 1 0 2498 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2501 9 LVector2d 141313 9 LVector2d 9 LVector2d 0 0 0 1 1575 1592 0 16 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 0 0 1 0 2499 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2502 8 LPoint2f 141313 8 LPoint2f 8 LPoint2f 0 0 0 1 1593 1608 0 14 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 0 0 1 0 2498 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2503 8 LPoint2d 141313 8 LPoint2d 8 LPoint2d 0 0 0 1 1609 1624 0 14 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 0 0 1 0 2499 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2504 10 LVecBase3f 26625 10 LVecBase3f 10 LVecBase3f 0 0 0 1 1625 1634 0 63 1626 1627 1628 1629 1630 1631 1632 1633 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2505 10 LVecBase3d 26625 10 LVecBase3d 10 LVecBase3d 0 0 0 1 1690 1699 0 63 1691 1692 1693 1694 1695 1696 1697 1698 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2506 16 CoordinateSystem 532481 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

2507 9 LVector3f 141313 9 LVector3f 9 LVector3f 0 0 0 1 1756 1789 0 32 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 0 0 1 0 2504 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2508 9 LVector3d 141313 9 LVector3d 9 LVector3d 0 0 0 1 1790 1823 0 32 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 0 0 1 0 2505 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2509 8 LPoint3f 141313 8 LPoint3f 8 LPoint3f 0 0 0 1 1824 1846 0 21 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 0 0 1 0 2504 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2510 8 LPoint3d 141313 8 LPoint3d 8 LPoint3d 0 0 0 1 1847 1869 0 21 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 0 0 1 0 2505 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2511 10 LVecBase4f 26625 10 LVecBase4f 10 LVecBase4f 0 0 0 1 1870 1880 0 61 1871 1872 1873 1874 1875 1876 1877 1878 1879 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2512 10 LVecBase4d 26625 10 LVecBase4d 10 LVecBase4d 0 0 0 1 1933 1943 0 61 1934 1935 1936 1937 1938 1939 1940 1941 1942 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2513 9 LVector4f 141313 9 LVector4f 9 LVector4f 0 0 0 1 1996 2013 0 16 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 0 0 1 0 2511 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2514 9 LVector4d 141313 9 LVector4d 9 LVector4d 0 0 0 1 2014 2031 0 16 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 0 0 1 0 2512 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2515 8 LPoint4f 141313 8 LPoint4f 8 LPoint4f 0 0 0 1 2032 2049 0 16 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 0 0 1 0 2511 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2516 8 LPoint4d 141313 8 LPoint4d 8 LPoint4d 0 0 0 1 2050 2067 0 16 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 0 0 1 0 2512 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2517 9 LMatrix3f 141313 9 LMatrix3f 9 LMatrix3f 0 0 0 1 2075 2139 0 63 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 4 2660 2661 2662 2663 0 0 0 2 2518 2519 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2518 3 Row 403457 14 LMatrix3f::Row 14 LMatrix3f::Row 2517 0 0 0 2071 0 3 2068 2069 2070 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2519 4 CRow 403457 15 LMatrix3f::CRow 15 LMatrix3f::CRow 2517 0 0 0 2074 0 2 2072 2073 0 0 0 0 0 0

2520 9 LMatrix4f 141313 9 LMatrix4f 9 LMatrix4f 0 0 0 1 2149 2220 0 70 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 3 2664 2665 2666 0 0 0 2 2521 2522 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2521 3 Row 403457 14 LMatrix4f::Row 14 LMatrix4f::Row 2520 0 0 0 2145 0 3 2142 2143 2144 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2522 4 CRow 403457 15 LMatrix4f::CRow 15 LMatrix4f::CRow 2520 0 0 0 2148 0 2 2146 2147 0 0 0 0 0 0

2523 9 LMatrix3d 141313 9 LMatrix3d 9 LMatrix3d 0 0 0 1 2228 2292 0 63 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 4 2667 2668 2669 2670 0 0 0 2 2524 2525 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2524 3 Row 403457 14 LMatrix3d::Row 14 LMatrix3d::Row 2523 0 0 0 2224 0 3 2221 2222 2223 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2525 4 CRow 403457 15 LMatrix3d::CRow 15 LMatrix3d::CRow 2523 0 0 0 2227 0 2 2225 2226 0 0 0 0 0 0

2526 9 LMatrix4d 141313 9 LMatrix4d 9 LMatrix4d 0 0 0 1 2300 2371 0 70 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 3 2671 2672 2673 0 0 0 2 2527 2528 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2527 3 Row 403457 14 LMatrix4d::Row 14 LMatrix4d::Row 2526 0 0 0 2296 0 3 2293 2294 2295 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2528 4 CRow 403457 15 LMatrix4d::CRow 15 LMatrix4d::CRow 2526 0 0 0 2299 0 2 2297 2298 0 0 0 0 0 0

2529 12 LQuaternionf 141313 12 LQuaternionf 12 LQuaternionf 0 0 0 1 2383 2430 0 46 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 0 0 1 0 2511 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2530 12 LQuaterniond 141313 12 LQuaterniond 12 LQuaterniond 0 0 0 1 2431 2478 0 46 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 0 0 1 0 2512 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2531 10 LRotationf 141313 10 LRotationf 10 LRotationf 0 0 0 1 2479 2483 0 3 2480 2481 2482 0 0 1 0 2529 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2532 10 LRotationd 141313 10 LRotationd 10 LRotationd 0 0 0 1 2484 2488 0 3 2485 2486 2487 0 0 1 0 2530 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2533 13 LOrientationf 141313 13 LOrientationf 13 LOrientationf 0 0 0 1 2489 2492 0 2 2490 2491 0 0 1 0 2529 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2534 13 LOrientationd 141313 13 LOrientationd 13 LOrientationd 0 0 0 1 2493 2496 0 2 2494 2495 0 0 1 0 2530 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2535 12 LVecBase2f * 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 2498 0 0 0 0 0 0 0 0 0 0

2536 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2537 0 0 0 0 0 0 0 0 0 0

2537 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2498 0 0 0 0 0 0 0 0 0 0

2538 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2539 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2540 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2541 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 2542 0 0 0 0 0 0 0 0 0 0

2542 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

2543 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2544 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2545 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2546 9 ostream * 8576 9 ostream * 9 ostream * 0 0 2547 0 0 0 0 0 0 0 0 0 0

2547 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2548 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2549 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 2548 0 0 0 0 0 0 0 0 0 0

2550 12 LVecBase2d * 8576 12 LVecBase2d * 12 LVecBase2d * 0 0 2499 0 0 0 0 0 0 0 0 0 0

2551 18 LVecBase2d const * 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2552 0 0 0 0 0 0 0 0 0 0

2552 16 LVecBase2d const 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2499 0 0 0 0 0 0 0 0 0 0

2553 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2554 11 LVector2f * 8576 11 LVector2f * 11 LVector2f * 0 0 2500 0 0 0 0 0 0 0 0 0 0

2555 17 LVector2f const * 8576 17 LVector2f const * 17 LVector2f const * 0 0 2556 0 0 0 0 0 0 0 0 0 0

2556 15 LVector2f const 8832 15 LVector2f const 15 LVector2f const 0 0 2500 0 0 0 0 0 0 0 0 0 0

2557 11 LVector2d * 8576 11 LVector2d * 11 LVector2d * 0 0 2501 0 0 0 0 0 0 0 0 0 0

2558 17 LVector2d const * 8576 17 LVector2d const * 17 LVector2d const * 0 0 2559 0 0 0 0 0 0 0 0 0 0

2559 15 LVector2d const 8832 15 LVector2d const 15 LVector2d const 0 0 2501 0 0 0 0 0 0 0 0 0 0

2560 10 LPoint2f * 8576 10 LPoint2f * 10 LPoint2f * 0 0 2502 0 0 0 0 0 0 0 0 0 0

2561 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 2562 0 0 0 0 0 0 0 0 0 0

2562 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 2502 0 0 0 0 0 0 0 0 0 0

2563 10 LPoint2d * 8576 10 LPoint2d * 10 LPoint2d * 0 0 2503 0 0 0 0 0 0 0 0 0 0

2564 16 LPoint2d const * 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2565 0 0 0 0 0 0 0 0 0 0

2565 14 LPoint2d const 8832 14 LPoint2d const 14 LPoint2d const 0 0 2503 0 0 0 0 0 0 0 0 0 0

2566 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 2504 0 0 0 0 0 0 0 0 0 0

2567 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2568 0 0 0 0 0 0 0 0 0 0

2568 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2504 0 0 0 0 0 0 0 0 0 0

2569 12 LVecBase3d * 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 2505 0 0 0 0 0 0 0 0 0 0

2570 18 LVecBase3d const * 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2571 0 0 0 0 0 0 0 0 0 0

2571 16 LVecBase3d const 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2505 0 0 0 0 0 0 0 0 0 0

2572 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 2507 0 0 0 0 0 0 0 0 0 0

2573 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 2574 0 0 0 0 0 0 0 0 0 0

2574 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 2507 0 0 0 0 0 0 0 0 0 0

2575 11 LVector3d * 8576 11 LVector3d * 11 LVector3d * 0 0 2508 0 0 0 0 0 0 0 0 0 0

2576 17 LVector3d const * 8576 17 LVector3d const * 17 LVector3d const * 0 0 2577 0 0 0 0 0 0 0 0 0 0

2577 15 LVector3d const 8832 15 LVector3d const 15 LVector3d const 0 0 2508 0 0 0 0 0 0 0 0 0 0

2578 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 2509 0 0 0 0 0 0 0 0 0 0

2579 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 2580 0 0 0 0 0 0 0 0 0 0

2580 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 2509 0 0 0 0 0 0 0 0 0 0

2581 10 LPoint3d * 8576 10 LPoint3d * 10 LPoint3d * 0 0 2510 0 0 0 0 0 0 0 0 0 0

2582 16 LPoint3d const * 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2583 0 0 0 0 0 0 0 0 0 0

2583 14 LPoint3d const 8832 14 LPoint3d const 14 LPoint3d const 0 0 2510 0 0 0 0 0 0 0 0 0 0

2584 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 2511 0 0 0 0 0 0 0 0 0 0

2585 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2586 0 0 0 0 0 0 0 0 0 0

2586 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2511 0 0 0 0 0 0 0 0 0 0

2587 12 LVecBase4d * 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 2512 0 0 0 0 0 0 0 0 0 0

2588 18 LVecBase4d const * 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2589 0 0 0 0 0 0 0 0 0 0

2589 16 LVecBase4d const 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2512 0 0 0 0 0 0 0 0 0 0

2590 11 LVector4f * 8576 11 LVector4f * 11 LVector4f * 0 0 2513 0 0 0 0 0 0 0 0 0 0

2591 17 LVector4f const * 8576 17 LVector4f const * 17 LVector4f const * 0 0 2592 0 0 0 0 0 0 0 0 0 0

2592 15 LVector4f const 8832 15 LVector4f const 15 LVector4f const 0 0 2513 0 0 0 0 0 0 0 0 0 0

2593 11 LVector4d * 8576 11 LVector4d * 11 LVector4d * 0 0 2514 0 0 0 0 0 0 0 0 0 0

2594 17 LVector4d const * 8576 17 LVector4d const * 17 LVector4d const * 0 0 2595 0 0 0 0 0 0 0 0 0 0

2595 15 LVector4d const 8832 15 LVector4d const 15 LVector4d const 0 0 2514 0 0 0 0 0 0 0 0 0 0

2596 10 LPoint4f * 8576 10 LPoint4f * 10 LPoint4f * 0 0 2515 0 0 0 0 0 0 0 0 0 0

2597 16 LPoint4f const * 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 2598 0 0 0 0 0 0 0 0 0 0

2598 14 LPoint4f const 8832 14 LPoint4f const 14 LPoint4f const 0 0 2515 0 0 0 0 0 0 0 0 0 0

2599 10 LPoint4d * 8576 10 LPoint4d * 10 LPoint4d * 0 0 2516 0 0 0 0 0 0 0 0 0 0

2600 16 LPoint4d const * 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2601 0 0 0 0 0 0 0 0 0 0

2601 14 LPoint4d const 8832 14 LPoint4d const 14 LPoint4d const 0 0 2516 0 0 0 0 0 0 0 0 0 0

2602 11 LMatrix3f * 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 2517 0 0 0 0 0 0 0 0 0 0

2603 17 LMatrix3f const * 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2604 0 0 0 0 0 0 0 0 0 0

2604 15 LMatrix3f const 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2517 0 0 0 0 0 0 0 0 0 0

2605 5 Row * 8576 16 LMatrix3f::Row * 16 LMatrix3f::Row * 0 0 2518 0 0 0 0 0 0 0 0 0 0

2606 6 CRow * 8576 17 LMatrix3f::CRow * 17 LMatrix3f::CRow * 0 0 2519 0 0 0 0 0 0 0 0 0 0

2607 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2608 0 0 0 0 0 0 0 0 0 0

2608 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2520 0 0 0 0 0 0 0 0 0 0

2609 11 Row const * 8576 22 LMatrix3f::Row const * 22 LMatrix3f::Row const * 0 0 2610 0 0 0 0 0 0 0 0 0 0

2610 9 Row const 8832 20 LMatrix3f::Row const 20 LMatrix3f::Row const 0 0 2518 0 0 0 0 0 0 0 0 0 0

2611 12 CRow const * 8576 23 LMatrix3f::CRow const * 23 LMatrix3f::CRow const * 0 0 2612 0 0 0 0 0 0 0 0 0 0

2612 10 CRow const 8832 21 LMatrix3f::CRow const 21 LMatrix3f::CRow const 0 0 2519 0 0 0 0 0 0 0 0 0 0

2613 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 2520 0 0 0 0 0 0 0 0 0 0

2614 5 Row * 8576 16 LMatrix4f::Row * 16 LMatrix4f::Row * 0 0 2521 0 0 0 0 0 0 0 0 0 0

2615 6 CRow * 8576 17 LMatrix4f::CRow * 17 LMatrix4f::CRow * 0 0 2522 0 0 0 0 0 0 0 0 0 0

2616 11 Row const * 8576 22 LMatrix4f::Row const * 22 LMatrix4f::Row const * 0 0 2617 0 0 0 0 0 0 0 0 0 0

2617 9 Row const 8832 20 LMatrix4f::Row const 20 LMatrix4f::Row const 0 0 2521 0 0 0 0 0 0 0 0 0 0

2618 12 CRow const * 8576 23 LMatrix4f::CRow const * 23 LMatrix4f::CRow const * 0 0 2619 0 0 0 0 0 0 0 0 0 0

2619 10 CRow const 8832 21 LMatrix4f::CRow const 21 LMatrix4f::CRow const 0 0 2522 0 0 0 0 0 0 0 0 0 0

2620 11 LMatrix3d * 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2523 0 0 0 0 0 0 0 0 0 0

2621 17 LMatrix3d const * 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2622 0 0 0 0 0 0 0 0 0 0

2622 15 LMatrix3d const 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2523 0 0 0 0 0 0 0 0 0 0

2623 5 Row * 8576 16 LMatrix3d::Row * 16 LMatrix3d::Row * 0 0 2524 0 0 0 0 0 0 0 0 0 0

2624 6 CRow * 8576 17 LMatrix3d::CRow * 17 LMatrix3d::CRow * 0 0 2525 0 0 0 0 0 0 0 0 0 0

2625 17 LMatrix4d const * 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2626 0 0 0 0 0 0 0 0 0 0

2626 15 LMatrix4d const 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2526 0 0 0 0 0 0 0 0 0 0

2627 11 Row const * 8576 22 LMatrix3d::Row const * 22 LMatrix3d::Row const * 0 0 2628 0 0 0 0 0 0 0 0 0 0

2628 9 Row const 8832 20 LMatrix3d::Row const 20 LMatrix3d::Row const 0 0 2524 0 0 0 0 0 0 0 0 0 0

2629 12 CRow const * 8576 23 LMatrix3d::CRow const * 23 LMatrix3d::CRow const * 0 0 2630 0 0 0 0 0 0 0 0 0 0

2630 10 CRow const 8832 21 LMatrix3d::CRow const 21 LMatrix3d::CRow const 0 0 2525 0 0 0 0 0 0 0 0 0 0

2631 11 LMatrix4d * 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2526 0 0 0 0 0 0 0 0 0 0

2632 5 Row * 8576 16 LMatrix4d::Row * 16 LMatrix4d::Row * 0 0 2527 0 0 0 0 0 0 0 0 0 0

2633 6 CRow * 8576 17 LMatrix4d::CRow * 17 LMatrix4d::CRow * 0 0 2528 0 0 0 0 0 0 0 0 0 0

2634 11 Row const * 8576 22 LMatrix4d::Row const * 22 LMatrix4d::Row const * 0 0 2635 0 0 0 0 0 0 0 0 0 0

2635 9 Row const 8832 20 LMatrix4d::Row const 20 LMatrix4d::Row const 0 0 2527 0 0 0 0 0 0 0 0 0 0

2636 12 CRow const * 8576 23 LMatrix4d::CRow const * 23 LMatrix4d::CRow const * 0 0 2637 0 0 0 0 0 0 0 0 0 0

2637 10 CRow const 8832 21 LMatrix4d::CRow const 21 LMatrix4d::CRow const 0 0 2528 0 0 0 0 0 0 0 0 0 0

2638 14 LQuaternionf * 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 2529 0 0 0 0 0 0 0 0 0 0

2639 20 LQuaternionf const * 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 2640 0 0 0 0 0 0 0 0 0 0

2640 18 LQuaternionf const 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 2529 0 0 0 0 0 0 0 0 0 0

2641 14 LQuaterniond * 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 2530 0 0 0 0 0 0 0 0 0 0

2642 20 LQuaterniond const * 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2643 0 0 0 0 0 0 0 0 0 0

2643 18 LQuaterniond const 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2530 0 0 0 0 0 0 0 0 0 0

2644 12 LRotationf * 8576 12 LRotationf * 12 LRotationf * 0 0 2531 0 0 0 0 0 0 0 0 0 0

2645 18 LRotationf const * 8576 18 LRotationf const * 18 LRotationf const * 0 0 2646 0 0 0 0 0 0 0 0 0 0

2646 16 LRotationf const 8832 16 LRotationf const 16 LRotationf const 0 0 2531 0 0 0 0 0 0 0 0 0 0

2647 12 LRotationd * 8576 12 LRotationd * 12 LRotationd * 0 0 2532 0 0 0 0 0 0 0 0 0 0

2648 18 LRotationd const * 8576 18 LRotationd const * 18 LRotationd const * 0 0 2649 0 0 0 0 0 0 0 0 0 0

2649 16 LRotationd const 8832 16 LRotationd const 16 LRotationd const 0 0 2532 0 0 0 0 0 0 0 0 0 0

2650 15 LOrientationf * 8576 15 LOrientationf * 15 LOrientationf * 0 0 2533 0 0 0 0 0 0 0 0 0 0

2651 21 LOrientationf const * 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 2652 0 0 0 0 0 0 0 0 0 0

2652 19 LOrientationf const 8832 19 LOrientationf const 19 LOrientationf const 0 0 2533 0 0 0 0 0 0 0 0 0 0

2653 15 LOrientationd * 8576 15 LOrientationd * 15 LOrientationd * 0 0 2534 0 0 0 0 0 0 0 0 0 0

2654 21 LOrientationd const * 8576 21 LOrientationd const * 21 LOrientationd const * 0 0 2655 0 0 0 0 0 0 0 0 0 0

2655 19 LOrientationd const 8832 19 LOrientationd const 19 LOrientationd const 0 0 2534 0 0 0 0 0 0 0 0 0 0

2656 10 Datagram * 8576 10 Datagram * 10 Datagram * 0 0 2657 0 0 0 0 0 0 0 0 0 0

2657 8 Datagram 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

2658 18 DatagramIterator * 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2659 0 0 0 0 0 0 0 0 0 0

2659 16 DatagramIterator 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

0
0
14
2660 0 645 8 get_rows 4 size 7 get_row 
2661 0 645 8 get_cols 4 size 7 get_col 
2662 0 645 9 get_col2s 4 size 8 get_col2 
2663 0 645 9 get_row2s 4 size 8 get_row2 
2664 0 722 8 get_rows 4 size 7 get_row 
2665 0 722 8 get_cols 4 size 7 get_col 
2666 0 722 9 get_row3s 4 size 8 get_row3 
2667 0 804 8 get_rows 4 size 7 get_row 
2668 0 804 8 get_cols 4 size 7 get_col 
2669 0 804 9 get_col2s 4 size 8 get_col2 
2670 0 804 9 get_row2s 4 size 8 get_row2 
2671 0 879 8 get_rows 4 size 7 get_row 
2672 0 879 8 get_cols 4 size 7 get_col 
2673 0 879 9 get_row3s 4 size 8 get_row3 
