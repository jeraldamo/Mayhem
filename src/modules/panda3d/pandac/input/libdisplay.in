1304331953
2 2
10 libdisplay 4 O9cY 5 panda 
508
529 12 WindowHandle 4 1037 26 WindowHandle::WindowHandle 0 2 1 2 943
// Filename: windowHandle.I
// Created by:  drose (30Sep09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline WindowHandle::WindowHandle(WindowHandle::OSHandle *os_handle);
inline WindowHandle::WindowHandle(WindowHandle const &copy);

530 13 get_os_handle 4 1037 27 WindowHandle::get_os_handle 0 1 3 321
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_os_handle
//       Access: Published
//  Description: Returns the OS-specific handle stored internally to
//               the WindowHandle wrapper.
////////////////////////////////////////////////////////////////////
71
inline WindowHandle::OSHandle *WindowHandle::get_os_handle(void) const;

531 13 set_os_handle 4 1037 27 WindowHandle::set_os_handle 0 1 4 321
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::set_os_handle
//       Access: Published
//  Description: Changes the OS-specific handle stored internally to
//               the WindowHandle wrapper.
////////////////////////////////////////////////////////////////////
75
inline void WindowHandle::set_os_handle(WindowHandle::OSHandle *os_handle);

532 20 send_windows_message 4 1037 34 WindowHandle::send_windows_message 0 1 5 566
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::send_windows_message
//       Access: Published
//  Description: Call this method on a parent WindowHandle to deliver
//               a Windows message to the current child window, if any.
//               This is used in the web plugin system to deliver
//               button events detected directly by the browser system
//               into Panda, which is particularly necessary on Vista.
////////////////////////////////////////////////////////////////////
82
void WindowHandle::send_windows_message(unsigned int msg, int wparam, int lparam);

533 14 get_int_handle 4 1037 28 WindowHandle::get_int_handle 0 1 6 397
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_int_handle
//       Access: Published
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
////////////////////////////////////////////////////////////////////
54
unsigned int WindowHandle::get_int_handle(void) const;

534 6 output 4 1037 20 WindowHandle::output 0 1 7 220
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void WindowHandle::output(ostream &out) const;

535 14 get_int_handle 4 1039 38 WindowHandle::OSHandle::get_int_handle 0 1 9 416
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::get_int_handle
//       Access: Published, Virtual
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
////////////////////////////////////////////////////////////////////
72
virtual unsigned int WindowHandle::OSHandle::get_int_handle(void) const;

536 6 output 4 1039 30 WindowHandle::OSHandle::output 0 1 10 239
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
virtual void WindowHandle::OSHandle::output(ostream &out) const;

537 14 get_class_type 4 1039 38 WindowHandle::OSHandle::get_class_type 0 1 11 0
63
static TypeHandle WindowHandle::OSHandle::get_class_type(void);

538 14 get_class_type 4 1037 28 WindowHandle::get_class_type 0 1 8 0
53
static TypeHandle WindowHandle::get_class_type(void);

539 16 WindowProperties 4 1040 34 WindowProperties::WindowProperties 0 2 12 13 955
// Filename: windowProperties.I
// Created by:  drose (13Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
114
WindowProperties::WindowProperties(void);
inline WindowProperties::WindowProperties(WindowProperties const &copy);

540 10 operator = 4 1040 28 WindowProperties::operator = 0 1 14 241
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void WindowProperties::operator =(WindowProperties const &copy);

541 17 ~WindowProperties 4 1040 35 WindowProperties::~WindowProperties 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline WindowProperties::~WindowProperties(void);

542 21 get_config_properties 4 1040 39 WindowProperties::get_config_properties 0 1 15 395
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_config_properties
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
70
static WindowProperties WindowProperties::get_config_properties(void);

543 11 get_default 4 1040 29 WindowProperties::get_default 0 1 16 457
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties.  If
//               set_default() has been called, this returns that
//               WindowProperties structure; otherwise, this returns
//               get_config_properties().
////////////////////////////////////////////////////////////////////
60
static WindowProperties WindowProperties::get_default(void);

544 11 set_default 4 1040 29 WindowProperties::set_default 0 1 17 589
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_default
//       Access: Published, Static
//  Description: Replaces the "default" WindowProperties with the
//               specified structure.  The specified WindowProperties
//               will be returned by future calls to get_default(),
//               until clear_default() is called.
//
//               Note that this completely replaces the default
//               properties; it is not additive.
////////////////////////////////////////////////////////////////////
86
static void WindowProperties::set_default(WindowProperties const &default_properties);

545 13 clear_default 4 1040 31 WindowProperties::clear_default 0 1 18 346
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties to whatever
//               is specified in the user's config file.
////////////////////////////////////////////////////////////////////
50
static void WindowProperties::clear_default(void);

546 4 size 4 1040 22 WindowProperties::size 0 1 19 386
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::size
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with only the
//               size specified.  The size is the only property that
//               matters to buffers.
////////////////////////////////////////////////////////////////////
71
static WindowProperties WindowProperties::size(int x_size, int y_size);

547 11 operator == 4 1040 29 WindowProperties::operator == 0 1 20 229
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator == 
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
bool WindowProperties::operator ==(WindowProperties const &other) const;

548 11 operator != 4 1040 29 WindowProperties::operator != 0 1 21 228
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
inline bool WindowProperties::operator !=(WindowProperties const &other) const;

549 5 clear 4 1040 23 WindowProperties::clear 0 1 22 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
35
void WindowProperties::clear(void);

550 16 is_any_specified 4 1040 34 WindowProperties::is_any_specified 0 1 23 319
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool WindowProperties::is_any_specified(void) const;

551 10 set_origin 4 1040 28 WindowProperties::set_origin 0 1 24 514
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
////////////////////////////////////////////////////////////////////
69
inline void WindowProperties::set_origin(int x_origin, int y_origin);

552 12 get_x_origin 4 1040 30 WindowProperties::get_x_origin 0 1 25 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_x_origin(void) const;

553 12 get_y_origin 4 1040 30 WindowProperties::get_y_origin 0 1 26 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_y_origin(void) const;

554 10 has_origin 4 1040 28 WindowProperties::has_origin 0 1 27 315
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
53
inline bool WindowProperties::has_origin(void) const;

555 12 clear_origin 4 1040 30 WindowProperties::clear_origin 0 1 28 283
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
////////////////////////////////////////////////////////////////////
49
inline void WindowProperties::clear_origin(void);

556 8 set_size 4 1040 26 WindowProperties::set_size 0 1 29 393
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////
63
inline void WindowProperties::set_size(int x_size, int y_size);

557 10 get_x_size 4 1040 28 WindowProperties::get_x_size 0 1 30 401
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_x_size(void) const;

558 10 get_y_size 4 1040 28 WindowProperties::get_y_size 0 1 31 402
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_y_size(void) const;

559 8 has_size 4 1040 26 WindowProperties::has_size 0 1 32 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_size(void) const;

560 10 clear_size 4 1040 28 WindowProperties::clear_size 0 1 33 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_size(void);

561 14 has_mouse_mode 4 1040 32 WindowProperties::has_mouse_mode 0 1 34 232
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_mouse_mode
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_mouse_mode(void) const;

562 14 set_mouse_mode 4 1040 32 WindowProperties::set_mouse_mode 0 1 35 1074
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_mouse_mode
//       Access: Published
//  Description: Specifies the mode in which the window is to operate
//               its mouse pointer.  The default is M_absolute, which
//               is the normal mode in which a mouse pointer operates;
//               but you can also set M_relative, which is
//               particularly useful for FPS-style mouse movements
//               where you have hidden the mouse pointer and are are
//               more interested in how fast the mouse is moving,
//               rather than precisely where the pointer is hovering.
//
//               This has no effect on Windows, which does not
//               have this concept; but is important to do on OSX
//               and Unix/X11 to properly enable a smooth FPS-style
//               mouselook mode.  On Unix/X11, this requires the
//               Xxf86dga extension to be available.
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_mouse_mode(WindowProperties::MouseMode mode);

563 14 get_mouse_mode 4 1040 32 WindowProperties::get_mouse_mode 0 1 36 253
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_mouse_mode
//       Access: Published
//  Description: See set_mouse_mode().
////////////////////////////////////////////////////////////////////
80
inline WindowProperties::MouseMode WindowProperties::get_mouse_mode(void) const;

564 16 clear_mouse_mode 4 1040 34 WindowProperties::clear_mouse_mode 0 1 37 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_mouse_mode
//       Access: Published
//  Description: Removes the mouse_mode specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_mouse_mode(void);

565 9 set_title 4 1040 27 WindowProperties::set_title 0 1 38 302
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
////////////////////////////////////////////////////////////////////
75
inline void WindowProperties::set_title(basic_string< char > const &title);

566 9 get_title 4 1040 27 WindowProperties::get_title 0 1 39 254
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &WindowProperties::get_title(void) const;

567 9 has_title 4 1040 27 WindowProperties::has_title 0 1 40 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool WindowProperties::has_title(void) const;

568 11 clear_title 4 1040 29 WindowProperties::clear_title 0 1 41 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
////////////////////////////////////////////////////////////////////
48
inline void WindowProperties::clear_title(void);

569 15 set_undecorated 4 1040 33 WindowProperties::set_undecorated 0 1 42 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
////////////////////////////////////////////////////////////////////
64
inline void WindowProperties::set_undecorated(bool undecorated);

570 15 get_undecorated 4 1040 33 WindowProperties::get_undecorated 0 1 43 274
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::get_undecorated(void) const;

571 15 has_undecorated 4 1040 33 WindowProperties::has_undecorated 0 1 44 286
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::has_undecorated(void) const;

572 17 clear_undecorated 4 1040 35 WindowProperties::clear_undecorated 0 1 45 293
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
////////////////////////////////////////////////////////////////////
54
inline void WindowProperties::clear_undecorated(void);

573 14 set_fixed_size 4 1040 32 WindowProperties::set_fixed_size 0 1 46 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fixed_size(bool fixed_size);

574 14 get_fixed_size 4 1040 32 WindowProperties::get_fixed_size 0 1 47 323
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fixed_size(void) const;

575 14 has_fixed_size 4 1040 32 WindowProperties::has_fixed_size 0 1 48 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fixed_size(void) const;

576 16 clear_fixed_size 4 1040 34 WindowProperties::clear_fixed_size 0 1 49 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fixed_size(void);

577 14 set_fullscreen 4 1040 32 WindowProperties::set_fullscreen 0 1 50 383
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fullscreen(bool fullscreen);

578 14 get_fullscreen 4 1040 32 WindowProperties::get_fullscreen 0 1 51 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fullscreen(void) const;

579 14 has_fullscreen 4 1040 32 WindowProperties::has_fullscreen 0 1 52 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fullscreen(void) const;

580 16 clear_fullscreen 4 1040 34 WindowProperties::clear_fullscreen 0 1 53 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fullscreen(void);

581 14 set_foreground 4 1040 32 WindowProperties::set_foreground 0 1 54 372
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_foreground(bool foreground);

582 14 get_foreground 4 1040 32 WindowProperties::get_foreground 0 1 55 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_foreground(void) const;

583 14 has_foreground 4 1040 32 WindowProperties::has_foreground 0 1 56 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_foreground(void) const;

584 16 clear_foreground 4 1040 34 WindowProperties::clear_foreground 0 1 57 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_foreground(void);

585 13 set_minimized 4 1040 31 WindowProperties::set_minimized 0 1 58 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
////////////////////////////////////////////////////////////////////
60
inline void WindowProperties::set_minimized(bool minimized);

586 13 get_minimized 4 1040 31 WindowProperties::get_minimized 0 1 59 271
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::get_minimized(void) const;

587 13 has_minimized 4 1040 31 WindowProperties::has_minimized 0 1 60 282
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::has_minimized(void) const;

588 15 clear_minimized 4 1040 33 WindowProperties::clear_minimized 0 1 61 289
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
////////////////////////////////////////////////////////////////////
52
inline void WindowProperties::clear_minimized(void);

589 12 set_raw_mice 4 1040 30 WindowProperties::set_raw_mice 0 1 62 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_raw_mice
//       Access: Published
//  Description: Specifies whether the window should read the raw
//               mouse devices.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::set_raw_mice(bool raw_mice);

590 12 get_raw_mice 4 1040 30 WindowProperties::get_raw_mice 0 1 63 276
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_raw_mice
//       Access: Published
//  Description: Returns true if the window reads the raw mice.
////////////////////////////////////////////////////////////////////
55
inline bool WindowProperties::get_raw_mice(void) const;

591 12 has_raw_mice 4 1040 30 WindowProperties::has_raw_mice 0 1 64 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_raw_mice
//       Access: Published
//  Description: Returns true if set_raw_mice() has been specified.
////////////////////////////////////////////////////////////////////
55
inline bool WindowProperties::has_raw_mice(void) const;

592 14 clear_raw_mice 4 1040 32 WindowProperties::clear_raw_mice 0 1 65 287
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_raw_mice
//       Access: Published
//  Description: Removes the raw_mice specification from the properties.
////////////////////////////////////////////////////////////////////
51
inline void WindowProperties::clear_raw_mice(void);

593 8 set_open 4 1040 26 WindowProperties::set_open 0 1 66 417
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::set_open(bool open);

594 8 get_open 4 1040 26 WindowProperties::get_open 0 1 67 261
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::get_open(void) const;

595 8 has_open 4 1040 26 WindowProperties::has_open 0 1 68 272
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_open(void) const;

596 10 clear_open 4 1040 28 WindowProperties::clear_open 0 1 69 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_open(void);

597 17 set_cursor_hidden 4 1040 35 WindowProperties::set_cursor_hidden 0 1 70 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
////////////////////////////////////////////////////////////////////
68
inline void WindowProperties::set_cursor_hidden(bool cursor_hidden);

598 17 get_cursor_hidden 4 1040 35 WindowProperties::get_cursor_hidden 0 1 71 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::get_cursor_hidden(void) const;

599 17 has_cursor_hidden 4 1040 35 WindowProperties::has_cursor_hidden 0 1 72 290
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_cursor_hidden(void) const;

600 19 clear_cursor_hidden 4 1040 37 WindowProperties::clear_cursor_hidden 0 1 73 297
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_cursor_hidden(void);

601 17 set_icon_filename 4 1040 35 WindowProperties::set_icon_filename 0 1 74 344
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_icon_filename(Filename const &icon_filename);

602 17 get_icon_filename 4 1040 35 WindowProperties::get_icon_filename 0 1 75 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
////////////////////////////////////////////////////////////////////
71
inline Filename const &WindowProperties::get_icon_filename(void) const;

603 17 has_icon_filename 4 1040 35 WindowProperties::has_icon_filename 0 1 76 307
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_icon_filename(void) const;

604 19 clear_icon_filename 4 1040 37 WindowProperties::clear_icon_filename 0 1 77 314
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_icon_filename(void);

605 19 set_cursor_filename 4 1040 37 WindowProperties::set_cursor_filename 0 1 78 391
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
////////////////////////////////////////////////////////////////////
83
inline void WindowProperties::set_cursor_filename(Filename const &cursor_filename);

606 19 get_cursor_filename 4 1040 37 WindowProperties::get_cursor_filename 0 1 79 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
////////////////////////////////////////////////////////////////////
73
inline Filename const &WindowProperties::get_cursor_filename(void) const;

607 19 has_cursor_filename 4 1040 37 WindowProperties::has_cursor_filename 0 1 80 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
62
inline bool WindowProperties::has_cursor_filename(void) const;

608 21 clear_cursor_filename 4 1040 39 WindowProperties::clear_cursor_filename 0 1 81 318
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::clear_cursor_filename(void);

609 11 set_z_order 4 1040 29 WindowProperties::set_z_order 0 1 82 609
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
////////////////////////////////////////////////////////////////////
76
inline void WindowProperties::set_z_order(WindowProperties::ZOrder z_order);

610 11 get_z_order 4 1040 29 WindowProperties::get_z_order 0 1 83 258
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
////////////////////////////////////////////////////////////////////
74
inline WindowProperties::ZOrder WindowProperties::get_z_order(void) const;

611 11 has_z_order 4 1040 29 WindowProperties::has_z_order 0 1 84 317
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool WindowProperties::has_z_order(void) const;

612 13 clear_z_order 4 1040 31 WindowProperties::clear_z_order 0 1 85 285
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::clear_z_order(void);

613 17 set_parent_window 4 1040 35 WindowProperties::set_parent_window 0 3 86 87 88 2086
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.
//
//               This is a deprecated variant on this method, and
//               exists only for backward compatibility.  Future code
//               should use the version of set_parent_window() below
//               that receives a WindowHandle object; that interface
//               is much more robust.
//
//               In this deprecated variant, the actual value for
//               "parent" is platform-specific.  On Windows, it is the
//               HWND of the parent window, cast to an unsigned
//               integer.  On X11, it is the Window pointer of the
//               parent window, similarly cast.  On OSX, this is the
//               NSWindow pointer, which doesn't appear to work at
//               all.
////////////////////////////////////////////////////////////////////
156
void WindowProperties::set_parent_window(unsigned int parent);
inline void WindowProperties::set_parent_window(WindowHandle *parent_window = ((void *)(0)));

614 17 get_parent_window 4 1040 35 WindowProperties::get_parent_window 0 1 89 340
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_parent_window
//       Access: Published
//  Description: Returns the parent window specification, or NULL if
//               there is no parent window specified.
////////////////////////////////////////////////////////////////////
69
inline WindowHandle *WindowProperties::get_parent_window(void) const;

615 17 has_parent_window 4 1040 35 WindowProperties::has_parent_window 0 1 90 296
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_parent_window
//       Access: Published
//  Description: Checks the S_parent_window specification from the properties.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_parent_window(void) const;

616 19 clear_parent_window 4 1040 37 WindowProperties::clear_parent_window 0 1 91 299
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_parent_window
//       Access: Published
//  Description: Removes the S_parent_window specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_parent_window(void);

617 14 add_properties 4 1040 32 WindowProperties::add_properties 0 1 92 376
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
69
void WindowProperties::add_properties(WindowProperties const &other);

618 6 output 4 1040 24 WindowProperties::output 0 1 93 368
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
50
void WindowProperties::output(ostream &out) const;

619 19 ~DisplayInformation 4 1043 39 DisplayInformation::~DisplayInformation 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
DisplayInformation::~DisplayInformation(void);

620 18 DisplayInformation 4 1043 38 DisplayInformation::DisplayInformation 0 1 94 231
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
DisplayInformation::DisplayInformation(void);

621 17 get_display_state 4 1043 37 DisplayInformation::get_display_state 0 1 95 220
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
int DisplayInformation::get_display_state(void);

622 24 get_maximum_window_width 4 1043 44 DisplayInformation::get_maximum_window_width 0 1 96 244
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
int DisplayInformation::get_maximum_window_width(void);

623 25 get_maximum_window_height 4 1043 45 DisplayInformation::get_maximum_window_height 0 1 97 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
int DisplayInformation::get_maximum_window_height(void);

624 25 get_window_bits_per_pixel 4 1043 45 DisplayInformation::get_window_bits_per_pixel 0 1 98 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_window_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
int DisplayInformation::get_window_bits_per_pixel(void);

625 23 get_total_display_modes 4 1043 43 DisplayInformation::get_total_display_modes 0 1 99 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_total_display_modes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
int DisplayInformation::get_total_display_modes(void);

626 22 get_display_mode_width 4 1043 42 DisplayInformation::get_display_mode_width 0 1 100 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
int DisplayInformation::get_display_mode_width(int display_index);

627 23 get_display_mode_height 4 1043 43 DisplayInformation::get_display_mode_height 0 1 101 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
int DisplayInformation::get_display_mode_height(int display_index);

628 31 get_display_mode_bits_per_pixel 4 1043 51 DisplayInformation::get_display_mode_bits_per_pixel 0 1 102 251
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
int DisplayInformation::get_display_mode_bits_per_pixel(int display_index);

629 29 get_display_mode_refresh_rate 4 1043 49 DisplayInformation::get_display_mode_refresh_rate 0 1 103 249
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_refresh_rate
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
int DisplayInformation::get_display_mode_refresh_rate(int display_index);

630 32 get_display_mode_fullscreen_only 4 1043 52 DisplayInformation::get_display_mode_fullscreen_only 0 1 104 252
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_fullscreen_only
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
int DisplayInformation::get_display_mode_fullscreen_only(int display_index);

631 16 get_shader_model 4 1043 36 DisplayInformation::get_shader_model 0 1 105 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_shader_model
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_shader_model(void);

632 16 get_video_memory 4 1043 36 DisplayInformation::get_video_memory 0 1 106 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_video_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_video_memory(void);

633 18 get_texture_memory 4 1043 38 DisplayInformation::get_texture_memory 0 1 107 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_texture_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_texture_memory(void);

634 25 update_memory_information 4 1043 45 DisplayInformation::update_memory_information 0 1 108 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_memory_information
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void DisplayInformation::update_memory_information(void);

635 19 get_physical_memory 4 1043 39 DisplayInformation::get_physical_memory 0 1 109 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_physical_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
unsigned long long int DisplayInformation::get_physical_memory(void);

636 29 get_available_physical_memory 4 1043 49 DisplayInformation::get_available_physical_memory 0 1 110 249
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_physical_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
79
unsigned long long int DisplayInformation::get_available_physical_memory(void);

637 18 get_page_file_size 4 1043 38 DisplayInformation::get_page_file_size 0 1 111 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
unsigned long long int DisplayInformation::get_page_file_size(void);

638 28 get_available_page_file_size 4 1043 48 DisplayInformation::get_available_page_file_size 0 1 112 248
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_page_file_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
unsigned long long int DisplayInformation::get_available_page_file_size(void);

639 26 get_process_virtual_memory 4 1043 46 DisplayInformation::get_process_virtual_memory 0 1 113 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::_process_virtual_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
unsigned long long int DisplayInformation::get_process_virtual_memory(void);

640 36 get_available_process_virtual_memory 4 1043 56 DisplayInformation::get_available_process_virtual_memory 0 1 114 256
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_process_virtual_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
86
unsigned long long int DisplayInformation::get_available_process_virtual_memory(void);

641 15 get_memory_load 4 1043 35 DisplayInformation::get_memory_load 0 1 115 235
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_memory_load
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
int DisplayInformation::get_memory_load(void);

642 20 get_page_fault_count 4 1043 40 DisplayInformation::get_page_fault_count 0 1 116 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_fault_count
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
unsigned long long int DisplayInformation::get_page_fault_count(void);

643 18 get_process_memory 4 1043 38 DisplayInformation::get_process_memory 0 1 117 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_process_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
unsigned long long int DisplayInformation::get_process_memory(void);

644 23 get_peak_process_memory 4 1043 43 DisplayInformation::get_peak_process_memory 0 1 118 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_process_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
unsigned long long int DisplayInformation::get_peak_process_memory(void);

645 19 get_page_file_usage 4 1043 39 DisplayInformation::get_page_file_usage 0 1 119 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_usage
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
unsigned long long int DisplayInformation::get_page_file_usage(void);

646 24 get_peak_page_file_usage 4 1043 44 DisplayInformation::get_peak_page_file_usage 0 1 120 244
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_page_file_usage
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
unsigned long long int DisplayInformation::get_peak_page_file_usage(void);

647 13 get_vendor_id 4 1043 33 DisplayInformation::get_vendor_id 0 1 121 233
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_vendor_id
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
int DisplayInformation::get_vendor_id(void);

648 13 get_device_id 4 1043 33 DisplayInformation::get_device_id 0 1 122 233
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_device_id
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
int DisplayInformation::get_device_id(void);

649 18 get_driver_product 4 1043 38 DisplayInformation::get_driver_product 0 1 123 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_product
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_driver_product(void);

650 18 get_driver_version 4 1043 38 DisplayInformation::get_driver_version 0 1 124 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_driver_version(void);

651 22 get_driver_sub_version 4 1043 42 DisplayInformation::get_driver_sub_version 0 1 125 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_sub_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
int DisplayInformation::get_driver_sub_version(void);

652 16 get_driver_build 4 1043 36 DisplayInformation::get_driver_build 0 1 126 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_build
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_driver_build(void);

653 21 get_driver_date_month 4 1043 41 DisplayInformation::get_driver_date_month 0 1 127 241
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_month
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
int DisplayInformation::get_driver_date_month(void);

654 19 get_driver_date_day 4 1043 39 DisplayInformation::get_driver_date_day 0 1 128 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_day
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
int DisplayInformation::get_driver_date_day(void);

655 20 get_driver_date_year 4 1043 40 DisplayInformation::get_driver_date_year 0 1 129 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_year
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_driver_date_year(void);

656 18 get_cpu_id_version 4 1043 38 DisplayInformation::get_cpu_id_version 0 1 130 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_cpu_id_version(void);

657 15 get_cpu_id_size 4 1043 35 DisplayInformation::get_cpu_id_size 0 1 131 312
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_size
//       Access: Published
//  Description: Returns the number of 32-bit values for cpu id 
//               binary data.
////////////////////////////////////////////////////////////////////
46
int DisplayInformation::get_cpu_id_size(void);

658 15 get_cpu_id_data 4 1043 35 DisplayInformation::get_cpu_id_data 0 1 132 309
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_data
//       Access: Published
//  Description: Returns part of cpu id binary data based on the 
//               index.  
////////////////////////////////////////////////////////////////////
60
unsigned int DisplayInformation::get_cpu_id_data(int index);

659 21 get_cpu_vendor_string 4 1043 41 DisplayInformation::get_cpu_vendor_string 0 1 133 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_vendor_string
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
60
char const *DisplayInformation::get_cpu_vendor_string(void);

660 20 get_cpu_brand_string 4 1043 40 DisplayInformation::get_cpu_brand_string 0 1 134 241
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_string
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
59
char const *DisplayInformation::get_cpu_brand_string(void);

661 27 get_cpu_version_information 4 1043 47 DisplayInformation::get_cpu_version_information 0 1 135 248
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_version_information
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
67
unsigned int DisplayInformation::get_cpu_version_information(void);

662 19 get_cpu_brand_index 4 1043 39 DisplayInformation::get_cpu_brand_index 0 1 136 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_index
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
59
unsigned int DisplayInformation::get_cpu_brand_index(void);

663 17 get_cpu_frequency 4 1043 37 DisplayInformation::get_cpu_frequency 0 1 137 237
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
unsigned long long int DisplayInformation::get_cpu_frequency(void);

664 12 get_cpu_time 4 1043 32 DisplayInformation::get_cpu_time 0 1 138 232
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_time
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
unsigned long long int DisplayInformation::get_cpu_time(void);

665 25 get_maximum_cpu_frequency 4 1043 45 DisplayInformation::get_maximum_cpu_frequency 0 1 139 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
unsigned long long int DisplayInformation::get_maximum_cpu_frequency(void);

666 25 get_current_cpu_frequency 4 1043 45 DisplayInformation::get_current_cpu_frequency 0 1 140 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_current_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
unsigned long long int DisplayInformation::get_current_cpu_frequency(void);

667 20 update_cpu_frequency 4 1043 40 DisplayInformation::update_cpu_frequency 0 1 141 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
void DisplayInformation::update_cpu_frequency(int processor_number);

668 17 get_num_cpu_cores 4 1043 37 DisplayInformation::get_num_cpu_cores 0 1 142 405
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_cpu_cores
//       Access: Published
//  Description: Returns the number of individual CPU cores in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts once here.
////////////////////////////////////////////////////////////////////
48
int DisplayInformation::get_num_cpu_cores(void);

669 20 get_num_logical_cpus 4 1043 40 DisplayInformation::get_num_logical_cpus 0 1 143 411
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_logical_cpus
//       Access: Published
//  Description: Returns the number of logical CPU's in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts as two or more here.
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_num_logical_cpus(void);

670 20 get_os_version_major 4 1043 40 DisplayInformation::get_os_version_major 0 1 144 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_major
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_major(void);

671 20 get_os_version_minor 4 1043 40 DisplayInformation::get_os_version_minor 0 1 145 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_minor
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_minor(void);

672 20 get_os_version_build 4 1043 40 DisplayInformation::get_os_version_build 0 1 146 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_build
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_build(void);

673 18 get_os_platform_id 4 1043 38 DisplayInformation::get_os_platform_id 0 1 147 260
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_platform_id
//       Access: Published
//  Description: Returns -1 if not set.
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_os_platform_id(void);

674 15 ~DrawableRegion 4 1045 31 DrawableRegion::~DrawableRegion 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual DrawableRegion::~DrawableRegion(void);

675 22 set_clear_color_active 4 1045 38 DrawableRegion::set_clear_color_active 0 1 148 523
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_color_active(bool clear_color_active);

676 22 get_clear_color_active 4 1045 38 DrawableRegion::get_clear_color_active 0 1 149 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_color_active(void) const;

677 22 set_clear_depth_active 4 1045 38 DrawableRegion::set_clear_depth_active 0 1 150 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_depth_active(bool clear_depth_active);

678 22 get_clear_depth_active 4 1045 38 DrawableRegion::get_clear_depth_active 0 1 151 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_depth_active(void) const;

679 24 set_clear_stencil_active 4 1045 40 DrawableRegion::set_clear_stencil_active 0 1 152 531
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the stencil
//               buffer should be cleared every frame.  If this is
//               true, the stencil buffer will be cleared to the value
//               indicated by set_clear_stencil(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
80
inline void DrawableRegion::set_clear_stencil_active(bool clear_stencil_active);

680 24 get_clear_stencil_active 4 1045 40 DrawableRegion::get_clear_stencil_active 0 1 153 417
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_stencil_active().
////////////////////////////////////////////////////////////////////
65
inline bool DrawableRegion::get_clear_stencil_active(void) const;

681 15 set_clear_color 4 1045 31 DrawableRegion::set_clear_color 0 1 154 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
69
inline void DrawableRegion::set_clear_color(LVecBase4f const &color);

682 15 get_clear_color 4 1045 31 DrawableRegion::get_clear_color 0 1 155 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
69
inline LVecBase4f const &DrawableRegion::get_clear_color(void) const;

683 15 set_clear_depth 4 1045 31 DrawableRegion::set_clear_depth 0 1 156 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
57
inline void DrawableRegion::set_clear_depth(float depth);

684 15 get_clear_depth 4 1045 31 DrawableRegion::get_clear_depth 0 1 157 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
57
inline float DrawableRegion::get_clear_depth(void) const;

685 17 set_clear_stencil 4 1045 33 DrawableRegion::set_clear_stencil 0 1 158 543
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil
//       Access: Published
//  Description: Sets the clear stencil to the indicated value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
68
inline void DrawableRegion::set_clear_stencil(unsigned int stencil);

686 17 get_clear_stencil 4 1045 33 DrawableRegion::get_clear_stencil 0 1 159 539
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil
//       Access: Published
//  Description: Returns the current clear stencil value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_stencil_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
66
inline unsigned int DrawableRegion::get_clear_stencil(void) const;

687 16 set_clear_active 4 1045 32 DrawableRegion::set_clear_active 0 1 160 285
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_active
//       Access: Published, Virtual
//  Description: Sets the clear-active flag for any bitplane.
////////////////////////////////////////////////////////////////////
76
virtual void DrawableRegion::set_clear_active(int n, bool clear_aux_active);

688 16 get_clear_active 4 1045 32 DrawableRegion::get_clear_active 0 1 161 285
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_active
//       Access: Published, Virtual
//  Description: Gets the clear-active flag for any bitplane.
////////////////////////////////////////////////////////////////////
59
virtual bool DrawableRegion::get_clear_active(int n) const;

689 15 set_clear_value 4 1045 31 DrawableRegion::set_clear_value 0 1 162 278
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_value
//       Access: Published, Virtual
//  Description: Sets the clear value for any bitplane.
////////////////////////////////////////////////////////////////////
83
virtual void DrawableRegion::set_clear_value(int n, LVecBase4f const &clear_value);

690 15 get_clear_value 4 1045 31 DrawableRegion::get_clear_value 0 1 163 281
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_value
//       Access: Published, Virtual
//  Description: Returns the clear value for any bitplane.
////////////////////////////////////////////////////////////////////
71
virtual LVecBase4f const &DrawableRegion::get_clear_value(int n) const;

691 14 disable_clears 4 1045 30 DrawableRegion::disable_clears 0 1 164 352
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published, Virtual
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
////////////////////////////////////////////////////////////////////
50
virtual void DrawableRegion::disable_clears(void);

692 19 is_any_clear_active 4 1045 35 DrawableRegion::is_any_clear_active 0 1 165 461
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published, Virtual
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
////////////////////////////////////////////////////////////////////
61
virtual bool DrawableRegion::is_any_clear_active(void) const;

693 14 set_pixel_zoom 4 1045 30 DrawableRegion::set_pixel_zoom 0 1 166 1485
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_pixel_zoom
//       Access: Published, Virtual
//  Description: Sets the amount by which the pixels of the region are
//               scaled internally when filling the image interally.
//               Setting this number larger makes the pixels blockier,
//               but may make the rendering faster, particularly for
//               software renderers.  Setting this number to 2.0
//               reduces the number of pixels that have to be filled
//               by the renderer by a factor of 2.0.  It doesn't make
//               sense to set this lower than 1.0.
//
//               It is possible to set this on either individual
//               DisplayRegions or on overall GraphicsWindows, but you
//               will get better performance for setting it on the
//               window rather than its individual DisplayRegions.
//               Also, you may not set it on a DisplayRegion that
//               doesn't have both clear_color() and clear_depth()
//               enabled.
//
//               This property is only supported on renderers for
//               which it is particularly useful--currently, this is
//               the tinydisplay software renderer.  Other kinds of
//               renderers allow you to set this property, but ignore
//               it.
////////////////////////////////////////////////////////////////////
62
virtual void DrawableRegion::set_pixel_zoom(float pixel_zoom);

694 14 get_pixel_zoom 4 1045 30 DrawableRegion::get_pixel_zoom 0 1 167 388
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_zoom
//       Access: Published
//  Description: Returns the value set by set_pixel_zoom(), regardless
//               of whether it is being respected or not.  Also see
//               get_pixel_factor().
////////////////////////////////////////////////////////////////////
56
inline float DrawableRegion::get_pixel_zoom(void) const;

695 16 get_pixel_factor 4 1045 32 DrawableRegion::get_pixel_factor 0 1 168 650
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_factor
//       Access: Published
//  Description: Returns the amount by which the height and width of
//               the region will be scaled internally, based on the
//               zoom factor set by set_pixel_zoom().  This will
//               return 1.0 if the pixel_zoom was not set or if it is
//               not being respected (for instance, because the
//               underlying renderer doesn't support it--see
//               supports_pixel_zoom).
////////////////////////////////////////////////////////////////////
58
inline float DrawableRegion::get_pixel_factor(void) const;

696 19 supports_pixel_zoom 4 1045 35 DrawableRegion::supports_pixel_zoom 0 1 169 802
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::supports_pixel_zoom
//       Access: Published, Virtual
//  Description: Returns true if a call to set_pixel_zoom() will be
//               respected, false if it will be ignored.  If this
//               returns false, then get_pixel_factor() will always
//               return 1.0, regardless of what value you specify for
//               set_pixel_zoom().
//
//               This may return false if the underlying renderer
//               doesn't support pixel zooming, or if you have called
//               this on a DisplayRegion that doesn't have both
//               set_clear_color() and set_clear_depth() enabled.
////////////////////////////////////////////////////////////////////
61
virtual bool DrawableRegion::supports_pixel_zoom(void) const;

697 21 get_renderbuffer_type 4 1045 37 DrawableRegion::get_renderbuffer_type 0 1 170 334
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_renderbuffer_type
//       Access: Static, Published
//  Description: Returns the RenderBuffer::Type that corresponds
//               to a RenderTexturePlane.
////////////////////////////////////////////////////////////////////
60
static int DrawableRegion::get_renderbuffer_type(int plane);

698 27 upcast_to_DisplayRegionBase 12 1047 42 DisplayRegion::upcast_to_DisplayRegionBase 0 1 216 46
upcast from DisplayRegion to DisplayRegionBase
68
DisplayRegionBase *DisplayRegion::upcast_to_DisplayRegionBase(void);

699 25 downcast_to_DisplayRegion 12 1048 44 DisplayRegionBase::downcast_to_DisplayRegion 0 1 217 48
downcast from DisplayRegionBase to DisplayRegion
66
DisplayRegion *DisplayRegionBase::downcast_to_DisplayRegion(void);

700 24 upcast_to_DrawableRegion 12 1047 39 DisplayRegion::upcast_to_DrawableRegion 0 1 218 43
upcast from DisplayRegion to DrawableRegion
62
DrawableRegion *DisplayRegion::upcast_to_DrawableRegion(void);

701 25 downcast_to_DisplayRegion 12 1045 41 DrawableRegion::downcast_to_DisplayRegion 0 1 219 45
downcast from DrawableRegion to DisplayRegion
63
DisplayRegion *DrawableRegion::downcast_to_DisplayRegion(void);

702 14 ~DisplayRegion 4 1047 29 DisplayRegion::~DisplayRegion 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual DisplayRegion::~DisplayRegion(void);

703 14 get_dimensions 4 1047 29 DisplayRegion::get_dimensions 0 0 391
///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
88
inline void DisplayRegion::get_dimensions(float &l, float &r, float &b, float &t) const;

704 8 get_left 4 1047 23 DisplayRegion::get_left 0 1 171 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
49
inline float DisplayRegion::get_left(void) const;

705 9 get_right 4 1047 24 DisplayRegion::get_right 0 1 172 388
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
50
inline float DisplayRegion::get_right(void) const;

706 10 get_bottom 4 1047 25 DisplayRegion::get_bottom 0 1 173 392
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
////////////////////////////////////////////////////////////////////
51
inline float DisplayRegion::get_bottom(void) const;

707 7 get_top 4 1047 22 DisplayRegion::get_top 0 1 174 384
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
48
inline float DisplayRegion::get_top(void) const;

708 14 set_dimensions 4 1047 29 DisplayRegion::set_dimensions 0 1 175 519
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////
79
virtual void DisplayRegion::set_dimensions(float l, float r, float b, float t);

709 10 get_window 4 1047 25 DisplayRegion::get_window 0 1 176 376
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
////////////////////////////////////////////////////////////////////
61
inline GraphicsOutput *DisplayRegion::get_window(void) const;

710 8 get_pipe 4 1047 23 DisplayRegion::get_pipe 0 1 177 370
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
////////////////////////////////////////////////////////////////////
50
GraphicsPipe *DisplayRegion::get_pipe(void) const;

711 9 is_stereo 4 1047 24 DisplayRegion::is_stereo 0 1 178 313
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_stereo
//       Access: Published, Virtual
//  Description: Returns true if this is a StereoDisplayRegion, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
virtual bool DisplayRegion::is_stereo(void) const;

712 10 set_camera 4 1047 25 DisplayRegion::set_camera 0 1 179 669
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published, Virtual
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
////////////////////////////////////////////////////////////////////
63
virtual void DisplayRegion::set_camera(NodePath const &camera);

713 10 get_camera 4 1047 25 DisplayRegion::get_camera 0 2 180 181 362
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
////////////////////////////////////////////////////////////////////
99
inline NodePath DisplayRegion::get_camera(Thread *current_thread = ((get_current_thread()))) const;

714 10 set_active 4 1047 25 DisplayRegion::set_active 0 1 182 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published, Virtual
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
52
virtual void DisplayRegion::set_active(bool active);

715 9 is_active 4 1047 24 DisplayRegion::is_active 0 1 183 299
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
49
inline bool DisplayRegion::is_active(void) const;

716 8 set_sort 4 1047 23 DisplayRegion::set_sort 0 1 184 439
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published, Virtual
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
////////////////////////////////////////////////////////////////////
47
virtual void DisplayRegion::set_sort(int sort);

717 8 get_sort 4 1047 23 DisplayRegion::get_sort 0 1 185 297
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
47
inline int DisplayRegion::get_sort(void) const;

718 18 set_stereo_channel 4 1047 33 DisplayRegion::set_stereo_channel 0 1 186 1583
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published, Virtual
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  This automatically
//               adjusts the lens that is used to render to this
//               DisplayRegion to its left or right eye, according to
//               the lens's stereo properties.
//
//               When the DisplayRegion is attached to a stereo window
//               (one for which is_stereo() returns true), this also
//               specifies which physical channel the DisplayRegion
//               renders to.
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               Also see the StereoDisplayRegion, which automates
//               managing a pair of left/right DisplayRegions.
//
//               An ordinary DisplayRegion may be set to SC_mono,
//               SC_left, or SC_right.  You may set SC_stereo only on
//               a StereoDisplayRegion.
////////////////////////////////////////////////////////////////////
83
virtual void DisplayRegion::set_stereo_channel(Lens::StereoChannel stereo_channel);

719 18 get_stereo_channel 4 1047 33 DisplayRegion::get_stereo_channel 0 1 187 448
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
////////////////////////////////////////////////////////////////////
67
inline Lens::StereoChannel DisplayRegion::get_stereo_channel(void);

720 21 set_incomplete_render 4 1047 36 DisplayRegion::set_incomplete_render 0 1 188 949
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_incomplete_render
//       Access: Published, Virtual
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               This flag may also be set on the
//               GraphicsStateGuardian.  It will be considered true
//               for a given DisplayRegion only if it is true on both
//               the GSG and on the DisplayRegion.
//
//               See GraphicsStateGuardian::set_incomplete_render()
//               for more detail.
////////////////////////////////////////////////////////////////////
74
virtual void DisplayRegion::set_incomplete_render(bool incomplete_render);

721 21 get_incomplete_render 4 1047 36 DisplayRegion::get_incomplete_render 0 1 189 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_incomplete_render
//       Access: Published
//  Description: Returns the incomplete_render flag.  See
//               set_incomplete_render().
////////////////////////////////////////////////////////////////////
61
inline bool DisplayRegion::get_incomplete_render(void) const;

722 27 set_texture_reload_priority 4 1047 42 DisplayRegion::set_texture_reload_priority 0 1 190 988
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_texture_reload_priority
//       Access: Published, Virtual
//  Description: Specifies an integer priority which is assigned to
//               any asynchronous texture reload requests spawned
//               while processing this DisplayRegion.  This controls
//               which textures are loaded first when multiple
//               textures need to be reloaded at once; it also
//               controls the relative priority between asynchronous
//               texture loads and asynchronous model or animation
//               loads.
//
//               Specifying a larger number here makes the textures
//               rendered by this DisplayRegion load up first.  This
//               may be particularly useful to do, for instance, for
//               the DisplayRegion that renders the gui.
////////////////////////////////////////////////////////////////////
85
virtual void DisplayRegion::set_texture_reload_priority(int texture_reload_priority);

723 27 get_texture_reload_priority 4 1047 42 DisplayRegion::get_texture_reload_priority 0 1 191 391
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_texture_reload_priority
//       Access: Published
//  Description: Returns the priority which is assigned to
//               asynchronous texture reload requests.  See
//               set_texture_reload_priority().
////////////////////////////////////////////////////////////////////
66
inline int DisplayRegion::get_texture_reload_priority(void) const;

724 14 set_lens_index 4 1047 29 DisplayRegion::set_lens_index 0 1 192 443
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_lens_index
//       Access: Published
//  Description: Sets the lens index, allows for multiple lenses to
//               be attached to a camera.  This is useful for a 
//               variety of setups, such as fish eye rendering.
//               The default is 0.
////////////////////////////////////////////////////////////////////
46
void DisplayRegion::set_lens_index(int index);

725 14 get_lens_index 4 1047 29 DisplayRegion::get_lens_index 0 1 193 479
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_lens_index
//       Access: Public
//  Description: Returns the specific lens of the associated Camera
//               that will be used for rendering this scene.  Most
//               Cameras hold only one lens, but for multiple lenses
//               this method may be used to selected between them.
////////////////////////////////////////////////////////////////////
53
inline int DisplayRegion::get_lens_index(void) const;

726 18 set_cull_traverser 4 1047 33 DisplayRegion::set_cull_traverser 0 1 194 494
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_traverser
//       Access: Published, Virtual
//  Description: Specifies the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.  Normally the
//               default CullTraverser is sufficient, but this may be
//               changed to change the default cull behavior.
////////////////////////////////////////////////////////////////////
68
virtual void DisplayRegion::set_cull_traverser(CullTraverser *trav);

727 18 get_cull_traverser 4 1047 33 DisplayRegion::get_cull_traverser 0 1 195 337
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_traverser
//       Access: Published
//  Description: Returns the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.
////////////////////////////////////////////////////////////////////
55
CullTraverser *DisplayRegion::get_cull_traverser(void);

728 18 set_cube_map_index 4 1047 33 DisplayRegion::set_cube_map_index 0 1 196 690
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published, Virtual
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map.  Normally you
//               should not need to set it directly.  This sets up the
//               DisplayRegion to render to the nth cube map face; the
//               value must be between 0 and 5, inclusive.  A normal
//               DisplayRegion that is not associated with any
//               particular cube map should be set to -1.
////////////////////////////////////////////////////////////////////
67
virtual void DisplayRegion::set_cube_map_index(int cube_map_index);

729 18 get_cube_map_index 4 1047 33 DisplayRegion::get_cube_map_index 0 1 197 436
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cube_map_index
//       Access: Published
//  Description: Returns the cube map face index associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a cube map.  See
//               set_cube_map_index().
////////////////////////////////////////////////////////////////////
57
inline int DisplayRegion::get_cube_map_index(void) const;

730 17 set_cull_callback 4 1047 32 DisplayRegion::set_cull_callback 0 1 198 1597
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the DisplayRegion is visited during the cull
//               traversal.  This callback will be made during the
//               cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               traversal for this DisplayRegion has not yet started.
//
//               The callback is passed an instance of a
//               DisplayRegionCullCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal cull behavior, so if your
//               callback does nothing, the scene graph will not be
//               traversed and therefore nothing will be drawn.  If
//               you wish the normal cull traversal to be performed
//               for this DisplayRegion, you must call
//               cbdata->upcall() from your callback.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_cull_callback(CallbackObject *object);

731 19 clear_cull_callback 4 1047 34 DisplayRegion::clear_cull_callback 0 1 199 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
////////////////////////////////////////////////////////////////////
53
inline void DisplayRegion::clear_cull_callback(void);

732 17 get_cull_callback 4 1047 32 DisplayRegion::get_cull_callback 0 1 200 286
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
////////////////////////////////////////////////////////////////////
68
inline CallbackObject *DisplayRegion::get_cull_callback(void) const;

733 17 set_draw_callback 4 1047 32 DisplayRegion::set_draw_callback 0 1 201 1951
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the contents of DisplayRegion is drawn during the
//               draw traversal.  This callback will be made during
//               the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state is in the initial state, and no
//               projection matrix or modelview matrix is in effect.
//               begin_scene() has not yet been called, and no objects
//               have yet been drawn.  However, the viewport has
//               already been set to the appropriate part of the
//               window, and the clear commands for this DisplayRegion
//               (if any) have been issued.
//
//               The callback is passed an instance of a
//               DisplayRegionDrawCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal draw behavior, so if your
//               callback does nothing, nothing in the DisplayRegion
//               will be drawn.  If you wish the draw traversal to
//               continue to draw the contents of this DisplayRegion,
//               you must call cbdata->upcall() from your callback.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_draw_callback(CallbackObject *object);

734 19 clear_draw_callback 4 1047 34 DisplayRegion::clear_draw_callback 0 1 202 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
////////////////////////////////////////////////////////////////////
53
inline void DisplayRegion::clear_draw_callback(void);

735 17 get_draw_callback 4 1047 32 DisplayRegion::get_draw_callback 0 1 203 286
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
////////////////////////////////////////////////////////////////////
68
inline CallbackObject *DisplayRegion::get_draw_callback(void) const;

736 15 get_pixel_width 4 1047 30 DisplayRegion::get_pixel_width 0 1 204 279
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
54
inline int DisplayRegion::get_pixel_width(void) const;

737 16 get_pixel_height 4 1047 31 DisplayRegion::get_pixel_height 0 1 205 281
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
55
inline int DisplayRegion::get_pixel_height(void) const;

738 6 output 4 1047 21 DisplayRegion::output 0 1 206 229
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
55
virtual void DisplayRegion::output(ostream &out) const;

739 24 make_screenshot_filename 4 1047 39 DisplayRegion::make_screenshot_filename 0 2 207 208 757
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
109
static Filename DisplayRegion::make_screenshot_filename(basic_string< char > const &prefix = ("screenshot"));

740 23 save_screenshot_default 4 1047 38 DisplayRegion::save_screenshot_default 0 2 209 210 470
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
101
Filename DisplayRegion::save_screenshot_default(basic_string< char > const &prefix = ("screenshot"));

741 15 save_screenshot 4 1047 30 DisplayRegion::save_screenshot 0 2 211 212 350
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
112
bool DisplayRegion::save_screenshot(Filename const &filename, basic_string< char > const &image_comment = (""));

742 14 get_screenshot 4 1047 29 DisplayRegion::get_screenshot 0 1 213 398
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
52
bool DisplayRegion::get_screenshot(PNMImage &image);

743 22 make_cull_result_graph 4 1047 37 DisplayRegion::make_cull_result_graph 0 1 214 1131
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_cull_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the last frame's cull
//               operation.
//
//               This will be a hierarchy of nodes, one node for each
//               bin, each of which will in term be a parent of a
//               number of GeomNodes, representing the geometry drawn
//               in each bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself, which is constructed
//               and maintained internally.  No such scene graph is
//               normally constructed during the rendering of a frame;
//               this is an artificial construct created for the
//               purpose of making it easy to analyze the results of
//               the cull operation.
////////////////////////////////////////////////////////////////////
75
virtual PointerTo< PandaNode > DisplayRegion::make_cull_result_graph(void);

744 14 get_class_type 4 1047 29 DisplayRegion::get_class_type 0 1 215 0
54
static TypeHandle DisplayRegion::get_class_type(void);

745 16 get_cull_handler 4 1049 47 DisplayRegionCullCallbackData::get_cull_handler 0 1 220 869
// Filename: displayRegionCullCallbackData.I
// Created by:  drose (14Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_cull_handler
//       Access: Published
//  Description: Returns a pointer to the CullHandler, which accepts
//               each object to be added to the list for drawing.
////////////////////////////////////////////////////////////////////
80
inline CullHandler *DisplayRegionCullCallbackData::get_cull_handler(void) const;

746 15 get_scene_setup 4 1049 46 DisplayRegionCullCallbackData::get_scene_setup 0 1 221 360
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
////////////////////////////////////////////////////////////////////
78
inline SceneSetup *DisplayRegionCullCallbackData::get_scene_setup(void) const;

747 14 get_class_type 4 1049 45 DisplayRegionCullCallbackData::get_class_type 0 1 222 0
70
static TypeHandle DisplayRegionCullCallbackData::get_class_type(void);

748 30 ~DisplayRegionCullCallbackData 4 1049 61 DisplayRegionCullCallbackData::~DisplayRegionCullCallbackData 0 0 0
68
DisplayRegionCullCallbackData::~DisplayRegionCullCallbackData(void);

749 15 get_cull_result 4 1051 46 DisplayRegionDrawCallbackData::get_cull_result 0 1 223 893
// Filename: displayRegionDrawCallbackData.I
// Created by:  drose (13Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_cull_result
//       Access: Published
//  Description: Returns a pointer to the CullResult, the list of
//               CullableObjects that should be drawn in this
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
78
inline CullResult *DisplayRegionDrawCallbackData::get_cull_result(void) const;

750 15 get_scene_setup 4 1051 46 DisplayRegionDrawCallbackData::get_scene_setup 0 1 224 360
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
////////////////////////////////////////////////////////////////////
78
inline SceneSetup *DisplayRegionDrawCallbackData::get_scene_setup(void) const;

751 14 get_class_type 4 1051 45 DisplayRegionDrawCallbackData::get_class_type 0 1 225 0
70
static TypeHandle DisplayRegionDrawCallbackData::get_class_type(void);

752 30 ~DisplayRegionDrawCallbackData 4 1051 61 DisplayRegionDrawCallbackData::~DisplayRegionDrawCallbackData 0 0 0
68
DisplayRegionDrawCallbackData::~DisplayRegionDrawCallbackData(void);

753 23 DisplaySearchParameters 4 1052 48 DisplaySearchParameters::DisplaySearchParameters 0 1 226 236
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
DisplaySearchParameters::DisplaySearchParameters(void);

754 24 ~DisplaySearchParameters 4 1052 49 DisplaySearchParameters::~DisplaySearchParameters 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
DisplaySearchParameters::~DisplaySearchParameters(void);

755 17 set_minimum_width 4 1052 42 DisplaySearchParameters::set_minimum_width 0 1 227 242
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DisplaySearchParameters::set_minimum_width(int minimum_width);

756 17 set_maximum_width 4 1052 42 DisplaySearchParameters::set_maximum_width 0 1 228 242
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DisplaySearchParameters::set_maximum_width(int maximum_width);

757 18 set_minimum_height 4 1052 43 DisplaySearchParameters::set_minimum_height 0 1 229 243
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DisplaySearchParameters::set_minimum_height(int minimum_height);

758 18 set_maximum_height 4 1052 43 DisplaySearchParameters::set_maximum_height 0 1 230 243
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DisplaySearchParameters::set_maximum_height(int maximum_height);

759 26 set_minimum_bits_per_pixel 4 1052 51 DisplaySearchParameters::set_minimum_bits_per_pixel 0 1 231 251
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
void DisplaySearchParameters::set_minimum_bits_per_pixel(int minimum_bits_per_pixel);

760 26 set_maximum_bits_per_pixel 4 1052 51 DisplaySearchParameters::set_maximum_bits_per_pixel 0 1 232 251
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
void DisplaySearchParameters::set_maximum_bits_per_pixel(int maximum_bits_per_pixel);

761 14 get_depth_bits 4 1053 37 FrameBufferProperties::get_depth_bits 0 1 235 261
// Individual queries.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_depth_bits(void) const;

762 14 get_color_bits 4 1053 37 FrameBufferProperties::get_color_bits 0 1 236 261
// Individual queries.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_color_bits(void) const;

763 14 get_alpha_bits 4 1053 37 FrameBufferProperties::get_alpha_bits 0 1 237 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_alpha_bits(void) const;

764 16 get_stencil_bits 4 1053 39 FrameBufferProperties::get_stencil_bits 0 1 238 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_stencil_bits(void) const;

765 14 get_accum_bits 4 1053 37 FrameBufferProperties::get_accum_bits 0 1 239 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_accum_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_accum_bits(void) const;

766 12 get_aux_rgba 4 1053 35 FrameBufferProperties::get_aux_rgba 0 1 240 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int FrameBufferProperties::get_aux_rgba(void) const;

767 13 get_aux_hrgba 4 1053 36 FrameBufferProperties::get_aux_hrgba 0 1 241 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_hrgba(void) const;

768 13 get_aux_float 4 1053 36 FrameBufferProperties::get_aux_float 0 1 242 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_float(void) const;

769 16 get_multisamples 4 1053 39 FrameBufferProperties::get_multisamples 0 1 243 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_multisamples(void) const;

770 20 get_coverage_samples 4 1053 43 FrameBufferProperties::get_coverage_samples 0 1 244 356
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling.
////////////////////////////////////////////////////////////////////
67
inline int FrameBufferProperties::get_coverage_samples(void) const;

771 16 get_back_buffers 4 1053 39 FrameBufferProperties::get_back_buffers 0 1 245 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_back_buffers
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_back_buffers(void) const;

772 17 get_indexed_color 4 1053 40 FrameBufferProperties::get_indexed_color 0 1 246 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_indexed_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline int FrameBufferProperties::get_indexed_color(void) const;

773 13 get_rgb_color 4 1053 36 FrameBufferProperties::get_rgb_color 0 1 247 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_rgb_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_rgb_color(void) const;

774 10 get_stereo 4 1053 33 FrameBufferProperties::get_stereo 0 1 248 233
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stereo
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int FrameBufferProperties::get_stereo(void) const;

775 18 get_force_hardware 4 1053 41 FrameBufferProperties::get_force_hardware 0 1 249 241
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_hardware
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline int FrameBufferProperties::get_force_hardware(void) const;

776 18 get_force_software 4 1053 41 FrameBufferProperties::get_force_software 0 1 250 241
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_software
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline int FrameBufferProperties::get_force_software(void) const;

777 14 set_depth_bits 4 1053 37 FrameBufferProperties::set_depth_bits 0 1 251 263
// Individual assigners.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_depth_bits(int n);

778 14 set_color_bits 4 1053 37 FrameBufferProperties::set_color_bits 0 1 252 263
// Individual assigners.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_color_bits(int n);

779 14 set_alpha_bits 4 1053 37 FrameBufferProperties::set_alpha_bits 0 1 253 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_alpha_bits(int n);

780 16 set_stencil_bits 4 1053 39 FrameBufferProperties::set_stencil_bits 0 1 254 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_stencil_bits(int n);

781 14 set_accum_bits 4 1053 37 FrameBufferProperties::set_accum_bits 0 1 255 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_accum_bits
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_accum_bits(int n);

782 12 set_aux_rgba 4 1053 35 FrameBufferProperties::set_aux_rgba 0 1 256 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline void FrameBufferProperties::set_aux_rgba(int n);

783 13 set_aux_hrgba 4 1053 36 FrameBufferProperties::set_aux_hrgba 0 1 257 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_aux_hrgba(int n);

784 13 set_aux_float 4 1053 36 FrameBufferProperties::set_aux_float 0 1 258 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_aux_float(int n);

785 16 set_multisamples 4 1053 39 FrameBufferProperties::set_multisamples 0 1 259 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_multisamples(int n);

786 20 set_coverage_samples 4 1053 43 FrameBufferProperties::set_coverage_samples 0 1 260 355
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling
////////////////////////////////////////////////////////////////////
63
inline void FrameBufferProperties::set_coverage_samples(int n);

787 16 set_back_buffers 4 1053 39 FrameBufferProperties::set_back_buffers 0 1 261 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_back_buffers
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_back_buffers(int n);

788 17 set_indexed_color 4 1053 40 FrameBufferProperties::set_indexed_color 0 1 262 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_indexed_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline void FrameBufferProperties::set_indexed_color(int n);

789 13 set_rgb_color 4 1053 36 FrameBufferProperties::set_rgb_color 0 1 263 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgb_color
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_rgb_color(int n);

790 10 set_stereo 4 1053 33 FrameBufferProperties::set_stereo 0 1 264 233
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stereo
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline void FrameBufferProperties::set_stereo(int n);

791 18 set_force_hardware 4 1053 41 FrameBufferProperties::set_force_hardware 0 1 265 241
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_hardware
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void FrameBufferProperties::set_force_hardware(int n);

792 18 set_force_software 4 1053 41 FrameBufferProperties::set_force_software 0 1 266 241
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_software
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void FrameBufferProperties::set_force_software(int n);

793 21 FrameBufferProperties 4 1053 44 FrameBufferProperties::FrameBufferProperties 0 2 233 234 981
// Other.

// Filename: frameBufferProperties.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
139
FrameBufferProperties::FrameBufferProperties(void);
inline FrameBufferProperties::FrameBufferProperties(FrameBufferProperties const &copy);

794 22 ~FrameBufferProperties 4 1053 45 FrameBufferProperties::~FrameBufferProperties 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline FrameBufferProperties::~FrameBufferProperties(void);

795 10 operator = 4 1053 33 FrameBufferProperties::operator = 0 1 267 246
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
void FrameBufferProperties::operator =(FrameBufferProperties const &copy);

796 11 get_default 4 1053 34 FrameBufferProperties::get_default 0 1 268 395
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
77
static FrameBufferProperties const &FrameBufferProperties::get_default(void);

797 11 operator == 4 1053 34 FrameBufferProperties::operator == 0 1 269 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator == 
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
82
bool FrameBufferProperties::operator ==(FrameBufferProperties const &other) const;

798 11 operator != 4 1053 34 FrameBufferProperties::operator != 0 1 270 233
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
89
inline bool FrameBufferProperties::operator !=(FrameBufferProperties const &other) const;

799 5 clear 4 1053 28 FrameBufferProperties::clear 0 1 271 391
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
40
void FrameBufferProperties::clear(void);

800 17 set_all_specified 4 1053 40 FrameBufferProperties::set_all_specified 0 1 272 268
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_all_specified
//       Access: Published
//  Description: sets all the specified bits.
////////////////////////////////////////////////////////////////////
52
void FrameBufferProperties::set_all_specified(void);

801 8 subsumes 4 1053 31 FrameBufferProperties::subsumes 0 1 273 405
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
////////////////////////////////////////////////////////////////////
79
bool FrameBufferProperties::subsumes(FrameBufferProperties const &other) const;

802 14 add_properties 4 1053 37 FrameBufferProperties::add_properties 0 1 274 381
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
79
void FrameBufferProperties::add_properties(FrameBufferProperties const &other);

803 6 output 4 1053 29 FrameBufferProperties::output 0 1 275 373
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
55
void FrameBufferProperties::output(ostream &out) const;

804 23 set_one_bit_per_channel 4 1053 46 FrameBufferProperties::set_one_bit_per_channel 0 1 276 398
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_one_bit_per_channel
//       Access: Published
//  Description: If any of the depth, color, alpha, accum, or
//               stencil properties is set to more than one,
//               then they are reduced to one.
////////////////////////////////////////////////////////////////////
58
void FrameBufferProperties::set_one_bit_per_channel(void);

805 9 is_stereo 4 1053 32 FrameBufferProperties::is_stereo 0 1 277 231
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
bool FrameBufferProperties::is_stereo(void) const;

806 18 is_single_buffered 4 1053 41 FrameBufferProperties::is_single_buffered 0 1 278 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
bool FrameBufferProperties::is_single_buffered(void) const;

807 11 get_quality 4 1053 34 FrameBufferProperties::get_quality 0 1 279 1390
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_quality
//       Access: Published
//  Description: Assumes that these properties are a description of
//               a window.
//
//               Measures how well this window satisfies a specified
//               set of requirements.  A higher quality number means
//               that more requirements were satisfied.  A quality of
//               zero means that the window is unsuitable.
//
//               The routine deducts a lot if the window fails to
//               provide a requested feature.  It deducts less
//               if the window provides a feature, but at a degraded
//               level of functionality (ie, the user asks for rgba8,
//               color, but the window only provides rgba4).  The
//               routine also deducts a small amount for unnecessary
//               features.  For example, if the window has an
//               accumulation buffer when one is not requested will
//               reduce quality slightly.  Maximum quality is obtained
//               when the window exactly matches the request.
//
//               If you want to know whether the window satisfies
//               all of the requirements, use the "subsumes" function.
////////////////////////////////////////////////////////////////////
80
int FrameBufferProperties::get_quality(FrameBufferProperties const &reqs) const;

808 16 is_any_specified 4 1053 39 FrameBufferProperties::is_any_specified 0 1 280 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
57
bool FrameBufferProperties::is_any_specified(void) const;

809 8 is_basic 4 1053 31 FrameBufferProperties::is_basic 0 1 281 444
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_basic
//       Access: Published
//  Description: Returns true if the properties are extremely basic.
//               The following count as basic: rgb or rgba, depth.
//               If anything else is specified, the properties are
//               non-basic.
////////////////////////////////////////////////////////////////////
49
bool FrameBufferProperties::is_basic(void) const;

810 12 get_aux_mask 4 1053 35 FrameBufferProperties::get_aux_mask 0 1 282 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_mask
//       Access: Published
//  Description: Converts the aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
////////////////////////////////////////////////////////////////////
52
int FrameBufferProperties::get_aux_mask(void) const;

811 15 get_buffer_mask 4 1053 38 FrameBufferProperties::get_buffer_mask 0 1 283 329
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Private
//  Description: Converts the non-aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
////////////////////////////////////////////////////////////////////
55
int FrameBufferProperties::get_buffer_mask(void) const;

812 24 verify_hardware_software 4 1053 47 FrameBufferProperties::verify_hardware_software 0 1 284 426
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::verify_hardware_software
//       Access: Public
//  Description: Validates that the properties represent the desired
//               kind of renderer (hardware or software).  If not,
//               prints out an error message and returns false.
////////////////////////////////////////////////////////////////////
133
bool FrameBufferProperties::verify_hardware_software(FrameBufferProperties const &props, basic_string< char > const &renderer) const;

813 22 GraphicsThreadingModel 4 1054 46 GraphicsThreadingModel::GraphicsThreadingModel 0 3 285 286 287 2540
// Filename: graphicsThreadingModel.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
////////////////////////////////////////////////////////////////////
188
GraphicsThreadingModel::GraphicsThreadingModel(basic_string< char > const &model = ((string())));
inline GraphicsThreadingModel::GraphicsThreadingModel(GraphicsThreadingModel const &copy);

814 10 operator = 4 1054 34 GraphicsThreadingModel::operator = 0 1 288 248
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
83
inline void GraphicsThreadingModel::operator =(GraphicsThreadingModel const &copy);

815 9 get_model 4 1054 33 GraphicsThreadingModel::get_model 0 1 289 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
////////////////////////////////////////////////////////////////////
67
basic_string< char > GraphicsThreadingModel::get_model(void) const;

816 13 get_cull_name 4 1054 37 GraphicsThreadingModel::get_cull_name 0 1 290 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &GraphicsThreadingModel::get_cull_name(void) const;

817 13 set_cull_name 4 1054 37 GraphicsThreadingModel::set_cull_name 0 1 291 481
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               culling in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
////////////////////////////////////////////////////////////////////
89
inline void GraphicsThreadingModel::set_cull_name(basic_string< char > const &cull_name);

818 14 get_cull_stage 4 1054 38 GraphicsThreadingModel::get_cull_stage 0 1 292 454
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_cull_stage(void) const;

819 13 get_draw_name 4 1054 37 GraphicsThreadingModel::get_draw_name 0 1 293 392
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &GraphicsThreadingModel::get_draw_name(void) const;

820 13 set_draw_name 4 1054 37 GraphicsThreadingModel::set_draw_name 0 1 294 481
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_draw_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               drawing in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
////////////////////////////////////////////////////////////////////
89
inline void GraphicsThreadingModel::set_draw_name(basic_string< char > const &cull_name);

821 14 get_draw_stage 4 1054 38 GraphicsThreadingModel::get_draw_stage 0 1 295 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_draw_stage(void) const;

822 16 get_cull_sorting 4 1054 40 GraphicsThreadingModel::get_cull_sorting 0 1 296 396
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsThreadingModel::get_cull_sorting(void) const;

823 16 set_cull_sorting 4 1054 40 GraphicsThreadingModel::set_cull_sorting 0 1 297 521
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_sorting
//       Access: Published
//  Description: Changes the flag that indicates whether the threading
//               model involves a separate cull pass.  This won't
//               change any windows that were already created with
//               this model; this only has an effect on newly-opened
//               windows.
////////////////////////////////////////////////////////////////////
72
inline void GraphicsThreadingModel::set_cull_sorting(bool cull_sorting);

824 18 is_single_threaded 4 1054 42 GraphicsThreadingModel::is_single_threaded 0 1 298 372
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
////////////////////////////////////////////////////////////////////
67
inline bool GraphicsThreadingModel::is_single_threaded(void) const;

825 10 is_default 4 1054 34 GraphicsThreadingModel::is_default 0 1 299 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsThreadingModel::is_default(void) const;

826 6 output 4 1054 30 GraphicsThreadingModel::output 0 1 300 230
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void GraphicsThreadingModel::output(ostream &out) const;

827 23 ~GraphicsThreadingModel 4 1054 47 GraphicsThreadingModel::~GraphicsThreadingModel 0 0 0
54
GraphicsThreadingModel::~GraphicsThreadingModel(void);

828 8 get_pipe 4 1055 24 GraphicsDevice::get_pipe 0 1 301 792
// Filename: graphicsDevice.I
// Created by:  masad (21Jul03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsDevice::get_pipe(void) const;

829 14 get_class_type 4 1055 30 GraphicsDevice::get_class_type 0 1 302 0
55
static TypeHandle GraphicsDevice::get_class_type(void);

830 8 is_valid 4 1056 22 GraphicsPipe::is_valid 0 1 303 1182
// Filename: graphicsPipe.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
////////////////////////////////////////////////////////////////////
47
inline bool GraphicsPipe::is_valid(void) const;

831 19 get_supported_types 4 1056 33 GraphicsPipe::get_supported_types 0 1 304 682
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
////////////////////////////////////////////////////////////////////
57
inline int GraphicsPipe::get_supported_types(void) const;

832 13 supports_type 4 1056 27 GraphicsPipe::supports_type 0 1 305 766
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsPipe::supports_type(int flags) const;

833 17 get_display_width 4 1056 31 GraphicsPipe::get_display_width 0 1 306 547
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
////////////////////////////////////////////////////////////////////
55
inline int GraphicsPipe::get_display_width(void) const;

834 18 get_display_height 4 1056 32 GraphicsPipe::get_display_height 0 1 307 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
////////////////////////////////////////////////////////////////////
56
inline int GraphicsPipe::get_display_height(void) const;

835 23 get_display_information 4 1056 37 GraphicsPipe::get_display_information 0 1 308 272
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_information
//       Access: Published
//  Description: Gets the pipe's DisplayInformation.
////////////////////////////////////////////////////////////////////
64
DisplayInformation *GraphicsPipe::get_display_information(void);

836 15 lookup_cpu_data 4 1056 29 GraphicsPipe::lookup_cpu_data 0 1 309 400
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::lookup_cpu_data
//       Access: Public, Virtual
//  Description: Looks up the detailed CPU information and stores it
//               in _display_information, if supported by the OS.
//               This may take a second or two.
////////////////////////////////////////////////////////////////////
49
virtual void GraphicsPipe::lookup_cpu_data(void);

837 18 get_interface_name 4 1056 32 GraphicsPipe::get_interface_name 0 1 310 0
78
virtual basic_string< char > GraphicsPipe::get_interface_name(void) const = 0;

838 14 get_class_type 4 1056 28 GraphicsPipe::get_class_type 0 1 311 0
53
static TypeHandle GraphicsPipe::get_class_type(void);

839 20 ~StencilRenderStates 4 1059 41 StencilRenderStates::~StencilRenderStates 0 0 203
////////////////////////////////////////////////////////////////////
//     Function: StencilRenderStates::Destructor
//  Description:
////////////////////////////////////////////////////////////////////
48
StencilRenderStates::~StencilRenderStates(void);

840 11 release_all 4 1063 34 GraphicsStateGuardian::release_all 0 1 312 758
// Filename: graphicsStateGuardian.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
////////////////////////////////////////////////////////////////////
53
inline void GraphicsStateGuardian::release_all(void);

841 20 release_all_textures 4 1063 43 GraphicsStateGuardian::release_all_textures 0 1 313 319
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::release_all_textures(void);

842 17 release_all_geoms 4 1063 40 GraphicsStateGuardian::release_all_geoms 0 1 314 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
58
inline int GraphicsStateGuardian::release_all_geoms(void);

843 26 release_all_vertex_buffers 4 1063 49 GraphicsStateGuardian::release_all_vertex_buffers 0 1 315 331
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
67
inline int GraphicsStateGuardian::release_all_vertex_buffers(void);

844 25 release_all_index_buffers 4 1063 48 GraphicsStateGuardian::release_all_index_buffers 0 1 316 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::release_all_index_buffers(void);

845 10 set_active 4 1063 33 GraphicsStateGuardian::set_active 0 1 317 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsStateGuardian::set_active(bool active);

846 9 is_active 4 1063 32 GraphicsStateGuardian::is_active 0 1 318 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsStateGuardian::is_active(void) const;

847 8 is_valid 4 1063 31 GraphicsStateGuardian::is_valid 0 1 319 435
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsStateGuardian::is_valid(void) const;

848 11 needs_reset 4 1063 34 GraphicsStateGuardian::needs_reset 0 1 320 301
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::needs_reset(void) const;

849 21 set_incomplete_render 4 1063 44 GraphicsStateGuardian::set_incomplete_render 0 1 321 1472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_incomplete_render
//       Access: Public
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               Setting this true allows for a smoother frame rate,
//               but occasionally parts of the frame will be invisible
//               or missing (they will generally come in within a
//               second or two).  Setting this false guarantees that
//               every frame will be complete, but may cause more
//               chugs as things are loaded up at runtime.
//
//               You may want to set this false during loading
//               screens, to guarantee that all of your assets are
//               available by the time you take the loading screen
//               down.
//
//               This flag may also be set individually on each
//               DisplayRegion.  It will be considered true for a
//               given DisplayRegion only if it is true on both the
//               GSG and on the DisplayRegion.
////////////////////////////////////////////////////////////////////
81
inline void GraphicsStateGuardian::set_incomplete_render(bool incomplete_render);

850 10 set_loader 4 1063 33 GraphicsStateGuardian::set_loader 0 1 322 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_loader
//       Access: Public
//  Description: Sets the Loader object that will be used by this GSG
//               to load textures when necessary, if
//               get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////
62
inline void GraphicsStateGuardian::set_loader(Loader *loader);

851 10 get_loader 4 1063 33 GraphicsStateGuardian::get_loader 0 1 323 397
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be used by this
//               GSG to load textures when necessary, if
//               get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////
61
inline Loader *GraphicsStateGuardian::get_loader(void) const;

852 8 get_pipe 4 1063 31 GraphicsStateGuardian::get_pipe 0 1 324 304
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
////////////////////////////////////////////////////////////////////
65
inline GraphicsPipe *GraphicsStateGuardian::get_pipe(void) const;

853 10 get_engine 4 1063 33 GraphicsStateGuardian::get_engine 0 1 325 463
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
////////////////////////////////////////////////////////////////////
62
GraphicsEngine *GraphicsStateGuardian::get_engine(void) const;

854 19 get_threading_model 4 1063 42 GraphicsStateGuardian::get_threading_model 0 1 326 320
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
////////////////////////////////////////////////////////////////////
92
inline GraphicsThreadingModel const &GraphicsStateGuardian::get_threading_model(void) const;

855 11 is_hardware 4 1063 34 GraphicsStateGuardian::is_hardware 0 1 327 373
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_hardware
//       Access: Published
//  Description: Returns true if this GSG appears to be
//               hardware-accelerated, or false if it is known to be
//               software only.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::is_hardware(void) const;

856 22 get_max_texture_stages 4 1063 45 GraphicsStateGuardian::get_max_texture_stages 0 1 328 859
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
69
inline int GraphicsStateGuardian::get_max_texture_stages(void) const;

857 28 get_max_3d_texture_dimension 4 1063 51 GraphicsStateGuardian::get_max_3d_texture_dimension 0 1 329 654
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
75
inline int GraphicsStateGuardian::get_max_3d_texture_dimension(void) const;

858 26 get_max_cube_map_dimension 4 1063 49 GraphicsStateGuardian::get_max_cube_map_dimension 0 1 330 662
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
73
inline int GraphicsStateGuardian::get_max_cube_map_dimension(void) const;

859 28 get_supports_texture_combine 4 1063 51 GraphicsStateGuardian::get_supports_texture_combine 0 1 331 595
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_texture_combine(void) const;

860 33 get_supports_texture_saved_result 4 1063 56 GraphicsStateGuardian::get_supports_texture_saved_result 0 1 332 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
////////////////////////////////////////////////////////////////////
81
inline bool GraphicsStateGuardian::get_supports_texture_saved_result(void) const;

861 25 get_supports_texture_dot3 4 1063 48 GraphicsStateGuardian::get_supports_texture_dot3 0 1 333 375
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_texture_dot3(void) const;

862 23 get_supports_3d_texture 4 1063 46 GraphicsStateGuardian::get_supports_3d_texture 0 1 334 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_supports_3d_texture(void) const;

863 21 get_supports_cube_map 4 1063 44 GraphicsStateGuardian::get_supports_cube_map 0 1 335 298
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
////////////////////////////////////////////////////////////////////
69
inline bool GraphicsStateGuardian::get_supports_cube_map(void) const;

864 25 get_supports_tex_non_pow2 4 1063 48 GraphicsStateGuardian::get_supports_tex_non_pow2 0 1 336 333
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_tex_non_pow2(void) const;

865 31 get_supports_compressed_texture 4 1063 54 GraphicsStateGuardian::get_supports_compressed_texture 0 1 337 423
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
////////////////////////////////////////////////////////////////////
79
inline bool GraphicsStateGuardian::get_supports_compressed_texture(void) const;

866 14 get_max_lights 4 1063 37 GraphicsStateGuardian::get_max_lights 0 1 338 579
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::get_max_lights(void) const;

867 19 get_max_clip_planes 4 1063 42 GraphicsStateGuardian::get_max_clip_planes 0 1 339 588
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::get_max_clip_planes(void) const;

868 25 get_max_vertex_transforms 4 1063 48 GraphicsStateGuardian::get_max_vertex_transforms 0 1 340 818
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
72
inline int GraphicsStateGuardian::get_max_vertex_transforms(void) const;

869 32 get_max_vertex_transform_indices 4 1063 55 GraphicsStateGuardian::get_max_vertex_transform_indices 0 1 341 811
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
79
inline int GraphicsStateGuardian::get_max_vertex_transform_indices(void) const;

870 25 get_copy_texture_inverted 4 1063 48 GraphicsStateGuardian::get_copy_texture_inverted 0 1 342 976
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_copy_texture_inverted(void) const;

871 28 get_supports_generate_mipmap 4 1063 51 GraphicsStateGuardian::get_supports_generate_mipmap 0 1 343 555
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_generate_mipmap(void) const;

872 27 get_supports_render_texture 4 1063 50 GraphicsStateGuardian::get_supports_render_texture 0 1 344 464
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_render_texture
//       Access: Published
//  Description: Returns true if this particular GSG can render
//               directly into a texture, or false if it must always
//               copy-to-texture at the end of each frame to achieve
//               this effect.
////////////////////////////////////////////////////////////////////
75
inline bool GraphicsStateGuardian::get_supports_render_texture(void) const;

873 26 get_supports_depth_texture 4 1063 49 GraphicsStateGuardian::get_supports_depth_texture 0 1 345 543
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               returns true if the GSG supports GL_DEPTH_COMPONENT
//               textures, which are considered a limited but still
//               valid case of F_depth_stencil.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_texture(void) const;

874 26 get_supports_depth_stencil 4 1063 49 GraphicsStateGuardian::get_supports_depth_stencil 0 1 346 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               only returns true if the GSG supports the full
//               packed depth-stencil functionality.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_stencil(void) const;

875 26 get_supports_basic_shaders 4 1063 49 GraphicsStateGuardian::get_supports_basic_shaders 0 1 347 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_basic_shaders(void) const;

876 17 get_supports_glsl 4 1063 40 GraphicsStateGuardian::get_supports_glsl 0 1 348 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_glsl
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               GLSL shaders.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsStateGuardian::get_supports_glsl(void) const;

877 20 get_supports_stencil 4 1063 43 GraphicsStateGuardian::get_supports_stencil 0 1 349 328
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               stencil buffers at all.
////////////////////////////////////////////////////////////////////
68
inline bool GraphicsStateGuardian::get_supports_stencil(void) const;

878 30 get_supports_two_sided_stencil 4 1063 53 GraphicsStateGuardian::get_supports_two_sided_stencil 0 1 350 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_two_sided_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               two sided stencil: different stencil settings for the
//               front and back side of the same polygon.
////////////////////////////////////////////////////////////////////
78
inline bool GraphicsStateGuardian::get_supports_two_sided_stencil(void) const;

879 32 get_supports_geometry_instancing 4 1063 55 GraphicsStateGuardian::get_supports_geometry_instancing 0 1 351 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_instancing
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               hardware geometry instancing: the ability to render
//               multiple copies of a model. In OpenGL, this is
//               done using the EXT_draw_instanced extension.
////////////////////////////////////////////////////////////////////
80
inline bool GraphicsStateGuardian::get_supports_geometry_instancing(void) const;

880 39 get_maximum_simultaneous_render_targets 4 1063 62 GraphicsStateGuardian::get_maximum_simultaneous_render_targets 0 1 352 338
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_maximum_simultaneous_render_targets
//       Access: Published
//  Description: Returns the maximum simultaneous render targets 
//               supported.
////////////////////////////////////////////////////////////////////
86
inline int GraphicsStateGuardian::get_maximum_simultaneous_render_targets(void) const;

881 16 get_shader_model 4 1063 39 GraphicsStateGuardian::get_shader_model 0 1 353 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_model
//       Access: Published
//  Description: Returns the ShaderModel
////////////////////////////////////////////////////////////////////
63
inline int GraphicsStateGuardian::get_shader_model(void) const;

882 16 set_shader_model 4 1063 39 GraphicsStateGuardian::set_shader_model 0 1 354 403
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_model
//       Access: Published
//  Description: Sets the ShaderModel.  This will override the auto-
//               detected shader model during GSG reset.  Useful for
//               testing lower-end shaders.
////////////////////////////////////////////////////////////////////
70
inline void GraphicsStateGuardian::set_shader_model(int shader_model);

883 23 get_supports_cg_profile 4 1063 46 GraphicsStateGuardian::get_supports_cg_profile 0 1 355 350
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cg_profile
//       Access: Published, Virtual
//  Description: Returns true if this particular GSG supports the 
//               specified Cg Shader Profile.
////////////////////////////////////////////////////////////////////
100
virtual bool GraphicsStateGuardian::get_supports_cg_profile(basic_string< char > const &name) const;

884 28 get_color_scale_via_lighting 4 1063 51 GraphicsStateGuardian::get_color_scale_via_lighting 0 1 356 499
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_color_scale_via_lighting(void) const;

885 27 get_alpha_scale_via_texture 4 1063 50 GraphicsStateGuardian::get_alpha_scale_via_texture 0 2 357 358 1116
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) an alpha scale via an
//               additional Texture layer, or false if we need to
//               actually munge the alpha.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: This variant of get_alpha_scale_via_texture() answers
//               the question of whether the GSG can implement an
//               alpha scale via an additional Texture layer,
//               considering the current TextureAttrib that will be in
//               effect.  This considers whether there is at least one
//               additional texture slot available on the GSG.
////////////////////////////////////////////////////////////////////
178
inline bool GraphicsStateGuardian::get_alpha_scale_via_texture(void) const;
inline bool GraphicsStateGuardian::get_alpha_scale_via_texture(TextureAttrib const *tex_attrib) const;

886 23 get_runtime_color_scale 4 1063 46 GraphicsStateGuardian::get_runtime_color_scale 0 1 359 483
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_runtime_color_scale
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale directly, without requiring any munging of
//               vertices or tricks with lighting.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_runtime_color_scale(void) const;

887 29 get_alpha_scale_texture_stage 4 1063 52 GraphicsStateGuardian::get_alpha_scale_texture_stage 0 1 360 408
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_texture_stage
//       Access: Published, Static
//  Description: Returns the TextureStage that will be used to apply
//               an alpha scale, if get_alpha_scale_via_texture()
//               returns true.
////////////////////////////////////////////////////////////////////
87
static inline TextureStage *GraphicsStateGuardian::get_alpha_scale_texture_stage(void);

888 21 set_coordinate_system 4 1063 44 GraphicsStateGuardian::set_coordinate_system 0 1 361 627
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.
////////////////////////////////////////////////////////////////////
71
void GraphicsStateGuardian::set_coordinate_system(CoordinateSystem cs);

889 21 get_coordinate_system 4 1063 44 GraphicsStateGuardian::get_coordinate_system 0 1 362 457
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
////////////////////////////////////////////////////////////////////
81
inline CoordinateSystem GraphicsStateGuardian::get_coordinate_system(void) const;

890 30 get_internal_coordinate_system 4 1063 53 GraphicsStateGuardian::get_internal_coordinate_system 0 1 363 756
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_internal_coordinate_system
//       Access: Published, Virtual
//  Description: Returns the coordinate system used internally by the
//               GSG.  This may be the same as the external coordinate
//               system reported by get_coordinate_system(), or it may
//               be something different.
//
//               In any case, vertices that have been transformed
//               before being handed to the GSG (that is, vertices
//               with a contents value of C_clip_point) will be
//               expected to be in this coordinate system.
////////////////////////////////////////////////////////////////////
91
virtual CoordinateSystem GraphicsStateGuardian::get_internal_coordinate_system(void) const;

891 20 get_prepared_objects 4 1063 43 GraphicsStateGuardian::get_prepared_objects 0 1 364 411
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_objects
//       Access: Public, Virtual
//  Description: Returns the set of texture and geom objects that have
//               been prepared with this GSG (and possibly other GSG's
//               that share objects).
////////////////////////////////////////////////////////////////////
83
virtual PreparedGraphicsObjects *GraphicsStateGuardian::get_prepared_objects(void);

892 9 set_gamma 4 1063 32 GraphicsStateGuardian::set_gamma 0 1 365 277
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_gamma
//       Access: Published, Virtual
//  Description: Set gamma.  Returns true on success.
////////////////////////////////////////////////////////////////////
59
virtual bool GraphicsStateGuardian::set_gamma(float gamma);

893 9 get_gamma 4 1063 32 GraphicsStateGuardian::get_gamma 0 1 366 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_gamma
//       Access: Published
//  Description: Get the current gamma setting.
////////////////////////////////////////////////////////////////////
52
float GraphicsStateGuardian::get_gamma(float gamma);

894 13 restore_gamma 4 1063 36 GraphicsStateGuardian::restore_gamma 0 1 367 276
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::restore_gamma
//       Access: Published, Virtual
//  Description: Restore original gamma setting.
////////////////////////////////////////////////////////////////////
56
virtual void GraphicsStateGuardian::restore_gamma(void);

895 28 set_texture_quality_override 4 1063 51 GraphicsStateGuardian::set_texture_quality_override 0 1 368 749
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_texture_quality_override
//       Access: Published
//  Description: Specifies the global quality_level to be imposed for
//               all Textures rendered by this GSG.  This overrides
//               the value set on individual textures via
//               Texture::set_quality_level().  Set this to
//               Texture::QL_default in order to allow the individual
//               texture quality levels to be respected.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
////////////////////////////////////////////////////////////////////
101
inline void GraphicsStateGuardian::set_texture_quality_override(Texture::QualityLevel quality_level);

896 28 get_texture_quality_override 4 1063 51 GraphicsStateGuardian::get_texture_quality_override 0 1 369 485
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_texture_quality_override
//       Access: Published
//  Description: Returns the global quality_level override specified
//               by set_texture_quality_override.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
////////////////////////////////////////////////////////////////////
93
inline Texture::QualityLevel GraphicsStateGuardian::get_texture_quality_override(void) const;

897 21 get_prepared_textures 4 1063 44 GraphicsStateGuardian::get_prepared_textures 0 1 370 340
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_textures
//       Access: Published
//  Description: Returns a Python list of all of the
//               currently-prepared textures within the GSG.
////////////////////////////////////////////////////////////////////
67
PyObject *GraphicsStateGuardian::get_prepared_textures(void) const;

898 26 traverse_prepared_textures 4 1063 49 GraphicsStateGuardian::traverse_prepared_textures 0 0 405
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::traverse_prepared_textures
//       Access: Public
//  Description: Calls the indicated function on all
//               currently-prepared textures, or until the callback
//               function returns false.
////////////////////////////////////////////////////////////////////
129
void GraphicsStateGuardian::traverse_prepared_textures(bool (*func)(TextureContext *tc, void *callback_arg), void *callback_arg);

899 17 set_flash_texture 4 1063 40 GraphicsStateGuardian::set_flash_texture 0 1 371 1337
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_flash_texture
//       Access: Published
//  Description: Sets the "flash texture".  This is a debug feature;
//               when enabled, the specified texture will begin
//               flashing in the scene, helping you to find it
//               visually.
//
//               The texture also flashes with a color code: blue for
//               mipmap level 0, yellow for mipmap level 1, and red
//               for mipmap level 2 or higher (even for textures that
//               don't have mipmaps).  This gives you an idea of the
//               choice of the texture size.  If it is blue, the
//               texture is being drawn the proper size or magnified;
//               if it is yellow, it is being minified a little bit;
//               and if it red, it is being minified considerably.  If
//               you see a red texture when you are right in front of
//               it, you should consider reducing the size of the
//               texture to avoid wasting texture memory.
//
//               Not all rendering backends support the flash_texture
//               feature.  Presently, it is only supported by OpenGL.
////////////////////////////////////////////////////////////////////
60
void GraphicsStateGuardian::set_flash_texture(Texture *tex);

900 19 clear_flash_texture 4 1063 42 GraphicsStateGuardian::clear_flash_texture 0 1 372 344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::clear_flash_texture
//       Access: Published
//  Description: Resets the "flash texture", so that no textures will
//               flash.  See set_flash_texture().
////////////////////////////////////////////////////////////////////
54
void GraphicsStateGuardian::clear_flash_texture(void);

901 17 get_flash_texture 4 1063 40 GraphicsStateGuardian::get_flash_texture 0 1 373 344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_flash_texture
//       Access: Published
//  Description: Returns the current "flash texture", if any, or NULL
//               if none.  See set_flash_texture().
////////////////////////////////////////////////////////////////////
62
Texture *GraphicsStateGuardian::get_flash_texture(void) const;

902 9 set_scene 4 1063 32 GraphicsStateGuardian::set_scene 0 1 374 549
// NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_scene
//       Access: Published
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.  Returns true if the scene is
//               acceptable, false if something's wrong.  This should
//               be called in the draw thread only.
////////////////////////////////////////////////////////////////////
63
bool GraphicsStateGuardian::set_scene(SceneSetup *scene_setup);

903 9 get_scene 4 1063 32 GraphicsStateGuardian::get_scene 0 1 375 279
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_scene
//       Access: Published, Virtual
//  Description: Returns the current SceneSetup object.
////////////////////////////////////////////////////////////////////
65
virtual SceneSetup *GraphicsStateGuardian::get_scene(void) const;

904 11 begin_scene 4 1063 34 GraphicsStateGuardian::begin_scene 0 1 376 933
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::begin_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the beginning of drawing commands for a "scene"
//               (usually a particular DisplayRegion) within a frame.
//               All 3-D drawing commands, except the clear operation,
//               must be enclosed within begin_scene() .. end_scene().
//               This must be called in the draw thread.
//
//               The return value is true if successful (in which case
//               the scene will be drawn and end_scene() will be
//               called later), or false if unsuccessful (in which
//               case nothing will be drawn and end_scene() will not
//               be called).
////////////////////////////////////////////////////////////////////
54
virtual bool GraphicsStateGuardian::begin_scene(void);

905 9 end_scene 4 1063 32 GraphicsStateGuardian::end_scene 0 1 377 565
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::end_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the end of drawing commands for a "scene" (usually a
//               particular DisplayRegion) within a frame.  All 3-D
//               drawing commands, except the clear operation, must be
//               enclosed within begin_scene() .. end_scene().
////////////////////////////////////////////////////////////////////
52
virtual void GraphicsStateGuardian::end_scene(void);

906 14 get_class_type 4 1063 37 GraphicsStateGuardian::get_class_type 0 1 378 0
62
static TypeHandle GraphicsStateGuardian::get_class_type(void);

907 12 get_left_eye 4 1066 33 StereoDisplayRegion::get_left_eye 0 1 379 819
// Filename: stereoDisplayRegion.I
// Created by:  drose (19Feb09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_left_eye
//       Access: Published
//  Description: Returns a pointer to the left DisplayRegion managed
//               by this stereo object.
////////////////////////////////////////////////////////////////////
62
inline DisplayRegion *StereoDisplayRegion::get_left_eye(void);

908 13 get_right_eye 4 1066 34 StereoDisplayRegion::get_right_eye 0 1 380 326
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_right_eye
//       Access: Published
//  Description: Returns a pointer to the right DisplayRegion managed
//               by this stereo object.
////////////////////////////////////////////////////////////////////
63
inline DisplayRegion *StereoDisplayRegion::get_right_eye(void);

909 14 get_class_type 4 1066 35 StereoDisplayRegion::get_class_type 0 1 381 0
60
static TypeHandle StereoDisplayRegion::get_class_type(void);

910 28 upcast_to_GraphicsOutputBase 12 1067 44 GraphicsOutput::upcast_to_GraphicsOutputBase 0 1 455 48
upcast from GraphicsOutput to GraphicsOutputBase
71
GraphicsOutputBase *GraphicsOutput::upcast_to_GraphicsOutputBase(void);

911 26 downcast_to_GraphicsOutput 12 1068 46 GraphicsOutputBase::downcast_to_GraphicsOutput 0 1 456 50
downcast from GraphicsOutputBase to GraphicsOutput
69
GraphicsOutput *GraphicsOutputBase::downcast_to_GraphicsOutput(void);

912 24 upcast_to_DrawableRegion 12 1067 40 GraphicsOutput::upcast_to_DrawableRegion 0 1 457 44
upcast from GraphicsOutput to DrawableRegion
63
DrawableRegion *GraphicsOutput::upcast_to_DrawableRegion(void);

913 26 downcast_to_GraphicsOutput 12 1045 42 DrawableRegion::downcast_to_GraphicsOutput 0 1 458 46
downcast from DrawableRegion to GraphicsOutput
65
GraphicsOutput *DrawableRegion::downcast_to_GraphicsOutput(void);

914 15 ~GraphicsOutput 4 1067 31 GraphicsOutput::~GraphicsOutput 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
46
virtual GraphicsOutput::~GraphicsOutput(void);

915 7 get_gsg 4 1067 23 GraphicsOutput::get_gsg 0 1 382 1096
// Filename: graphicsOutput.I
// Created by:  drose (06Feb04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
////////////////////////////////////////////////////////////////////
66
inline GraphicsStateGuardian *GraphicsOutput::get_gsg(void) const;

916 8 get_pipe 4 1067 24 GraphicsOutput::get_pipe 0 1 383 586
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsOutput::get_pipe(void) const;

917 10 get_engine 4 1067 26 GraphicsOutput::get_engine 0 1 384 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this output.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
////////////////////////////////////////////////////////////////////
62
inline GraphicsEngine *GraphicsOutput::get_engine(void) const;

918 8 get_name 4 1067 24 GraphicsOutput::get_name 0 1 385 308
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > const &GraphicsOutput::get_name(void) const;

919 14 count_textures 4 1067 30 GraphicsOutput::count_textures 0 1 386 539
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::count_textures(void) const;

920 11 has_texture 4 1067 27 GraphicsOutput::has_texture 0 1 387 318
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
////////////////////////////////////////////////////////////////////
52
inline bool GraphicsOutput::has_texture(void) const;

921 11 get_texture 4 1067 27 GraphicsOutput::get_texture 0 2 388 389 725
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
////////////////////////////////////////////////////////////////////
71
virtual inline Texture *GraphicsOutput::get_texture(int i = (0)) const;

922 17 get_texture_plane 4 1067 33 GraphicsOutput::get_texture_plane 0 2 390 391 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
////////////////////////////////////////////////////////////////////
95
inline DrawableRegion::RenderTexturePlane GraphicsOutput::get_texture_plane(int i = (0)) const;

923 12 get_rtm_mode 4 1067 28 GraphicsOutput::get_rtm_mode 0 2 392 393 378
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
////////////////////////////////////////////////////////////////////
89
inline GraphicsOutput::RenderTextureMode GraphicsOutput::get_rtm_mode(int i = (0)) const;

924 21 clear_render_textures 4 1067 37 GraphicsOutput::clear_render_textures 0 1 394 387
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::clear_render_textures(void);

925 18 add_render_texture 4 1067 34 GraphicsOutput::add_render_texture 0 2 395 396 1875
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
////////////////////////////////////////////////////////////////////
153
void GraphicsOutput::add_render_texture(Texture *tex, GraphicsOutput::RenderTextureMode mode, DrawableRegion::RenderTexturePlane bitplane = (RTP_COUNT));

926 20 setup_render_texture 4 1067 36 GraphicsOutput::setup_render_texture 0 1 397 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
////////////////////////////////////////////////////////////////////
86
void GraphicsOutput::setup_render_texture(Texture *tex, bool allow_bind, bool to_ram);

927 10 get_x_size 4 1067 26 GraphicsOutput::get_x_size 0 1 398 746
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the visible width of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_x_size(void) const;

928 10 get_y_size 4 1067 26 GraphicsOutput::get_y_size 0 1 399 747
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the visible height of the window or buffer,
//               if it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_y_size(void) const;

929 13 get_fb_x_size 4 1067 29 GraphicsOutput::get_fb_x_size 0 1 400 440
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_x_size
//       Access: Published
//  Description: Returns the internal width of the window or buffer.
//               This is almost always the same as get_x_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
53
inline int GraphicsOutput::get_fb_x_size(void) const;

930 13 get_fb_y_size 4 1067 29 GraphicsOutput::get_fb_y_size 0 1 401 441
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_y_size
//       Access: Published
//  Description: Returns the internal height of the window or buffer.
//               This is almost always the same as get_y_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
53
inline int GraphicsOutput::get_fb_y_size(void) const;

931 8 has_size 4 1067 24 GraphicsOutput::has_size 0 1 402 530
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::has_size(void) const;

932 8 is_valid 4 1067 24 GraphicsOutput::is_valid 0 1 403 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::is_valid(void) const;

933 10 set_active 4 1067 26 GraphicsOutput::set_active 0 1 404 380
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
45
void GraphicsOutput::set_active(bool active);

934 9 is_active 4 1067 25 GraphicsOutput::is_active 0 1 405 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool GraphicsOutput::is_active(void) const;

935 12 set_one_shot 4 1067 28 GraphicsOutput::set_one_shot 0 1 406 1266
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will render one
//               frame and then automatically set itself inactive.
//               This is particularly useful for buffers that are
//               created for the purposes of render-to-texture, for
//               static textures that don't need to be continually
//               re-rendered once they have been rendered the first
//               time.
//
//               Setting the buffer inactive is not the same thing as
//               destroying it.  You are still responsible for passing
//               this buffer to GraphicsEngine::remove_window() when
//               you no longer need the texture, in order to clean up
//               fully.  (However, you should not call remove_window()
//               on this buffer while the texture is still needed,
//               because depending on the render-to-texture mechanism
//               in use, this may invalidate the texture contents.)
////////////////////////////////////////////////////////////////////
56
inline void GraphicsOutput::set_one_shot(bool one_shot);

936 12 get_one_shot 4 1067 28 GraphicsOutput::get_one_shot 0 1 407 512
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically detach its texture (if it has one) and
//               remove itself from the GraphicsEngine after it
//               renders the next frame.
////////////////////////////////////////////////////////////////////
53
inline bool GraphicsOutput::get_one_shot(void) const;

937 12 set_inverted 4 1067 28 GraphicsOutput::set_inverted 0 1 408 947
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::set_inverted(bool inverted);

938 12 get_inverted 4 1067 28 GraphicsOutput::get_inverted 0 1 409 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
////////////////////////////////////////////////////////////////////
53
inline bool GraphicsOutput::get_inverted(void) const;

939 19 set_red_blue_stereo 4 1067 35 GraphicsOutput::set_red_blue_stereo 0 1 410 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
////////////////////////////////////////////////////////////////////
139
inline void GraphicsOutput::set_red_blue_stereo(bool red_blue_stereo, unsigned int left_eye_color_mask, unsigned int right_eye_color_mask);

940 19 get_red_blue_stereo 4 1067 35 GraphicsOutput::get_red_blue_stereo 0 1 411 357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
60
inline bool GraphicsOutput::get_red_blue_stereo(void) const;

941 23 get_left_eye_color_mask 4 1067 39 GraphicsOutput::get_left_eye_color_mask 0 1 412 470
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
72
inline unsigned int GraphicsOutput::get_left_eye_color_mask(void) const;

942 24 get_right_eye_color_mask 4 1067 40 GraphicsOutput::get_right_eye_color_mask 0 1 413 472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
73
inline unsigned int GraphicsOutput::get_right_eye_color_mask(void) const;

943 17 get_fb_properties 4 1067 33 GraphicsOutput::get_fb_properties 0 1 414 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
////////////////////////////////////////////////////////////////////
82
inline FrameBufferProperties const &GraphicsOutput::get_fb_properties(void) const;

944 9 is_stereo 4 1067 25 GraphicsOutput::is_stereo 0 1 415 447
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsOutput::is_stereo(void) const;

945 17 clear_delete_flag 4 1067 33 GraphicsOutput::clear_delete_flag 0 1 416 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
////////////////////////////////////////////////////////////////////
52
inline void GraphicsOutput::clear_delete_flag(void);

946 15 get_delete_flag 4 1067 31 GraphicsOutput::get_delete_flag 0 1 417 460
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsOutput::get_delete_flag(void) const;

947 8 set_sort 4 1067 24 GraphicsOutput::set_sort 0 1 418 345
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published, Virtual
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
////////////////////////////////////////////////////////////////////
48
virtual void GraphicsOutput::set_sort(int sort);

948 8 get_sort 4 1067 24 GraphicsOutput::get_sort 0 1 419 432
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
////////////////////////////////////////////////////////////////////
48
inline int GraphicsOutput::get_sort(void) const;

949 14 set_child_sort 4 1067 30 GraphicsOutput::set_child_sort 0 1 420 1026
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_child_sort
//       Access: Published
//  Description: Specifies the sort value of future offscreen buffers
//               created by make_texture_sort().
//
//               The purpose of this method is to allow the user to
//               limit the sort value chosen for a buffer created via
//               make_texture_buffer().  Normally, this buffer will be
//               assigned a value of get_sort() - 1, so that it
//               will be rendered before this window is rendered; but
//               sometimes this isn't sufficiently early, especially
//               if other buffers also have a view into the same
//               scene.
//
//               If you specify a value here, then new buffers created
//               via make_texture_buffer() will be given that sort
//               value instead of get_sort() - 1.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsOutput::set_child_sort(int child_sort);

950 16 clear_child_sort 4 1067 32 GraphicsOutput::clear_child_sort 0 1 421 390
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_child_sort
//       Access: Published
//  Description: Resets the sort value of future offscreen buffers
//               created by make_texture_sort() to the default value.
//               See set_child_sort().
////////////////////////////////////////////////////////////////////
51
inline void GraphicsOutput::clear_child_sort(void);

951 14 get_child_sort 4 1067 30 GraphicsOutput::get_child_sort 0 1 422 351
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_child_sort
//       Access: Published
//  Description: Returns the sort value of future offscreen buffers
//               created by make_texture_sort(). See set_child_sort().
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::get_child_sort(void) const;

952 12 trigger_copy 4 1067 28 GraphicsOutput::trigger_copy 0 1 423 376
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
////////////////////////////////////////////////////////////////////
47
inline void GraphicsOutput::trigger_copy(void);

953 19 make_display_region 4 1067 35 GraphicsOutput::make_display_region 0 2 424 425 1389
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////
152
inline DisplayRegion *GraphicsOutput::make_display_region(void);
DisplayRegion *GraphicsOutput::make_display_region(float l, float r, float b, float t);

954 24 make_mono_display_region 4 1067 40 GraphicsOutput::make_mono_display_region 0 2 426 427 931
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a mono DisplayRegion, even if
//               is_stereo() is true.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a mono DisplayRegion, even if
//               is_stereo() is true.
////////////////////////////////////////////////////////////////////
162
inline DisplayRegion *GraphicsOutput::make_mono_display_region(void);
DisplayRegion *GraphicsOutput::make_mono_display_region(float l, float r, float b, float t);

955 26 make_stereo_display_region 4 1067 42 GraphicsOutput::make_stereo_display_region 0 2 428 429 941
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////
178
inline StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(void);
StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(float l, float r, float b, float t);

956 21 remove_display_region 4 1067 37 GraphicsOutput::remove_display_region 0 1 430 492
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
////////////////////////////////////////////////////////////////////
74
bool GraphicsOutput::remove_display_region(DisplayRegion *display_region);

957 26 remove_all_display_regions 4 1067 42 GraphicsOutput::remove_all_display_regions 0 1 431 359
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
////////////////////////////////////////////////////////////////////
54
void GraphicsOutput::remove_all_display_regions(void);

958 23 get_num_display_regions 4 1067 39 GraphicsOutput::get_num_display_regions 0 1 432 355
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
////////////////////////////////////////////////////////////////////
56
int GraphicsOutput::get_num_display_regions(void) const;

959 18 get_display_region 4 1067 34 GraphicsOutput::get_display_region 0 1 433 542
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
////////////////////////////////////////////////////////////////////
75
PointerTo< DisplayRegion > GraphicsOutput::get_display_region(int n) const;

960 30 get_num_active_display_regions 4 1067 46 GraphicsOutput::get_num_active_display_regions 0 1 434 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
////////////////////////////////////////////////////////////////////
63
int GraphicsOutput::get_num_active_display_regions(void) const;

961 25 get_active_display_region 4 1067 41 GraphicsOutput::get_active_display_region 0 1 435 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
////////////////////////////////////////////////////////////////////
82
PointerTo< DisplayRegion > GraphicsOutput::get_active_display_region(int n) const;

962 19 make_texture_buffer 4 1067 35 GraphicsOutput::make_texture_buffer 0 4 436 437 438 439 1888
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window() (or
//               set the one_shot flag so it removes itself after one
//               frame).
////////////////////////////////////////////////////////////////////
203
GraphicsOutput *GraphicsOutput::make_texture_buffer(basic_string< char > const &name, int x_size, int y_size, Texture *tex = ((void *)(0)), bool to_ram = (0), FrameBufferProperties *fbp = ((void *)(0)));

963 13 make_cube_map 4 1067 29 GraphicsOutput::make_cube_map 0 4 440 441 442 443 1206
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
////////////////////////////////////////////////////////////////////
244
GraphicsOutput *GraphicsOutput::make_cube_map(basic_string< char > const &name, int size, NodePath &camera_rig, BitMask< unsigned int, 32 > camera_mask = ((get_all_camera_mask())), bool to_ram = (0), FrameBufferProperties *fbp = ((void *)(0)));

964 24 make_screenshot_filename 4 1067 40 GraphicsOutput::make_screenshot_filename 0 2 444 445 806
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
117
static inline Filename GraphicsOutput::make_screenshot_filename(basic_string< char > const &prefix = ("screenshot"));

965 23 save_screenshot_default 4 1067 39 GraphicsOutput::save_screenshot_default 0 2 446 447 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
109
inline Filename GraphicsOutput::save_screenshot_default(basic_string< char > const &prefix = ("screenshot"));

966 15 save_screenshot 4 1067 31 GraphicsOutput::save_screenshot 0 2 448 449 600
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
120
inline bool GraphicsOutput::save_screenshot(Filename const &filename, basic_string< char > const &image_comment = (""));

967 14 get_screenshot 4 1067 30 GraphicsOutput::get_screenshot 0 1 450 399
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
60
inline bool GraphicsOutput::get_screenshot(PNMImage &image);

968 16 get_texture_card 4 1067 32 GraphicsOutput::get_texture_card 0 1 451 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
////////////////////////////////////////////////////////////////////
48
NodePath GraphicsOutput::get_texture_card(void);

969 18 share_depth_buffer 4 1067 34 GraphicsOutput::share_depth_buffer 0 1 452 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::share_depth_buffer
//       Access: Published, Virtual
//  Description: Will attempt to use the depth buffer of the input
//               graphics_output. The buffer sizes must be exactly
//               the same.
////////////////////////////////////////////////////////////////////
81
virtual bool GraphicsOutput::share_depth_buffer(GraphicsOutput *graphics_output);

970 20 unshare_depth_buffer 4 1067 36 GraphicsOutput::unshare_depth_buffer 0 1 453 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::unshare_depth_buffer
//       Access: Published, Virtual
//  Description: Discontinue sharing the depth buffer.
////////////////////////////////////////////////////////////////////
56
virtual void GraphicsOutput::unshare_depth_buffer(void);

971 14 get_class_type 4 1067 30 GraphicsOutput::get_class_type 0 1 454 0
55
static TypeHandle GraphicsOutput::get_class_type(void);

972 8 set_size 4 1071 24 GraphicsBuffer::set_size 0 1 459 548
////////////////////////////////////////////////////////////////////
//     Function: GraphicsBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
////////////////////////////////////////////////////////////////////
44
void GraphicsBuffer::set_size(int x, int y);

973 14 get_class_type 4 1071 30 GraphicsBuffer::get_class_type 0 1 460 0
55
static TypeHandle GraphicsBuffer::get_class_type(void);

974 14 get_properties 4 1072 30 GraphicsWindow::get_properties 0 1 461 275
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
////////////////////////////////////////////////////////////////////
66
WindowProperties const GraphicsWindow::get_properties(void) const;

975 24 get_requested_properties 4 1072 40 GraphicsWindow::get_requested_properties 0 1 462 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
////////////////////////////////////////////////////////////////////
76
WindowProperties const GraphicsWindow::get_requested_properties(void) const;

976 25 clear_rejected_properties 4 1072 41 GraphicsWindow::clear_rejected_properties 0 1 463 346
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
////////////////////////////////////////////////////////////////////
53
void GraphicsWindow::clear_rejected_properties(void);

977 23 get_rejected_properties 4 1072 39 GraphicsWindow::get_rejected_properties 0 1 464 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
////////////////////////////////////////////////////////////////////
69
WindowProperties GraphicsWindow::get_rejected_properties(void) const;

978 18 request_properties 4 1072 34 GraphicsWindow::request_properties 0 1 465 603
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
////////////////////////////////////////////////////////////////////
86
void GraphicsWindow::request_properties(WindowProperties const &requested_properties);

979 9 is_closed 4 1072 25 GraphicsWindow::is_closed 0 1 466 1121
// Filename: graphicsWindow.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsWindow::is_closed(void) const;

980 13 is_fullscreen 4 1072 29 GraphicsWindow::is_fullscreen 0 1 467 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsWindow::is_fullscreen(void) const;

981 16 set_window_event 4 1072 32 GraphicsWindow::set_window_event 0 1 468 630
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
////////////////////////////////////////////////////////////////////
80
void GraphicsWindow::set_window_event(basic_string< char > const &window_event);

982 16 get_window_event 4 1072 32 GraphicsWindow::get_window_event 0 1 469 421
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
////////////////////////////////////////////////////////////////////
66
basic_string< char > GraphicsWindow::get_window_event(void) const;

983 23 set_close_request_event 4 1072 39 GraphicsWindow::set_close_request_event 0 1 470 1393
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
////////////////////////////////////////////////////////////////////
94
void GraphicsWindow::set_close_request_event(basic_string< char > const &close_request_event);

984 23 get_close_request_event 4 1072 39 GraphicsWindow::get_close_request_event 0 1 471 515
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
////////////////////////////////////////////////////////////////////
73
basic_string< char > GraphicsWindow::get_close_request_event(void) const;

985 17 get_window_handle 4 1072 33 GraphicsWindow::get_window_handle 0 1 472 641
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_handle
//       Access: Published
//  Description: Returns the WindowHandle corresponding to this window
//               on the desktop.  This is mainly useful for
//               communicating with external libraries.  Use
//               window_handle->get_os_handle()->get_handle(), or
//               window_handle->get_string_handle(), to get the actual
//               OS-specific window handle object, whatever type that
//               might be.
////////////////////////////////////////////////////////////////////
67
inline WindowHandle *GraphicsWindow::get_window_handle(void) const;

986 21 get_num_input_devices 4 1072 37 GraphicsWindow::get_num_input_devices 0 1 473 626
// Mouse and keyboard routines

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
////////////////////////////////////////////////////////////////////
54
int GraphicsWindow::get_num_input_devices(void) const;

987 21 get_input_device_name 4 1072 37 GraphicsWindow::get_input_device_name 0 1 474 310
// Mouse and keyboard routines

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
////////////////////////////////////////////////////////////////////
77
basic_string< char > GraphicsWindow::get_input_device_name(int device) const;

988 11 has_pointer 4 1072 27 GraphicsWindow::has_pointer 0 1 475 366
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
bool GraphicsWindow::has_pointer(int device) const;

989 12 has_keyboard 4 1072 28 GraphicsWindow::has_keyboard 0 1 476 314
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
bool GraphicsWindow::has_keyboard(int device) const;

990 21 enable_pointer_events 4 1072 37 GraphicsWindow::enable_pointer_events 0 1 477 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_events
//       Access: Published
//  Description: Turn on the generation of pointer events.
////////////////////////////////////////////////////////////////////
55
void GraphicsWindow::enable_pointer_events(int device);

991 22 disable_pointer_events 4 1072 38 GraphicsWindow::disable_pointer_events 0 1 478 280
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: Turn off the generation of pointer events.
////////////////////////////////////////////////////////////////////
56
void GraphicsWindow::disable_pointer_events(int device);

992 19 enable_pointer_mode 4 1072 35 GraphicsWindow::enable_pointer_mode 0 1 479 285
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_mode
//       Access: Published
//  Description: See GraphicsWindowInputDevice::enable_pointer_mode
////////////////////////////////////////////////////////////////////
67
void GraphicsWindow::enable_pointer_mode(int device, double speed);

993 20 disable_pointer_mode 4 1072 36 GraphicsWindow::disable_pointer_mode 0 1 480 289
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: See GraphicsWindowInputDevice::disable_pointer_mode
////////////////////////////////////////////////////////////////////
54
void GraphicsWindow::disable_pointer_mode(int device);

994 11 get_pointer 4 1072 27 GraphicsWindow::get_pointer 0 1 481 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth input
//               device's pointer.
////////////////////////////////////////////////////////////////////
56
MouseData GraphicsWindow::get_pointer(int device) const;

995 12 move_pointer 4 1072 28 GraphicsWindow::move_pointer 0 1 482 542
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.  
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
////////////////////////////////////////////////////////////////////
68
virtual bool GraphicsWindow::move_pointer(int device, int x, int y);

996 9 close_ime 4 1072 25 GraphicsWindow::close_ime 0 1 483 274
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
////////////////////////////////////////////////////////////////////
45
virtual void GraphicsWindow::close_ime(void);

997 14 get_class_type 4 1072 30 GraphicsWindow::get_class_type 0 1 484 0
55
static TypeHandle GraphicsWindow::get_class_type(void);

998 8 make_int 4 1073 28 NativeWindowHandle::make_int 0 1 485 607
////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_int
//       Access: Published, Static
//  Description: Constructs a new WindowHandle with an int value,
//               which is understood to be either an HWND or a Window,
//               cast to int.  This method exists for the convenience
//               of Python, which likes to deal with ints; C++ code
//               should use one of the more specific make_x11() or
//               make_win32() methods instead.
////////////////////////////////////////////////////////////////////
83
static PointerTo< WindowHandle > NativeWindowHandle::make_int(unsigned int window);

999 15 make_subprocess 4 1073 35 NativeWindowHandle::make_subprocess 0 1 486 636
////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_subprocess
//       Access: Published, Static
//  Description: Constructs a new WindowHandle that references a
//               SubprocessWindowBuffer read in another process, with
//               the named pipe filename that it uses for
//               communication.
//
//               This is (at present, and maybe always) useful only on
//               the OS X platform, where parenting child windows is
//               particularly problematic.
////////////////////////////////////////////////////////////////////
95
static PointerTo< WindowHandle > NativeWindowHandle::make_subprocess(Filename const &filename);

1000 14 get_class_type 4 1073 34 NativeWindowHandle::get_class_type 0 1 487 0
59
static TypeHandle NativeWindowHandle::get_class_type(void);

1001 19 ~NativeWindowHandle 4 1073 39 NativeWindowHandle::~NativeWindowHandle 0 0 0
46
NativeWindowHandle::~NativeWindowHandle(void);

1002 8 set_size 4 1074 24 ParasiteBuffer::set_size 0 1 488 548
////////////////////////////////////////////////////////////////////
//     Function: ParasiteBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
////////////////////////////////////////////////////////////////////
44
void ParasiteBuffer::set_size(int x, int y);

1003 14 get_class_type 4 1074 30 ParasiteBuffer::get_class_type 0 1 489 0
55
static TypeHandle ParasiteBuffer::get_class_type(void);

1004 14 GraphicsEngine 4 1075 30 GraphicsEngine::GraphicsEngine 0 2 490 491 448
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
////////////////////////////////////////////////////////////////////
67
GraphicsEngine::GraphicsEngine(Pipeline *pipeline = ((void *)(0)));

1005 19 set_threading_model 4 1075 35 GraphicsEngine::set_threading_model 0 1 492 422
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
////////////////////////////////////////////////////////////////////
88
void GraphicsEngine::set_threading_model(GraphicsThreadingModel const &threading_model);

1006 19 get_threading_model 4 1075 35 GraphicsEngine::get_threading_model 0 1 493 347
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
////////////////////////////////////////////////////////////////////
71
GraphicsThreadingModel GraphicsEngine::get_threading_model(void) const;

1007 13 set_auto_flip 4 1075 29 GraphicsEngine::set_auto_flip 0 1 494 1415
// Filename: graphicsEngine.I
// Created by:  drose (24Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
////////////////////////////////////////////////////////////////////
58
inline void GraphicsEngine::set_auto_flip(bool auto_flip);

1008 13 get_auto_flip 4 1075 29 GraphicsEngine::get_auto_flip 0 1 495 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsEngine::get_auto_flip(void) const;

1009 15 set_portal_cull 4 1075 31 GraphicsEngine::set_portal_cull 0 1 496 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
////////////////////////////////////////////////////////////////////
56
inline void GraphicsEngine::set_portal_cull(bool value);

1010 15 get_portal_cull 4 1075 31 GraphicsEngine::get_portal_cull 0 1 497 287
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsEngine::get_portal_cull(void) const;

1011 18 set_default_loader 4 1075 34 GraphicsEngine::set_default_loader 0 1 498 398
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_default_loader
//       Access: Public
//  Description: Sets the Loader object that will be assigned to every
//               GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
////////////////////////////////////////////////////////////////////
63
inline void GraphicsEngine::set_default_loader(Loader *loader);

1012 18 get_default_loader 4 1075 34 GraphicsEngine::get_default_loader 0 1 499 410
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_default_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be assigned to
//               every GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
////////////////////////////////////////////////////////////////////
62
inline Loader *GraphicsEngine::get_default_loader(void) const;

1013 11 make_output 4 1075 27 GraphicsEngine::make_output 0 3 500 501 502 760
// THIS IS THE OLD CODE FOR make_gsg
//  PT(GraphicsStateGuardian) gsg = pipe->make_gsg(properties, share_with);
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
////////////////////////////////////////////////////////////////////
273
GraphicsOutput *GraphicsEngine::make_output(GraphicsPipe *pipe, basic_string< char > const &name, int sort, FrameBufferProperties const &fb_prop, WindowProperties const &win_prop, int flags, GraphicsStateGuardian *gsg = ((void *)(0)), GraphicsOutput *host = ((void *)(0)));

1014 11 make_buffer 4 1075 27 GraphicsEngine::make_buffer 0 2 503 504 1950
// Syntactic shorthand versions of make_output

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This is the
//               preferred way to create an offscreen buffer, when you
//               already have an onscreen window or another buffer to
//               start with.  For the first parameter, pass an
//               existing GraphicsOutput object, e.g. the main window;
//               this allows the buffer to adapt itself to that
//               window's framebuffer properties, and allows maximum
//               sharing of resources.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This flavor
//               accepts a GSG rather than a GraphicsOutput as the
//               first parameter, which is too limiting and disallows
//               the possibility of creating a ParasiteBuffer if the
//               user's graphics hardware prefers that.  It also
//               attempts to request specific framebuffer properties
//               and may therefore do a poorer job of sharing the GSG
//               between the old buffer and the new.
//
//               For these reasons, this variant is a poor choice
//               unless you are creating an offscreen buffer for the
//               first time, without an onscreen window already in
//               existence.  If you already have an onscreen window,
//               you should use the other flavor of make_buffer()
//               instead, which accepts a GraphicsOutput as the first
//               parameter.
////////////////////////////////////////////////////////////////////
289
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsOutput *host, basic_string< char > const &name, int sort, int x_size, int y_size);
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsStateGuardian *gsg, basic_string< char > const &name, int sort, int x_size, int y_size);

1015 13 make_parasite 4 1075 29 GraphicsEngine::make_parasite 0 1 505 265
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
////////////////////////////////////////////////////////////////////
143
inline GraphicsOutput *GraphicsEngine::make_parasite(GraphicsOutput *host, basic_string< char > const &name, int sort, int x_size, int y_size);

1016 13 remove_window 4 1075 29 GraphicsEngine::remove_window 0 1 506 1357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
////////////////////////////////////////////////////////////////////
59
bool GraphicsEngine::remove_window(GraphicsOutput *window);

1017 18 remove_all_windows 4 1075 34 GraphicsEngine::remove_all_windows 0 1 507 412
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
////////////////////////////////////////////////////////////////////
46
void GraphicsEngine::remove_all_windows(void);

1018 17 reset_all_windows 4 1075 33 GraphicsEngine::reset_all_windows 0 1 508 466
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to 
//               release/create old/new framebuffer
////////////////////////////////////////////////////////////////////
55
void GraphicsEngine::reset_all_windows(bool swapchain);

1019 8 is_empty 4 1075 24 GraphicsEngine::is_empty 0 1 509 360
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
////////////////////////////////////////////////////////////////////
42
bool GraphicsEngine::is_empty(void) const;

1020 15 get_num_windows 4 1075 31 GraphicsEngine::get_num_windows 0 1 510 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
////////////////////////////////////////////////////////////////////
48
int GraphicsEngine::get_num_windows(void) const;

1021 10 get_window 4 1075 26 GraphicsEngine::get_window 0 1 511 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
////////////////////////////////////////////////////////////////////
56
GraphicsOutput *GraphicsEngine::get_window(int n) const;

1022 12 render_frame 4 1075 28 GraphicsEngine::render_frame 0 1 512 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::render_frame(void);

1023 12 open_windows 4 1075 28 GraphicsEngine::open_windows 0 1 513 658
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::open_windows(void);

1024 10 sync_frame 4 1075 26 GraphicsEngine::sync_frame 0 1 514 558
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::sync_frame(void);

1025 10 flip_frame 4 1075 26 GraphicsEngine::flip_frame 0 1 515 516
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::flip_frame(void);

1026 20 extract_texture_data 4 1075 36 GraphicsEngine::extract_texture_data 0 1 516 1560
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
84
bool GraphicsEngine::extract_texture_data(Texture *tex, GraphicsStateGuardian *gsg);

1027 14 get_global_ptr 4 1075 30 GraphicsEngine::get_global_ptr 0 1 517 238
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_global_ptr
//       Access: Published, Static
//  Description: 
////////////////////////////////////////////////////////////////////
60
static GraphicsEngine *GraphicsEngine::get_global_ptr(void);

1028 18 get_num_pipe_types 4 1077 41 GraphicsPipeSelection::get_num_pipe_types 0 1 518 382
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
////////////////////////////////////////////////////////////////////
58
int GraphicsPipeSelection::get_num_pipe_types(void) const;

1029 13 get_pipe_type 4 1077 36 GraphicsPipeSelection::get_pipe_type 0 1 519 323
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
////////////////////////////////////////////////////////////////////
61
TypeHandle GraphicsPipeSelection::get_pipe_type(int n) const;

1030 16 print_pipe_types 4 1077 39 GraphicsPipeSelection::print_pipe_types 0 1 520 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
////////////////////////////////////////////////////////////////////
57
void GraphicsPipeSelection::print_pipe_types(void) const;

1031 9 make_pipe 4 1077 32 GraphicsPipeSelection::make_pipe 0 3 521 522 523 1109
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
////////////////////////////////////////////////////////////////////
231
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(basic_string< char > const &type_name, basic_string< char > const &module_name = ((string())));
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(TypeHandle type);

1032 16 make_module_pipe 4 1077 39 GraphicsPipeSelection::make_module_pipe 0 1 524 430
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_module_pipe
//       Access: Published
//  Description: Returns a new GraphicsPipe of a type defined by the
//               indicated module.  Returns NULL if the module is not
//               found or does not properly recommend a GraphicsPipe.
////////////////////////////////////////////////////////////////////
107
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_module_pipe(basic_string< char > const &module_name);

1033 17 make_default_pipe 4 1077 40 GraphicsPipeSelection::make_default_pipe 0 1 525 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
////////////////////////////////////////////////////////////////////
73
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_default_pipe(void);

1034 19 get_num_aux_modules 4 1077 42 GraphicsPipeSelection::get_num_aux_modules 0 1 526 969
// Filename: graphicsPipeSelection.I
// Created by:  drose (15Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsPipeSelection::get_num_aux_modules(void) const;

1035 16 load_aux_modules 4 1077 39 GraphicsPipeSelection::load_aux_modules 0 1 527 391
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
////////////////////////////////////////////////////////////////////
51
void GraphicsPipeSelection::load_aux_modules(void);

1036 14 get_global_ptr 4 1077 37 GraphicsPipeSelection::get_global_ptr 0 1 528 327
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
////////////////////////////////////////////////////////////////////
81
static inline GraphicsPipeSelection *GraphicsPipeSelection::get_global_ptr(void);

528
1 14 Dtool_O9cYlE6b 7 3 1080 0 14 Dtool_O9cYlE6b 229 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1078  
2 14 Dtool_O9cYsWhV 7 3 1080 0 14 Dtool_O9cYsWhV 0 1 9 os_handle 1 1081  
3 14 Dtool_O9cYLwuM 7 4 1081 0 14 Dtool_O9cYLwuM 321 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_os_handle
//       Access: Published
//  Description: Returns the OS-specific handle stored internally to
//               the WindowHandle wrapper.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1078  
4 14 Dtool_O9cYklyc 4 5 1082 0 14 Dtool_O9cYklyc 321 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::set_os_handle
//       Access: Published
//  Description: Changes the OS-specific handle stored internally to
//               the WindowHandle wrapper.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1080  9 os_handle 1 1081  
5 14 Dtool_O9cYBCmq 4 6 1082 0 14 Dtool_O9cYBCmq 566 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::send_windows_message
//       Access: Published
//  Description: Call this method on a parent WindowHandle to deliver
//               a Windows message to the current child window, if any.
//               This is used in the web plugin system to deliver
//               button events detected directly by the browser system
//               into Panda, which is particularly necessary on Vista.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1080  3 msg 1 1083  6 wparam 1 1084  6 lparam 1 1084  
6 14 Dtool_O9cYPIYS 6 7 1083 0 14 Dtool_O9cYPIYS 397 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_int_handle
//       Access: Published
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1078  
7 14 Dtool_O9cYJFbs 4 8 1082 0 14 Dtool_O9cYJFbs 220 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1078  3 out 1 1085  
8 14 Dtool_O9cY21y5 7 13 1088 0 14 Dtool_O9cY21y5 0 0 
9 14 Dtool_O9cYQNL2 6 10 1083 0 14 Dtool_O9cYQNL2 416 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::get_int_handle
//       Access: Published, Virtual
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1089  
10 14 Dtool_O9cYV3Ze 4 11 1082 0 14 Dtool_O9cYV3Ze 239 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1089  3 out 1 1085  
11 14 Dtool_O9cYh_wT 7 12 1088 0 14 Dtool_O9cYh_wT 0 0 
12 14 Dtool_O9cYGNZU 7 17 1091 541 14 Dtool_O9cYGNZU 228 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
13 14 Dtool_O9cYlceF 7 17 1091 541 14 Dtool_O9cYlceF 725 // Filename: windowProperties.I
// Created by:  drose (13Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1092  
14 14 Dtool_O9cYZC_R 6 18 1091 0 14 Dtool_O9cYZC_R 241 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  4 copy 1 1092  
15 14 Dtool_O9cYPD11 7 20 1091 541 14 Dtool_O9cYPD11 395 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_config_properties
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
//////////////////////////////////////////////////////////////////// 0 
16 14 Dtool_O9cY1hD1 7 21 1091 541 14 Dtool_O9cY1hD1 457 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties.  If
//               set_default() has been called, this returns that
//               WindowProperties structure; otherwise, this returns
//               get_config_properties().
//////////////////////////////////////////////////////////////////// 0 
17 14 Dtool_O9cYNbiB 4 22 1082 0 14 Dtool_O9cYNbiB 589 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_default
//       Access: Published, Static
//  Description: Replaces the "default" WindowProperties with the
//               specified structure.  The specified WindowProperties
//               will be returned by future calls to get_default(),
//               until clear_default() is called.
//
//               Note that this completely replaces the default
//               properties; it is not additive.
//////////////////////////////////////////////////////////////////// 1 18 default_properties 1 1092  
18 14 Dtool_O9cYDZHK 4 23 1082 0 14 Dtool_O9cYDZHK 346 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties to whatever
//               is specified in the user's config file.
//////////////////////////////////////////////////////////////////// 0 
19 14 Dtool_O9cY7Qam 7 24 1091 541 14 Dtool_O9cY7Qam 386 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::size
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with only the
//               size specified.  The size is the only property that
//               matters to buffers.
//////////////////////////////////////////////////////////////////// 2 6 x_size 1 1084  6 y_size 1 1084  
20 14 Dtool_O9cYgRMD 6 25 1094 0 14 Dtool_O9cYgRMD 229 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator == 
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1092  5 other 1 1092  
21 14 Dtool_O9cY_Vsq 6 26 1094 0 14 Dtool_O9cY_Vsq 228 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1092  5 other 1 1092  
22 14 Dtool_O9cYIj6c 4 27 1082 0 14 Dtool_O9cYIj6c 381 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
23 14 Dtool_O9cY5Hm3 6 28 1094 0 14 Dtool_O9cY5Hm3 319 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
24 14 Dtool_O9cY_6s1 4 29 1082 0 14 Dtool_O9cY_6s1 514 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1091  8 x_origin 1 1084  8 y_origin 1 1084  
25 14 Dtool_O9cYmWEm 6 30 1084 0 14 Dtool_O9cYmWEm 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
26 14 Dtool_O9cYjWge 6 31 1084 0 14 Dtool_O9cYjWge 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
27 14 Dtool_O9cYeNcv 6 32 1094 0 14 Dtool_O9cYeNcv 315 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
28 14 Dtool_O9cYJusE 4 33 1082 0 14 Dtool_O9cYJusE 283 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
29 14 Dtool_O9cY7Ba1 4 34 1082 0 14 Dtool_O9cY7Ba1 393 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1091  6 x_size 1 1084  6 y_size 1 1084  
30 14 Dtool_O9cYVfNw 6 35 1084 0 14 Dtool_O9cYVfNw 401 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
31 14 Dtool_O9cYQfpo 6 36 1084 0 14 Dtool_O9cYQfpo 402 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
32 14 Dtool_O9cY04_T 6 37 1094 0 14 Dtool_O9cY04_T 311 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
33 14 Dtool_O9cYChuY 4 38 1082 0 14 Dtool_O9cYChuY 279 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
34 14 Dtool_O9cYrK49 6 39 1094 0 14 Dtool_O9cYrK49 232 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_mouse_mode
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
35 14 Dtool_O9cYmSWG 4 40 1082 0 14 Dtool_O9cYmSWG 1074 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_mouse_mode
//       Access: Published
//  Description: Specifies the mode in which the window is to operate
//               its mouse pointer.  The default is M_absolute, which
//               is the normal mode in which a mouse pointer operates;
//               but you can also set M_relative, which is
//               particularly useful for FPS-style mouse movements
//               where you have hidden the mouse pointer and are are
//               more interested in how fast the mouse is moving,
//               rather than precisely where the pointer is hovering.
//
//               This has no effect on Windows, which does not
//               have this concept; but is important to do on OSX
//               and Unix/X11 to properly enable a smooth FPS-style
//               mouselook mode.  On Unix/X11, this requires the
//               Xxf86dga extension to be available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  4 mode 1 1042  
36 14 Dtool_O9cYjVO3 6 41 1042 0 14 Dtool_O9cYjVO3 253 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_mouse_mode
//       Access: Published
//  Description: See set_mouse_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
37 14 Dtool_O9cYmyf3 4 42 1082 0 14 Dtool_O9cYmyf3 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_mouse_mode
//       Access: Published
//  Description: Removes the mouse_mode specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
38 14 Dtool_O9cYEtQx 4 43 1082 0 14 Dtool_O9cYEtQx 302 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  5 title 1 1095  
39 14 Dtool_O9cYLpK6 6 44 1095 0 14 Dtool_O9cYLpK6 254 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
40 14 Dtool_O9cY4p0A 6 45 1094 0 14 Dtool_O9cY4p0A 313 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
41 14 Dtool_O9cY2KzX 4 46 1082 0 14 Dtool_O9cY2KzX 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
42 14 Dtool_O9cY1wGY 4 47 1082 0 14 Dtool_O9cY1wGY 381 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  11 undecorated 1 1094  
43 14 Dtool_O9cYJtRY 6 48 1094 0 14 Dtool_O9cYJtRY 274 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
44 14 Dtool_O9cYds7e 6 49 1094 0 14 Dtool_O9cYds7e 286 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
45 14 Dtool_O9cY6EZL 4 50 1082 0 14 Dtool_O9cY6EZL 293 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
46 14 Dtool_O9cYhxLw 4 51 1082 0 14 Dtool_O9cYhxLw 310 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  10 fixed_size 1 1094  
47 14 Dtool_O9cYi_y_ 6 52 1094 0 14 Dtool_O9cYi_y_ 323 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
48 14 Dtool_O9cY7wcF 6 53 1094 0 14 Dtool_O9cY7wcF 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
49 14 Dtool_O9cYPwhp 4 54 1082 0 14 Dtool_O9cYPwhp 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
50 14 Dtool_O9cYq0Uu 4 55 1082 0 14 Dtool_O9cYq0Uu 383 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  10 fullscreen 1 1094  
51 14 Dtool_O9cYtz98 6 56 1094 0 14 Dtool_O9cYtz98 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
52 14 Dtool_O9cYi3nD 6 57 1094 0 14 Dtool_O9cYi3nD 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
53 14 Dtool_O9cYwgpW 4 58 1082 0 14 Dtool_O9cYwgpW 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
54 14 Dtool_O9cYpPA6 4 59 1082 0 14 Dtool_O9cYpPA6 372 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  10 foreground 1 1094  
55 14 Dtool_O9cYrFnI 6 60 1094 0 14 Dtool_O9cYrFnI 280 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
56 14 Dtool_O9cY7CRP 6 61 1094 0 14 Dtool_O9cY7CRP 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
57 14 Dtool_O9cYNghP 4 62 1082 0 14 Dtool_O9cYNghP 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
58 14 Dtool_O9cYJuBm 4 63 1082 0 14 Dtool_O9cYJuBm 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  9 minimized 1 1094  
59 14 Dtool_O9cYUuGt 6 64 1094 0 14 Dtool_O9cYUuGt 271 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
60 14 Dtool_O9cYgrwz 6 65 1094 0 14 Dtool_O9cYgrwz 282 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
61 14 Dtool_O9cYNh8v 4 66 1082 0 14 Dtool_O9cYNh8v 289 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
62 14 Dtool_O9cYDYtm 4 67 1082 0 14 Dtool_O9cYDYtm 310 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_raw_mice
//       Access: Published
//  Description: Specifies whether the window should read the raw
//               mouse devices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  8 raw_mice 1 1094  
63 14 Dtool_O9cYjiir 6 68 1094 0 14 Dtool_O9cYjiir 276 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_raw_mice
//       Access: Published
//  Description: Returns true if the window reads the raw mice.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
64 14 Dtool_O9cYTfNy 6 69 1094 0 14 Dtool_O9cYTfNy 280 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_raw_mice
//       Access: Published
//  Description: Returns true if set_raw_mice() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
65 14 Dtool_O9cYm_9h 4 70 1082 0 14 Dtool_O9cYm_9h 287 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_raw_mice
//       Access: Published
//  Description: Removes the raw_mice specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
66 14 Dtool_O9cY0PHZ 4 71 1082 0 14 Dtool_O9cY0PHZ 417 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  4 open 1 1094  
67 14 Dtool_O9cYnBqS 6 72 1094 0 14 Dtool_O9cYnBqS 261 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
68 14 Dtool_O9cY3AUZ 6 73 1094 0 14 Dtool_O9cY3AUZ 272 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
69 14 Dtool_O9cYXQu6 4 74 1082 0 14 Dtool_O9cYXQu6 279 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
70 14 Dtool_O9cYuag3 4 75 1082 0 14 Dtool_O9cYuag3 288 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  13 cursor_hidden 1 1094  
71 14 Dtool_O9cYILMV 6 76 1094 0 14 Dtool_O9cYILMV 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
72 14 Dtool_O9cY0O2b 6 77 1094 0 14 Dtool_O9cY0O2b 290 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
73 14 Dtool_O9cYnQoK 4 78 1082 0 14 Dtool_O9cYnQoK 297 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
74 14 Dtool_O9cYvab1 4 79 1082 0 14 Dtool_O9cYvab1 344 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  13 icon_filename 1 1096  
75 14 Dtool_O9cYaEsZ 6 80 1096 0 14 Dtool_O9cYaEsZ 288 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
76 14 Dtool_O9cYqEWg 6 81 1094 0 14 Dtool_O9cYqEWg 307 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
77 14 Dtool_O9cYOBF2 4 82 1082 0 14 Dtool_O9cYOBF2 314 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
78 14 Dtool_O9cYFBsD 4 83 1082 0 14 Dtool_O9cYFBsD 391 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  15 cursor_filename 1 1096  
79 14 Dtool_O9cYzq6A 6 84 1096 0 14 Dtool_O9cYzq6A 313 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
80 14 Dtool_O9cYjlkH 6 85 1094 0 14 Dtool_O9cYjlkH 311 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
81 14 Dtool_O9cYImNb 4 86 1082 0 14 Dtool_O9cYImNb 318 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
82 14 Dtool_O9cYonGh 4 87 1082 0 14 Dtool_O9cYonGh 609 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  7 z_order 1 1041  
83 14 Dtool_O9cY_iJo 6 88 1041 0 14 Dtool_O9cY_iJo 258 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
84 14 Dtool_O9cYuhzu 6 89 1094 0 14 Dtool_O9cYuhzu 317 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
85 14 Dtool_O9cYLFwW 4 90 1082 0 14 Dtool_O9cYLFwW 285 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
86 14 Dtool_O9cYttFo 4 91 1082 0 14 Dtool_O9cYttFo 1028 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  13 parent_window 1 1080  
87 14 Dtool_O9cYhe0o 4 91 1082 0 14 Dtool_O9cYhe0o 1028 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
88 14 Dtool_O9cYDGd5 4 91 1082 0 14 Dtool_O9cYDGd5 1056 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.
//
//               This is a deprecated variant on this method, and
//               exists only for backward compatibility.  Future code
//               should use the version of set_parent_window() below
//               that receives a WindowHandle object; that interface
//               is much more robust.
//
//               In this deprecated variant, the actual value for
//               "parent" is platform-specific.  On Windows, it is the
//               HWND of the parent window, cast to an unsigned
//               integer.  On X11, it is the Window pointer of the
//               parent window, similarly cast.  On OSX, this is the
//               NSWindow pointer, which doesn't appear to work at
//               all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  6 parent 1 1083  
89 14 Dtool_O9cY7fZY 7 92 1080 0 14 Dtool_O9cY7fZY 340 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_parent_window
//       Access: Published
//  Description: Returns the parent window specification, or NULL if
//               there is no parent window specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
90 14 Dtool_O9cYLSDf 6 93 1094 0 14 Dtool_O9cYLSDf 296 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_parent_window
//       Access: Published
//  Description: Checks the S_parent_window specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1092  
91 14 Dtool_O9cYy5uH 4 94 1082 0 14 Dtool_O9cYy5uH 299 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_parent_window
//       Access: Published
//  Description: Removes the S_parent_window specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1091  
92 14 Dtool_O9cYcUzF 4 95 1082 0 14 Dtool_O9cYcUzF 376 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1091  5 other 1 1092  
93 14 Dtool_O9cYXFj2 4 96 1082 0 14 Dtool_O9cYXFj2 368 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1092  3 out 1 1085  
94 14 Dtool_O9cY57GT 7 100 1099 619 14 Dtool_O9cY57GT 231 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
95 14 Dtool_O9cYEoak 6 101 1084 0 14 Dtool_O9cYEoak 220 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
96 14 Dtool_O9cYW2OW 6 102 1084 0 14 Dtool_O9cYW2OW 244 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
97 14 Dtool_O9cYL63J 6 103 1084 0 14 Dtool_O9cYL63J 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
98 14 Dtool_O9cYJxNf 6 104 1084 0 14 Dtool_O9cYJxNf 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_window_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
99 14 Dtool_O9cYdKNm 6 105 1084 0 14 Dtool_O9cYdKNm 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_total_display_modes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
100 14 Dtool_O9cY7GBr 6 106 1084 0 14 Dtool_O9cY7GBr 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1099  13 display_index 1 1084  
101 14 Dtool_O9cYA681 6 107 1084 0 14 Dtool_O9cYA681 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1099  13 display_index 1 1084  
102 14 Dtool_O9cYqZZh 6 108 1084 0 14 Dtool_O9cYqZZh 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1099  13 display_index 1 1084  
103 14 Dtool_O9cYi2hP 6 109 1084 0 14 Dtool_O9cYi2hP 249 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_refresh_rate
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1099  13 display_index 1 1084  
104 14 Dtool_O9cYyGxw 6 110 1084 0 14 Dtool_O9cYyGxw 252 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_fullscreen_only
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1099  13 display_index 1 1084  
105 14 Dtool_O9cYpeJW 6 111 1084 0 14 Dtool_O9cYpeJW 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_shader_model
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
106 14 Dtool_O9cYoxc3 6 112 1084 0 14 Dtool_O9cYoxc3 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_video_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
107 14 Dtool_O9cYZQA3 6 113 1084 0 14 Dtool_O9cYZQA3 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_texture_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
108 14 Dtool_O9cYe4Gl 4 114 1082 0 14 Dtool_O9cYe4Gl 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_memory_information
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
109 14 Dtool_O9cYAqOZ 6 115 1100 0 14 Dtool_O9cYAqOZ 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_physical_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
110 14 Dtool_O9cYQP7r 6 116 1100 0 14 Dtool_O9cYQP7r 249 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_physical_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
111 14 Dtool_O9cYoWLi 6 117 1100 0 14 Dtool_O9cYoWLi 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
112 14 Dtool_O9cYjPqP 6 118 1100 0 14 Dtool_O9cYjPqP 248 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_page_file_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
113 14 Dtool_O9cYcLl_ 6 119 1100 0 14 Dtool_O9cYcLl_ 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::_process_virtual_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
114 14 Dtool_O9cYWBVB 6 120 1100 0 14 Dtool_O9cYWBVB 256 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_process_virtual_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
115 14 Dtool_O9cYnP9N 6 121 1084 0 14 Dtool_O9cYnP9N 235 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_memory_load
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
116 14 Dtool_O9cYdS18 6 122 1100 0 14 Dtool_O9cYdS18 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_fault_count
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
117 14 Dtool_O9cY0YWh 6 123 1100 0 14 Dtool_O9cY0YWh 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_process_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
118 14 Dtool_O9cYjbme 6 124 1100 0 14 Dtool_O9cYjbme 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_process_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
119 14 Dtool_O9cYMHSZ 6 125 1100 0 14 Dtool_O9cYMHSZ 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_usage
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
120 14 Dtool_O9cYG_eO 6 126 1100 0 14 Dtool_O9cYG_eO 244 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_page_file_usage
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
121 14 Dtool_O9cY4Hjq 6 127 1084 0 14 Dtool_O9cY4Hjq 233 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_vendor_id
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
122 14 Dtool_O9cYn_Uq 6 128 1084 0 14 Dtool_O9cYn_Uq 233 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_device_id
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
123 14 Dtool_O9cYd4qN 6 129 1084 0 14 Dtool_O9cYd4qN 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_product
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
124 14 Dtool_O9cY98ah 6 130 1084 0 14 Dtool_O9cY98ah 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
125 14 Dtool_O9cYEIx3 6 131 1084 0 14 Dtool_O9cYEIx3 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_sub_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
126 14 Dtool_O9cYdf2J 6 132 1084 0 14 Dtool_O9cYdf2J 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_build
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
127 14 Dtool_O9cYsddI 6 133 1084 0 14 Dtool_O9cYsddI 241 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_month
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
128 14 Dtool_O9cYNaoh 6 134 1084 0 14 Dtool_O9cYNaoh 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_day
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
129 14 Dtool_O9cYRGMj 6 135 1084 0 14 Dtool_O9cYRGMj 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_year
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
130 14 Dtool_O9cY7M2V 6 136 1084 0 14 Dtool_O9cY7M2V 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
131 14 Dtool_O9cYvm4k 6 137 1084 0 14 Dtool_O9cYvm4k 312 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_size
//       Access: Published
//  Description: Returns the number of 32-bit values for cpu id 
//               binary data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
132 14 Dtool_O9cYnIiL 6 138 1083 0 14 Dtool_O9cYnIiL 309 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_data
//       Access: Published
//  Description: Returns part of cpu id binary data based on the 
//               index.  
//////////////////////////////////////////////////////////////////// 2 4 this 3 1099  5 index 1 1084  
133 14 Dtool_O9cYBjkL 6 139 1095 0 14 Dtool_O9cYBjkL 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_vendor_string
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
134 14 Dtool_O9cYNBT4 6 140 1095 0 14 Dtool_O9cYNBT4 241 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_string
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
135 14 Dtool_O9cYfeql 6 141 1083 0 14 Dtool_O9cYfeql 248 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_version_information
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
136 14 Dtool_O9cYxetr 6 142 1083 0 14 Dtool_O9cYxetr 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_index
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
137 14 Dtool_O9cYjBN9 6 143 1100 0 14 Dtool_O9cYjBN9 237 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
138 14 Dtool_O9cYJ5pR 6 144 1100 0 14 Dtool_O9cYJ5pR 232 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_time
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
139 14 Dtool_O9cYqY3j 6 145 1100 0 14 Dtool_O9cYqY3j 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
140 14 Dtool_O9cYhC2a 6 146 1100 0 14 Dtool_O9cYhC2a 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_current_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
141 14 Dtool_O9cYxW8u 4 147 1082 0 14 Dtool_O9cYxW8u 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1099  16 processor_number 1 1084  
142 14 Dtool_O9cYmQxl 6 148 1084 0 14 Dtool_O9cYmQxl 405 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_cpu_cores
//       Access: Published
//  Description: Returns the number of individual CPU cores in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts once here.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
143 14 Dtool_O9cYqBds 6 149 1084 0 14 Dtool_O9cYqBds 411 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_logical_cpus
//       Access: Published
//  Description: Returns the number of logical CPU's in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts as two or more here.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
144 14 Dtool_O9cY77jF 6 150 1084 0 14 Dtool_O9cY77jF 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_major
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
145 14 Dtool_O9cYd4bE 6 151 1084 0 14 Dtool_O9cYd4bE 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_minor
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
146 14 Dtool_O9cY5OQv 6 152 1084 0 14 Dtool_O9cY5OQv 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_build
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
147 14 Dtool_O9cYJqzm 6 153 1084 0 14 Dtool_O9cYJqzm 260 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_platform_id
//       Access: Published
//  Description: Returns -1 if not set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1099  
148 14 Dtool_O9cY5_NM 4 157 1082 0 14 Dtool_O9cY5_NM 523 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1101  18 clear_color_active 1 1094  
149 14 Dtool_O9cYQ__5 6 158 1094 0 14 Dtool_O9cYQ__5 413 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
150 14 Dtool_O9cY_x_a 4 159 1082 0 14 Dtool_O9cY_x_a 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1101  18 clear_depth_active 1 1094  
151 14 Dtool_O9cYklwI 6 160 1094 0 14 Dtool_O9cYklwI 413 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
152 14 Dtool_O9cYcsb8 4 161 1082 0 14 Dtool_O9cYcsb8 531 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the stencil
//               buffer should be cleared every frame.  If this is
//               true, the stencil buffer will be cleared to the value
//               indicated by set_clear_stencil(); otherwise, it will be
//               left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1101  20 clear_stencil_active 1 1094  
153 14 Dtool_O9cYSZOl 6 162 1094 0 14 Dtool_O9cYSZOl 417 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_stencil_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
154 14 Dtool_O9cYrSVN 4 163 1082 0 14 Dtool_O9cYrSVN 535 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1101  5 color 1 1104  
155 14 Dtool_O9cY4kxz 6 164 1104 0 14 Dtool_O9cY4kxz 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
156 14 Dtool_O9cYw_6X 4 165 1082 0 14 Dtool_O9cYw_6X 535 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1101  5 depth 1 1107  
157 14 Dtool_O9cYMYjC 6 166 1107 0 14 Dtool_O9cYMYjC 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
158 14 Dtool_O9cYeW2T 4 167 1082 0 14 Dtool_O9cYeW2T 0 2 4 this 3 1101  7 stencil 1 1083  
159 14 Dtool_O9cYsiaD 6 168 1083 0 14 Dtool_O9cYsiaD 539 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil
//       Access: Published
//  Description: Returns the current clear stencil value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_stencil_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
160 14 Dtool_O9cY0c6i 4 169 1082 0 14 Dtool_O9cY0c6i 285 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_active
//       Access: Published, Virtual
//  Description: Sets the clear-active flag for any bitplane.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1101  1 n 1 1084  16 clear_aux_active 1 1094  
161 14 Dtool_O9cY2Tq7 6 170 1094 0 14 Dtool_O9cY2Tq7 285 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_active
//       Access: Published, Virtual
//  Description: Gets the clear-active flag for any bitplane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1102  1 n 1 1084  
162 14 Dtool_O9cY4pqk 4 171 1082 0 14 Dtool_O9cY4pqk 278 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_value
//       Access: Published, Virtual
//  Description: Sets the clear value for any bitplane.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1101  1 n 1 1084  11 clear_value 1 1104  
163 14 Dtool_O9cYl3hY 6 172 1104 0 14 Dtool_O9cYl3hY 281 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_value
//       Access: Published, Virtual
//  Description: Returns the clear value for any bitplane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1102  1 n 1 1084  
164 14 Dtool_O9cYtFqI 4 173 1082 0 14 Dtool_O9cYtFqI 352 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published, Virtual
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1101  
165 14 Dtool_O9cY0Gt_ 6 174 1094 0 14 Dtool_O9cY0Gt_ 461 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published, Virtual
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
166 14 Dtool_O9cYY3P2 4 175 1082 0 14 Dtool_O9cYY3P2 1485 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_pixel_zoom
//       Access: Published, Virtual
//  Description: Sets the amount by which the pixels of the region are
//               scaled internally when filling the image interally.
//               Setting this number larger makes the pixels blockier,
//               but may make the rendering faster, particularly for
//               software renderers.  Setting this number to 2.0
//               reduces the number of pixels that have to be filled
//               by the renderer by a factor of 2.0.  It doesn't make
//               sense to set this lower than 1.0.
//
//               It is possible to set this on either individual
//               DisplayRegions or on overall GraphicsWindows, but you
//               will get better performance for setting it on the
//               window rather than its individual DisplayRegions.
//               Also, you may not set it on a DisplayRegion that
//               doesn't have both clear_color() and clear_depth()
//               enabled.
//
//               This property is only supported on renderers for
//               which it is particularly useful--currently, this is
//               the tinydisplay software renderer.  Other kinds of
//               renderers allow you to set this property, but ignore
//               it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1101  10 pixel_zoom 1 1107  
167 14 Dtool_O9cYGK1k 6 176 1107 0 14 Dtool_O9cYGK1k 388 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_zoom
//       Access: Published
//  Description: Returns the value set by set_pixel_zoom(), regardless
//               of whether it is being respected or not.  Also see
//               get_pixel_factor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
168 14 Dtool_O9cYLAtt 6 177 1107 0 14 Dtool_O9cYLAtt 650 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_factor
//       Access: Published
//  Description: Returns the amount by which the height and width of
//               the region will be scaled internally, based on the
//               zoom factor set by set_pixel_zoom().  This will
//               return 1.0 if the pixel_zoom was not set or if it is
//               not being respected (for instance, because the
//               underlying renderer doesn't support it--see
//               supports_pixel_zoom).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
169 14 Dtool_O9cYi4LW 6 178 1094 0 14 Dtool_O9cYi4LW 802 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::supports_pixel_zoom
//       Access: Published, Virtual
//  Description: Returns true if a call to set_pixel_zoom() will be
//               respected, false if it will be ignored.  If this
//               returns false, then get_pixel_factor() will always
//               return 1.0, regardless of what value you specify for
//               set_pixel_zoom().
//
//               This may return false if the underlying renderer
//               doesn't support pixel zooming, or if you have called
//               this on a DisplayRegion that doesn't have both
//               set_clear_color() and set_clear_depth() enabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1102  
170 14 Dtool_O9cYu4KC 6 179 1084 0 14 Dtool_O9cYu4KC 334 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_renderbuffer_type
//       Access: Static, Published
//  Description: Returns the RenderBuffer::Type that corresponds
//               to a RenderTexturePlane.
//////////////////////////////////////////////////////////////////// 1 5 plane 1 1084  
171 14 Dtool_O9cY8EnQ 6 188 1107 0 14 Dtool_O9cY8EnQ 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
172 14 Dtool_O9cY85BK 6 189 1107 0 14 Dtool_O9cY85BK 388 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
173 14 Dtool_O9cYCJld 6 190 1107 0 14 Dtool_O9cYCJld 392 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
174 14 Dtool_O9cYpTxi 6 191 1107 0 14 Dtool_O9cYpTxi 384 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
175 14 Dtool_O9cYta7G 4 192 1082 0 14 Dtool_O9cYta7G 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1110  1 l 1 1107  1 r 1 1107  1 b 1 1107  1 t 1 1107  
176 14 Dtool_O9cYKjj6 7 193 1111 914 14 Dtool_O9cYKjj6 376 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
177 14 Dtool_O9cY668k 7 194 1112 0 14 Dtool_O9cY668k 370 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
178 14 Dtool_O9cYHd9E 6 195 1094 0 14 Dtool_O9cYHd9E 313 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_stereo
//       Access: Published, Virtual
//  Description: Returns true if this is a StereoDisplayRegion, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
179 14 Dtool_O9cYsRD1 4 196 1082 0 14 Dtool_O9cYsRD1 669 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published, Virtual
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  6 camera 1 1113  
180 14 Dtool_O9cYQE0w 7 197 1118 0 14 Dtool_O9cYQE0w 362 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1108  14 current_thread 1 1116  
181 14 Dtool_O9cYM2LQ 7 197 1118 0 14 Dtool_O9cYM2LQ 362 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
182 14 Dtool_O9cYPMVE 4 198 1082 0 14 Dtool_O9cYPMVE 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published, Virtual
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  6 active 1 1094  
183 14 Dtool_O9cYpe7G 6 199 1094 0 14 Dtool_O9cYpe7G 299 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
184 14 Dtool_O9cYJhLw 4 200 1082 0 14 Dtool_O9cYJhLw 439 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published, Virtual
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  4 sort 1 1084  
185 14 Dtool_O9cYkJ4o 6 201 1084 0 14 Dtool_O9cYkJ4o 297 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
186 14 Dtool_O9cYwg4T 4 202 1082 0 14 Dtool_O9cYwg4T 1583 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published, Virtual
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  This automatically
//               adjusts the lens that is used to render to this
//               DisplayRegion to its left or right eye, according to
//               the lens's stereo properties.
//
//               When the DisplayRegion is attached to a stereo window
//               (one for which is_stereo() returns true), this also
//               specifies which physical channel the DisplayRegion
//               renders to.
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               Also see the StereoDisplayRegion, which automates
//               managing a pair of left/right DisplayRegions.
//
//               An ordinary DisplayRegion may be set to SC_mono,
//               SC_left, or SC_right.  You may set SC_stereo only on
//               a StereoDisplayRegion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  14 stereo_channel 1 1119  
187 14 Dtool_O9cYMGiX 6 203 1119 0 14 Dtool_O9cYMGiX 448 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1110  
188 14 Dtool_O9cYDC63 4 204 1082 0 14 Dtool_O9cYDC63 949 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_incomplete_render
//       Access: Published, Virtual
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               This flag may also be set on the
//               GraphicsStateGuardian.  It will be considered true
//               for a given DisplayRegion only if it is true on both
//               the GSG and on the DisplayRegion.
//
//               See GraphicsStateGuardian::set_incomplete_render()
//               for more detail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  17 incomplete_render 1 1094  
189 14 Dtool_O9cY6SQs 6 205 1094 0 14 Dtool_O9cY6SQs 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_incomplete_render
//       Access: Published
//  Description: Returns the incomplete_render flag.  See
//               set_incomplete_render().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
190 14 Dtool_O9cY7uok 4 206 1082 0 14 Dtool_O9cY7uok 988 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_texture_reload_priority
//       Access: Published, Virtual
//  Description: Specifies an integer priority which is assigned to
//               any asynchronous texture reload requests spawned
//               while processing this DisplayRegion.  This controls
//               which textures are loaded first when multiple
//               textures need to be reloaded at once; it also
//               controls the relative priority between asynchronous
//               texture loads and asynchronous model or animation
//               loads.
//
//               Specifying a larger number here makes the textures
//               rendered by this DisplayRegion load up first.  This
//               may be particularly useful to do, for instance, for
//               the DisplayRegion that renders the gui.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  23 texture_reload_priority 1 1084  
191 14 Dtool_O9cYpMFg 6 207 1084 0 14 Dtool_O9cYpMFg 391 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_texture_reload_priority
//       Access: Published
//  Description: Returns the priority which is assigned to
//               asynchronous texture reload requests.  See
//               set_texture_reload_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
192 14 Dtool_O9cYt3kY 4 208 1082 0 14 Dtool_O9cYt3kY 443 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_lens_index
//       Access: Published
//  Description: Sets the lens index, allows for multiple lenses to
//               be attached to a camera.  This is useful for a 
//               variety of setups, such as fish eye rendering.
//               The default is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  5 index 1 1084  
193 14 Dtool_O9cYHvi6 6 209 1084 0 14 Dtool_O9cYHvi6 479 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_lens_index
//       Access: Public
//  Description: Returns the specific lens of the associated Camera
//               that will be used for rendering this scene.  Most
//               Cameras hold only one lens, but for multiple lenses
//               this method may be used to selected between them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
194 14 Dtool_O9cYuCaA 4 210 1082 0 14 Dtool_O9cYuCaA 494 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_traverser
//       Access: Published, Virtual
//  Description: Specifies the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.  Normally the
//               default CullTraverser is sufficient, but this may be
//               changed to change the default cull behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  4 trav 1 1121  
195 14 Dtool_O9cYmlBH 7 211 1121 0 14 Dtool_O9cYmlBH 337 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_traverser
//       Access: Published
//  Description: Returns the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1110  
196 14 Dtool_O9cYVFCA 4 212 1082 0 14 Dtool_O9cYVFCA 690 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published, Virtual
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map.  Normally you
//               should not need to set it directly.  This sets up the
//               DisplayRegion to render to the nth cube map face; the
//               value must be between 0 and 5, inclusive.  A normal
//               DisplayRegion that is not associated with any
//               particular cube map should be set to -1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  14 cube_map_index 1 1084  
197 14 Dtool_O9cY1Pdo 6 213 1084 0 14 Dtool_O9cY1Pdo 436 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cube_map_index
//       Access: Published
//  Description: Returns the cube map face index associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a cube map.  See
//               set_cube_map_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
198 14 Dtool_O9cYZe2r 4 214 1082 0 14 Dtool_O9cYZe2r 1597 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the DisplayRegion is visited during the cull
//               traversal.  This callback will be made during the
//               cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               traversal for this DisplayRegion has not yet started.
//
//               The callback is passed an instance of a
//               DisplayRegionCullCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal cull behavior, so if your
//               callback does nothing, the scene graph will not be
//               traversed and therefore nothing will be drawn.  If
//               you wish the normal cull traversal to be performed
//               for this DisplayRegion, you must call
//               cbdata->upcall() from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  6 object 1 1123  
199 14 Dtool_O9cYlceA 4 215 1082 0 14 Dtool_O9cYlceA 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1110  
200 14 Dtool_O9cYIcXV 7 216 1123 0 14 Dtool_O9cYIcXV 286 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
201 14 Dtool_O9cY12YM 4 217 1082 0 14 Dtool_O9cY12YM 1951 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the contents of DisplayRegion is drawn during the
//               draw traversal.  This callback will be made during
//               the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state is in the initial state, and no
//               projection matrix or modelview matrix is in effect.
//               begin_scene() has not yet been called, and no objects
//               have yet been drawn.  However, the viewport has
//               already been set to the appropriate part of the
//               window, and the clear commands for this DisplayRegion
//               (if any) have been issued.
//
//               The callback is passed an instance of a
//               DisplayRegionDrawCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal draw behavior, so if your
//               callback does nothing, nothing in the DisplayRegion
//               will be drawn.  If you wish the draw traversal to
//               continue to draw the contents of this DisplayRegion,
//               you must call cbdata->upcall() from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  6 object 1 1123  
202 14 Dtool_O9cYmEIH 4 218 1082 0 14 Dtool_O9cYmEIH 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1110  
203 14 Dtool_O9cYTl41 7 219 1123 0 14 Dtool_O9cYTl41 286 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
204 14 Dtool_O9cY9Qnq 6 220 1084 0 14 Dtool_O9cY9Qnq 279 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
205 14 Dtool_O9cYKQDR 6 221 1084 0 14 Dtool_O9cYKQDR 281 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1108  
206 14 Dtool_O9cYwKBx 4 222 1082 0 14 Dtool_O9cYwKBx 229 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1108  3 out 1 1085  
207 14 Dtool_O9cYzVMo 7 223 1125 0 14 Dtool_O9cYzVMo 757 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 1 6 prefix 1 1095  
208 14 Dtool_O9cYWeJc 7 223 1125 0 14 Dtool_O9cYWeJc 757 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 0 
209 14 Dtool_O9cYcz2s 7 224 1125 0 14 Dtool_O9cYcz2s 470 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  6 prefix 1 1095  
210 14 Dtool_O9cYJTg6 7 224 1125 0 14 Dtool_O9cYJTg6 470 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1110  
211 14 Dtool_O9cYECpM 6 225 1094 0 14 Dtool_O9cYECpM 350 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1110  8 filename 1 1096  13 image_comment 1 1095  
212 14 Dtool_O9cYN5lm 6 225 1094 0 14 Dtool_O9cYN5lm 350 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  8 filename 1 1096  
213 14 Dtool_O9cY__qS 6 226 1094 0 14 Dtool_O9cY__qS 398 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1110  5 image 1 1126  
214 14 Dtool_O9cYGzuE 7 227 1129 0 14 Dtool_O9cYGzuE 1131 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_cull_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the last frame's cull
//               operation.
//
//               This will be a hierarchy of nodes, one node for each
//               bin, each of which will in term be a parent of a
//               number of GeomNodes, representing the geometry drawn
//               in each bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself, which is constructed
//               and maintained internally.  No such scene graph is
//               normally constructed during the rendering of a frame;
//               this is an artificial construct created for the
//               purpose of making it easy to analyze the results of
//               the cull operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1110  
215 14 Dtool_O9cYZZzb 7 228 1088 0 14 Dtool_O9cYZZzb 0 0 
216 14 Dtool_O9cYrv6o 7 182 1130 0 14 Dtool_O9cYrv6o 0 1 4 this 3 1110  
217 14 Dtool_O9cYNvZ3 7 183 1110 702 14 Dtool_O9cYNvZ3 0 1 4 this 3 1130  
218 14 Dtool_O9cYlwzo 6 184 1101 0 14 Dtool_O9cYlwzo 0 1 4 this 3 1110  
219 14 Dtool_O9cYWozv 7 185 1110 702 14 Dtool_O9cYWozv 0 1 4 this 3 1101  
220 14 Dtool_O9cYeb9k 6 231 1133 0 14 Dtool_O9cYeb9k 869 // Filename: displayRegionCullCallbackData.I
// Created by:  drose (14Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_cull_handler
//       Access: Published
//  Description: Returns a pointer to the CullHandler, which accepts
//               each object to be added to the list for drawing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1131  
221 14 Dtool_O9cYc6C0 7 232 1136 0 14 Dtool_O9cYc6C0 360 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1131  
222 14 Dtool_O9cY_hfB 7 233 1088 0 14 Dtool_O9cY_hfB 0 0 
223 14 Dtool_O9cY6KCi 7 236 1140 0 14 Dtool_O9cY6KCi 893 // Filename: displayRegionDrawCallbackData.I
// Created by:  drose (13Mar09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_cull_result
//       Access: Published
//  Description: Returns a pointer to the CullResult, the list of
//               CullableObjects that should be drawn in this
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1138  
224 14 Dtool_O9cY3Sjb 7 237 1136 0 14 Dtool_O9cY3Sjb 360 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1138  
225 14 Dtool_O9cYao_o 7 238 1088 0 14 Dtool_O9cYao_o 0 0 
226 14 Dtool_O9cYLHQY 7 241 1141 754 14 Dtool_O9cYLHQY 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
227 14 Dtool_O9cY8Zgh 4 243 1082 0 14 Dtool_O9cY8Zgh 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1141  13 minimum_width 1 1084  
228 14 Dtool_O9cY6RSe 4 244 1082 0 14 Dtool_O9cY6RSe 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1141  13 maximum_width 1 1084  
229 14 Dtool_O9cYt5bs 4 245 1082 0 14 Dtool_O9cYt5bs 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1141  14 minimum_height 1 1084  
230 14 Dtool_O9cYXyNp 4 246 1082 0 14 Dtool_O9cYXyNp 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1141  14 maximum_height 1 1084  
231 14 Dtool_O9cYFe4X 4 247 1082 0 14 Dtool_O9cYFe4X 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1141  22 minimum_bits_per_pixel 1 1084  
232 14 Dtool_O9cYbWqU 4 248 1082 0 14 Dtool_O9cYbWqU 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1141  22 maximum_bits_per_pixel 1 1084  
233 14 Dtool_O9cY0P03 7 282 1142 794 14 Dtool_O9cY0P03 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
234 14 Dtool_O9cYOlPt 7 282 1142 794 14 Dtool_O9cYOlPt 735 // Filename: frameBufferProperties.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1143  
235 14 Dtool_O9cY6uCK 6 250 1084 0 14 Dtool_O9cY6uCK 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
236 14 Dtool_O9cYp9ex 6 251 1084 0 14 Dtool_O9cYp9ex 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
237 14 Dtool_O9cYYuZb 6 252 1084 0 14 Dtool_O9cYYuZb 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
238 14 Dtool_O9cYCuvJ 6 253 1084 0 14 Dtool_O9cYCuvJ 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
239 14 Dtool_O9cYzcaD 6 254 1084 0 14 Dtool_O9cYzcaD 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_accum_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
240 14 Dtool_O9cYi42A 6 255 1084 0 14 Dtool_O9cYi42A 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
241 14 Dtool_O9cY6m6B 6 256 1084 0 14 Dtool_O9cY6m6B 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
242 14 Dtool_O9cYFEoX 6 257 1084 0 14 Dtool_O9cYFEoX 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
243 14 Dtool_O9cYSH90 6 258 1084 0 14 Dtool_O9cYSH90 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
244 14 Dtool_O9cY1QBe 6 259 1084 0 14 Dtool_O9cY1QBe 356 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
245 14 Dtool_O9cYn2ht 6 260 1084 0 14 Dtool_O9cYn2ht 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_back_buffers
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
246 14 Dtool_O9cYQkg0 6 261 1084 0 14 Dtool_O9cYQkg0 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_indexed_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
247 14 Dtool_O9cY7V7R 6 262 1084 0 14 Dtool_O9cY7V7R 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_rgb_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
248 14 Dtool_O9cY1KER 6 263 1084 0 14 Dtool_O9cY1KER 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stereo
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
249 14 Dtool_O9cYmgiH 6 264 1084 0 14 Dtool_O9cYmgiH 241 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_hardware
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
250 14 Dtool_O9cYI_F1 6 265 1084 0 14 Dtool_O9cYI_F1 241 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_software
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
251 14 Dtool_O9cY4McT 4 266 1082 0 14 Dtool_O9cY4McT 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
252 14 Dtool_O9cYgD26 4 267 1082 0 14 Dtool_O9cYgD26 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
253 14 Dtool_O9cYjyyk 4 268 1082 0 14 Dtool_O9cYjyyk 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
254 14 Dtool_O9cYwbci 4 269 1082 0 14 Dtool_O9cYwbci 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
255 14 Dtool_O9cY2I1M 4 270 1082 0 14 Dtool_O9cY2I1M 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_accum_bits
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
256 14 Dtool_O9cYIVH0 4 271 1082 0 14 Dtool_O9cYIVH0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
257 14 Dtool_O9cYJ2_Q 4 272 1082 0 14 Dtool_O9cYJ2_Q 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
258 14 Dtool_O9cYqLrm 4 273 1082 0 14 Dtool_O9cYqLrm 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
259 14 Dtool_O9cY6_qN 4 274 1082 0 14 Dtool_O9cY6_qN 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
260 14 Dtool_O9cYmvEd 4 275 1082 0 14 Dtool_O9cYmvEd 355 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
261 14 Dtool_O9cYcsOG 4 276 1082 0 14 Dtool_O9cYcsOG 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_back_buffers
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
262 14 Dtool_O9cYAi_y 4 277 1082 0 14 Dtool_O9cYAi_y 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_indexed_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
263 14 Dtool_O9cYKb_g 4 278 1082 0 14 Dtool_O9cYKb_g 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgb_color
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
264 14 Dtool_O9cY3y2O 4 279 1082 0 14 Dtool_O9cY3y2O 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stereo
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
265 14 Dtool_O9cY4Co9 4 280 1082 0 14 Dtool_O9cY4Co9 241 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_hardware
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
266 14 Dtool_O9cYI3Lr 4 281 1082 0 14 Dtool_O9cYI3Lr 241 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_software
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  1 n 1 1084  
267 14 Dtool_O9cYLWDE 6 284 1142 0 14 Dtool_O9cYLWDE 246 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  4 copy 1 1143  
268 14 Dtool_O9cYFGOb 6 285 1143 0 14 Dtool_O9cYFGOb 395 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
//////////////////////////////////////////////////////////////////// 0 
269 14 Dtool_O9cY_xuw 6 286 1094 0 14 Dtool_O9cY_xuw 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator == 
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1143  5 other 1 1143  
270 14 Dtool_O9cYiGu_ 6 287 1094 0 14 Dtool_O9cYiGu_ 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1143  5 other 1 1143  
271 14 Dtool_O9cYfz7q 4 288 1082 0 14 Dtool_O9cYfz7q 391 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1142  
272 14 Dtool_O9cYzSla 4 289 1082 0 14 Dtool_O9cYzSla 268 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_all_specified
//       Access: Published
//  Description: sets all the specified bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1142  
273 14 Dtool_O9cYrBZu 6 290 1094 0 14 Dtool_O9cYrBZu 405 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1143  5 other 1 1143  
274 14 Dtool_O9cYHaxr 4 291 1082 0 14 Dtool_O9cYHaxr 381 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1142  5 other 1 1143  
275 14 Dtool_O9cYCzSe 4 292 1082 0 14 Dtool_O9cYCzSe 373 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1143  3 out 1 1085  
276 14 Dtool_O9cYs3_4 4 293 1082 0 14 Dtool_O9cYs3_4 398 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_one_bit_per_channel
//       Access: Published
//  Description: If any of the depth, color, alpha, accum, or
//               stencil properties is set to more than one,
//               then they are reduced to one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1142  
277 14 Dtool_O9cYx4ZJ 6 294 1094 0 14 Dtool_O9cYx4ZJ 231 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
278 14 Dtool_O9cYWlX5 6 295 1094 0 14 Dtool_O9cYWlX5 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
279 14 Dtool_O9cYJ6K8 6 296 1084 0 14 Dtool_O9cYJ6K8 1390 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_quality
//       Access: Published
//  Description: Assumes that these properties are a description of
//               a window.
//
//               Measures how well this window satisfies a specified
//               set of requirements.  A higher quality number means
//               that more requirements were satisfied.  A quality of
//               zero means that the window is unsuitable.
//
//               The routine deducts a lot if the window fails to
//               provide a requested feature.  It deducts less
//               if the window provides a feature, but at a degraded
//               level of functionality (ie, the user asks for rgba8,
//               color, but the window only provides rgba4).  The
//               routine also deducts a small amount for unnecessary
//               features.  For example, if the window has an
//               accumulation buffer when one is not requested will
//               reduce quality slightly.  Maximum quality is obtained
//               when the window exactly matches the request.
//
//               If you want to know whether the window satisfies
//               all of the requirements, use the "subsumes" function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1143  4 reqs 1 1143  
280 14 Dtool_O9cY5Lag 6 297 1094 0 14 Dtool_O9cY5Lag 324 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
281 14 Dtool_O9cYByA7 6 298 1094 0 14 Dtool_O9cYByA7 444 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_basic
//       Access: Published
//  Description: Returns true if the properties are extremely basic.
//               The following count as basic: rgb or rgba, depth.
//               If anything else is specified, the properties are
//               non-basic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
282 14 Dtool_O9cYTi5r 6 299 1084 0 14 Dtool_O9cYTi5r 324 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_mask
//       Access: Published
//  Description: Converts the aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
283 14 Dtool_O9cYFEQC 6 300 1084 0 14 Dtool_O9cYFEQC 329 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Private
//  Description: Converts the non-aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1143  
284 14 Dtool_O9cYbcBa 6 301 1094 0 14 Dtool_O9cYbcBa 426 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::verify_hardware_software
//       Access: Public
//  Description: Validates that the properties represent the desired
//               kind of renderer (hardware or software).  If not,
//               prints out an error message and returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1143  5 props 1 1143  8 renderer 1 1095  
285 14 Dtool_O9cYwJOi 7 303 1147 827 14 Dtool_O9cYwJOi 738 // Filename: graphicsThreadingModel.I
// Created by:  drose (27Jan03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1145  
286 14 Dtool_O9cYtG_c 7 303 1147 827 14 Dtool_O9cYtG_c 1800 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
//////////////////////////////////////////////////////////////////// 1 5 model 1 1095  
287 14 Dtool_O9cYPBJ_ 7 303 1147 827 14 Dtool_O9cYPBJ_ 1800 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
//////////////////////////////////////////////////////////////////// 0 
288 14 Dtool_O9cYGZxc 6 304 1147 0 14 Dtool_O9cYGZxc 248 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1147  4 copy 1 1145  
289 14 Dtool_O9cY7c0w 6 305 1095 0 14 Dtool_O9cY7c0w 326 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1145  
290 14 Dtool_O9cY8GWk 6 306 1095 0 14 Dtool_O9cY8GWk 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1145  
291 14 Dtool_O9cYHjIx 4 307 1082 0 14 Dtool_O9cYHjIx 481 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               culling in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1147  9 cull_name 1 1095  
292 14 Dtool_O9cYMOJd 6 308 1084 0 14 Dtool_O9cYMOJd 454 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1145  
293 14 Dtool_O9cYlbag 6 309 1095 0 14 Dtool_O9cYlbag 392 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1145  
294 14 Dtool_O9cYwWNt 4 310 1082 0 14 Dtool_O9cYwWNt 481 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_draw_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               drawing in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1147  9 cull_name 1 1095  
295 14 Dtool_O9cY3ENZ 6 311 1084 0 14 Dtool_O9cY3ENZ 538 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1145  
296 14 Dtool_O9cYzVRl 6 312 1094 0 14 Dtool_O9cYzVRl 396 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1145  
297 14 Dtool_O9cYtSHC 4 313 1082 0 14 Dtool_O9cYtSHC 521 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_sorting
//       Access: Published
//  Description: Changes the flag that indicates whether the threading
//               model involves a separate cull pass.  This won't
//               change any windows that were already created with
//               this model; this only has an effect on newly-opened
//               windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1147  12 cull_sorting 1 1094  
298 14 Dtool_O9cYysdw 6 314 1094 0 14 Dtool_O9cYysdw 372 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1145  
299 14 Dtool_O9cYVNCv 6 315 1094 0 14 Dtool_O9cYVNCv 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1145  
300 14 Dtool_O9cYolSI 4 316 1082 0 14 Dtool_O9cYolSI 230 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1145  3 out 1 1085  
301 14 Dtool_O9cYQt0n 7 319 1112 0 14 Dtool_O9cYQt0n 792 // Filename: graphicsDevice.I
// Created by:  masad (21Jul03)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1148  
302 14 Dtool_O9cYAajD 7 320 1088 0 14 Dtool_O9cYAajD 0 0 
303 14 Dtool_O9cYnM8A 6 324 1094 0 14 Dtool_O9cYnM8A 1182 // Filename: graphicsPipe.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1150  
304 14 Dtool_O9cYpKTv 6 325 1084 0 14 Dtool_O9cYpKTv 682 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1150  
305 14 Dtool_O9cYcDZ_ 6 326 1094 0 14 Dtool_O9cYcDZ_ 766 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1150  5 flags 1 1084  
306 14 Dtool_O9cYYv10 6 327 1084 0 14 Dtool_O9cYYv10 547 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1150  
307 14 Dtool_O9cYrAPC 6 328 1084 0 14 Dtool_O9cYrAPC 385 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1150  
308 14 Dtool_O9cYLVZO 6 329 1099 0 14 Dtool_O9cYLVZO 272 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_information
//       Access: Published
//  Description: Gets the pipe's DisplayInformation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1112  
309 14 Dtool_O9cYqnn7 4 330 1082 0 14 Dtool_O9cYqnn7 400 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::lookup_cpu_data
//       Access: Public, Virtual
//  Description: Looks up the detailed CPU information and stores it
//               in _display_information, if supported by the OS.
//               This may take a second or two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1112  
310 14 Dtool_O9cYheCd 6 331 1095 0 14 Dtool_O9cYheCd 0 1 4 this 3 1150  
311 14 Dtool_O9cYkM1K 7 332 1088 0 14 Dtool_O9cYkM1K 0 0 
312 14 Dtool_O9cYhhed 4 341 1082 0 14 Dtool_O9cYhhed 758 // Filename: graphicsStateGuardian.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
313 14 Dtool_O9cYNhtg 6 342 1084 0 14 Dtool_O9cYNhtg 319 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
314 14 Dtool_O9cYtq2Y 6 343 1084 0 14 Dtool_O9cYtq2Y 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
315 14 Dtool_O9cYbu1d 6 344 1084 0 14 Dtool_O9cYbu1d 331 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
316 14 Dtool_O9cYvg3_ 6 345 1084 0 14 Dtool_O9cYvg3_ 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
317 14 Dtool_O9cY41Tn 4 346 1082 0 14 Dtool_O9cY41Tn 538 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  6 active 1 1094  
318 14 Dtool_O9cYWMEv 6 347 1094 0 14 Dtool_O9cYWMEv 315 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
319 14 Dtool_O9cYBs7Q 6 348 1094 0 14 Dtool_O9cYBs7Q 435 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
320 14 Dtool_O9cYqmCi 6 349 1094 0 14 Dtool_O9cYqmCi 301 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
321 14 Dtool_O9cYTWNA 4 350 1082 0 14 Dtool_O9cYTWNA 1472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_incomplete_render
//       Access: Public
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               Setting this true allows for a smoother frame rate,
//               but occasionally parts of the frame will be invisible
//               or missing (they will generally come in within a
//               second or two).  Setting this false guarantees that
//               every frame will be complete, but may cause more
//               chugs as things are loaded up at runtime.
//
//               You may want to set this false during loading
//               screens, to guarantee that all of your assets are
//               available by the time you take the loading screen
//               down.
//
//               This flag may also be set individually on each
//               DisplayRegion.  It will be considered true for a
//               given DisplayRegion only if it is true on both the
//               GSG and on the DisplayRegion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  17 incomplete_render 1 1094  
322 14 Dtool_O9cYgMzz 4 351 1082 0 14 Dtool_O9cYgMzz 385 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_loader
//       Access: Public
//  Description: Sets the Loader object that will be used by this GSG
//               to load textures when necessary, if
//               get_incomplete_render() is true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  6 loader 1 1155  
323 14 Dtool_O9cYRXHV 7 352 1155 0 14 Dtool_O9cYRXHV 397 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be used by this
//               GSG to load textures when necessary, if
//               get_incomplete_render() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
324 14 Dtool_O9cYXe8K 7 353 1112 0 14 Dtool_O9cYXe8K 304 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
325 14 Dtool_O9cYG5DS 7 354 1157 0 14 Dtool_O9cYG5DS 463 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
326 14 Dtool_O9cYax_q 6 355 1145 0 14 Dtool_O9cYax_q 320 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
327 14 Dtool_O9cY6HMQ 6 356 1094 0 14 Dtool_O9cY6HMQ 373 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_hardware
//       Access: Published
//  Description: Returns true if this GSG appears to be
//               hardware-accelerated, or false if it is known to be
//               software only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
328 14 Dtool_O9cYuf8m 6 357 1084 0 14 Dtool_O9cYuf8m 859 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
329 14 Dtool_O9cYN0H1 6 358 1084 0 14 Dtool_O9cYN0H1 654 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
330 14 Dtool_O9cYCoqA 6 359 1084 0 14 Dtool_O9cYCoqA 662 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
331 14 Dtool_O9cY4MTA 6 360 1094 0 14 Dtool_O9cY4MTA 595 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
332 14 Dtool_O9cY8l6n 6 361 1094 0 14 Dtool_O9cY8l6n 475 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
333 14 Dtool_O9cYtTve 6 362 1094 0 14 Dtool_O9cYtTve 375 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
334 14 Dtool_O9cY363k 6 363 1094 0 14 Dtool_O9cY363k 325 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
335 14 Dtool_O9cYLBxF 6 364 1094 0 14 Dtool_O9cYLBxF 298 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
336 14 Dtool_O9cYb7rC 6 365 1094 0 14 Dtool_O9cYb7rC 333 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
337 14 Dtool_O9cYmk5Z 6 366 1094 0 14 Dtool_O9cYmk5Z 423 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
338 14 Dtool_O9cY1JaQ 6 367 1084 0 14 Dtool_O9cY1JaQ 579 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
339 14 Dtool_O9cYj53l 6 368 1084 0 14 Dtool_O9cYj53l 588 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
340 14 Dtool_O9cYWirW 6 369 1084 0 14 Dtool_O9cYWirW 818 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
341 14 Dtool_O9cYykA4 6 370 1084 0 14 Dtool_O9cYykA4 811 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
342 14 Dtool_O9cY4Ta6 6 371 1094 0 14 Dtool_O9cY4Ta6 976 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
343 14 Dtool_O9cY9xp9 6 372 1094 0 14 Dtool_O9cY9xp9 555 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
344 14 Dtool_O9cYQbph 6 373 1094 0 14 Dtool_O9cYQbph 464 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_render_texture
//       Access: Published
//  Description: Returns true if this particular GSG can render
//               directly into a texture, or false if it must always
//               copy-to-texture at the end of each frame to achieve
//               this effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
345 14 Dtool_O9cYWzUj 6 374 1094 0 14 Dtool_O9cYWzUj 543 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               returns true if the GSG supports GL_DEPTH_COMPONENT
//               textures, which are considered a limited but still
//               valid case of F_depth_stencil.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
346 14 Dtool_O9cYV1XG 6 375 1094 0 14 Dtool_O9cYV1XG 475 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               only returns true if the GSG supports the full
//               packed depth-stencil functionality.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
347 14 Dtool_O9cY9nGe 6 376 1094 0 14 Dtool_O9cY9nGe 334 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
348 14 Dtool_O9cYAtne 6 377 1094 0 14 Dtool_O9cYAtne 315 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_glsl
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               GLSL shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
349 14 Dtool_O9cY3MNr 6 378 1094 0 14 Dtool_O9cY3MNr 328 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               stencil buffers at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
350 14 Dtool_O9cYPsvb 6 379 1094 0 14 Dtool_O9cYPsvb 426 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_two_sided_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               two sided stencil: different stencil settings for the
//               front and back side of the same polygon.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
351 14 Dtool_O9cYhwaW 6 380 1094 0 14 Dtool_O9cYhwaW 494 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_instancing
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               hardware geometry instancing: the ability to render
//               multiple copies of a model. In OpenGL, this is
//               done using the EXT_draw_instanced extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
352 14 Dtool_O9cYj2nm 6 381 1084 0 14 Dtool_O9cYj2nm 338 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_maximum_simultaneous_render_targets
//       Access: Published
//  Description: Returns the maximum simultaneous render targets 
//               supported.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
353 14 Dtool_O9cYH2E7 6 382 1084 0 14 Dtool_O9cYH2E7 262 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_model
//       Access: Published
//  Description: Returns the ShaderModel
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
354 14 Dtool_O9cYF_yT 4 383 1082 0 14 Dtool_O9cYF_yT 403 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_model
//       Access: Published
//  Description: Sets the ShaderModel.  This will override the auto-
//               detected shader model during GSG reset.  Useful for
//               testing lower-end shaders.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  12 shader_model 1 1084  
355 14 Dtool_O9cYHqBZ 6 384 1094 0 14 Dtool_O9cYHqBZ 350 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cg_profile
//       Access: Published, Virtual
//  Description: Returns true if this particular GSG supports the 
//               specified Cg Shader Profile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1153  4 name 1 1095  
356 14 Dtool_O9cY11LA 6 385 1094 0 14 Dtool_O9cY11LA 499 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
357 14 Dtool_O9cYjrll 6 386 1094 0 14 Dtool_O9cYjrll 478 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) an alpha scale via an
//               additional Texture layer, or false if we need to
//               actually munge the alpha.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
358 14 Dtool_O9cYmzXP 6 386 1094 0 14 Dtool_O9cYmzXP 636 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: This variant of get_alpha_scale_via_texture() answers
//               the question of whether the GSG can implement an
//               alpha scale via an additional Texture layer,
//               considering the current TextureAttrib that will be in
//               effect.  This considers whether there is at least one
//               additional texture slot available on the GSG.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1153  10 tex_attrib 1 1158  
359 14 Dtool_O9cY9h3s 6 387 1094 0 14 Dtool_O9cY9h3s 483 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_runtime_color_scale
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale directly, without requiring any munging of
//               vertices or tricks with lighting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
360 14 Dtool_O9cYfwIg 7 388 1162 0 14 Dtool_O9cYfwIg 408 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_texture_stage
//       Access: Published, Static
//  Description: Returns the TextureStage that will be used to apply
//               an alpha scale, if get_alpha_scale_via_texture()
//               returns true.
//////////////////////////////////////////////////////////////////// 0 
361 14 Dtool_O9cYnlK4 4 389 1082 0 14 Dtool_O9cYnlK4 627 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  2 cs 1 1163  
362 14 Dtool_O9cYU3J8 6 390 1163 0 14 Dtool_O9cYU3J8 457 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
363 14 Dtool_O9cYg4rL 6 391 1163 0 14 Dtool_O9cYg4rL 756 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_internal_coordinate_system
//       Access: Published, Virtual
//  Description: Returns the coordinate system used internally by the
//               GSG.  This may be the same as the external coordinate
//               system reported by get_coordinate_system(), or it may
//               be something different.
//
//               In any case, vertices that have been transformed
//               before being handed to the GSG (that is, vertices
//               with a contents value of C_clip_point) will be
//               expected to be in this coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
364 14 Dtool_O9cYSVj3 7 392 1165 0 14 Dtool_O9cYSVj3 411 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_objects
//       Access: Public, Virtual
//  Description: Returns the set of texture and geom objects that have
//               been prepared with this GSG (and possibly other GSG's
//               that share objects).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
365 14 Dtool_O9cYkkpB 6 393 1094 0 14 Dtool_O9cYkkpB 277 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_gamma
//       Access: Published, Virtual
//  Description: Set gamma.  Returns true on success.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  5 gamma 1 1107  
366 14 Dtool_O9cY3ZpZ 6 394 1107 0 14 Dtool_O9cY3ZpZ 262 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_gamma
//       Access: Published
//  Description: Get the current gamma setting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  5 gamma 1 1107  
367 14 Dtool_O9cYm_yX 4 395 1082 0 14 Dtool_O9cYm_yX 276 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::restore_gamma
//       Access: Published, Virtual
//  Description: Restore original gamma setting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
368 14 Dtool_O9cYucW_ 4 396 1082 0 14 Dtool_O9cYucW_ 749 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_texture_quality_override
//       Access: Published
//  Description: Specifies the global quality_level to be imposed for
//               all Textures rendered by this GSG.  This overrides
//               the value set on individual textures via
//               Texture::set_quality_level().  Set this to
//               Texture::QL_default in order to allow the individual
//               texture quality levels to be respected.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  13 quality_level 1 1166  
369 14 Dtool_O9cYtIcw 6 397 1166 0 14 Dtool_O9cYtIcw 485 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_texture_quality_override
//       Access: Published
//  Description: Returns the global quality_level override specified
//               by set_texture_quality_override.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
370 14 Dtool_O9cYoQjB 6 398 1168 0 14 Dtool_O9cYoQjB 340 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_textures
//       Access: Published
//  Description: Returns a Python list of all of the
//               currently-prepared textures within the GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
371 14 Dtool_O9cYfJaY 4 400 1082 0 14 Dtool_O9cYfJaY 1337 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_flash_texture
//       Access: Published
//  Description: Sets the "flash texture".  This is a debug feature;
//               when enabled, the specified texture will begin
//               flashing in the scene, helping you to find it
//               visually.
//
//               The texture also flashes with a color code: blue for
//               mipmap level 0, yellow for mipmap level 1, and red
//               for mipmap level 2 or higher (even for textures that
//               don't have mipmaps).  This gives you an idea of the
//               choice of the texture size.  If it is blue, the
//               texture is being drawn the proper size or magnified;
//               if it is yellow, it is being minified a little bit;
//               and if it red, it is being minified considerably.  If
//               you see a red texture when you are right in front of
//               it, you should consider reducing the size of the
//               texture to avoid wasting texture memory.
//
//               Not all rendering backends support the flash_texture
//               feature.  Presently, it is only supported by OpenGL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  3 tex 1 1170  
372 14 Dtool_O9cYHN7t 4 401 1082 0 14 Dtool_O9cYHN7t 344 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::clear_flash_texture
//       Access: Published
//  Description: Resets the "flash texture", so that no textures will
//               flash.  See set_flash_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
373 14 Dtool_O9cYUOe5 7 402 1170 0 14 Dtool_O9cYUOe5 344 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_flash_texture
//       Access: Published
//  Description: Returns the current "flash texture", if any, or NULL
//               if none.  See set_flash_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
374 14 Dtool_O9cYvuAc 6 403 1094 0 14 Dtool_O9cYvuAc 549 // NDEBUG
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_scene
//       Access: Published
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.  Returns true if the scene is
//               acceptable, false if something's wrong.  This should
//               be called in the draw thread only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1152  11 scene_setup 1 1136  
375 14 Dtool_O9cYCYog 7 404 1136 0 14 Dtool_O9cYCYog 279 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_scene
//       Access: Published, Virtual
//  Description: Returns the current SceneSetup object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1153  
376 14 Dtool_O9cYc8_w 6 405 1094 0 14 Dtool_O9cYc8_w 933 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::begin_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the beginning of drawing commands for a "scene"
//               (usually a particular DisplayRegion) within a frame.
//               All 3-D drawing commands, except the clear operation,
//               must be enclosed within begin_scene() .. end_scene().
//               This must be called in the draw thread.
//
//               The return value is true if successful (in which case
//               the scene will be drawn and end_scene() will be
//               called later), or false if unsuccessful (in which
//               case nothing will be drawn and end_scene() will not
//               be called).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
377 14 Dtool_O9cYEBkF 4 406 1082 0 14 Dtool_O9cYEBkF 565 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::end_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the end of drawing commands for a "scene" (usually a
//               particular DisplayRegion) within a frame.  All 3-D
//               drawing commands, except the clear operation, must be
//               enclosed within begin_scene() .. end_scene().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1152  
378 14 Dtool_O9cYX9JS 7 407 1088 0 14 Dtool_O9cYX9JS 0 0 
379 14 Dtool_O9cY9STW 7 409 1110 702 14 Dtool_O9cY9STW 819 // Filename: stereoDisplayRegion.I
// Created by:  drose (19Feb09)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_left_eye
//       Access: Published
//  Description: Returns a pointer to the left DisplayRegion managed
//               by this stereo object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1171  
380 14 Dtool_O9cYHJcU 7 410 1110 702 14 Dtool_O9cYHJcU 326 ////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_right_eye
//       Access: Published
//  Description: Returns a pointer to the right DisplayRegion managed
//               by this stereo object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1171  
381 14 Dtool_O9cYSQKL 7 411 1088 0 14 Dtool_O9cYSQKL 0 0 
382 14 Dtool_O9cY6R3_ 7 421 1152 0 14 Dtool_O9cY6R3_ 1096 // Filename: graphicsOutput.I
// Created by:  drose (06Feb04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
383 14 Dtool_O9cYRmhe 7 422 1112 0 14 Dtool_O9cYRmhe 586 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
384 14 Dtool_O9cYs2Rt 7 423 1157 0 14 Dtool_O9cYs2Rt 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this output.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
385 14 Dtool_O9cYhafm 6 424 1095 0 14 Dtool_O9cYhafm 308 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
386 14 Dtool_O9cYZzOT 6 425 1084 0 14 Dtool_O9cYZzOT 539 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
387 14 Dtool_O9cYL5u4 6 426 1094 0 14 Dtool_O9cYL5u4 318 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
388 14 Dtool_O9cYOT2F 7 427 1170 0 14 Dtool_O9cYOT2F 725 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1172  1 i 1 1084  
389 14 Dtool_O9cYjbtr 7 427 1170 0 14 Dtool_O9cYjbtr 725 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
390 14 Dtool_O9cYr9lk 6 428 1046 0 14 Dtool_O9cYr9lk 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1172  1 i 1 1084  
391 14 Dtool_O9cYtRfb 6 428 1046 0 14 Dtool_O9cYtRfb 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
392 14 Dtool_O9cYtK3h 6 429 1069 0 14 Dtool_O9cYtK3h 378 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1172  1 i 1 1084  
393 14 Dtool_O9cYeXTd 6 429 1069 0 14 Dtool_O9cYeXTd 378 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
394 14 Dtool_O9cYy_19 4 430 1082 0 14 Dtool_O9cYy_19 387 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
395 14 Dtool_O9cYEdHR 4 431 1082 0 14 Dtool_O9cYEdHR 1875 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1111  3 tex 1 1170  4 mode 1 1069  8 bitplane 1 1046  
396 14 Dtool_O9cYyxSR 4 431 1082 0 14 Dtool_O9cYyxSR 1875 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1111  3 tex 1 1170  4 mode 1 1069  
397 14 Dtool_O9cYcdjE 4 432 1082 0 14 Dtool_O9cYcdjE 494 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1111  3 tex 1 1170  10 allow_bind 1 1094  6 to_ram 1 1094  
398 14 Dtool_O9cYpVEG 6 433 1084 0 14 Dtool_O9cYpVEG 746 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the visible width of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
399 14 Dtool_O9cY5zZG 6 434 1084 0 14 Dtool_O9cY5zZG 747 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the visible height of the window or buffer,
//               if it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
400 14 Dtool_O9cYrFNb 6 435 1084 0 14 Dtool_O9cYrFNb 440 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_x_size
//       Access: Published
//  Description: Returns the internal width of the window or buffer.
//               This is almost always the same as get_x_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
401 14 Dtool_O9cYXHNp 6 436 1084 0 14 Dtool_O9cYXHNp 441 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_y_size
//       Access: Published
//  Description: Returns the internal height of the window or buffer.
//               This is almost always the same as get_y_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
402 14 Dtool_O9cYqgyg 6 437 1094 0 14 Dtool_O9cYqgyg 530 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
403 14 Dtool_O9cYewNA 6 438 1094 0 14 Dtool_O9cYewNA 326 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
404 14 Dtool_O9cYKShL 4 439 1082 0 14 Dtool_O9cYKShL 380 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  6 active 1 1094  
405 14 Dtool_O9cYCPRe 6 440 1094 0 14 Dtool_O9cYCPRe 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
406 14 Dtool_O9cYHoke 4 441 1082 0 14 Dtool_O9cYHoke 1266 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will render one
//               frame and then automatically set itself inactive.
//               This is particularly useful for buffers that are
//               created for the purposes of render-to-texture, for
//               static textures that don't need to be continually
//               re-rendered once they have been rendered the first
//               time.
//
//               Setting the buffer inactive is not the same thing as
//               destroying it.  You are still responsible for passing
//               this buffer to GraphicsEngine::remove_window() when
//               you no longer need the texture, in order to clean up
//               fully.  (However, you should not call remove_window()
//               on this buffer while the texture is still needed,
//               because depending on the render-to-texture mechanism
//               in use, this may invalidate the texture contents.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  8 one_shot 1 1094  
407 14 Dtool_O9cY2vFO 6 442 1094 0 14 Dtool_O9cY2vFO 512 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically detach its texture (if it has one) and
//               remove itself from the GraphicsEngine after it
//               renders the next frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
408 14 Dtool_O9cYNoPm 4 443 1082 0 14 Dtool_O9cYNoPm 947 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  8 inverted 1 1094  
409 14 Dtool_O9cYx4vV 6 444 1094 0 14 Dtool_O9cYx4vV 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
410 14 Dtool_O9cYPGYQ 4 445 1082 0 14 Dtool_O9cYPGYQ 959 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1111  15 red_blue_stereo 1 1094  19 left_eye_color_mask 1 1083  20 right_eye_color_mask 1 1083  
411 14 Dtool_O9cYgl0N 6 446 1094 0 14 Dtool_O9cYgl0N 357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
412 14 Dtool_O9cYhaUJ 6 447 1083 0 14 Dtool_O9cYhaUJ 470 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
413 14 Dtool_O9cYoNZy 6 448 1083 0 14 Dtool_O9cYoNZy 472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
414 14 Dtool_O9cYjFO0 6 449 1143 0 14 Dtool_O9cYjFO0 282 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
415 14 Dtool_O9cYp1Tf 6 450 1094 0 14 Dtool_O9cYp1Tf 447 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
416 14 Dtool_O9cYjxx5 4 451 1082 0 14 Dtool_O9cYjxx5 386 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
417 14 Dtool_O9cYsJD_ 6 452 1094 0 14 Dtool_O9cYsJD_ 460 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
418 14 Dtool_O9cYQqjF 4 453 1082 0 14 Dtool_O9cYQqjF 345 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published, Virtual
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  4 sort 1 1084  
419 14 Dtool_O9cYcE4c 6 454 1084 0 14 Dtool_O9cYcE4c 432 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
420 14 Dtool_O9cYyqqS 4 455 1082 0 14 Dtool_O9cYyqqS 1026 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_child_sort
//       Access: Published
//  Description: Specifies the sort value of future offscreen buffers
//               created by make_texture_sort().
//
//               The purpose of this method is to allow the user to
//               limit the sort value chosen for a buffer created via
//               make_texture_buffer().  Normally, this buffer will be
//               assigned a value of get_sort() - 1, so that it
//               will be rendered before this window is rendered; but
//               sometimes this isn't sufficiently early, especially
//               if other buffers also have a view into the same
//               scene.
//
//               If you specify a value here, then new buffers created
//               via make_texture_buffer() will be given that sort
//               value instead of get_sort() - 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  10 child_sort 1 1084  
421 14 Dtool_O9cY_qOW 4 456 1082 0 14 Dtool_O9cY_qOW 390 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_child_sort
//       Access: Published
//  Description: Resets the sort value of future offscreen buffers
//               created by make_texture_sort() to the default value.
//               See set_child_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
422 14 Dtool_O9cYx5eS 6 457 1084 0 14 Dtool_O9cYx5eS 351 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_child_sort
//       Access: Published
//  Description: Returns the sort value of future offscreen buffers
//               created by make_texture_sort(). See set_child_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
423 14 Dtool_O9cYys0m 4 458 1082 0 14 Dtool_O9cYys0m 376 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
424 14 Dtool_O9cYDSih 7 459 1110 702 14 Dtool_O9cYDSih 652 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
425 14 Dtool_O9cYefSE 7 459 1110 702 14 Dtool_O9cYefSE 735 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1111  1 l 1 1107  1 r 1 1107  1 b 1 1107  1 t 1 1107  
426 14 Dtool_O9cYrH1t 7 460 1110 702 14 Dtool_O9cYrH1t 423 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a mono DisplayRegion, even if
//               is_stereo() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
427 14 Dtool_O9cYN6dz 7 460 1110 702 14 Dtool_O9cYN6dz 506 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a mono DisplayRegion, even if
//               is_stereo() is true.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1111  1 l 1 1107  1 r 1 1107  1 b 1 1107  1 t 1 1107  
428 14 Dtool_O9cYbYGK 7 461 1171 702 14 Dtool_O9cYbYGK 428 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
429 14 Dtool_O9cYa2ry 7 461 1171 702 14 Dtool_O9cYa2ry 511 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1111  1 l 1 1107  1 r 1 1107  1 b 1 1107  1 t 1 1107  
430 14 Dtool_O9cYyMVJ 6 462 1094 0 14 Dtool_O9cYyMVJ 492 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  14 display_region 1 1110  
431 14 Dtool_O9cYVlIl 4 463 1082 0 14 Dtool_O9cYVlIl 359 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
432 14 Dtool_O9cYHxxm 6 464 1084 0 14 Dtool_O9cYHxxm 355 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
433 14 Dtool_O9cY1bhW 7 465 1110 702 14 Dtool_O9cY1bhW 542 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1172  1 n 1 1084  
434 14 Dtool_O9cY_TMd 6 466 1084 0 14 Dtool_O9cY_TMd 348 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1172  
435 14 Dtool_O9cYjI4S 7 467 1110 702 14 Dtool_O9cYjI4S 563 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1172  1 n 1 1084  
436 14 Dtool_O9cYOgc9 7 468 1111 914 14 Dtool_O9cYOgc9 1888 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window() (or
//               set the one_shot flag so it removes itself after one
//               frame).
//////////////////////////////////////////////////////////////////// 7 4 this 3 1111  4 name 1 1095  6 x_size 1 1084  6 y_size 1 1084  3 tex 1 1170  6 to_ram 1 1094  3 fbp 1 1142  
437 14 Dtool_O9cYoo09 7 468 1111 914 14 Dtool_O9cYoo09 1888 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window() (or
//               set the one_shot flag so it removes itself after one
//               frame).
//////////////////////////////////////////////////////////////////// 6 4 this 3 1111  4 name 1 1095  6 x_size 1 1084  6 y_size 1 1084  3 tex 1 1170  6 to_ram 1 1094  
438 14 Dtool_O9cY54eM 7 468 1111 914 14 Dtool_O9cY54eM 1888 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window() (or
//               set the one_shot flag so it removes itself after one
//               frame).
//////////////////////////////////////////////////////////////////// 5 4 this 3 1111  4 name 1 1095  6 x_size 1 1084  6 y_size 1 1084  3 tex 1 1170  
439 14 Dtool_O9cY6cMF 7 468 1111 914 14 Dtool_O9cY6cMF 1888 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window() (or
//               set the one_shot flag so it removes itself after one
//               frame).
//////////////////////////////////////////////////////////////////// 4 4 this 3 1111  4 name 1 1095  6 x_size 1 1084  6 y_size 1 1084  
440 14 Dtool_O9cYSG5G 7 469 1111 914 14 Dtool_O9cYSG5G 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 7 4 this 3 1111  4 name 1 1095  4 size 1 1084  10 camera_rig 1 1118  11 camera_mask 1 1174  6 to_ram 1 1094  3 fbp 1 1142  
441 14 Dtool_O9cYA8GH 7 469 1111 914 14 Dtool_O9cYA8GH 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1111  4 name 1 1095  4 size 1 1084  10 camera_rig 1 1118  11 camera_mask 1 1174  6 to_ram 1 1094  
442 14 Dtool_O9cYEFcu 7 469 1111 914 14 Dtool_O9cYEFcu 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1111  4 name 1 1095  4 size 1 1084  10 camera_rig 1 1118  11 camera_mask 1 1174  
443 14 Dtool_O9cYVD6z 7 469 1111 914 14 Dtool_O9cYVD6z 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1111  4 name 1 1095  4 size 1 1084  10 camera_rig 1 1118  
444 14 Dtool_O9cYeFZK 7 470 1125 0 14 Dtool_O9cYeFZK 806 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 1 6 prefix 1 1095  
445 14 Dtool_O9cYPz_F 7 470 1125 0 14 Dtool_O9cYPz_F 806 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 0 
446 14 Dtool_O9cYbMge 7 471 1125 0 14 Dtool_O9cYbMge 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  6 prefix 1 1095  
447 14 Dtool_O9cY8zcS 7 471 1125 0 14 Dtool_O9cY8zcS 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
448 14 Dtool_O9cYrjOY 6 472 1094 0 14 Dtool_O9cYrjOY 600 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1111  8 filename 1 1096  13 image_comment 1 1095  
449 14 Dtool_O9cYoVLU 6 472 1094 0 14 Dtool_O9cYoVLU 600 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  8 filename 1 1096  
450 14 Dtool_O9cYIsHW 6 473 1094 0 14 Dtool_O9cYIsHW 399 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  5 image 1 1126  
451 14 Dtool_O9cYUNk3 7 474 1118 0 14 Dtool_O9cYUNk3 959 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
452 14 Dtool_O9cY2Eyc 6 475 1094 0 14 Dtool_O9cY2Eyc 386 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::share_depth_buffer
//       Access: Published, Virtual
//  Description: Will attempt to use the depth buffer of the input
//               graphics_output. The buffer sizes must be exactly
//               the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1111  15 graphics_output 1 1111  
453 14 Dtool_O9cYX5g9 4 476 1082 0 14 Dtool_O9cYX5g9 282 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::unshare_depth_buffer
//       Access: Published, Virtual
//  Description: Discontinue sharing the depth buffer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1111  
454 14 Dtool_O9cYg2P6 7 477 1088 0 14 Dtool_O9cYg2P6 0 0 
455 14 Dtool_O9cY_FL1 7 414 1176 0 14 Dtool_O9cY_FL1 0 1 4 this 3 1111  
456 14 Dtool_O9cYlfJN 7 415 1111 914 14 Dtool_O9cYlfJN 0 1 4 this 3 1176  
457 14 Dtool_O9cYpLTb 6 416 1101 0 14 Dtool_O9cYpLTb 0 1 4 this 3 1111  
458 14 Dtool_O9cYuJDd 7 417 1111 914 14 Dtool_O9cYuJDd 0 1 4 this 3 1101  
459 14 Dtool_O9cYs2_j 4 479 1082 0 14 Dtool_O9cYs2_j 548 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1177  1 x 1 1084  1 y 1 1084  
460 14 Dtool_O9cYJuQB 7 480 1088 0 14 Dtool_O9cYJuQB 0 0 
461 14 Dtool_O9cYhbmW 7 482 1092 0 14 Dtool_O9cYhbmW 275 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
462 14 Dtool_O9cY0Htu 7 483 1092 0 14 Dtool_O9cY0Htu 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
463 14 Dtool_O9cYYZ4X 4 484 1082 0 14 Dtool_O9cYYZ4X 346 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1180  
464 14 Dtool_O9cYcXSI 7 485 1091 541 14 Dtool_O9cYcXSI 563 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
465 14 Dtool_O9cYGdcu 4 486 1082 0 14 Dtool_O9cYGdcu 603 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1180  20 requested_properties 1 1092  
466 14 Dtool_O9cYu9q8 6 487 1094 0 14 Dtool_O9cYu9q8 1121 // Filename: graphicsWindow.I
// Created by:  frang (07Mar99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
467 14 Dtool_O9cYJaEs 6 488 1094 0 14 Dtool_O9cYJaEs 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
468 14 Dtool_O9cYGNv6 4 489 1082 0 14 Dtool_O9cYGNv6 630 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1180  12 window_event 1 1095  
469 14 Dtool_O9cY_R55 6 490 1095 0 14 Dtool_O9cY_R55 421 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
470 14 Dtool_O9cYuHKx 4 491 1082 0 14 Dtool_O9cYuHKx 1393 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1180  19 close_request_event 1 1095  
471 14 Dtool_O9cYg_ue 6 492 1095 0 14 Dtool_O9cYg_ue 515 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
472 14 Dtool_O9cYYAaM 7 493 1080 0 14 Dtool_O9cYYAaM 641 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_handle
//       Access: Published
//  Description: Returns the WindowHandle corresponding to this window
//               on the desktop.  This is mainly useful for
//               communicating with external libraries.  Use
//               window_handle->get_os_handle()->get_handle(), or
//               window_handle->get_string_handle(), to get the actual
//               OS-specific window handle object, whatever type that
//               might be.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
473 14 Dtool_O9cYWc_C 6 494 1084 0 14 Dtool_O9cYWc_C 594 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1178  
474 14 Dtool_O9cYqhfW 6 495 1095 0 14 Dtool_O9cYqhfW 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1178  6 device 1 1084  
475 14 Dtool_O9cYYErM 6 496 1094 0 14 Dtool_O9cYYErM 366 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1178  6 device 1 1084  
476 14 Dtool_O9cYeEpH 6 497 1094 0 14 Dtool_O9cYeEpH 314 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1178  6 device 1 1084  
477 14 Dtool_O9cYCg1v 4 498 1082 0 14 Dtool_O9cYCg1v 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_events
//       Access: Published
//  Description: Turn on the generation of pointer events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1180  6 device 1 1084  
478 14 Dtool_O9cYyQiD 4 499 1082 0 14 Dtool_O9cYyQiD 280 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: Turn off the generation of pointer events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1180  6 device 1 1084  
479 14 Dtool_O9cYN5RH 4 500 1082 0 14 Dtool_O9cYN5RH 285 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_mode
//       Access: Published
//  Description: See GraphicsWindowInputDevice::enable_pointer_mode
//////////////////////////////////////////////////////////////////// 3 4 this 3 1180  6 device 1 1084  5 speed 1 1181  
480 14 Dtool_O9cY8M8I 4 501 1082 0 14 Dtool_O9cY8M8I 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: See GraphicsWindowInputDevice::disable_pointer_mode
//////////////////////////////////////////////////////////////////// 2 4 this 3 1180  6 device 1 1084  
481 14 Dtool_O9cYxqr_ 7 502 1183 0 14 Dtool_O9cYxqr_ 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth input
//               device's pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1178  6 device 1 1084  
482 14 Dtool_O9cYPl6f 6 503 1094 0 14 Dtool_O9cYPl6f 542 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.  
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1180  6 device 1 1084  1 x 1 1084  1 y 1 1084  
483 14 Dtool_O9cY_nZW 4 504 1082 0 14 Dtool_O9cY_nZW 274 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1180  
484 14 Dtool_O9cYjGVA 7 505 1088 0 14 Dtool_O9cYjGVA 0 0 
485 14 Dtool_O9cYzpWM 7 507 1080 0 14 Dtool_O9cYzpWM 607 ////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_int
//       Access: Published, Static
//  Description: Constructs a new WindowHandle with an int value,
//               which is understood to be either an HWND or a Window,
//               cast to int.  This method exists for the convenience
//               of Python, which likes to deal with ints; C++ code
//               should use one of the more specific make_x11() or
//               make_win32() methods instead.
//////////////////////////////////////////////////////////////////// 1 6 window 1 1083  
486 14 Dtool_O9cYP_i_ 7 508 1080 0 14 Dtool_O9cYP_i_ 636 ////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_subprocess
//       Access: Published, Static
//  Description: Constructs a new WindowHandle that references a
//               SubprocessWindowBuffer read in another process, with
//               the named pipe filename that it uses for
//               communication.
//
//               This is (at present, and maybe always) useful only on
//               the OS X platform, where parenting child windows is
//               particularly problematic.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 1096  
487 14 Dtool_O9cY9VjG 7 509 1088 0 14 Dtool_O9cY9VjG 0 0 
488 14 Dtool_O9cYvamu 4 512 1082 0 14 Dtool_O9cYvamu 548 ////////////////////////////////////////////////////////////////////
//     Function: ParasiteBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1184  1 x 1 1084  1 y 1 1084  
489 14 Dtool_O9cYKj4L 7 513 1088 0 14 Dtool_O9cYKj4L 0 0 
490 14 Dtool_O9cYGcAr 7 516 1157 0 14 Dtool_O9cYGcAr 448 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
//////////////////////////////////////////////////////////////////// 1 8 pipeline 1 1185  
491 14 Dtool_O9cY3Xr_ 7 516 1157 0 14 Dtool_O9cY3Xr_ 448 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
//////////////////////////////////////////////////////////////////// 0 
492 14 Dtool_O9cYkzZy 4 517 1082 0 14 Dtool_O9cYkzZy 422 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1157  15 threading_model 1 1145  
493 14 Dtool_O9cY_NLg 7 518 1147 827 14 Dtool_O9cY_NLg 347 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1187  
494 14 Dtool_O9cYpnHT 4 519 1082 0 14 Dtool_O9cYpnHT 1415 // Filename: graphicsEngine.I
// Created by:  drose (24Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1157  9 auto_flip 1 1094  
495 14 Dtool_O9cYdDTb 6 520 1094 0 14 Dtool_O9cYdDTb 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1187  
496 14 Dtool_O9cY5bdZ 4 521 1082 0 14 Dtool_O9cY5bdZ 325 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
//////////////////////////////////////////////////////////////////// 2 4 this 3 1157  5 value 1 1094  
497 14 Dtool_O9cYsi85 6 522 1094 0 14 Dtool_O9cYsi85 287 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1187  
498 14 Dtool_O9cYm7fs 4 523 1082 0 14 Dtool_O9cYm7fs 398 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_default_loader
//       Access: Public
//  Description: Sets the Loader object that will be assigned to every
//               GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1157  6 loader 1 1155  
499 14 Dtool_O9cYL2Ib 7 524 1155 0 14 Dtool_O9cYL2Ib 410 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_default_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be assigned to
//               every GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1187  
500 14 Dtool_O9cY6E_Y 7 525 1111 914 14 Dtool_O9cY6E_Y 760 // THIS IS THE OLD CODE FOR make_gsg
//  PT(GraphicsStateGuardian) gsg = pipe->make_gsg(properties, share_with);
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
//////////////////////////////////////////////////////////////////// 9 4 this 3 1157  4 pipe 1 1112  4 name 1 1095  4 sort 1 1084  7 fb_prop 1 1143  8 win_prop 1 1092  5 flags 1 1084  3 gsg 1 1152  4 host 1 1111  
501 14 Dtool_O9cYHZRz 7 525 1111 914 14 Dtool_O9cYHZRz 760 // THIS IS THE OLD CODE FOR make_gsg
//  PT(GraphicsStateGuardian) gsg = pipe->make_gsg(properties, share_with);
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
//////////////////////////////////////////////////////////////////// 8 4 this 3 1157  4 pipe 1 1112  4 name 1 1095  4 sort 1 1084  7 fb_prop 1 1143  8 win_prop 1 1092  5 flags 1 1084  3 gsg 1 1152  
502 14 Dtool_O9cYo_rj 7 525 1111 914 14 Dtool_O9cYo_rj 760 // THIS IS THE OLD CODE FOR make_gsg
//  PT(GraphicsStateGuardian) gsg = pipe->make_gsg(properties, share_with);
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_output
//       Access: Published
//  Description: Creates a new window (or buffer) and returns it.
//               The GraphicsEngine becomes the owner of the window,
//               it will persist at least until remove_window() is
//               called later.
//
//               If a null pointer is supplied for the gsg, then this
//               routine will create a new gsg.
//               
//               This routine is only called from the app thread.
//////////////////////////////////////////////////////////////////// 7 4 this 3 1157  4 pipe 1 1112  4 name 1 1095  4 sort 1 1084  7 fb_prop 1 1143  8 win_prop 1 1092  5 flags 1 1084  
503 14 Dtool_O9cYQ92T 7 526 1111 914 14 Dtool_O9cYQ92T 723 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This is the
//               preferred way to create an offscreen buffer, when you
//               already have an onscreen window or another buffer to
//               start with.  For the first parameter, pass an
//               existing GraphicsOutput object, e.g. the main window;
//               this allows the buffer to adapt itself to that
//               window's framebuffer properties, and allows maximum
//               sharing of resources.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1157  4 host 1 1111  4 name 1 1095  4 sort 1 1084  6 x_size 1 1084  6 y_size 1 1084  
504 14 Dtool_O9cYG7HJ 7 526 1111 914 14 Dtool_O9cYG7HJ 1177 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This flavor
//               accepts a GSG rather than a GraphicsOutput as the
//               first parameter, which is too limiting and disallows
//               the possibility of creating a ParasiteBuffer if the
//               user's graphics hardware prefers that.  It also
//               attempts to request specific framebuffer properties
//               and may therefore do a poorer job of sharing the GSG
//               between the old buffer and the new.
//
//               For these reasons, this variant is a poor choice
//               unless you are creating an offscreen buffer for the
//               first time, without an onscreen window already in
//               existence.  If you already have an onscreen window,
//               you should use the other flavor of make_buffer()
//               instead, which accepts a GraphicsOutput as the first
//               parameter.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1157  3 gsg 1 1152  4 name 1 1095  4 sort 1 1084  6 x_size 1 1084  6 y_size 1 1084  
505 14 Dtool_O9cYs8x6 7 527 1111 914 14 Dtool_O9cYs8x6 265 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1157  4 host 1 1111  4 name 1 1095  4 sort 1 1084  6 x_size 1 1084  6 y_size 1 1084  
506 14 Dtool_O9cYQEjj 6 528 1094 0 14 Dtool_O9cYQEjj 1357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1157  6 window 1 1111  
507 14 Dtool_O9cYbizP 4 529 1082 0 14 Dtool_O9cYbizP 412 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1157  
508 14 Dtool_O9cY7tzD 4 530 1082 0 14 Dtool_O9cY7tzD 466 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to 
//               release/create old/new framebuffer
//////////////////////////////////////////////////////////////////// 2 4 this 3 1157  9 swapchain 1 1094  
509 14 Dtool_O9cYqWta 6 531 1094 0 14 Dtool_O9cYqWta 360 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1187  
510 14 Dtool_O9cYxJBp 6 532 1084 0 14 Dtool_O9cYxJBp 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1187  
511 14 Dtool_O9cYLl7l 7 533 1111 914 14 Dtool_O9cYLl7l 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1187  1 n 1 1084  
512 14 Dtool_O9cY4GAK 4 534 1082 0 14 Dtool_O9cY4GAK 334 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1157  
513 14 Dtool_O9cYfeD_ 4 535 1082 0 14 Dtool_O9cYfeD_ 658 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1157  
514 14 Dtool_O9cYNMb_ 4 536 1082 0 14 Dtool_O9cYNMb_ 558 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1157  
515 14 Dtool_O9cYbWRO 4 537 1082 0 14 Dtool_O9cYbWRO 516 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1157  
516 14 Dtool_O9cY8ADE 6 538 1094 0 14 Dtool_O9cY8ADE 1560 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1157  3 tex 1 1170  3 gsg 1 1152  
517 14 Dtool_O9cYB52G 7 539 1157 0 14 Dtool_O9cYB52G 238 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_global_ptr
//       Access: Published, Static
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
518 14 Dtool_O9cYkGJV 6 541 1084 0 14 Dtool_O9cYkGJV 382 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1189  
519 14 Dtool_O9cYdWon 7 542 1088 0 14 Dtool_O9cYdWon 323 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1189  1 n 1 1084  
520 14 Dtool_O9cYKhch 4 543 1082 0 14 Dtool_O9cYKhch 348 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1189  
521 14 Dtool_O9cYgtWV 7 544 1112 0 14 Dtool_O9cYgtWV 456 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1191  4 type 1 1088  
522 14 Dtool_O9cY_DWW 7 544 1112 0 14 Dtool_O9cY_DWW 651 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1191  9 type_name 1 1095  11 module_name 1 1095  
523 14 Dtool_O9cY053M 7 544 1112 0 14 Dtool_O9cY053M 651 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1191  9 type_name 1 1095  
524 14 Dtool_O9cY7Nor 7 545 1112 0 14 Dtool_O9cY7Nor 430 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_module_pipe
//       Access: Published
//  Description: Returns a new GraphicsPipe of a type defined by the
//               indicated module.  Returns NULL if the module is not
//               found or does not properly recommend a GraphicsPipe.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1191  11 module_name 1 1095  
525 14 Dtool_O9cYJlGM 7 546 1112 0 14 Dtool_O9cYJlGM 426 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1191  
526 14 Dtool_O9cYtQ2r 6 547 1084 0 14 Dtool_O9cYtQ2r 969 // Filename: graphicsPipeSelection.I
// Created by:  drose (15Aug02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1189  
527 14 Dtool_O9cY4_4n 4 548 1082 0 14 Dtool_O9cY4_4n 391 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1191  
528 14 Dtool_O9cYa86m 6 549 1191 0 14 Dtool_O9cYa86m 327 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
//////////////////////////////////////////////////////////////////// 0 
156
1037 12 WindowHandle 75777 12 WindowHandle 12 WindowHandle 0 0 0 1 529 0 0 6 530 531 532 533 534 538 0 0 1 0 1038 0 0 0 1 1039 859
////////////////////////////////////////////////////////////////////
//       Class : WindowHandle
// Description : This object represents a window on the desktop, not
//               necessarily a Panda window.  This structure can be
//               assigned to a WindowProperties to indicate a parent
//               window.
//
//               It also has callbacks so the Panda window can
//               communicate with its parent window, which is
//               particularly important when running embedded in a
//               browser.
//
//               To create a WindowHandle, you would usually call one
//               of the NativeWindowHandle::make_*() methods,
//               depending on the kind of native window handle object
//               you already have.
////////////////////////////////////////////////////////////////////

1038 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1039 8 OSHandle 337921 22 WindowHandle::OSHandle 22 WindowHandle::OSHandle 1037 0 0 0 0 0 3 535 536 537 0 0 1 0 1038 0 0 0 0 154
// This internal pointer within WindowHandle stores the actual
// OS-specific window handle type, whatever type that is.  It is
// subclassed for each OS.

1040 16 WindowProperties 26625 16 WindowProperties 16 WindowProperties 0 0 0 1 539 541 0 78 540 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 0 0 0 0 2 1041 1042 436
////////////////////////////////////////////////////////////////////
//       Class : WindowProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics window before we open
//               it.  This also serves to hold the current properties
//               for a window after it has been opened.
////////////////////////////////////////////////////////////////////

1041 6 ZOrder 794624 24 WindowProperties::ZOrder 24 WindowProperties::ZOrder 1040 0 0 0 0 0 0 0 0 0 3 8 Z_bottom 26 WindowProperties::Z_bottom 0 8 Z_normal 26 WindowProperties::Z_normal 1 5 Z_top 23 WindowProperties::Z_top 2 0 0

1042 9 MouseMode 794624 27 WindowProperties::MouseMode 27 WindowProperties::MouseMode 1040 0 0 0 0 0 0 0 0 0 2 10 M_absolute 28 WindowProperties::M_absolute 0 10 M_relative 28 WindowProperties::M_relative 1 0 0

1043 18 DisplayInformation 26625 18 DisplayInformation 18 DisplayInformation 0 0 0 1 620 619 0 53 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 0 0 0 0 1 1044 239
////////////////////////////////////////////////////////////////////
//       Class : DisplayInformation
// Description : This class contains various display information.
////////////////////////////////////////////////////////////////////

1044 14 DetectionState 794624 34 DisplayInformation::DetectionState 34 DisplayInformation::DetectionState 1043 0 0 0 0 0 0 0 0 0 5 10 DS_unknown 30 DisplayInformation::DS_unknown 0 10 DS_success 30 DisplayInformation::DS_success 1 25 DS_direct_3d_create_error 45 DisplayInformation::DS_direct_3d_create_error 2 22 DS_create_window_error 42 DisplayInformation::DS_create_window_error 3 22 DS_create_device_error 42 DisplayInformation::DS_create_device_error 4 0 0

1045 14 DrawableRegion 26625 14 DrawableRegion 14 DrawableRegion 0 0 0 0 674 0 23 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 0 0 0 0 1 1046 655
////////////////////////////////////////////////////////////////////
//       Class : DrawableRegion
// Description : This is a base class for GraphicsWindow (actually,
//               GraphicsOutput) and DisplayRegion, both of which are
//               conceptually rectangular regions into which drawing
//               commands may be issued.  Sometimes you want to deal
//               with a single display region, and sometimes you want
//               to deal with the whole window at once, particularly
//               for issuing clear commands and capturing screenshots.
////////////////////////////////////////////////////////////////////

1046 18 RenderTexturePlane 794624 34 DrawableRegion::RenderTexturePlane 34 DrawableRegion::RenderTexturePlane 1045 0 0 0 0 0 0 0 0 0 17 11 RTP_stencil 27 DrawableRegion::RTP_stencil 0 17 RTP_depth_stencil 33 DrawableRegion::RTP_depth_stencil 1 9 RTP_color 25 DrawableRegion::RTP_color 2 14 RTP_aux_rgba_0 30 DrawableRegion::RTP_aux_rgba_0 3 14 RTP_aux_rgba_1 30 DrawableRegion::RTP_aux_rgba_1 4 14 RTP_aux_rgba_2 30 DrawableRegion::RTP_aux_rgba_2 5 14 RTP_aux_rgba_3 30 DrawableRegion::RTP_aux_rgba_3 6 15 RTP_aux_hrgba_0 31 DrawableRegion::RTP_aux_hrgba_0 7 15 RTP_aux_hrgba_1 31 DrawableRegion::RTP_aux_hrgba_1 8 15 RTP_aux_hrgba_2 31 DrawableRegion::RTP_aux_hrgba_2 9 15 RTP_aux_hrgba_3 31 DrawableRegion::RTP_aux_hrgba_3 10 15 RTP_aux_float_0 31 DrawableRegion::RTP_aux_float_0 11 15 RTP_aux_float_1 31 DrawableRegion::RTP_aux_float_1 12 15 RTP_aux_float_2 31 DrawableRegion::RTP_aux_float_2 13 15 RTP_aux_float_3 31 DrawableRegion::RTP_aux_float_3 14 9 RTP_depth 25 DrawableRegion::RTP_depth 15 9 RTP_COUNT 25 DrawableRegion::RTP_COUNT 16 0 168
// It seems awkward to have this type, and also
// RenderBuffer::Type.  However, the fact that RenderBuffer::Type
// is a bitmask makes it awfully awkward to work with.

1047 13 DisplayRegion 26625 13 DisplayRegion 13 DisplayRegion 0 0 0 0 702 0 42 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 0 0 2 3 1048 698 699 3 1045 700 701 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

1048 17 DisplayRegionBase 2049 17 DisplayRegionBase 17 DisplayRegionBase 0 0 0 0 0 0 0 0 0 0 0 0 307
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionBase
// Description : An abstract base class for DisplayRegion, mainly so
//               we can store DisplayRegion pointers in a Camera.
////////////////////////////////////////////////////////////////////

1049 29 DisplayRegionCullCallbackData 141313 29 DisplayRegionCullCallbackData 29 DisplayRegionCullCallbackData 0 0 0 0 748 0 3 745 746 747 0 0 1 0 1050 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionCullCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from the cull traversal,
//               for a DisplayRegion.
////////////////////////////////////////////////////////////////////

1050 12 CallbackData 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

1051 29 DisplayRegionDrawCallbackData 141313 29 DisplayRegionDrawCallbackData 29 DisplayRegionDrawCallbackData 0 0 0 0 752 0 3 749 750 751 0 0 1 0 1050 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionDrawCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from the draw traversal,
//               for a DisplayRegion.
////////////////////////////////////////////////////////////////////

1052 23 DisplaySearchParameters 26625 23 DisplaySearchParameters 23 DisplaySearchParameters 0 0 0 1 753 754 0 6 755 756 757 758 759 760 0 0 0 0 0 247
////////////////////////////////////////////////////////////////////
//       Class : DisplaySearchParameters
// Description : Parameters used for searching display capabilities.
////////////////////////////////////////////////////////////////////

1053 21 FrameBufferProperties 26625 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 1 793 794 0 50 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 0 0 0 0 0 346
////////////////////////////////////////////////////////////////////
//       Class : FrameBufferProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics frameBuffer before we
//               create a GSG.
////////////////////////////////////////////////////////////////////

1054 22 GraphicsThreadingModel 141313 22 GraphicsThreadingModel 22 GraphicsThreadingModel 0 0 0 1 813 827 0 13 814 815 816 817 818 819 820 821 822 823 824 825 826 0 0 0 0 0 313
////////////////////////////////////////////////////////////////////
//       Class : GraphicsThreadingModel
// Description : This represents the user's specification of how a
//               particular frame is handled by the various threads.
////////////////////////////////////////////////////////////////////

1055 14 GraphicsDevice 75777 14 GraphicsDevice 14 GraphicsDevice 0 0 0 0 0 0 2 828 829 0 0 1 0 1038 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : GraphicsDevice
// Description : An abstract device object that is part of Graphics
//               Pipe. This device is set to NULL for OpenGL. But 
//               DirectX uses it to take control of multiple windows
//               under single device or multiple devices (i.e. more
//               than one adapters in the machine).   
//
////////////////////////////////////////////////////////////////////

1056 12 GraphicsPipe 75777 12 GraphicsPipe 12 GraphicsPipe 0 0 0 0 0 0 9 830 831 832 833 834 835 836 837 838 0 0 1 0 1038 0 0 0 2 1057 1058 1126
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipe
// Description : An object to create GraphicsOutputs that share a
//               particular 3-D API.  Normally, there will only be one
//               GraphicsPipe in an application, although it is
//               possible to have multiple of these at once if there
//               are multiple different API's available in the same
//               machine.
//
//               Often, the GraphicsPipe corresponds to a physical
//               output device, hence the term "pipe", but this is not
//               necessarily the case.
//
//               The GraphicsPipe is used by the GraphicsEngine object
//               to create and destroy windows; it keeps ownership of
//               the windows it creates.
//
//               M. Asad added new/interim functionality where GraphicsPipe
//               now contains a device interface to directx/opengl which
//               will be used to handle multiple windows from same device.
//
////////////////////////////////////////////////////////////////////

1057 11 OutputTypes 794624 25 GraphicsPipe::OutputTypes 25 GraphicsPipe::OutputTypes 1056 0 0 0 0 0 0 0 0 0 4 9 OT_window 23 GraphicsPipe::OT_window 1 20 OT_fullscreen_window 34 GraphicsPipe::OT_fullscreen_window 2 9 OT_buffer 23 GraphicsPipe::OT_buffer 4 17 OT_texture_buffer 31 GraphicsPipe::OT_texture_buffer 8 0 0

1058 19 BufferCreationFlags 794624 33 GraphicsPipe::BufferCreationFlags 33 GraphicsPipe::BufferCreationFlags 1056 0 0 0 0 0 0 0 0 0 12 18 BF_refuse_parasite 32 GraphicsPipe::BF_refuse_parasite 1 19 BF_require_parasite 33 GraphicsPipe::BF_require_parasite 2 16 BF_refuse_window 30 GraphicsPipe::BF_refuse_window 4 17 BF_require_window 31 GraphicsPipe::BF_require_window 8 17 BF_can_bind_color 31 GraphicsPipe::BF_can_bind_color 64 17 BF_can_bind_every 31 GraphicsPipe::BF_can_bind_every 128 13 BF_resizeable 27 GraphicsPipe::BF_resizeable 256 18 BF_size_track_host 32 GraphicsPipe::BF_size_track_host 512 17 BF_rtt_cumulative 31 GraphicsPipe::BF_rtt_cumulative 1024 20 BF_fb_props_optional 34 GraphicsPipe::BF_fb_props_optional 2048 14 BF_size_square 28 GraphicsPipe::BF_size_square 4096 15 BF_size_power_2 29 GraphicsPipe::BF_size_power_2 8192 0 0

1059 19 StencilRenderStates 26625 19 StencilRenderStates 19 StencilRenderStates 0 0 0 0 839 0 0 0 0 0 0 3 1060 1061 1062 516
////////////////////////////////////////////////////////////////////
//       Class : StencilRenderStates
// Description : An abstract cross-platform class for setting stencil
//               buffer render states.  Each gsg needs to create its
//               own low-level API specific functions on how to set
//               each render state. The "set_stencil_render_state"
//               function can be used in an immediate-mode fashion.
////////////////////////////////////////////////////////////////////

1060 18 StencilRenderState 794624 39 StencilRenderStates::StencilRenderState 39 StencilRenderStates::StencilRenderState 1059 0 0 0 0 0 0 0 0 0 17 16 SRS_front_enable 37 StencilRenderStates::SRS_front_enable 0 15 SRS_back_enable 36 StencilRenderStates::SRS_back_enable 1 29 SRS_front_comparison_function 50 StencilRenderStates::SRS_front_comparison_function 2 32 SRS_front_stencil_fail_operation 53 StencilRenderStates::SRS_front_stencil_fail_operation 3 39 SRS_front_stencil_pass_z_fail_operation 60 StencilRenderStates::SRS_front_stencil_pass_z_fail_operation 4 39 SRS_front_stencil_pass_z_pass_operation 60 StencilRenderStates::SRS_front_stencil_pass_z_pass_operation 5 13 SRS_reference 34 StencilRenderStates::SRS_reference 6 13 SRS_read_mask 34 StencilRenderStates::SRS_read_mask 7 14 SRS_write_mask 35 StencilRenderStates::SRS_write_mask 8 28 SRS_back_comparison_function 49 StencilRenderStates::SRS_back_comparison_function 9 31 SRS_back_stencil_fail_operation 52 StencilRenderStates::SRS_back_stencil_fail_operation 10 38 SRS_back_stencil_pass_z_fail_operation 59 StencilRenderStates::SRS_back_stencil_pass_z_fail_operation 11 38 SRS_back_stencil_pass_z_pass_operation 59 StencilRenderStates::SRS_back_stencil_pass_z_pass_operation 12 9 SRS_clear 30 StencilRenderStates::SRS_clear 13 15 SRS_clear_value 36 StencilRenderStates::SRS_clear_value 14 9 SRS_total 30 StencilRenderStates::SRS_total 15 9 SRS_first 30 StencilRenderStates::SRS_first 0 0 0

1061 25 StencilComparisonFunction 794624 46 StencilRenderStates::StencilComparisonFunction 46 StencilRenderStates::StencilComparisonFunction 1059 0 0 0 0 0 0 0 0 0 8 9 SCF_never 30 StencilRenderStates::SCF_never 0 13 SCF_less_than 34 StencilRenderStates::SCF_less_than 1 9 SCF_equal 30 StencilRenderStates::SCF_equal 2 22 SCF_less_than_or_equal 43 StencilRenderStates::SCF_less_than_or_equal 3 16 SCF_greater_than 37 StencilRenderStates::SCF_greater_than 4 13 SCF_not_equal 34 StencilRenderStates::SCF_not_equal 5 25 SCF_greater_than_or_equal 46 StencilRenderStates::SCF_greater_than_or_equal 6 10 SCF_always 31 StencilRenderStates::SCF_always 7 0 0

1062 16 StencilOperation 794624 37 StencilRenderStates::StencilOperation 37 StencilRenderStates::StencilOperation 1059 0 0 0 0 0 0 0 0 0 8 7 SO_keep 28 StencilRenderStates::SO_keep 0 7 SO_zero 28 StencilRenderStates::SO_zero 1 10 SO_replace 31 StencilRenderStates::SO_replace 2 12 SO_increment 33 StencilRenderStates::SO_increment 3 12 SO_decrement 33 StencilRenderStates::SO_decrement 4 9 SO_invert 30 StencilRenderStates::SO_invert 5 21 SO_increment_saturate 42 StencilRenderStates::SO_increment_saturate 6 21 SO_decrement_saturate 42 StencilRenderStates::SO_decrement_saturate 7 0 0

1063 21 GraphicsStateGuardian 75777 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 67 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 0 0 1 0 1064 0 0 0 1 1065 564
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardian
// Description : Encapsulates all the communication with a particular
//               instance of a given rendering backend.  Tries to
//               guarantee that redundant state-change requests are
//               not issued (hence "state guardian").
//
//               There will be one of these objects for each different
//               graphics context active in the system.
////////////////////////////////////////////////////////////////////

1064 25 GraphicsStateGuardianBase 2049 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 1193 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

1065 11 ShaderModel 794624 34 GraphicsStateGuardian::ShaderModel 34 GraphicsStateGuardian::ShaderModel 1063 0 0 0 0 0 0 0 0 0 6 5 SM_00 28 GraphicsStateGuardian::SM_00 0 5 SM_11 28 GraphicsStateGuardian::SM_11 1 5 SM_20 28 GraphicsStateGuardian::SM_20 2 5 SM_2X 28 GraphicsStateGuardian::SM_2X 3 5 SM_30 28 GraphicsStateGuardian::SM_30 4 5 SM_40 28 GraphicsStateGuardian::SM_40 5 0 0

1066 19 StereoDisplayRegion 75777 19 StereoDisplayRegion 19 StereoDisplayRegion 0 0 0 0 702 0 3 907 908 909 0 0 1 0 1047 0 0 0 0 862
////////////////////////////////////////////////////////////////////
//       Class : StereoDisplayRegion
// Description : This is a special DisplayRegion wrapper that actually
//               includes a pair of DisplayRegions internally: the
//               left and right eyes.  The DisplayRegion represented
//               here does not have a physical association with the
//               window, but it pretends it does.  Instead, it
//               maintains a pointer to the left and right
//               DisplayRegions separately.
//
//               Operations on the StereoDisplayRegion object affect
//               both left and right eyes together.  To access the
//               left or right eyes independently, use get_left_eye()
//               and get_right_eye().
////////////////////////////////////////////////////////////////////

1067 14 GraphicsOutput 26625 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 914 0 57 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 2 1194 1195 0 2 3 1068 910 911 3 1045 912 913 0 2 1069 1070 1111
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutput
// Description : This is a base class for the various different
//               classes that represent the result of a frame of
//               rendering.  The most common kind of GraphicsOutput is
//               a GraphicsWindow, which is a real-time window on the
//               desktop, but another example is GraphicsBuffer, which
//               is an offscreen buffer.
//
//               The actual rendering, and anything associated with
//               the graphics context itself, is managed by the
//               associated GraphicsStateGuardian (which might output
//               to multiple GraphicsOutput objects).
//
//               GraphicsOutputs are not actually writable to bam
//               files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

1068 18 GraphicsOutputBase 2049 18 GraphicsOutputBase 18 GraphicsOutputBase 0 0 0 0 0 0 0 0 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutputBase
// Description : An abstract base class for GraphicsOutput, for all
//               the usual reasons.
////////////////////////////////////////////////////////////////////

1069 17 RenderTextureMode 794624 33 GraphicsOutput::RenderTextureMode 33 GraphicsOutput::RenderTextureMode 1067 0 0 0 0 0 0 0 0 0 6 8 RTM_none 24 GraphicsOutput::RTM_none 0 16 RTM_bind_or_copy 32 GraphicsOutput::RTM_bind_or_copy 1 16 RTM_copy_texture 32 GraphicsOutput::RTM_copy_texture 2 12 RTM_copy_ram 28 GraphicsOutput::RTM_copy_ram 3 26 RTM_triggered_copy_texture 42 GraphicsOutput::RTM_triggered_copy_texture 4 22 RTM_triggered_copy_ram 38 GraphicsOutput::RTM_triggered_copy_ram 5 0 0

1070 9 FrameMode 794624 25 GraphicsOutput::FrameMode 25 GraphicsOutput::FrameMode 1067 0 0 0 0 0 0 0 0 0 3 9 FM_render 25 GraphicsOutput::FM_render 0 11 FM_parasite 27 GraphicsOutput::FM_parasite 1 10 FM_refresh 26 GraphicsOutput::FM_refresh 2 0 56
// There are many reasons to call begin_frame/end_frame.

1071 14 GraphicsBuffer 75777 14 GraphicsBuffer 14 GraphicsBuffer 0 0 0 0 914 0 2 972 973 0 0 1 0 1067 0 0 0 0 361
////////////////////////////////////////////////////////////////////
//       Class : GraphicsBuffer
// Description : An offscreen buffer for rendering into.  This is
//               similar in function to a GraphicsWindow, except that
//               the output is not visible to the user.
////////////////////////////////////////////////////////////////////

1072 14 GraphicsWindow 75777 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 914 0 24 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 1 1196 0 1 0 1067 0 0 0 0 329
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindow
// Description : A window, fullscreen or on a desktop, into which a
//               graphics device sends its output for interactive
//               display.
////////////////////////////////////////////////////////////////////

1073 18 NativeWindowHandle 141313 18 NativeWindowHandle 18 NativeWindowHandle 0 0 0 0 1001 0 3 998 999 1000 0 0 1 0 1037 0 0 0 0 510
////////////////////////////////////////////////////////////////////
//       Class : NativeWindowHandle
// Description : This subclass of WindowHandle exists to allow simple
//               creation of a WindowHandle of the appropriate type to
//               the current OS.
//
//               This class exists for name scoping only.  Don't use
//               the constructor directly; use one of the make_*
//               methods.
////////////////////////////////////////////////////////////////////

1074 14 ParasiteBuffer 75777 14 ParasiteBuffer 14 ParasiteBuffer 0 0 0 0 914 0 2 1002 1003 0 0 1 0 1067 0 0 0 0 1508
////////////////////////////////////////////////////////////////////
//       Class : ParasiteBuffer
// Description : This is a special GraphicsOutput type that acts a lot
//               like a GraphicsBuffer, effectively allowing rendering
//               to an offscreen buffer, except it does not create any
//               framebuffer space for itself.  Instead, it renders
//               into the framebuffer owned by some other
//               GraphicsOutput.
//
//               The x_size and y_size must therefore fit within the
//               bounds of the source GraphicsOutput.
//
//               Since the framebuffer will be subsequently cleared
//               when the actual owner draws in it later, this only
//               makes sense if we are going to copy the contents of
//               the framebuffer to a texture immediately after we
//               draw it.  Thus, has_texture() is implicitly true for
//               a ParasiteBuffer.
//
//               This class is useful to render offscreen to a texture
//               while preventing the waste of framebuffer memory for
//               API's that are unable to render directly into a
//               texture (and must render into a separate framebuffer
//               first and then copy to texture).  It is also the only
//               way to render to a texture on API's that do not
//               support offscreen rendering.
////////////////////////////////////////////////////////////////////

1075 14 GraphicsEngine 75777 14 GraphicsEngine 14 GraphicsEngine 0 0 0 1 1004 0 0 23 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1 1197 0 1 0 1076 0 0 0 0 823
////////////////////////////////////////////////////////////////////
//       Class : GraphicsEngine
// Description : This class is the main interface to controlling the
//               render process.  There is typically only one
//               GraphicsEngine in an application, and it synchronizes
//               rendering to all all of the active windows; although
//               it is possible to have multiple GraphicsEngine
//               objects if multiple synchronicity groups are
//               required.
//
//               The GraphicsEngine is responsible for managing the
//               various cull and draw threads.  The application
//               simply calls engine->render_frame() and considers it
//               done.
////////////////////////////////////////////////////////////////////

1076 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1077 21 GraphicsPipeSelection 43009 21 GraphicsPipeSelection 21 GraphicsPipeSelection 0 0 0 0 0 0 9 1028 1029 1030 1031 1032 1033 1034 1035 1036 1 1198 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipeSelection
// Description : This maintains a list of GraphicsPipes by type that
//               are available for creation.  Normally there is one
//               default interactive GraphicsPipe, and possibly other
//               types available as well.
////////////////////////////////////////////////////////////////////

1078 20 WindowHandle const * 8576 20 WindowHandle const * 20 WindowHandle const * 0 0 1079 0 0 0 0 0 0 0 0 0 0

1079 18 WindowHandle const 8832 18 WindowHandle const 18 WindowHandle const 0 0 1037 0 0 0 0 0 0 0 0 0 0

1080 14 WindowHandle * 8576 14 WindowHandle * 14 WindowHandle * 0 0 1037 0 0 0 0 0 0 0 0 0 0

1081 10 OSHandle * 8576 24 WindowHandle::OSHandle * 24 WindowHandle::OSHandle * 0 0 1039 0 0 0 0 0 0 0 0 0 0

1082 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1083 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1084 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1085 9 ostream * 8576 9 ostream * 9 ostream * 0 0 1086 0 0 0 0 0 0 0 0 0 0

1086 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1087 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1088 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 1087 0 0 0 0 0 0 0 0 0 0

1089 16 OSHandle const * 8576 30 WindowHandle::OSHandle const * 30 WindowHandle::OSHandle const * 0 0 1090 0 0 0 0 0 0 0 0 0 0

1090 14 OSHandle const 8832 28 WindowHandle::OSHandle const 28 WindowHandle::OSHandle const 0 0 1039 0 0 0 0 0 0 0 0 0 0

1091 18 WindowProperties * 8576 18 WindowProperties * 18 WindowProperties * 0 0 1040 0 0 0 0 0 0 0 0 0 0

1092 24 WindowProperties const * 8576 24 WindowProperties const * 24 WindowProperties const * 0 0 1093 0 0 0 0 0 0 0 0 0 0

1093 22 WindowProperties const 8832 22 WindowProperties const 22 WindowProperties const 0 0 1040 0 0 0 0 0 0 0 0 0 0

1094 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1095 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1096 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 1097 0 0 0 0 0 0 0 0 0 0

1097 14 Filename const 8832 14 Filename const 14 Filename const 0 0 1098 0 0 0 0 0 0 0 0 0 0

1098 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1099 20 DisplayInformation * 8576 20 DisplayInformation * 20 DisplayInformation * 0 0 1043 0 0 0 0 0 0 0 0 0 0

1100 22 unsigned long long int 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1101 16 DrawableRegion * 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1045 0 0 0 0 0 0 0 0 0 0

1102 22 DrawableRegion const * 8576 22 DrawableRegion const * 22 DrawableRegion const * 0 0 1103 0 0 0 0 0 0 0 0 0 0

1103 20 DrawableRegion const 8832 20 DrawableRegion const 20 DrawableRegion const 0 0 1045 0 0 0 0 0 0 0 0 0 0

1104 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1105 0 0 0 0 0 0 0 0 0 0

1105 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1106 0 0 0 0 0 0 0 0 0 0

1106 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1107 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1108 21 DisplayRegion const * 8576 21 DisplayRegion const * 21 DisplayRegion const * 0 0 1109 0 0 0 0 0 0 0 0 0 0

1109 19 DisplayRegion const 8832 19 DisplayRegion const 19 DisplayRegion const 0 0 1047 0 0 0 0 0 0 0 0 0 0

1110 15 DisplayRegion * 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1047 0 0 0 0 0 0 0 0 0 0

1111 16 GraphicsOutput * 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1067 0 0 0 0 0 0 0 0 0 0

1112 14 GraphicsPipe * 8576 14 GraphicsPipe * 14 GraphicsPipe * 0 0 1056 0 0 0 0 0 0 0 0 0 0

1113 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 1114 0 0 0 0 0 0 0 0 0 0

1114 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 1115 0 0 0 0 0 0 0 0 0 0

1115 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 1199 1200 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

1116 8 Thread * 8576 8 Thread * 8 Thread * 0 0 1117 0 0 0 0 0 0 0 0 0 0

1117 6 Thread 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

1118 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 1115 0 0 0 0 0 0 0 0 0 0

1119 13 StereoChannel 794624 19 Lens::StereoChannel 19 Lens::StereoChannel 1120 0 0 0 0 0 0 0 0 0 4 7 SC_mono 13 Lens::SC_mono 0 7 SC_left 13 Lens::SC_left 1 8 SC_right 14 Lens::SC_right 2 9 SC_stereo 15 Lens::SC_stereo 3 0 0

1120 4 Lens 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 0 688
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node
//               (defined in sgraph), which defines the fundamental
//               interface to point-of-view for rendering.  Lenses are
//               also used in other contexts, however; for instance, a
//               Spotlight is also defined using a lens.
////////////////////////////////////////////////////////////////////

1121 15 CullTraverser * 8576 15 CullTraverser * 15 CullTraverser * 0 0 1122 0 0 0 0 0 0 0 0 0 0

1122 13 CullTraverser 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

1123 16 CallbackObject * 8576 16 CallbackObject * 16 CallbackObject * 0 0 1124 0 0 0 0 0 0 0 0 0 0

1124 14 CallbackObject 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

1125 10 Filename * 8576 10 Filename * 10 Filename * 0 0 1098 0 0 0 0 0 0 0 0 0 0

1126 10 PNMImage * 8576 10 PNMImage * 10 PNMImage * 0 0 1127 0 0 0 0 0 0 0 0 0 0

1127 8 PNMImage 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1506
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
////////////////////////////////////////////////////////////////////

1128 9 PandaNode 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

1129 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 1128 0 0 0 0 0 0 0 0 0 0

1130 19 DisplayRegionBase * 8576 19 DisplayRegionBase * 19 DisplayRegionBase * 0 0 1048 0 0 0 0 0 0 0 0 0 0

1131 37 DisplayRegionCullCallbackData const * 8576 37 DisplayRegionCullCallbackData const * 37 DisplayRegionCullCallbackData const * 0 0 1132 0 0 0 0 0 0 0 0 0 0

1132 35 DisplayRegionCullCallbackData const 8832 35 DisplayRegionCullCallbackData const 35 DisplayRegionCullCallbackData const 0 0 1049 0 0 0 0 0 0 0 0 0 0

1133 13 CullHandler * 8576 13 CullHandler * 13 CullHandler * 0 0 1134 0 0 0 0 0 0 0 0 0 0

1134 11 CullHandler 2048 11 CullHandler 11 CullHandler 0 0 0 0 0 0 0 0 0 0 0 0 0

1135 10 SceneSetup 2048 10 SceneSetup 10 SceneSetup 0 0 0 0 0 0 0 0 0 0 0 0 331
////////////////////////////////////////////////////////////////////
//       Class : SceneSetup
// Description : This object holds the camera position, etc., and
//               other general setup information for rendering a
//               particular scene.
////////////////////////////////////////////////////////////////////

1136 12 SceneSetup * 8576 12 SceneSetup * 12 SceneSetup * 0 0 1135 0 0 0 0 0 0 0 0 0 0

1137 10 CullResult 2048 10 CullResult 10 CullResult 0 0 0 0 0 0 0 0 0 0 0 0 611
////////////////////////////////////////////////////////////////////
//       Class : CullResult
// Description : This stores the result of a BinCullHandler traversal:
//               an ordered collection of CullBins, each of which
//               holds a number of Geoms and RenderStates to be
//               rendered in some defined order.
//
//               This is also used to keep the results of last frame's
//               cull traversal around to make next frame's traversal
//               of the same scene a little easier.
////////////////////////////////////////////////////////////////////

1138 37 DisplayRegionDrawCallbackData const * 8576 37 DisplayRegionDrawCallbackData const * 37 DisplayRegionDrawCallbackData const * 0 0 1139 0 0 0 0 0 0 0 0 0 0

1139 35 DisplayRegionDrawCallbackData const 8832 35 DisplayRegionDrawCallbackData const 35 DisplayRegionDrawCallbackData const 0 0 1051 0 0 0 0 0 0 0 0 0 0

1140 12 CullResult * 8576 12 CullResult * 12 CullResult * 0 0 1137 0 0 0 0 0 0 0 0 0 0

1141 25 DisplaySearchParameters * 8576 25 DisplaySearchParameters * 25 DisplaySearchParameters * 0 0 1052 0 0 0 0 0 0 0 0 0 0

1142 23 FrameBufferProperties * 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1053 0 0 0 0 0 0 0 0 0 0

1143 29 FrameBufferProperties const * 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1144 0 0 0 0 0 0 0 0 0 0

1144 27 FrameBufferProperties const 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1053 0 0 0 0 0 0 0 0 0 0

1145 30 GraphicsThreadingModel const * 8576 30 GraphicsThreadingModel const * 30 GraphicsThreadingModel const * 0 0 1146 0 0 0 0 0 0 0 0 0 0

1146 28 GraphicsThreadingModel const 8832 28 GraphicsThreadingModel const 28 GraphicsThreadingModel const 0 0 1054 0 0 0 0 0 0 0 0 0 0

1147 24 GraphicsThreadingModel * 8576 24 GraphicsThreadingModel * 24 GraphicsThreadingModel * 0 0 1054 0 0 0 0 0 0 0 0 0 0

1148 22 GraphicsDevice const * 8576 22 GraphicsDevice const * 22 GraphicsDevice const * 0 0 1149 0 0 0 0 0 0 0 0 0 0

1149 20 GraphicsDevice const 8832 20 GraphicsDevice const 20 GraphicsDevice const 0 0 1055 0 0 0 0 0 0 0 0 0 0

1150 20 GraphicsPipe const * 8576 20 GraphicsPipe const * 20 GraphicsPipe const * 0 0 1151 0 0 0 0 0 0 0 0 0 0

1151 18 GraphicsPipe const 8832 18 GraphicsPipe const 18 GraphicsPipe const 0 0 1056 0 0 0 0 0 0 0 0 0 0

1152 23 GraphicsStateGuardian * 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1063 0 0 0 0 0 0 0 0 0 0

1153 29 GraphicsStateGuardian const * 8576 29 GraphicsStateGuardian const * 29 GraphicsStateGuardian const * 0 0 1154 0 0 0 0 0 0 0 0 0 0

1154 27 GraphicsStateGuardian const 8832 27 GraphicsStateGuardian const 27 GraphicsStateGuardian const 0 0 1063 0 0 0 0 0 0 0 0 0 0

1155 8 Loader * 8576 8 Loader * 8 Loader * 0 0 1156 0 0 0 0 0 0 0 0 0 0

1156 6 Loader 2048 6 Loader 6 Loader 0 0 0 0 0 0 0 0 0 0 0 0 819
////////////////////////////////////////////////////////////////////
//       Class : Loader
// Description : A convenient class for loading models from disk, in
//               bam or egg format (or any of a number of other
//               formats implemented by a LoaderFileType, such as
//               ptloader).
//
//               This class supports synchronous as well as
//               asynchronous loading.  In asynchronous loading, the
//               model is loaded in the background by a thread, and an
//               event will be generated when the model is available.
//               If threading is not available, the asynchronous
//               loading interface may be used, but it loads
//               synchronously.
////////////////////////////////////////////////////////////////////

1157 16 GraphicsEngine * 8576 16 GraphicsEngine * 16 GraphicsEngine * 0 0 1075 0 0 0 0 0 0 0 0 0 0

1158 21 TextureAttrib const * 8576 21 TextureAttrib const * 21 TextureAttrib const * 0 0 1159 0 0 0 0 0 0 0 0 0 0

1159 19 TextureAttrib const 8832 19 TextureAttrib const 19 TextureAttrib const 0 0 1160 0 0 0 0 0 0 0 0 0 0

1160 13 TextureAttrib 2048 13 TextureAttrib 13 TextureAttrib 0 0 0 0 0 0 0 3 1201 1202 1203 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : TextureAttrib
// Description : Indicates the set of TextureStages and their
//               associated Textures that should be applied to (or
//               removed from) a node.
////////////////////////////////////////////////////////////////////

1161 12 TextureStage 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

1162 14 TextureStage * 8576 14 TextureStage * 14 TextureStage * 0 0 1161 0 0 0 0 0 0 0 0 0 0

1163 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

1164 23 PreparedGraphicsObjects 2048 23 PreparedGraphicsObjects 23 PreparedGraphicsObjects 0 0 0 0 0 0 0 0 0 0 0 0 1037
////////////////////////////////////////////////////////////////////
//       Class : PreparedGraphicsObjects
// Description : A table of objects that are saved within the graphics
//               context for reference by handle later.  Generally,
//               this represents things like OpenGL texture objects or
//               display lists (or their equivalent on other
//               platforms).
//
//               This object simply records the pointers to the
//               context objects created by the individual GSG's;
//               these context objects will contain enough information
//               to reference or release the actual object stored
//               within the graphics context.
//
//               These tables may potentially be shared between
//               related graphics contexts, hence their storage here
//               in a separate object rather than as a part of the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////

1165 25 PreparedGraphicsObjects * 8576 25 PreparedGraphicsObjects * 25 PreparedGraphicsObjects * 0 0 1164 0 0 0 0 0 0 0 0 0 0

1166 12 QualityLevel 794624 21 Texture::QualityLevel 21 Texture::QualityLevel 1167 0 0 0 0 0 0 0 0 0 4 10 QL_default 19 Texture::QL_default 0 10 QL_fastest 19 Texture::QL_fastest 1 9 QL_normal 18 Texture::QL_normal 2 7 QL_best 16 Texture::QL_best 3 0 0

1167 7 Texture 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

1168 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 1169 0 0 0 0 0 0 0 0 0 0

1169 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1170 9 Texture * 8576 9 Texture * 9 Texture * 0 0 1167 0 0 0 0 0 0 0 0 0 0

1171 21 StereoDisplayRegion * 8576 21 StereoDisplayRegion * 21 StereoDisplayRegion * 0 0 1066 0 0 0 0 0 0 0 0 0 0

1172 22 GraphicsOutput const * 8576 22 GraphicsOutput const * 22 GraphicsOutput const * 0 0 1173 0 0 0 0 0 0 0 0 0 0

1173 20 GraphicsOutput const 8832 20 GraphicsOutput const 20 GraphicsOutput const 0 0 1067 0 0 0 0 0 0 0 0 0 0

1174 29 BitMask< unsigned int, 32 > * 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1175 0 0 0 0 0 0 0 0 0 0

1175 9 BitMask32 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1176 20 GraphicsOutputBase * 8576 20 GraphicsOutputBase * 20 GraphicsOutputBase * 0 0 1068 0 0 0 0 0 0 0 0 0 0

1177 16 GraphicsBuffer * 8576 16 GraphicsBuffer * 16 GraphicsBuffer * 0 0 1071 0 0 0 0 0 0 0 0 0 0

1178 22 GraphicsWindow const * 8576 22 GraphicsWindow const * 22 GraphicsWindow const * 0 0 1179 0 0 0 0 0 0 0 0 0 0

1179 20 GraphicsWindow const 8832 20 GraphicsWindow const 20 GraphicsWindow const 0 0 1072 0 0 0 0 0 0 0 0 0 0

1180 16 GraphicsWindow * 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 1072 0 0 0 0 0 0 0 0 0 0

1181 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1182 9 MouseData 2048 9 MouseData 9 MouseData 0 0 0 0 0 0 0 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

1183 11 MouseData * 8576 11 MouseData * 11 MouseData * 0 0 1182 0 0 0 0 0 0 0 0 0 0

1184 16 ParasiteBuffer * 8576 16 ParasiteBuffer * 16 ParasiteBuffer * 0 0 1074 0 0 0 0 0 0 0 0 0 0

1185 10 Pipeline * 8576 10 Pipeline * 10 Pipeline * 0 0 1186 0 0 0 0 0 0 0 0 0 0

1186 8 Pipeline 2048 8 Pipeline 8 Pipeline 0 0 0 0 0 0 0 0 0 0 0 0 0

1187 22 GraphicsEngine const * 8576 22 GraphicsEngine const * 22 GraphicsEngine const * 0 0 1188 0 0 0 0 0 0 0 0 0 0

1188 20 GraphicsEngine const 8832 20 GraphicsEngine const 20 GraphicsEngine const 0 0 1075 0 0 0 0 0 0 0 0 0 0

1189 29 GraphicsPipeSelection const * 8576 29 GraphicsPipeSelection const * 29 GraphicsPipeSelection const * 0 0 1190 0 0 0 0 0 0 0 0 0 0

1190 27 GraphicsPipeSelection const 8832 27 GraphicsPipeSelection const 27 GraphicsPipeSelection const 0 0 1077 0 0 0 0 0 0 0 0 0 0

1191 23 GraphicsPipeSelection * 8576 23 GraphicsPipeSelection * 23 GraphicsPipeSelection * 0 0 1077 0 0 0 0 0 0 0 0 0 0

1192 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
11
1193 0 339 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
1194 0 412 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
1195 0 412 26 get_active_display_regions 30 get_num_active_display_regions 25 get_active_display_region 
1196 0 481 22 get_input_device_names 21 get_num_input_devices 21 get_input_device_name 
1197 0 514 11 get_windows 15 get_num_windows 10 get_window 
1198 0 540 14 get_pipe_types 18 get_num_pipe_types 13 get_pipe_type 
1199 0 766 9 get_nodes 13 get_num_nodes 8 get_node 
1200 0 766 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
1201 0 990 13 get_on_stages 17 get_num_on_stages 12 get_on_stage 
1202 0 990 16 get_on_ff_stages 20 get_num_on_ff_stages 15 get_on_ff_stage 
1203 0 990 14 get_off_stages 18 get_num_off_stages 13 get_off_stage 
